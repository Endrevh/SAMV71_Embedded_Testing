
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001688  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20400000  00401688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20400088  00401710  00020088  2**2
                  ALLOC
  3 .heap         00000204  2040010c  00401794  00020088  2**0
                  ALLOC
  4 .stack        00000400  20400310  00401998  00020088  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY
  7 .debug_info   000102b0  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002adc  00000000  00000000  000303bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000041a0  00000000  00000000  00032e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006c0  00000000  00000000  0003703b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005b0  00000000  00000000  000376fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003f178  00000000  00000000  00037cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000108f2  00000000  00000000  00076e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001455f6  00000000  00000000  00087715  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000014fc  00000000  00000000  001ccd0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 07 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     ..@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40006c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	d9 09 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400088 	.word	0x20400088
  400184:	00000000 	.word	0x00000000
  400188:	00401688 	.word	0x00401688

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00401688 	.word	0x00401688
  4001c8:	2040008c 	.word	0x2040008c
  4001cc:	00401688 	.word	0x00401688
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400309 	.word	0x00400309
  4001e4:	00400d7d 	.word	0x00400d7d

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	00401688 	.word	0x00401688
  400238:	20400088 	.word	0x20400088
  40023c:	20400088 	.word	0x20400088
  400240:	2040010c 	.word	0x2040010c
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	00400d9d 	.word	0x00400d9d
  400250:	00400c55 	.word	0x00400c55

00400254 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  400254:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400256:	4b08      	ldr	r3, [pc, #32]	; (400278 <TIMER_0_init+0x24>)
  400258:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40025a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40025e:	d103      	bne.n	400268 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400260:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400264:	4b04      	ldr	r3, [pc, #16]	; (400278 <TIMER_0_init+0x24>)
  400266:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400268:	4b04      	ldr	r3, [pc, #16]	; (40027c <TIMER_0_init+0x28>)
  40026a:	4798      	blx	r3
  40026c:	4602      	mov	r2, r0
  40026e:	4904      	ldr	r1, [pc, #16]	; (400280 <TIMER_0_init+0x2c>)
  400270:	4804      	ldr	r0, [pc, #16]	; (400284 <TIMER_0_init+0x30>)
  400272:	4b05      	ldr	r3, [pc, #20]	; (400288 <TIMER_0_init+0x34>)
  400274:	4798      	blx	r3
  400276:	bd08      	pop	{r3, pc}
  400278:	400e0600 	.word	0x400e0600
  40027c:	004009d5 	.word	0x004009d5
  400280:	4000c000 	.word	0x4000c000
  400284:	204000c4 	.word	0x204000c4
  400288:	00400469 	.word	0x00400469

0040028c <TARGET_IO_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <TARGET_IO_PORT_init+0x2c>)
  40028e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400290:	f022 0220 	bic.w	r2, r2, #32
  400294:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400296:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400298:	f042 0220 	orr.w	r2, r2, #32
  40029c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40029e:	2220      	movs	r2, #32
  4002a0:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  4002a8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4002b0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002b2:	2240      	movs	r2, #64	; 0x40
  4002b4:	605a      	str	r2, [r3, #4]
  4002b6:	4770      	bx	lr
  4002b8:	400e0e00 	.word	0x400e0e00

004002bc <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002bc:	4b04      	ldr	r3, [pc, #16]	; (4002d0 <TARGET_IO_CLOCK_init+0x14>)
  4002be:	699b      	ldr	r3, [r3, #24]
  4002c0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002c4:	d103      	bne.n	4002ce <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002c6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4002ca:	4b01      	ldr	r3, [pc, #4]	; (4002d0 <TARGET_IO_CLOCK_init+0x14>)
  4002cc:	611a      	str	r2, [r3, #16]
  4002ce:	4770      	bx	lr
  4002d0:	400e0600 	.word	0x400e0600

004002d4 <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_UART1);
}

void TARGET_IO_init(void)
{
  4002d4:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  4002d6:	4b06      	ldr	r3, [pc, #24]	; (4002f0 <TARGET_IO_init+0x1c>)
  4002d8:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, UART1, _uart_get_usart_sync());
  4002da:	4b06      	ldr	r3, [pc, #24]	; (4002f4 <TARGET_IO_init+0x20>)
  4002dc:	4798      	blx	r3
  4002de:	4602      	mov	r2, r0
  4002e0:	4905      	ldr	r1, [pc, #20]	; (4002f8 <TARGET_IO_init+0x24>)
  4002e2:	4806      	ldr	r0, [pc, #24]	; (4002fc <TARGET_IO_init+0x28>)
  4002e4:	4b06      	ldr	r3, [pc, #24]	; (400300 <TARGET_IO_init+0x2c>)
  4002e6:	4798      	blx	r3
	TARGET_IO_PORT_init();
  4002e8:	4b06      	ldr	r3, [pc, #24]	; (400304 <TARGET_IO_init+0x30>)
  4002ea:	4798      	blx	r3
  4002ec:	bd08      	pop	{r3, pc}
  4002ee:	bf00      	nop
  4002f0:	004002bd 	.word	0x004002bd
  4002f4:	00400c21 	.word	0x00400c21
  4002f8:	400e0a00 	.word	0x400e0a00
  4002fc:	204000b8 	.word	0x204000b8
  400300:	00400659 	.word	0x00400659
  400304:	0040028d 	.word	0x0040028d

00400308 <system_init>:
}

void system_init(void)
{
  400308:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40030a:	4b06      	ldr	r3, [pc, #24]	; (400324 <system_init+0x1c>)
  40030c:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40030e:	4a06      	ldr	r2, [pc, #24]	; (400328 <system_init+0x20>)
  400310:	6853      	ldr	r3, [r2, #4]
  400312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400316:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	TIMER_0_init();
  400318:	4b04      	ldr	r3, [pc, #16]	; (40032c <system_init+0x24>)
  40031a:	4798      	blx	r3

	TARGET_IO_init();
  40031c:	4b04      	ldr	r3, [pc, #16]	; (400330 <system_init+0x28>)
  40031e:	4798      	blx	r3
  400320:	bd08      	pop	{r3, pc}
  400322:	bf00      	nop
  400324:	00400785 	.word	0x00400785
  400328:	400e1850 	.word	0x400e1850
  40032c:	00400255 	.word	0x00400255
  400330:	004002d5 	.word	0x004002d5

00400334 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400334:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400338:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40033a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40033c:	f3bf 8f5f 	dmb	sy
  400340:	4770      	bx	lr

00400342 <atomic_leave_critical>:
  400342:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400346:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400348:	f383 8810 	msr	PRIMASK, r3
  40034c:	4770      	bx	lr
	...

00400350 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400350:	b570      	push	{r4, r5, r6, lr}
  400352:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400354:	4604      	mov	r4, r0
  400356:	460d      	mov	r5, r1
  400358:	2800      	cmp	r0, #0
  40035a:	bf18      	it	ne
  40035c:	2900      	cmpne	r1, #0
  40035e:	bf14      	ite	ne
  400360:	2001      	movne	r0, #1
  400362:	2000      	moveq	r0, #0
  400364:	2234      	movs	r2, #52	; 0x34
  400366:	4904      	ldr	r1, [pc, #16]	; (400378 <io_write+0x28>)
  400368:	4b04      	ldr	r3, [pc, #16]	; (40037c <io_write+0x2c>)
  40036a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  40036c:	6823      	ldr	r3, [r4, #0]
  40036e:	4632      	mov	r2, r6
  400370:	4629      	mov	r1, r5
  400372:	4620      	mov	r0, r4
  400374:	4798      	blx	r3
}
  400376:	bd70      	pop	{r4, r5, r6, pc}
  400378:	00401564 	.word	0x00401564
  40037c:	004006cd 	.word	0x004006cd

00400380 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400380:	b570      	push	{r4, r5, r6, lr}
  400382:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400384:	4604      	mov	r4, r0
  400386:	460d      	mov	r5, r1
  400388:	2800      	cmp	r0, #0
  40038a:	bf18      	it	ne
  40038c:	2900      	cmpne	r1, #0
  40038e:	bf14      	ite	ne
  400390:	2001      	movne	r0, #1
  400392:	2000      	moveq	r0, #0
  400394:	223d      	movs	r2, #61	; 0x3d
  400396:	4904      	ldr	r1, [pc, #16]	; (4003a8 <io_read+0x28>)
  400398:	4b04      	ldr	r3, [pc, #16]	; (4003ac <io_read+0x2c>)
  40039a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  40039c:	6863      	ldr	r3, [r4, #4]
  40039e:	4632      	mov	r2, r6
  4003a0:	4629      	mov	r1, r5
  4003a2:	4620      	mov	r0, r4
  4003a4:	4798      	blx	r3
}
  4003a6:	bd70      	pop	{r4, r5, r6, pc}
  4003a8:	00401564 	.word	0x00401564
  4003ac:	004006cd 	.word	0x004006cd

004003b0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4003b2:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4003b4:	b117      	cbz	r7, 4003bc <timer_add_timer_task+0xc>
  4003b6:	463c      	mov	r4, r7
  4003b8:	2600      	movs	r6, #0
  4003ba:	e00b      	b.n	4003d4 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4003bc:	4b0e      	ldr	r3, [pc, #56]	; (4003f8 <timer_add_timer_task+0x48>)
  4003be:	4798      	blx	r3
		return;
  4003c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4003c2:	68a5      	ldr	r5, [r4, #8]
  4003c4:	442b      	add	r3, r5
  4003c6:	1a9b      	subs	r3, r3, r2
  4003c8:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4003ca:	688d      	ldr	r5, [r1, #8]
  4003cc:	42ab      	cmp	r3, r5
  4003ce:	d209      	bcs.n	4003e4 <timer_add_timer_task+0x34>
			break;
		prev = it;
  4003d0:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4003d2:	6824      	ldr	r4, [r4, #0]
  4003d4:	b134      	cbz	r4, 4003e4 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4003d6:	6863      	ldr	r3, [r4, #4]
  4003d8:	4293      	cmp	r3, r2
  4003da:	d8f2      	bhi.n	4003c2 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  4003dc:	68a5      	ldr	r5, [r4, #8]
  4003de:	1a9b      	subs	r3, r3, r2
  4003e0:	442b      	add	r3, r5
  4003e2:	e7f2      	b.n	4003ca <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  4003e4:	42bc      	cmp	r4, r7
  4003e6:	d003      	beq.n	4003f0 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  4003e8:	4630      	mov	r0, r6
  4003ea:	4b04      	ldr	r3, [pc, #16]	; (4003fc <timer_add_timer_task+0x4c>)
  4003ec:	4798      	blx	r3
  4003ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  4003f0:	4b01      	ldr	r3, [pc, #4]	; (4003f8 <timer_add_timer_task+0x48>)
  4003f2:	4798      	blx	r3
  4003f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4003f6:	bf00      	nop
  4003f8:	004006e9 	.word	0x004006e9
  4003fc:	00400715 	.word	0x00400715

00400400 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400402:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400404:	6906      	ldr	r6, [r0, #16]
  400406:	3601      	adds	r6, #1
  400408:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  40040a:	7e03      	ldrb	r3, [r0, #24]
  40040c:	f013 0f01 	tst.w	r3, #1
  400410:	d105      	bne.n	40041e <timer_process_counted+0x1e>
  400412:	7e03      	ldrb	r3, [r0, #24]
  400414:	f013 0f02 	tst.w	r3, #2
  400418:	d101      	bne.n	40041e <timer_process_counted+0x1e>
  40041a:	4605      	mov	r5, r0
  40041c:	e009      	b.n	400432 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  40041e:	7e03      	ldrb	r3, [r0, #24]
  400420:	f043 0302 	orr.w	r3, r3, #2
  400424:	7603      	strb	r3, [r0, #24]
		return;
  400426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400428:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  40042a:	68e3      	ldr	r3, [r4, #12]
  40042c:	4620      	mov	r0, r4
  40042e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400430:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400432:	b19c      	cbz	r4, 40045c <timer_process_counted+0x5c>
  400434:	6863      	ldr	r3, [r4, #4]
  400436:	1af3      	subs	r3, r6, r3
  400438:	68a2      	ldr	r2, [r4, #8]
  40043a:	4293      	cmp	r3, r2
  40043c:	d30e      	bcc.n	40045c <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  40043e:	f105 0714 	add.w	r7, r5, #20
  400442:	4638      	mov	r0, r7
  400444:	4b06      	ldr	r3, [pc, #24]	; (400460 <timer_process_counted+0x60>)
  400446:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400448:	7c23      	ldrb	r3, [r4, #16]
  40044a:	2b01      	cmp	r3, #1
  40044c:	d1ec      	bne.n	400428 <timer_process_counted+0x28>
			tmp->time_label = time;
  40044e:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400450:	4632      	mov	r2, r6
  400452:	4621      	mov	r1, r4
  400454:	4638      	mov	r0, r7
  400456:	4b03      	ldr	r3, [pc, #12]	; (400464 <timer_process_counted+0x64>)
  400458:	4798      	blx	r3
  40045a:	e7e5      	b.n	400428 <timer_process_counted+0x28>
  40045c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40045e:	bf00      	nop
  400460:	0040071d 	.word	0x0040071d
  400464:	004003b1 	.word	0x004003b1

00400468 <timer_init>:
{
  400468:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40046a:	4604      	mov	r4, r0
  40046c:	460d      	mov	r5, r1
  40046e:	2800      	cmp	r0, #0
  400470:	bf18      	it	ne
  400472:	2900      	cmpne	r1, #0
  400474:	bf14      	ite	ne
  400476:	2001      	movne	r0, #1
  400478:	2000      	moveq	r0, #0
  40047a:	223b      	movs	r2, #59	; 0x3b
  40047c:	4905      	ldr	r1, [pc, #20]	; (400494 <timer_init+0x2c>)
  40047e:	4b06      	ldr	r3, [pc, #24]	; (400498 <timer_init+0x30>)
  400480:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400482:	4629      	mov	r1, r5
  400484:	4620      	mov	r0, r4
  400486:	4b05      	ldr	r3, [pc, #20]	; (40049c <timer_init+0x34>)
  400488:	4798      	blx	r3
	descr->time                           = 0;
  40048a:	2000      	movs	r0, #0
  40048c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40048e:	4b04      	ldr	r3, [pc, #16]	; (4004a0 <timer_init+0x38>)
  400490:	6023      	str	r3, [r4, #0]
}
  400492:	bd38      	pop	{r3, r4, r5, pc}
  400494:	00401578 	.word	0x00401578
  400498:	004006cd 	.word	0x004006cd
  40049c:	004008ed 	.word	0x004008ed
  4004a0:	00400401 	.word	0x00400401

004004a4 <timer_start>:
{
  4004a4:	b510      	push	{r4, lr}
	ASSERT(descr);
  4004a6:	4604      	mov	r4, r0
  4004a8:	2253      	movs	r2, #83	; 0x53
  4004aa:	4909      	ldr	r1, [pc, #36]	; (4004d0 <timer_start+0x2c>)
  4004ac:	3000      	adds	r0, #0
  4004ae:	bf18      	it	ne
  4004b0:	2001      	movne	r0, #1
  4004b2:	4b08      	ldr	r3, [pc, #32]	; (4004d4 <timer_start+0x30>)
  4004b4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4004b6:	4620      	mov	r0, r4
  4004b8:	4b07      	ldr	r3, [pc, #28]	; (4004d8 <timer_start+0x34>)
  4004ba:	4798      	blx	r3
  4004bc:	b920      	cbnz	r0, 4004c8 <timer_start+0x24>
	_timer_start(&descr->device);
  4004be:	4620      	mov	r0, r4
  4004c0:	4b06      	ldr	r3, [pc, #24]	; (4004dc <timer_start+0x38>)
  4004c2:	4798      	blx	r3
	return ERR_NONE;
  4004c4:	2000      	movs	r0, #0
  4004c6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4004c8:	f06f 0010 	mvn.w	r0, #16
}
  4004cc:	bd10      	pop	{r4, pc}
  4004ce:	bf00      	nop
  4004d0:	00401578 	.word	0x00401578
  4004d4:	004006cd 	.word	0x004006cd
  4004d8:	004009b1 	.word	0x004009b1
  4004dc:	004009a9 	.word	0x004009a9

004004e0 <timer_add_task>:
{
  4004e0:	b570      	push	{r4, r5, r6, lr}
  4004e2:	b082      	sub	sp, #8
	ASSERT(descr && task);
  4004e4:	4604      	mov	r4, r0
  4004e6:	460d      	mov	r5, r1
  4004e8:	2800      	cmp	r0, #0
  4004ea:	bf18      	it	ne
  4004ec:	2900      	cmpne	r1, #0
  4004ee:	bf14      	ite	ne
  4004f0:	2001      	movne	r0, #1
  4004f2:	2000      	moveq	r0, #0
  4004f4:	227a      	movs	r2, #122	; 0x7a
  4004f6:	491d      	ldr	r1, [pc, #116]	; (40056c <timer_add_task+0x8c>)
  4004f8:	4b1d      	ldr	r3, [pc, #116]	; (400570 <timer_add_task+0x90>)
  4004fa:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  4004fc:	7e23      	ldrb	r3, [r4, #24]
  4004fe:	f043 0301 	orr.w	r3, r3, #1
  400502:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  400504:	f104 0614 	add.w	r6, r4, #20
  400508:	4629      	mov	r1, r5
  40050a:	4630      	mov	r0, r6
  40050c:	4b19      	ldr	r3, [pc, #100]	; (400574 <timer_add_task+0x94>)
  40050e:	4798      	blx	r3
  400510:	b988      	cbnz	r0, 400536 <timer_add_task+0x56>
	task->time_label = descr->time;
  400512:	6923      	ldr	r3, [r4, #16]
  400514:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  400516:	6922      	ldr	r2, [r4, #16]
  400518:	4629      	mov	r1, r5
  40051a:	4630      	mov	r0, r6
  40051c:	4b16      	ldr	r3, [pc, #88]	; (400578 <timer_add_task+0x98>)
  40051e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400520:	7e23      	ldrb	r3, [r4, #24]
  400522:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400526:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  400528:	7e23      	ldrb	r3, [r4, #24]
  40052a:	f013 0f02 	tst.w	r3, #2
  40052e:	d10e      	bne.n	40054e <timer_add_task+0x6e>
	return ERR_NONE;
  400530:	2000      	movs	r0, #0
}
  400532:	b002      	add	sp, #8
  400534:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400536:	7e23      	ldrb	r3, [r4, #24]
  400538:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  40053c:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  40053e:	227f      	movs	r2, #127	; 0x7f
  400540:	490a      	ldr	r1, [pc, #40]	; (40056c <timer_add_task+0x8c>)
  400542:	2000      	movs	r0, #0
  400544:	4b0a      	ldr	r3, [pc, #40]	; (400570 <timer_add_task+0x90>)
  400546:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  400548:	f06f 0011 	mvn.w	r0, #17
  40054c:	e7f1      	b.n	400532 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  40054e:	a801      	add	r0, sp, #4
  400550:	4b0a      	ldr	r3, [pc, #40]	; (40057c <timer_add_task+0x9c>)
  400552:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  400554:	7e23      	ldrb	r3, [r4, #24]
  400556:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  40055a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  40055c:	4620      	mov	r0, r4
  40055e:	4b08      	ldr	r3, [pc, #32]	; (400580 <timer_add_task+0xa0>)
  400560:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  400562:	a801      	add	r0, sp, #4
  400564:	4b07      	ldr	r3, [pc, #28]	; (400584 <timer_add_task+0xa4>)
  400566:	4798      	blx	r3
	return ERR_NONE;
  400568:	2000      	movs	r0, #0
  40056a:	e7e2      	b.n	400532 <timer_add_task+0x52>
  40056c:	00401578 	.word	0x00401578
  400570:	004006cd 	.word	0x004006cd
  400574:	004006d3 	.word	0x004006d3
  400578:	004003b1 	.word	0x004003b1
  40057c:	00400335 	.word	0x00400335
  400580:	004009bd 	.word	0x004009bd
  400584:	00400343 	.word	0x00400343

00400588 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40058a:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40058c:	4605      	mov	r5, r0
  40058e:	460f      	mov	r7, r1
  400590:	2800      	cmp	r0, #0
  400592:	bf18      	it	ne
  400594:	2900      	cmpne	r1, #0
  400596:	d002      	beq.n	40059e <usart_sync_write+0x16>
  400598:	bb0a      	cbnz	r2, 4005de <usart_sync_write+0x56>
  40059a:	2000      	movs	r0, #0
  40059c:	e000      	b.n	4005a0 <usart_sync_write+0x18>
  40059e:	2000      	movs	r0, #0
  4005a0:	22f1      	movs	r2, #241	; 0xf1
  4005a2:	4910      	ldr	r1, [pc, #64]	; (4005e4 <usart_sync_write+0x5c>)
  4005a4:	4b10      	ldr	r3, [pc, #64]	; (4005e8 <usart_sync_write+0x60>)
  4005a6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4005a8:	f105 0408 	add.w	r4, r5, #8
  4005ac:	4620      	mov	r0, r4
  4005ae:	4b0f      	ldr	r3, [pc, #60]	; (4005ec <usart_sync_write+0x64>)
  4005b0:	4798      	blx	r3
  4005b2:	2800      	cmp	r0, #0
  4005b4:	d0f8      	beq.n	4005a8 <usart_sync_write+0x20>
  4005b6:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4005b8:	5d79      	ldrb	r1, [r7, r5]
  4005ba:	4620      	mov	r0, r4
  4005bc:	4b0c      	ldr	r3, [pc, #48]	; (4005f0 <usart_sync_write+0x68>)
  4005be:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4005c0:	4620      	mov	r0, r4
  4005c2:	4b0a      	ldr	r3, [pc, #40]	; (4005ec <usart_sync_write+0x64>)
  4005c4:	4798      	blx	r3
  4005c6:	2800      	cmp	r0, #0
  4005c8:	d0fa      	beq.n	4005c0 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  4005ca:	3501      	adds	r5, #1
  4005cc:	42b5      	cmp	r5, r6
  4005ce:	d3f3      	bcc.n	4005b8 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4005d0:	4620      	mov	r0, r4
  4005d2:	4b08      	ldr	r3, [pc, #32]	; (4005f4 <usart_sync_write+0x6c>)
  4005d4:	4798      	blx	r3
  4005d6:	2800      	cmp	r0, #0
  4005d8:	d0fa      	beq.n	4005d0 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4005da:	4628      	mov	r0, r5
  4005dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4005de:	2001      	movs	r0, #1
  4005e0:	e7de      	b.n	4005a0 <usart_sync_write+0x18>
  4005e2:	bf00      	nop
  4005e4:	00401590 	.word	0x00401590
  4005e8:	004006cd 	.word	0x004006cd
  4005ec:	00400ba9 	.word	0x00400ba9
  4005f0:	00400b61 	.word	0x00400b61
  4005f4:	00400bd1 	.word	0x00400bd1

004005f8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4005f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005fc:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4005fe:	4605      	mov	r5, r0
  400600:	4688      	mov	r8, r1
  400602:	2800      	cmp	r0, #0
  400604:	bf18      	it	ne
  400606:	2900      	cmpne	r1, #0
  400608:	d002      	beq.n	400610 <usart_sync_read+0x18>
  40060a:	b9d2      	cbnz	r2, 400642 <usart_sync_read+0x4a>
  40060c:	2000      	movs	r0, #0
  40060e:	e000      	b.n	400612 <usart_sync_read+0x1a>
  400610:	2000      	movs	r0, #0
  400612:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400616:	490c      	ldr	r1, [pc, #48]	; (400648 <usart_sync_read+0x50>)
  400618:	4b0c      	ldr	r3, [pc, #48]	; (40064c <usart_sync_read+0x54>)
  40061a:	4798      	blx	r3
	uint32_t                      offset = 0;
  40061c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  40061e:	f105 0408 	add.w	r4, r5, #8
  400622:	4620      	mov	r0, r4
  400624:	4b0a      	ldr	r3, [pc, #40]	; (400650 <usart_sync_read+0x58>)
  400626:	4798      	blx	r3
  400628:	2800      	cmp	r0, #0
  40062a:	d0f8      	beq.n	40061e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  40062c:	4620      	mov	r0, r4
  40062e:	4b09      	ldr	r3, [pc, #36]	; (400654 <usart_sync_read+0x5c>)
  400630:	4798      	blx	r3
  400632:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400636:	3601      	adds	r6, #1
  400638:	42be      	cmp	r6, r7
  40063a:	d3f0      	bcc.n	40061e <usart_sync_read+0x26>

	return (int32_t)offset;
}
  40063c:	4630      	mov	r0, r6
  40063e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400642:	2001      	movs	r0, #1
  400644:	e7e5      	b.n	400612 <usart_sync_read+0x1a>
  400646:	bf00      	nop
  400648:	00401590 	.word	0x00401590
  40064c:	004006cd 	.word	0x004006cd
  400650:	00400bf9 	.word	0x00400bf9
  400654:	00400b85 	.word	0x00400b85

00400658 <usart_sync_init>:
{
  400658:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40065a:	4604      	mov	r4, r0
  40065c:	460d      	mov	r5, r1
  40065e:	2800      	cmp	r0, #0
  400660:	bf18      	it	ne
  400662:	2900      	cmpne	r1, #0
  400664:	bf14      	ite	ne
  400666:	2001      	movne	r0, #1
  400668:	2000      	moveq	r0, #0
  40066a:	2234      	movs	r2, #52	; 0x34
  40066c:	4907      	ldr	r1, [pc, #28]	; (40068c <usart_sync_init+0x34>)
  40066e:	4b08      	ldr	r3, [pc, #32]	; (400690 <usart_sync_init+0x38>)
  400670:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400672:	4629      	mov	r1, r5
  400674:	f104 0008 	add.w	r0, r4, #8
  400678:	4b06      	ldr	r3, [pc, #24]	; (400694 <usart_sync_init+0x3c>)
  40067a:	4798      	blx	r3
	if (init_status) {
  40067c:	4603      	mov	r3, r0
  40067e:	b918      	cbnz	r0, 400688 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400680:	4a05      	ldr	r2, [pc, #20]	; (400698 <usart_sync_init+0x40>)
  400682:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400684:	4a05      	ldr	r2, [pc, #20]	; (40069c <usart_sync_init+0x44>)
  400686:	6022      	str	r2, [r4, #0]
}
  400688:	4618      	mov	r0, r3
  40068a:	bd38      	pop	{r3, r4, r5, pc}
  40068c:	00401590 	.word	0x00401590
  400690:	004006cd 	.word	0x004006cd
  400694:	00400af5 	.word	0x00400af5
  400698:	004005f9 	.word	0x004005f9
  40069c:	00400589 	.word	0x00400589

004006a0 <usart_sync_enable>:
{
  4006a0:	b510      	push	{r4, lr}
	ASSERT(descr);
  4006a2:	4604      	mov	r4, r0
  4006a4:	2253      	movs	r2, #83	; 0x53
  4006a6:	4906      	ldr	r1, [pc, #24]	; (4006c0 <usart_sync_enable+0x20>)
  4006a8:	3000      	adds	r0, #0
  4006aa:	bf18      	it	ne
  4006ac:	2001      	movne	r0, #1
  4006ae:	4b05      	ldr	r3, [pc, #20]	; (4006c4 <usart_sync_enable+0x24>)
  4006b0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  4006b2:	f104 0008 	add.w	r0, r4, #8
  4006b6:	4b04      	ldr	r3, [pc, #16]	; (4006c8 <usart_sync_enable+0x28>)
  4006b8:	4798      	blx	r3
}
  4006ba:	2000      	movs	r0, #0
  4006bc:	bd10      	pop	{r4, pc}
  4006be:	bf00      	nop
  4006c0:	00401590 	.word	0x00401590
  4006c4:	004006cd 	.word	0x004006cd
  4006c8:	00400b2d 	.word	0x00400b2d

004006cc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4006cc:	b900      	cbnz	r0, 4006d0 <assert+0x4>
		__asm("BKPT #0");
  4006ce:	be00      	bkpt	0x0000
  4006d0:	4770      	bx	lr

004006d2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4006d2:	6803      	ldr	r3, [r0, #0]
  4006d4:	b11b      	cbz	r3, 4006de <is_list_element+0xc>
		if (it == element) {
  4006d6:	428b      	cmp	r3, r1
  4006d8:	d003      	beq.n	4006e2 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  4006da:	681b      	ldr	r3, [r3, #0]
  4006dc:	e7fa      	b.n	4006d4 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  4006de:	2000      	movs	r0, #0
  4006e0:	4770      	bx	lr
			return true;
  4006e2:	2001      	movs	r0, #1
}
  4006e4:	4770      	bx	lr
	...

004006e8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  4006e8:	b538      	push	{r3, r4, r5, lr}
  4006ea:	4604      	mov	r4, r0
  4006ec:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  4006ee:	4b06      	ldr	r3, [pc, #24]	; (400708 <list_insert_as_head+0x20>)
  4006f0:	4798      	blx	r3
  4006f2:	f080 0001 	eor.w	r0, r0, #1
  4006f6:	2239      	movs	r2, #57	; 0x39
  4006f8:	4904      	ldr	r1, [pc, #16]	; (40070c <list_insert_as_head+0x24>)
  4006fa:	b2c0      	uxtb	r0, r0
  4006fc:	4b04      	ldr	r3, [pc, #16]	; (400710 <list_insert_as_head+0x28>)
  4006fe:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400700:	6823      	ldr	r3, [r4, #0]
  400702:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400704:	6025      	str	r5, [r4, #0]
  400706:	bd38      	pop	{r3, r4, r5, pc}
  400708:	004006d3 	.word	0x004006d3
  40070c:	004015ac 	.word	0x004015ac
  400710:	004006cd 	.word	0x004006cd

00400714 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400714:	6803      	ldr	r3, [r0, #0]
  400716:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400718:	6001      	str	r1, [r0, #0]
  40071a:	4770      	bx	lr

0040071c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  40071c:	6803      	ldr	r3, [r0, #0]
  40071e:	b11b      	cbz	r3, 400728 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400720:	681a      	ldr	r2, [r3, #0]
  400722:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400724:	4618      	mov	r0, r3
  400726:	4770      	bx	lr
	}

	return NULL;
  400728:	2000      	movs	r0, #0
}
  40072a:	4770      	bx	lr

0040072c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  40072c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40072e:	4a06      	ldr	r2, [pc, #24]	; (400748 <_sbrk+0x1c>)
  400730:	6812      	ldr	r2, [r2, #0]
  400732:	b122      	cbz	r2, 40073e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400734:	4a04      	ldr	r2, [pc, #16]	; (400748 <_sbrk+0x1c>)
  400736:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400738:	4403      	add	r3, r0
  40073a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  40073c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40073e:	4903      	ldr	r1, [pc, #12]	; (40074c <_sbrk+0x20>)
  400740:	4a01      	ldr	r2, [pc, #4]	; (400748 <_sbrk+0x1c>)
  400742:	6011      	str	r1, [r2, #0]
  400744:	e7f6      	b.n	400734 <_sbrk+0x8>
  400746:	bf00      	nop
  400748:	204000a4 	.word	0x204000a4
  40074c:	20400710 	.word	0x20400710

00400750 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400750:	f04f 30ff 	mov.w	r0, #4294967295
  400754:	4770      	bx	lr

00400756 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40075a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40075c:	2000      	movs	r0, #0
  40075e:	4770      	bx	lr

00400760 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400760:	2000      	movs	r0, #0
  400762:	4770      	bx	lr

00400764 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  400764:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400766:	2b00      	cmp	r3, #0
  400768:	db09      	blt.n	40077e <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40076a:	095b      	lsrs	r3, r3, #5
  40076c:	f000 001f 	and.w	r0, r0, #31
  400770:	2201      	movs	r2, #1
  400772:	fa02 f000 	lsl.w	r0, r2, r0
  400776:	3340      	adds	r3, #64	; 0x40
  400778:	4a01      	ldr	r2, [pc, #4]	; (400780 <_irq_set+0x1c>)
  40077a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  40077e:	4770      	bx	lr
  400780:	e000e100 	.word	0xe000e100

00400784 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400784:	b500      	push	{lr}
  400786:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400788:	a801      	add	r0, sp, #4
  40078a:	4b0e      	ldr	r3, [pc, #56]	; (4007c4 <_init_chip+0x40>)
  40078c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40078e:	4a0e      	ldr	r2, [pc, #56]	; (4007c8 <_init_chip+0x44>)
  400790:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  40079c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007a0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4007a4:	a801      	add	r0, sp, #4
  4007a6:	4b09      	ldr	r3, [pc, #36]	; (4007cc <_init_chip+0x48>)
  4007a8:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4007aa:	4a09      	ldr	r2, [pc, #36]	; (4007d0 <_init_chip+0x4c>)
  4007ac:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4007ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4007b2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  4007b6:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  4007b8:	4b06      	ldr	r3, [pc, #24]	; (4007d4 <_init_chip+0x50>)
  4007ba:	4798      	blx	r3
}
  4007bc:	b003      	add	sp, #12
  4007be:	f85d fb04 	ldr.w	pc, [sp], #4
  4007c2:	bf00      	nop
  4007c4:	00400335 	.word	0x00400335
  4007c8:	e000ed00 	.word	0xe000ed00
  4007cc:	00400343 	.word	0x00400343
  4007d0:	400e0c00 	.word	0x400e0c00
  4007d4:	00400875 	.word	0x00400875

004007d8 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4007d8:	490e      	ldr	r1, [pc, #56]	; (400814 <_pmc_init_sources+0x3c>)
  4007da:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  4007dc:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  4007e0:	4b0d      	ldr	r3, [pc, #52]	; (400818 <_pmc_init_sources+0x40>)
  4007e2:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4007e4:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4007e6:	4b0b      	ldr	r3, [pc, #44]	; (400814 <_pmc_init_sources+0x3c>)
  4007e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4007ea:	f013 0f01 	tst.w	r3, #1
  4007ee:	d0fa      	beq.n	4007e6 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4007f0:	4b08      	ldr	r3, [pc, #32]	; (400814 <_pmc_init_sources+0x3c>)
  4007f2:	6a19      	ldr	r1, [r3, #32]
  4007f4:	4a09      	ldr	r2, [pc, #36]	; (40081c <_pmc_init_sources+0x44>)
  4007f6:	430a      	orrs	r2, r1
  4007f8:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4007fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4007fc:	4a08      	ldr	r2, [pc, #32]	; (400820 <_pmc_init_sources+0x48>)
  4007fe:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400800:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400802:	4a08      	ldr	r2, [pc, #32]	; (400824 <_pmc_init_sources+0x4c>)
  400804:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400806:	4b03      	ldr	r3, [pc, #12]	; (400814 <_pmc_init_sources+0x3c>)
  400808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40080a:	f013 0f02 	tst.w	r3, #2
  40080e:	d0fa      	beq.n	400806 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400810:	4770      	bx	lr
  400812:	bf00      	nop
  400814:	400e0600 	.word	0x400e0600
  400818:	00373e01 	.word	0x00373e01
  40081c:	01370000 	.word	0x01370000
  400820:	f800ffff 	.word	0xf800ffff
  400824:	20183f01 	.word	0x20183f01

00400828 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400828:	4a11      	ldr	r2, [pc, #68]	; (400870 <_pmc_init_master_clock+0x48>)
  40082a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  40082c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400830:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400832:	4b0f      	ldr	r3, [pc, #60]	; (400870 <_pmc_init_master_clock+0x48>)
  400834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400836:	f013 0f08 	tst.w	r3, #8
  40083a:	d0fa      	beq.n	400832 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40083c:	4a0c      	ldr	r2, [pc, #48]	; (400870 <_pmc_init_master_clock+0x48>)
  40083e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400848:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40084a:	4b09      	ldr	r3, [pc, #36]	; (400870 <_pmc_init_master_clock+0x48>)
  40084c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40084e:	f013 0f08 	tst.w	r3, #8
  400852:	d0fa      	beq.n	40084a <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400854:	4a06      	ldr	r2, [pc, #24]	; (400870 <_pmc_init_master_clock+0x48>)
  400856:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400858:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  40085c:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400860:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400862:	4b03      	ldr	r3, [pc, #12]	; (400870 <_pmc_init_master_clock+0x48>)
  400864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400866:	f013 0f08 	tst.w	r3, #8
  40086a:	d0fa      	beq.n	400862 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  40086c:	4770      	bx	lr
  40086e:	bf00      	nop
  400870:	400e0600 	.word	0x400e0600

00400874 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400874:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400876:	4b02      	ldr	r3, [pc, #8]	; (400880 <_pmc_init+0xc>)
  400878:	4798      	blx	r3
	_pmc_init_master_clock();
  40087a:	4b02      	ldr	r3, [pc, #8]	; (400884 <_pmc_init+0x10>)
  40087c:	4798      	blx	r3
  40087e:	bd08      	pop	{r3, pc}
  400880:	004007d9 	.word	0x004007d9
  400884:	00400829 	.word	0x00400829

00400888 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400888:	2300      	movs	r3, #0
  40088a:	b13b      	cbz	r3, 40089c <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  40088c:	2000      	movs	r0, #0
  40088e:	4770      	bx	lr
			return &(_tcs[i]);
  400890:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  400894:	00a3      	lsls	r3, r4, #2
  400896:	4608      	mov	r0, r1
  400898:	4418      	add	r0, r3
  40089a:	e00c      	b.n	4008b6 <get_cfg+0x2e>
{
  40089c:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  40089e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4008a2:	008a      	lsls	r2, r1, #2
  4008a4:	4905      	ldr	r1, [pc, #20]	; (4008bc <get_cfg+0x34>)
  4008a6:	588a      	ldr	r2, [r1, r2]
  4008a8:	4282      	cmp	r2, r0
  4008aa:	d0f1      	beq.n	400890 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4008ac:	3301      	adds	r3, #1
  4008ae:	b2db      	uxtb	r3, r3
  4008b0:	2b00      	cmp	r3, #0
  4008b2:	d0f4      	beq.n	40089e <get_cfg+0x16>
	return NULL;
  4008b4:	2000      	movs	r0, #0
}
  4008b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008ba:	4770      	bx	lr
  4008bc:	20400000 	.word	0x20400000

004008c0 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  4008c0:	4b03      	ldr	r3, [pc, #12]	; (4008d0 <_tc_init_irq_param+0x10>)
  4008c2:	4298      	cmp	r0, r3
  4008c4:	d000      	beq.n	4008c8 <_tc_init_irq_param+0x8>
  4008c6:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  4008c8:	4b02      	ldr	r3, [pc, #8]	; (4008d4 <_tc_init_irq_param+0x14>)
  4008ca:	6019      	str	r1, [r3, #0]
	}
}
  4008cc:	e7fb      	b.n	4008c6 <_tc_init_irq_param+0x6>
  4008ce:	bf00      	nop
  4008d0:	4000c000 	.word	0x4000c000
  4008d4:	204000a8 	.word	0x204000a8

004008d8 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  4008d8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  4008da:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  4008dc:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  4008de:	f013 0f10 	tst.w	r3, #16
  4008e2:	d100      	bne.n	4008e6 <tc_interrupt_handler+0xe>
  4008e4:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  4008e6:	6803      	ldr	r3, [r0, #0]
  4008e8:	4798      	blx	r3
	}
}
  4008ea:	e7fb      	b.n	4008e4 <tc_interrupt_handler+0xc>

004008ec <_timer_init>:
{
  4008ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4008ee:	4607      	mov	r7, r0
  4008f0:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  4008f2:	4608      	mov	r0, r1
  4008f4:	4b27      	ldr	r3, [pc, #156]	; (400994 <_timer_init+0xa8>)
  4008f6:	4798      	blx	r3
  4008f8:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  4008fa:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  4008fc:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  4008fe:	2291      	movs	r2, #145	; 0x91
  400900:	4925      	ldr	r1, [pc, #148]	; (400998 <_timer_init+0xac>)
  400902:	2001      	movs	r0, #1
  400904:	4b25      	ldr	r3, [pc, #148]	; (40099c <_timer_init+0xb0>)
  400906:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  400908:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  40090c:	d001      	beq.n	400912 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  40090e:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  400912:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  400914:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  400916:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  400918:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  40091a:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  40091c:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  40091e:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  400920:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  400922:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  400924:	2310      	movs	r3, #16
  400926:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  400928:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  40092a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  40092e:	4639      	mov	r1, r7
  400930:	4620      	mov	r0, r4
  400932:	4b1b      	ldr	r3, [pc, #108]	; (4009a0 <_timer_init+0xb4>)
  400934:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400936:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40093a:	2b00      	cmp	r3, #0
  40093c:	db0d      	blt.n	40095a <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40093e:	095a      	lsrs	r2, r3, #5
  400940:	f003 031f 	and.w	r3, r3, #31
  400944:	2101      	movs	r1, #1
  400946:	fa01 f303 	lsl.w	r3, r1, r3
  40094a:	3220      	adds	r2, #32
  40094c:	4915      	ldr	r1, [pc, #84]	; (4009a4 <_timer_init+0xb8>)
  40094e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400952:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400956:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40095a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40095e:	2b00      	cmp	r3, #0
  400960:	db09      	blt.n	400976 <_timer_init+0x8a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400962:	095a      	lsrs	r2, r3, #5
  400964:	f003 031f 	and.w	r3, r3, #31
  400968:	2101      	movs	r1, #1
  40096a:	fa01 f303 	lsl.w	r3, r1, r3
  40096e:	3260      	adds	r2, #96	; 0x60
  400970:	490c      	ldr	r1, [pc, #48]	; (4009a4 <_timer_init+0xb8>)
  400972:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  400976:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40097a:	2b00      	cmp	r3, #0
  40097c:	db08      	blt.n	400990 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40097e:	0959      	lsrs	r1, r3, #5
  400980:	f003 031f 	and.w	r3, r3, #31
  400984:	2201      	movs	r2, #1
  400986:	fa02 f303 	lsl.w	r3, r2, r3
  40098a:	4a06      	ldr	r2, [pc, #24]	; (4009a4 <_timer_init+0xb8>)
  40098c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  400990:	2000      	movs	r0, #0
  400992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400994:	00400889 	.word	0x00400889
  400998:	004015cc 	.word	0x004015cc
  40099c:	004006cd 	.word	0x004006cd
  4009a0:	004008c1 	.word	0x004008c1
  4009a4:	e000e100 	.word	0xe000e100

004009a8 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  4009a8:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  4009aa:	2205      	movs	r2, #5
  4009ac:	601a      	str	r2, [r3, #0]
  4009ae:	4770      	bx	lr

004009b0 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  4009b0:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  4009b2:	6a18      	ldr	r0, [r3, #32]
}
  4009b4:	f3c0 4000 	ubfx	r0, r0, #16, #1
  4009b8:	4770      	bx	lr
	...

004009bc <_timer_set_irq>:
{
  4009bc:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  4009be:	68c0      	ldr	r0, [r0, #12]
  4009c0:	4b02      	ldr	r3, [pc, #8]	; (4009cc <_timer_set_irq+0x10>)
  4009c2:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  4009c4:	7900      	ldrb	r0, [r0, #4]
  4009c6:	4b02      	ldr	r3, [pc, #8]	; (4009d0 <_timer_set_irq+0x14>)
  4009c8:	4798      	blx	r3
  4009ca:	bd08      	pop	{r3, pc}
  4009cc:	00400889 	.word	0x00400889
  4009d0:	00400765 	.word	0x00400765

004009d4 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  4009d4:	2000      	movs	r0, #0
  4009d6:	4770      	bx	lr

004009d8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  4009d8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  4009da:	4b02      	ldr	r3, [pc, #8]	; (4009e4 <TC0_Handler+0xc>)
  4009dc:	6818      	ldr	r0, [r3, #0]
  4009de:	4b02      	ldr	r3, [pc, #8]	; (4009e8 <TC0_Handler+0x10>)
  4009e0:	4798      	blx	r3
  4009e2:	bd08      	pop	{r3, pc}
  4009e4:	204000a8 	.word	0x204000a8
  4009e8:	004008d9 	.word	0x004008d9

004009ec <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  4009ec:	b510      	push	{r4, lr}
	ASSERT(hw);
  4009ee:	4604      	mov	r4, r0
  4009f0:	f240 2219 	movw	r2, #537	; 0x219
  4009f4:	4912      	ldr	r1, [pc, #72]	; (400a40 <_uart_get_hardware_index+0x54>)
  4009f6:	3000      	adds	r0, #0
  4009f8:	bf18      	it	ne
  4009fa:	2001      	movne	r0, #1
  4009fc:	4b11      	ldr	r3, [pc, #68]	; (400a44 <_uart_get_hardware_index+0x58>)
  4009fe:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  400a00:	4b11      	ldr	r3, [pc, #68]	; (400a48 <_uart_get_hardware_index+0x5c>)
  400a02:	429c      	cmp	r4, r3
  400a04:	d013      	beq.n	400a2e <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  400a06:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400a0a:	429c      	cmp	r4, r3
  400a0c:	d011      	beq.n	400a32 <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  400a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  400a12:	429c      	cmp	r4, r3
  400a14:	d00f      	beq.n	400a36 <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  400a16:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400a1a:	429c      	cmp	r4, r3
  400a1c:	d00d      	beq.n	400a3a <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  400a1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400a22:	429c      	cmp	r4, r3
  400a24:	d001      	beq.n	400a2a <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  400a26:	20ff      	movs	r0, #255	; 0xff
	}
}
  400a28:	bd10      	pop	{r4, pc}
		return 4;
  400a2a:	2004      	movs	r0, #4
  400a2c:	bd10      	pop	{r4, pc}
		return 0;
  400a2e:	2000      	movs	r0, #0
  400a30:	bd10      	pop	{r4, pc}
		return 1;
  400a32:	2001      	movs	r0, #1
  400a34:	bd10      	pop	{r4, pc}
		return 2;
  400a36:	2002      	movs	r0, #2
  400a38:	bd10      	pop	{r4, pc}
		return 3;
  400a3a:	2003      	movs	r0, #3
  400a3c:	bd10      	pop	{r4, pc}
  400a3e:	bf00      	nop
  400a40:	004015ec 	.word	0x004015ec
  400a44:	004006cd 	.word	0x004006cd
  400a48:	400e0800 	.word	0x400e0800

00400a4c <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  400a4c:	b510      	push	{r4, lr}
	ASSERT(hw);
  400a4e:	4604      	mov	r4, r0
  400a50:	f44f 7227 	mov.w	r2, #668	; 0x29c
  400a54:	490e      	ldr	r1, [pc, #56]	; (400a90 <_get_uart_index+0x44>)
  400a56:	3000      	adds	r0, #0
  400a58:	bf18      	it	ne
  400a5a:	2001      	movne	r0, #1
  400a5c:	4b0d      	ldr	r3, [pc, #52]	; (400a94 <_get_uart_index+0x48>)
  400a5e:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  400a60:	4620      	mov	r0, r4
  400a62:	4b0d      	ldr	r3, [pc, #52]	; (400a98 <_get_uart_index+0x4c>)
  400a64:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400a66:	2300      	movs	r3, #0
  400a68:	b143      	cbz	r3, 400a7c <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400a6a:	f240 22a6 	movw	r2, #678	; 0x2a6
  400a6e:	4908      	ldr	r1, [pc, #32]	; (400a90 <_get_uart_index+0x44>)
  400a70:	2000      	movs	r0, #0
  400a72:	4b08      	ldr	r3, [pc, #32]	; (400a94 <_get_uart_index+0x48>)
  400a74:	4798      	blx	r3
	return 0;
  400a76:	2300      	movs	r3, #0
}
  400a78:	4618      	mov	r0, r3
  400a7a:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  400a7c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400a80:	008a      	lsls	r2, r1, #2
  400a82:	4906      	ldr	r1, [pc, #24]	; (400a9c <_get_uart_index+0x50>)
  400a84:	5c8a      	ldrb	r2, [r1, r2]
  400a86:	4290      	cmp	r0, r2
  400a88:	d0f6      	beq.n	400a78 <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400a8a:	3301      	adds	r3, #1
  400a8c:	b2db      	uxtb	r3, r3
  400a8e:	e7eb      	b.n	400a68 <_get_uart_index+0x1c>
  400a90:	004015ec 	.word	0x004015ec
  400a94:	004006cd 	.word	0x004006cd
  400a98:	004009ed 	.word	0x004009ed
  400a9c:	004015e0 	.word	0x004015e0

00400aa0 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  400aa0:	b510      	push	{r4, lr}
	ASSERT(hw);
  400aa2:	4604      	mov	r4, r0
  400aa4:	f240 22b3 	movw	r2, #691	; 0x2b3
  400aa8:	490d      	ldr	r1, [pc, #52]	; (400ae0 <_uart_init+0x40>)
  400aaa:	3000      	adds	r0, #0
  400aac:	bf18      	it	ne
  400aae:	2001      	movne	r0, #1
  400ab0:	4b0c      	ldr	r3, [pc, #48]	; (400ae4 <_uart_init+0x44>)
  400ab2:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  400ab4:	4620      	mov	r0, r4
  400ab6:	4b0c      	ldr	r3, [pc, #48]	; (400ae8 <_uart_init+0x48>)
  400ab8:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  400aba:	4b0c      	ldr	r3, [pc, #48]	; (400aec <_uart_init+0x4c>)
  400abc:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  400ac0:	23ac      	movs	r3, #172	; 0xac
  400ac2:	6023      	str	r3, [r4, #0]
  400ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ac8:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  400aca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400ace:	0082      	lsls	r2, r0, #2
  400ad0:	4b07      	ldr	r3, [pc, #28]	; (400af0 <_uart_init+0x50>)
  400ad2:	4413      	add	r3, r2
  400ad4:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  400ad6:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  400ad8:	2351      	movs	r3, #81	; 0x51
  400ada:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  400adc:	2000      	movs	r0, #0
  400ade:	bd10      	pop	{r4, pc}
  400ae0:	004015ec 	.word	0x004015ec
  400ae4:	004006cd 	.word	0x004006cd
  400ae8:	00400a4d 	.word	0x00400a4d
  400aec:	55415200 	.word	0x55415200
  400af0:	004015e0 	.word	0x004015e0

00400af4 <_usart_sync_init>:
{
  400af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400af6:	460c      	mov	r4, r1
	ASSERT(device);
  400af8:	4e09      	ldr	r6, [pc, #36]	; (400b20 <_usart_sync_init+0x2c>)
  400afa:	4607      	mov	r7, r0
  400afc:	22a9      	movs	r2, #169	; 0xa9
  400afe:	4631      	mov	r1, r6
  400b00:	3000      	adds	r0, #0
  400b02:	bf18      	it	ne
  400b04:	2001      	movne	r0, #1
  400b06:	4d07      	ldr	r5, [pc, #28]	; (400b24 <_usart_sync_init+0x30>)
  400b08:	47a8      	blx	r5
	ASSERT(hw);
  400b0a:	22aa      	movs	r2, #170	; 0xaa
  400b0c:	4631      	mov	r1, r6
  400b0e:	1c20      	adds	r0, r4, #0
  400b10:	bf18      	it	ne
  400b12:	2001      	movne	r0, #1
  400b14:	47a8      	blx	r5
	device->hw = hw;
  400b16:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  400b18:	4620      	mov	r0, r4
  400b1a:	4b03      	ldr	r3, [pc, #12]	; (400b28 <_usart_sync_init+0x34>)
  400b1c:	4798      	blx	r3
}
  400b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b20:	004015ec 	.word	0x004015ec
  400b24:	004006cd 	.word	0x004006cd
  400b28:	00400aa1 	.word	0x00400aa1

00400b2c <_usart_sync_enable>:
{
  400b2c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  400b2e:	4e0a      	ldr	r6, [pc, #40]	; (400b58 <_usart_sync_enable+0x2c>)
  400b30:	4604      	mov	r4, r0
  400b32:	22f2      	movs	r2, #242	; 0xf2
  400b34:	4631      	mov	r1, r6
  400b36:	3000      	adds	r0, #0
  400b38:	bf18      	it	ne
  400b3a:	2001      	movne	r0, #1
  400b3c:	4d07      	ldr	r5, [pc, #28]	; (400b5c <_usart_sync_enable+0x30>)
  400b3e:	47a8      	blx	r5
	_uart_enable(device->hw);
  400b40:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _uart_enable(void *const hw)
{
	ASSERT(hw);
  400b42:	f240 22d7 	movw	r2, #727	; 0x2d7
  400b46:	4631      	mov	r1, r6
  400b48:	1c20      	adds	r0, r4, #0
  400b4a:	bf18      	it	ne
  400b4c:	2001      	movne	r0, #1
  400b4e:	47a8      	blx	r5
	((Uart *)hw)->UART_CR = data;
  400b50:	2350      	movs	r3, #80	; 0x50
  400b52:	6023      	str	r3, [r4, #0]
  400b54:	bd70      	pop	{r4, r5, r6, pc}
  400b56:	bf00      	nop
  400b58:	004015ec 	.word	0x004015ec
  400b5c:	004006cd 	.word	0x004006cd

00400b60 <_usart_sync_write_byte>:
{
  400b60:	b538      	push	{r3, r4, r5, lr}
  400b62:	460c      	mov	r4, r1
	ASSERT(device);
  400b64:	4605      	mov	r5, r0
  400b66:	f240 1295 	movw	r2, #405	; 0x195
  400b6a:	4904      	ldr	r1, [pc, #16]	; (400b7c <_usart_sync_write_byte+0x1c>)
  400b6c:	3000      	adds	r0, #0
  400b6e:	bf18      	it	ne
  400b70:	2001      	movne	r0, #1
  400b72:	4b03      	ldr	r3, [pc, #12]	; (400b80 <_usart_sync_write_byte+0x20>)
  400b74:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  400b76:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  400b78:	61dc      	str	r4, [r3, #28]
  400b7a:	bd38      	pop	{r3, r4, r5, pc}
  400b7c:	004015ec 	.word	0x004015ec
  400b80:	004006cd 	.word	0x004006cd

00400b84 <_usart_sync_read_byte>:
{
  400b84:	b510      	push	{r4, lr}
	ASSERT(device);
  400b86:	4604      	mov	r4, r0
  400b88:	f240 12a7 	movw	r2, #423	; 0x1a7
  400b8c:	4904      	ldr	r1, [pc, #16]	; (400ba0 <_usart_sync_read_byte+0x1c>)
  400b8e:	3000      	adds	r0, #0
  400b90:	bf18      	it	ne
  400b92:	2001      	movne	r0, #1
  400b94:	4b03      	ldr	r3, [pc, #12]	; (400ba4 <_usart_sync_read_byte+0x20>)
  400b96:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  400b98:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  400b9a:	6998      	ldr	r0, [r3, #24]
}
  400b9c:	b2c0      	uxtb	r0, r0
  400b9e:	bd10      	pop	{r4, pc}
  400ba0:	004015ec 	.word	0x004015ec
  400ba4:	004006cd 	.word	0x004006cd

00400ba8 <_usart_sync_is_ready_to_send>:
{
  400ba8:	b510      	push	{r4, lr}
	ASSERT(device);
  400baa:	4604      	mov	r4, r0
  400bac:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  400bb0:	4905      	ldr	r1, [pc, #20]	; (400bc8 <_usart_sync_is_ready_to_send+0x20>)
  400bb2:	3000      	adds	r0, #0
  400bb4:	bf18      	it	ne
  400bb6:	2001      	movne	r0, #1
  400bb8:	4b04      	ldr	r3, [pc, #16]	; (400bcc <_usart_sync_is_ready_to_send+0x24>)
  400bba:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  400bbc:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  400bbe:	6958      	ldr	r0, [r3, #20]
}
  400bc0:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400bc4:	bd10      	pop	{r4, pc}
  400bc6:	bf00      	nop
  400bc8:	004015ec 	.word	0x004015ec
  400bcc:	004006cd 	.word	0x004006cd

00400bd0 <_usart_sync_is_transmit_done>:
{
  400bd0:	b510      	push	{r4, lr}
	ASSERT(device);
  400bd2:	4604      	mov	r4, r0
  400bd4:	f240 12b9 	movw	r2, #441	; 0x1b9
  400bd8:	4905      	ldr	r1, [pc, #20]	; (400bf0 <_usart_sync_is_transmit_done+0x20>)
  400bda:	3000      	adds	r0, #0
  400bdc:	bf18      	it	ne
  400bde:	2001      	movne	r0, #1
  400be0:	4b04      	ldr	r3, [pc, #16]	; (400bf4 <_usart_sync_is_transmit_done+0x24>)
  400be2:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  400be4:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  400be6:	6958      	ldr	r0, [r3, #20]
}
  400be8:	f3c0 2040 	ubfx	r0, r0, #9, #1
  400bec:	bd10      	pop	{r4, pc}
  400bee:	bf00      	nop
  400bf0:	004015ec 	.word	0x004015ec
  400bf4:	004006cd 	.word	0x004006cd

00400bf8 <_usart_sync_is_byte_received>:
{
  400bf8:	b510      	push	{r4, lr}
	ASSERT(device);
  400bfa:	4604      	mov	r4, r0
  400bfc:	f240 12cb 	movw	r2, #459	; 0x1cb
  400c00:	4905      	ldr	r1, [pc, #20]	; (400c18 <_usart_sync_is_byte_received+0x20>)
  400c02:	3000      	adds	r0, #0
  400c04:	bf18      	it	ne
  400c06:	2001      	movne	r0, #1
  400c08:	4b04      	ldr	r3, [pc, #16]	; (400c1c <_usart_sync_is_byte_received+0x24>)
  400c0a:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  400c0c:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  400c0e:	6958      	ldr	r0, [r3, #20]
  400c10:	f000 0001 	and.w	r0, r0, #1
}
  400c14:	bd10      	pop	{r4, pc}
  400c16:	bf00      	nop
  400c18:	004015ec 	.word	0x004015ec
  400c1c:	004006cd 	.word	0x004006cd

00400c20 <_uart_get_usart_sync>:
}
  400c20:	2000      	movs	r0, #0
  400c22:	4770      	bx	lr

00400c24 <TIMER_0_task1_callback>:
	tmp = ((Pio *)hw)->PIO_ODSR;
  400c24:	4a04      	ldr	r2, [pc, #16]	; (400c38 <TIMER_0_task1_callback+0x14>)
  400c26:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  400c28:	f003 0302 	and.w	r3, r3, #2
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  400c2c:	43d9      	mvns	r1, r3
  400c2e:	f001 0102 	and.w	r1, r1, #2
	((Pio *)hw)->PIO_SODR = mask;
  400c32:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  400c34:	6353      	str	r3, [r2, #52]	; 0x34
  400c36:	4770      	bx	lr
  400c38:	400e1400 	.word	0x400e1400

00400c3c <TIMER_0_task2_callback>:
	tmp = ((Pio *)hw)->PIO_ODSR;
  400c3c:	4a04      	ldr	r2, [pc, #16]	; (400c50 <TIMER_0_task2_callback+0x14>)
  400c3e:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  400c40:	f003 0304 	and.w	r3, r3, #4
  400c44:	43d9      	mvns	r1, r3
  400c46:	f001 0104 	and.w	r1, r1, #4
	((Pio *)hw)->PIO_SODR = mask;
  400c4a:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  400c4c:	6353      	str	r3, [r2, #52]	; 0x34
  400c4e:	4770      	bx	lr
  400c50:	400e1400 	.word	0x400e1400

00400c54 <main>:
static void TIMER_0_task2_callback(const struct timer_task *const timer_task);

struct timer_task TIMER_0_task1, TIMER_0_task2;

int main(void)
{
  400c54:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  400c56:	4b10      	ldr	r3, [pc, #64]	; (400c98 <main+0x44>)
  400c58:	4798      	blx	r3
	((Pio *)hw)->PIO_OER = mask;
  400c5a:	4b10      	ldr	r3, [pc, #64]	; (400c9c <main+0x48>)
  400c5c:	2202      	movs	r2, #2
  400c5e:	611a      	str	r2, [r3, #16]
  400c60:	2204      	movs	r2, #4
  400c62:	611a      	str	r2, [r3, #16]
	gpio_set_pin_direction(PD1, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(PD2, GPIO_DIRECTION_OUT);

	TIMER_0_task1.interval = 100;
  400c64:	490e      	ldr	r1, [pc, #56]	; (400ca0 <main+0x4c>)
  400c66:	2364      	movs	r3, #100	; 0x64
  400c68:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_callback;
  400c6a:	4b0e      	ldr	r3, [pc, #56]	; (400ca4 <main+0x50>)
  400c6c:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
  400c6e:	2301      	movs	r3, #1
  400c70:	740b      	strb	r3, [r1, #16]
	TIMER_0_task2.interval = 600;
  400c72:	4c0d      	ldr	r4, [pc, #52]	; (400ca8 <main+0x54>)
  400c74:	f44f 7216 	mov.w	r2, #600	; 0x258
  400c78:	60a2      	str	r2, [r4, #8]
	TIMER_0_task2.cb       = TIMER_0_task2_callback;
  400c7a:	4a0c      	ldr	r2, [pc, #48]	; (400cac <main+0x58>)
  400c7c:	60e2      	str	r2, [r4, #12]
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
  400c7e:	7423      	strb	r3, [r4, #16]

	timer_add_task(&TIMER_0, &TIMER_0_task1);
  400c80:	4d0b      	ldr	r5, [pc, #44]	; (400cb0 <main+0x5c>)
  400c82:	4628      	mov	r0, r5
  400c84:	4e0b      	ldr	r6, [pc, #44]	; (400cb4 <main+0x60>)
  400c86:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
  400c88:	4621      	mov	r1, r4
  400c8a:	4628      	mov	r0, r5
  400c8c:	47b0      	blx	r6
	timer_start(&TIMER_0);
  400c8e:	4628      	mov	r0, r5
  400c90:	4b09      	ldr	r3, [pc, #36]	; (400cb8 <main+0x64>)
  400c92:	4798      	blx	r3
  400c94:	e7fe      	b.n	400c94 <main+0x40>
  400c96:	bf00      	nop
  400c98:	004001d5 	.word	0x004001d5
  400c9c:	400e1400 	.word	0x400e1400
  400ca0:	204000f4 	.word	0x204000f4
  400ca4:	00400c25 	.word	0x00400c25
  400ca8:	204000e0 	.word	0x204000e0
  400cac:	00400c3d 	.word	0x00400c3d
  400cb0:	204000c4 	.word	0x204000c4
  400cb4:	004004e1 	.word	0x004004e1
  400cb8:	004004a5 	.word	0x004004a5

00400cbc <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  400cbc:	b958      	cbnz	r0, 400cd6 <_read+0x1a>
{
  400cbe:	b508      	push	{r3, lr}
  400cc0:	460b      	mov	r3, r1
  400cc2:	4611      	mov	r1, r2
  400cc4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  400cc6:	4b05      	ldr	r3, [pc, #20]	; (400cdc <_read+0x20>)
  400cc8:	4798      	blx	r3
	if (n < 0) {
  400cca:	2800      	cmp	r0, #0
  400ccc:	db00      	blt.n	400cd0 <_read+0x14>
		return -1;
	}

	return n;
}
  400cce:	bd08      	pop	{r3, pc}
		return -1;
  400cd0:	f04f 30ff 	mov.w	r0, #4294967295
  400cd4:	bd08      	pop	{r3, pc}
		return -1;
  400cd6:	f04f 30ff 	mov.w	r0, #4294967295
  400cda:	4770      	bx	lr
  400cdc:	00400d35 	.word	0x00400d35

00400ce0 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  400ce0:	3801      	subs	r0, #1
  400ce2:	2802      	cmp	r0, #2
  400ce4:	d80b      	bhi.n	400cfe <_write+0x1e>
{
  400ce6:	b508      	push	{r3, lr}
  400ce8:	460b      	mov	r3, r1
  400cea:	4611      	mov	r1, r2
  400cec:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  400cee:	4b05      	ldr	r3, [pc, #20]	; (400d04 <_write+0x24>)
  400cf0:	4798      	blx	r3
	if (n < 0) {
  400cf2:	2800      	cmp	r0, #0
  400cf4:	db00      	blt.n	400cf8 <_write+0x18>
		return -1;
	}

	return n;
}
  400cf6:	bd08      	pop	{r3, pc}
		return -1;
  400cf8:	f04f 30ff 	mov.w	r0, #4294967295
  400cfc:	bd08      	pop	{r3, pc}
		return -1;
  400cfe:	f04f 30ff 	mov.w	r0, #4294967295
  400d02:	4770      	bx	lr
  400d04:	00400d59 	.word	0x00400d59

00400d08 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  400d08:	b570      	push	{r4, r5, r6, lr}
  400d0a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  400d0c:	4d06      	ldr	r5, [pc, #24]	; (400d28 <stdio_io_init+0x20>)
  400d0e:	682b      	ldr	r3, [r5, #0]
  400d10:	2100      	movs	r1, #0
  400d12:	6898      	ldr	r0, [r3, #8]
  400d14:	4c05      	ldr	r4, [pc, #20]	; (400d2c <stdio_io_init+0x24>)
  400d16:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400d18:	682b      	ldr	r3, [r5, #0]
  400d1a:	2100      	movs	r1, #0
  400d1c:	6858      	ldr	r0, [r3, #4]
  400d1e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  400d20:	4b03      	ldr	r3, [pc, #12]	; (400d30 <stdio_io_init+0x28>)
  400d22:	601e      	str	r6, [r3, #0]
  400d24:	bd70      	pop	{r4, r5, r6, pc}
  400d26:	bf00      	nop
  400d28:	20400024 	.word	0x20400024
  400d2c:	00400df5 	.word	0x00400df5
  400d30:	204000ac 	.word	0x204000ac

00400d34 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  400d34:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  400d36:	4b06      	ldr	r3, [pc, #24]	; (400d50 <stdio_io_read+0x1c>)
  400d38:	681b      	ldr	r3, [r3, #0]
  400d3a:	b133      	cbz	r3, 400d4a <stdio_io_read+0x16>
  400d3c:	460a      	mov	r2, r1
  400d3e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  400d40:	b292      	uxth	r2, r2
  400d42:	4618      	mov	r0, r3
  400d44:	4b03      	ldr	r3, [pc, #12]	; (400d54 <stdio_io_read+0x20>)
  400d46:	4798      	blx	r3
  400d48:	bd08      	pop	{r3, pc}
		return 0;
  400d4a:	2000      	movs	r0, #0
}
  400d4c:	bd08      	pop	{r3, pc}
  400d4e:	bf00      	nop
  400d50:	204000ac 	.word	0x204000ac
  400d54:	00400381 	.word	0x00400381

00400d58 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  400d58:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  400d5a:	4b06      	ldr	r3, [pc, #24]	; (400d74 <stdio_io_write+0x1c>)
  400d5c:	681b      	ldr	r3, [r3, #0]
  400d5e:	b133      	cbz	r3, 400d6e <stdio_io_write+0x16>
  400d60:	460a      	mov	r2, r1
  400d62:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  400d64:	b292      	uxth	r2, r2
  400d66:	4618      	mov	r0, r3
  400d68:	4b03      	ldr	r3, [pc, #12]	; (400d78 <stdio_io_write+0x20>)
  400d6a:	4798      	blx	r3
  400d6c:	bd08      	pop	{r3, pc}
		return 0;
  400d6e:	2000      	movs	r0, #0
}
  400d70:	bd08      	pop	{r3, pc}
  400d72:	bf00      	nop
  400d74:	204000ac 	.word	0x204000ac
  400d78:	00400351 	.word	0x00400351

00400d7c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  400d7c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  400d7e:	4c04      	ldr	r4, [pc, #16]	; (400d90 <stdio_redirect_init+0x14>)
  400d80:	4620      	mov	r0, r4
  400d82:	4b04      	ldr	r3, [pc, #16]	; (400d94 <stdio_redirect_init+0x18>)
  400d84:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  400d86:	4620      	mov	r0, r4
  400d88:	4b03      	ldr	r3, [pc, #12]	; (400d98 <stdio_redirect_init+0x1c>)
  400d8a:	4798      	blx	r3
  400d8c:	bd10      	pop	{r4, pc}
  400d8e:	bf00      	nop
  400d90:	204000b8 	.word	0x204000b8
  400d94:	004006a1 	.word	0x004006a1
  400d98:	00400d09 	.word	0x00400d09

00400d9c <__libc_init_array>:
  400d9c:	b570      	push	{r4, r5, r6, lr}
  400d9e:	4e0d      	ldr	r6, [pc, #52]	; (400dd4 <__libc_init_array+0x38>)
  400da0:	4c0d      	ldr	r4, [pc, #52]	; (400dd8 <__libc_init_array+0x3c>)
  400da2:	1ba4      	subs	r4, r4, r6
  400da4:	10a4      	asrs	r4, r4, #2
  400da6:	2500      	movs	r5, #0
  400da8:	42a5      	cmp	r5, r4
  400daa:	d109      	bne.n	400dc0 <__libc_init_array+0x24>
  400dac:	4e0b      	ldr	r6, [pc, #44]	; (400ddc <__libc_init_array+0x40>)
  400dae:	4c0c      	ldr	r4, [pc, #48]	; (400de0 <__libc_init_array+0x44>)
  400db0:	f000 fc5a 	bl	401668 <_init>
  400db4:	1ba4      	subs	r4, r4, r6
  400db6:	10a4      	asrs	r4, r4, #2
  400db8:	2500      	movs	r5, #0
  400dba:	42a5      	cmp	r5, r4
  400dbc:	d105      	bne.n	400dca <__libc_init_array+0x2e>
  400dbe:	bd70      	pop	{r4, r5, r6, pc}
  400dc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400dc4:	4798      	blx	r3
  400dc6:	3501      	adds	r5, #1
  400dc8:	e7ee      	b.n	400da8 <__libc_init_array+0xc>
  400dca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400dce:	4798      	blx	r3
  400dd0:	3501      	adds	r5, #1
  400dd2:	e7f2      	b.n	400dba <__libc_init_array+0x1e>
  400dd4:	00401674 	.word	0x00401674
  400dd8:	00401674 	.word	0x00401674
  400ddc:	00401674 	.word	0x00401674
  400de0:	00401678 	.word	0x00401678

00400de4 <memset>:
  400de4:	4402      	add	r2, r0
  400de6:	4603      	mov	r3, r0
  400de8:	4293      	cmp	r3, r2
  400dea:	d100      	bne.n	400dee <memset+0xa>
  400dec:	4770      	bx	lr
  400dee:	f803 1b01 	strb.w	r1, [r3], #1
  400df2:	e7f9      	b.n	400de8 <memset+0x4>

00400df4 <setbuf>:
  400df4:	2900      	cmp	r1, #0
  400df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400dfa:	bf0c      	ite	eq
  400dfc:	2202      	moveq	r2, #2
  400dfe:	2200      	movne	r2, #0
  400e00:	f000 b800 	b.w	400e04 <setvbuf>

00400e04 <setvbuf>:
  400e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  400e08:	461d      	mov	r5, r3
  400e0a:	4b51      	ldr	r3, [pc, #324]	; (400f50 <setvbuf+0x14c>)
  400e0c:	681e      	ldr	r6, [r3, #0]
  400e0e:	4604      	mov	r4, r0
  400e10:	460f      	mov	r7, r1
  400e12:	4690      	mov	r8, r2
  400e14:	b126      	cbz	r6, 400e20 <setvbuf+0x1c>
  400e16:	69b3      	ldr	r3, [r6, #24]
  400e18:	b913      	cbnz	r3, 400e20 <setvbuf+0x1c>
  400e1a:	4630      	mov	r0, r6
  400e1c:	f000 f992 	bl	401144 <__sinit>
  400e20:	4b4c      	ldr	r3, [pc, #304]	; (400f54 <setvbuf+0x150>)
  400e22:	429c      	cmp	r4, r3
  400e24:	d152      	bne.n	400ecc <setvbuf+0xc8>
  400e26:	6874      	ldr	r4, [r6, #4]
  400e28:	f1b8 0f02 	cmp.w	r8, #2
  400e2c:	d006      	beq.n	400e3c <setvbuf+0x38>
  400e2e:	f1b8 0f01 	cmp.w	r8, #1
  400e32:	f200 8089 	bhi.w	400f48 <setvbuf+0x144>
  400e36:	2d00      	cmp	r5, #0
  400e38:	f2c0 8086 	blt.w	400f48 <setvbuf+0x144>
  400e3c:	4621      	mov	r1, r4
  400e3e:	4630      	mov	r0, r6
  400e40:	f000 f916 	bl	401070 <_fflush_r>
  400e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
  400e46:	b141      	cbz	r1, 400e5a <setvbuf+0x56>
  400e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
  400e4c:	4299      	cmp	r1, r3
  400e4e:	d002      	beq.n	400e56 <setvbuf+0x52>
  400e50:	4630      	mov	r0, r6
  400e52:	f000 fa2d 	bl	4012b0 <_free_r>
  400e56:	2300      	movs	r3, #0
  400e58:	6363      	str	r3, [r4, #52]	; 0x34
  400e5a:	2300      	movs	r3, #0
  400e5c:	61a3      	str	r3, [r4, #24]
  400e5e:	6063      	str	r3, [r4, #4]
  400e60:	89a3      	ldrh	r3, [r4, #12]
  400e62:	061b      	lsls	r3, r3, #24
  400e64:	d503      	bpl.n	400e6e <setvbuf+0x6a>
  400e66:	6921      	ldr	r1, [r4, #16]
  400e68:	4630      	mov	r0, r6
  400e6a:	f000 fa21 	bl	4012b0 <_free_r>
  400e6e:	89a3      	ldrh	r3, [r4, #12]
  400e70:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  400e74:	f023 0303 	bic.w	r3, r3, #3
  400e78:	f1b8 0f02 	cmp.w	r8, #2
  400e7c:	81a3      	strh	r3, [r4, #12]
  400e7e:	d05d      	beq.n	400f3c <setvbuf+0x138>
  400e80:	ab01      	add	r3, sp, #4
  400e82:	466a      	mov	r2, sp
  400e84:	4621      	mov	r1, r4
  400e86:	4630      	mov	r0, r6
  400e88:	f000 f9e6 	bl	401258 <__swhatbuf_r>
  400e8c:	89a3      	ldrh	r3, [r4, #12]
  400e8e:	4318      	orrs	r0, r3
  400e90:	81a0      	strh	r0, [r4, #12]
  400e92:	bb2d      	cbnz	r5, 400ee0 <setvbuf+0xdc>
  400e94:	9d00      	ldr	r5, [sp, #0]
  400e96:	4628      	mov	r0, r5
  400e98:	f000 fa02 	bl	4012a0 <malloc>
  400e9c:	4607      	mov	r7, r0
  400e9e:	2800      	cmp	r0, #0
  400ea0:	d14e      	bne.n	400f40 <setvbuf+0x13c>
  400ea2:	f8dd 9000 	ldr.w	r9, [sp]
  400ea6:	45a9      	cmp	r9, r5
  400ea8:	d13c      	bne.n	400f24 <setvbuf+0x120>
  400eaa:	f04f 30ff 	mov.w	r0, #4294967295
  400eae:	89a3      	ldrh	r3, [r4, #12]
  400eb0:	f043 0302 	orr.w	r3, r3, #2
  400eb4:	81a3      	strh	r3, [r4, #12]
  400eb6:	2300      	movs	r3, #0
  400eb8:	60a3      	str	r3, [r4, #8]
  400eba:	f104 0347 	add.w	r3, r4, #71	; 0x47
  400ebe:	6023      	str	r3, [r4, #0]
  400ec0:	6123      	str	r3, [r4, #16]
  400ec2:	2301      	movs	r3, #1
  400ec4:	6163      	str	r3, [r4, #20]
  400ec6:	b003      	add	sp, #12
  400ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400ecc:	4b22      	ldr	r3, [pc, #136]	; (400f58 <setvbuf+0x154>)
  400ece:	429c      	cmp	r4, r3
  400ed0:	d101      	bne.n	400ed6 <setvbuf+0xd2>
  400ed2:	68b4      	ldr	r4, [r6, #8]
  400ed4:	e7a8      	b.n	400e28 <setvbuf+0x24>
  400ed6:	4b21      	ldr	r3, [pc, #132]	; (400f5c <setvbuf+0x158>)
  400ed8:	429c      	cmp	r4, r3
  400eda:	bf08      	it	eq
  400edc:	68f4      	ldreq	r4, [r6, #12]
  400ede:	e7a3      	b.n	400e28 <setvbuf+0x24>
  400ee0:	2f00      	cmp	r7, #0
  400ee2:	d0d8      	beq.n	400e96 <setvbuf+0x92>
  400ee4:	69b3      	ldr	r3, [r6, #24]
  400ee6:	b913      	cbnz	r3, 400eee <setvbuf+0xea>
  400ee8:	4630      	mov	r0, r6
  400eea:	f000 f92b 	bl	401144 <__sinit>
  400eee:	f1b8 0f01 	cmp.w	r8, #1
  400ef2:	bf08      	it	eq
  400ef4:	89a3      	ldrheq	r3, [r4, #12]
  400ef6:	6027      	str	r7, [r4, #0]
  400ef8:	bf04      	itt	eq
  400efa:	f043 0301 	orreq.w	r3, r3, #1
  400efe:	81a3      	strheq	r3, [r4, #12]
  400f00:	89a3      	ldrh	r3, [r4, #12]
  400f02:	6127      	str	r7, [r4, #16]
  400f04:	f013 0008 	ands.w	r0, r3, #8
  400f08:	6165      	str	r5, [r4, #20]
  400f0a:	d01b      	beq.n	400f44 <setvbuf+0x140>
  400f0c:	f013 0001 	ands.w	r0, r3, #1
  400f10:	bf18      	it	ne
  400f12:	426d      	negne	r5, r5
  400f14:	f04f 0300 	mov.w	r3, #0
  400f18:	bf1d      	ittte	ne
  400f1a:	60a3      	strne	r3, [r4, #8]
  400f1c:	61a5      	strne	r5, [r4, #24]
  400f1e:	4618      	movne	r0, r3
  400f20:	60a5      	streq	r5, [r4, #8]
  400f22:	e7d0      	b.n	400ec6 <setvbuf+0xc2>
  400f24:	4648      	mov	r0, r9
  400f26:	f000 f9bb 	bl	4012a0 <malloc>
  400f2a:	4607      	mov	r7, r0
  400f2c:	2800      	cmp	r0, #0
  400f2e:	d0bc      	beq.n	400eaa <setvbuf+0xa6>
  400f30:	89a3      	ldrh	r3, [r4, #12]
  400f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400f36:	81a3      	strh	r3, [r4, #12]
  400f38:	464d      	mov	r5, r9
  400f3a:	e7d3      	b.n	400ee4 <setvbuf+0xe0>
  400f3c:	2000      	movs	r0, #0
  400f3e:	e7b6      	b.n	400eae <setvbuf+0xaa>
  400f40:	46a9      	mov	r9, r5
  400f42:	e7f5      	b.n	400f30 <setvbuf+0x12c>
  400f44:	60a0      	str	r0, [r4, #8]
  400f46:	e7be      	b.n	400ec6 <setvbuf+0xc2>
  400f48:	f04f 30ff 	mov.w	r0, #4294967295
  400f4c:	e7bb      	b.n	400ec6 <setvbuf+0xc2>
  400f4e:	bf00      	nop
  400f50:	20400024 	.word	0x20400024
  400f54:	00401628 	.word	0x00401628
  400f58:	00401648 	.word	0x00401648
  400f5c:	00401608 	.word	0x00401608

00400f60 <__sflush_r>:
  400f60:	898a      	ldrh	r2, [r1, #12]
  400f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f66:	4605      	mov	r5, r0
  400f68:	0710      	lsls	r0, r2, #28
  400f6a:	460c      	mov	r4, r1
  400f6c:	d45a      	bmi.n	401024 <__sflush_r+0xc4>
  400f6e:	684b      	ldr	r3, [r1, #4]
  400f70:	2b00      	cmp	r3, #0
  400f72:	dc05      	bgt.n	400f80 <__sflush_r+0x20>
  400f74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  400f76:	2b00      	cmp	r3, #0
  400f78:	dc02      	bgt.n	400f80 <__sflush_r+0x20>
  400f7a:	2000      	movs	r0, #0
  400f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  400f82:	2e00      	cmp	r6, #0
  400f84:	d0f9      	beq.n	400f7a <__sflush_r+0x1a>
  400f86:	2300      	movs	r3, #0
  400f88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  400f8c:	682f      	ldr	r7, [r5, #0]
  400f8e:	602b      	str	r3, [r5, #0]
  400f90:	d033      	beq.n	400ffa <__sflush_r+0x9a>
  400f92:	6d60      	ldr	r0, [r4, #84]	; 0x54
  400f94:	89a3      	ldrh	r3, [r4, #12]
  400f96:	075a      	lsls	r2, r3, #29
  400f98:	d505      	bpl.n	400fa6 <__sflush_r+0x46>
  400f9a:	6863      	ldr	r3, [r4, #4]
  400f9c:	1ac0      	subs	r0, r0, r3
  400f9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  400fa0:	b10b      	cbz	r3, 400fa6 <__sflush_r+0x46>
  400fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400fa4:	1ac0      	subs	r0, r0, r3
  400fa6:	2300      	movs	r3, #0
  400fa8:	4602      	mov	r2, r0
  400faa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  400fac:	6a21      	ldr	r1, [r4, #32]
  400fae:	4628      	mov	r0, r5
  400fb0:	47b0      	blx	r6
  400fb2:	1c43      	adds	r3, r0, #1
  400fb4:	89a3      	ldrh	r3, [r4, #12]
  400fb6:	d106      	bne.n	400fc6 <__sflush_r+0x66>
  400fb8:	6829      	ldr	r1, [r5, #0]
  400fba:	291d      	cmp	r1, #29
  400fbc:	d84b      	bhi.n	401056 <__sflush_r+0xf6>
  400fbe:	4a2b      	ldr	r2, [pc, #172]	; (40106c <__sflush_r+0x10c>)
  400fc0:	40ca      	lsrs	r2, r1
  400fc2:	07d6      	lsls	r6, r2, #31
  400fc4:	d547      	bpl.n	401056 <__sflush_r+0xf6>
  400fc6:	2200      	movs	r2, #0
  400fc8:	6062      	str	r2, [r4, #4]
  400fca:	04d9      	lsls	r1, r3, #19
  400fcc:	6922      	ldr	r2, [r4, #16]
  400fce:	6022      	str	r2, [r4, #0]
  400fd0:	d504      	bpl.n	400fdc <__sflush_r+0x7c>
  400fd2:	1c42      	adds	r2, r0, #1
  400fd4:	d101      	bne.n	400fda <__sflush_r+0x7a>
  400fd6:	682b      	ldr	r3, [r5, #0]
  400fd8:	b903      	cbnz	r3, 400fdc <__sflush_r+0x7c>
  400fda:	6560      	str	r0, [r4, #84]	; 0x54
  400fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  400fde:	602f      	str	r7, [r5, #0]
  400fe0:	2900      	cmp	r1, #0
  400fe2:	d0ca      	beq.n	400f7a <__sflush_r+0x1a>
  400fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  400fe8:	4299      	cmp	r1, r3
  400fea:	d002      	beq.n	400ff2 <__sflush_r+0x92>
  400fec:	4628      	mov	r0, r5
  400fee:	f000 f95f 	bl	4012b0 <_free_r>
  400ff2:	2000      	movs	r0, #0
  400ff4:	6360      	str	r0, [r4, #52]	; 0x34
  400ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ffa:	6a21      	ldr	r1, [r4, #32]
  400ffc:	2301      	movs	r3, #1
  400ffe:	4628      	mov	r0, r5
  401000:	47b0      	blx	r6
  401002:	1c41      	adds	r1, r0, #1
  401004:	d1c6      	bne.n	400f94 <__sflush_r+0x34>
  401006:	682b      	ldr	r3, [r5, #0]
  401008:	2b00      	cmp	r3, #0
  40100a:	d0c3      	beq.n	400f94 <__sflush_r+0x34>
  40100c:	2b1d      	cmp	r3, #29
  40100e:	d001      	beq.n	401014 <__sflush_r+0xb4>
  401010:	2b16      	cmp	r3, #22
  401012:	d101      	bne.n	401018 <__sflush_r+0xb8>
  401014:	602f      	str	r7, [r5, #0]
  401016:	e7b0      	b.n	400f7a <__sflush_r+0x1a>
  401018:	89a3      	ldrh	r3, [r4, #12]
  40101a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40101e:	81a3      	strh	r3, [r4, #12]
  401020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401024:	690f      	ldr	r7, [r1, #16]
  401026:	2f00      	cmp	r7, #0
  401028:	d0a7      	beq.n	400f7a <__sflush_r+0x1a>
  40102a:	0793      	lsls	r3, r2, #30
  40102c:	680e      	ldr	r6, [r1, #0]
  40102e:	bf08      	it	eq
  401030:	694b      	ldreq	r3, [r1, #20]
  401032:	600f      	str	r7, [r1, #0]
  401034:	bf18      	it	ne
  401036:	2300      	movne	r3, #0
  401038:	eba6 0807 	sub.w	r8, r6, r7
  40103c:	608b      	str	r3, [r1, #8]
  40103e:	f1b8 0f00 	cmp.w	r8, #0
  401042:	dd9a      	ble.n	400f7a <__sflush_r+0x1a>
  401044:	4643      	mov	r3, r8
  401046:	463a      	mov	r2, r7
  401048:	6a21      	ldr	r1, [r4, #32]
  40104a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  40104c:	4628      	mov	r0, r5
  40104e:	47b0      	blx	r6
  401050:	2800      	cmp	r0, #0
  401052:	dc07      	bgt.n	401064 <__sflush_r+0x104>
  401054:	89a3      	ldrh	r3, [r4, #12]
  401056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40105a:	81a3      	strh	r3, [r4, #12]
  40105c:	f04f 30ff 	mov.w	r0, #4294967295
  401060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401064:	4407      	add	r7, r0
  401066:	eba8 0800 	sub.w	r8, r8, r0
  40106a:	e7e8      	b.n	40103e <__sflush_r+0xde>
  40106c:	20400001 	.word	0x20400001

00401070 <_fflush_r>:
  401070:	b538      	push	{r3, r4, r5, lr}
  401072:	690b      	ldr	r3, [r1, #16]
  401074:	4605      	mov	r5, r0
  401076:	460c      	mov	r4, r1
  401078:	b1db      	cbz	r3, 4010b2 <_fflush_r+0x42>
  40107a:	b118      	cbz	r0, 401084 <_fflush_r+0x14>
  40107c:	6983      	ldr	r3, [r0, #24]
  40107e:	b90b      	cbnz	r3, 401084 <_fflush_r+0x14>
  401080:	f000 f860 	bl	401144 <__sinit>
  401084:	4b0c      	ldr	r3, [pc, #48]	; (4010b8 <_fflush_r+0x48>)
  401086:	429c      	cmp	r4, r3
  401088:	d109      	bne.n	40109e <_fflush_r+0x2e>
  40108a:	686c      	ldr	r4, [r5, #4]
  40108c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401090:	b17b      	cbz	r3, 4010b2 <_fflush_r+0x42>
  401092:	4621      	mov	r1, r4
  401094:	4628      	mov	r0, r5
  401096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40109a:	f7ff bf61 	b.w	400f60 <__sflush_r>
  40109e:	4b07      	ldr	r3, [pc, #28]	; (4010bc <_fflush_r+0x4c>)
  4010a0:	429c      	cmp	r4, r3
  4010a2:	d101      	bne.n	4010a8 <_fflush_r+0x38>
  4010a4:	68ac      	ldr	r4, [r5, #8]
  4010a6:	e7f1      	b.n	40108c <_fflush_r+0x1c>
  4010a8:	4b05      	ldr	r3, [pc, #20]	; (4010c0 <_fflush_r+0x50>)
  4010aa:	429c      	cmp	r4, r3
  4010ac:	bf08      	it	eq
  4010ae:	68ec      	ldreq	r4, [r5, #12]
  4010b0:	e7ec      	b.n	40108c <_fflush_r+0x1c>
  4010b2:	2000      	movs	r0, #0
  4010b4:	bd38      	pop	{r3, r4, r5, pc}
  4010b6:	bf00      	nop
  4010b8:	00401628 	.word	0x00401628
  4010bc:	00401648 	.word	0x00401648
  4010c0:	00401608 	.word	0x00401608

004010c4 <_cleanup_r>:
  4010c4:	4901      	ldr	r1, [pc, #4]	; (4010cc <_cleanup_r+0x8>)
  4010c6:	f000 b8a9 	b.w	40121c <_fwalk_reent>
  4010ca:	bf00      	nop
  4010cc:	00401071 	.word	0x00401071

004010d0 <std.isra.0>:
  4010d0:	2300      	movs	r3, #0
  4010d2:	b510      	push	{r4, lr}
  4010d4:	4604      	mov	r4, r0
  4010d6:	6003      	str	r3, [r0, #0]
  4010d8:	6043      	str	r3, [r0, #4]
  4010da:	6083      	str	r3, [r0, #8]
  4010dc:	8181      	strh	r1, [r0, #12]
  4010de:	6643      	str	r3, [r0, #100]	; 0x64
  4010e0:	81c2      	strh	r2, [r0, #14]
  4010e2:	6103      	str	r3, [r0, #16]
  4010e4:	6143      	str	r3, [r0, #20]
  4010e6:	6183      	str	r3, [r0, #24]
  4010e8:	4619      	mov	r1, r3
  4010ea:	2208      	movs	r2, #8
  4010ec:	305c      	adds	r0, #92	; 0x5c
  4010ee:	f7ff fe79 	bl	400de4 <memset>
  4010f2:	4b05      	ldr	r3, [pc, #20]	; (401108 <std.isra.0+0x38>)
  4010f4:	6263      	str	r3, [r4, #36]	; 0x24
  4010f6:	4b05      	ldr	r3, [pc, #20]	; (40110c <std.isra.0+0x3c>)
  4010f8:	62a3      	str	r3, [r4, #40]	; 0x28
  4010fa:	4b05      	ldr	r3, [pc, #20]	; (401110 <std.isra.0+0x40>)
  4010fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  4010fe:	4b05      	ldr	r3, [pc, #20]	; (401114 <std.isra.0+0x44>)
  401100:	6224      	str	r4, [r4, #32]
  401102:	6323      	str	r3, [r4, #48]	; 0x30
  401104:	bd10      	pop	{r4, pc}
  401106:	bf00      	nop
  401108:	00401429 	.word	0x00401429
  40110c:	0040144b 	.word	0x0040144b
  401110:	00401483 	.word	0x00401483
  401114:	004014a7 	.word	0x004014a7

00401118 <__sfmoreglue>:
  401118:	b570      	push	{r4, r5, r6, lr}
  40111a:	1e4a      	subs	r2, r1, #1
  40111c:	2568      	movs	r5, #104	; 0x68
  40111e:	4355      	muls	r5, r2
  401120:	460e      	mov	r6, r1
  401122:	f105 0174 	add.w	r1, r5, #116	; 0x74
  401126:	f000 f911 	bl	40134c <_malloc_r>
  40112a:	4604      	mov	r4, r0
  40112c:	b140      	cbz	r0, 401140 <__sfmoreglue+0x28>
  40112e:	2100      	movs	r1, #0
  401130:	e880 0042 	stmia.w	r0, {r1, r6}
  401134:	300c      	adds	r0, #12
  401136:	60a0      	str	r0, [r4, #8]
  401138:	f105 0268 	add.w	r2, r5, #104	; 0x68
  40113c:	f7ff fe52 	bl	400de4 <memset>
  401140:	4620      	mov	r0, r4
  401142:	bd70      	pop	{r4, r5, r6, pc}

00401144 <__sinit>:
  401144:	6983      	ldr	r3, [r0, #24]
  401146:	b510      	push	{r4, lr}
  401148:	4604      	mov	r4, r0
  40114a:	bb33      	cbnz	r3, 40119a <__sinit+0x56>
  40114c:	6483      	str	r3, [r0, #72]	; 0x48
  40114e:	64c3      	str	r3, [r0, #76]	; 0x4c
  401150:	6503      	str	r3, [r0, #80]	; 0x50
  401152:	4b12      	ldr	r3, [pc, #72]	; (40119c <__sinit+0x58>)
  401154:	4a12      	ldr	r2, [pc, #72]	; (4011a0 <__sinit+0x5c>)
  401156:	681b      	ldr	r3, [r3, #0]
  401158:	6282      	str	r2, [r0, #40]	; 0x28
  40115a:	4298      	cmp	r0, r3
  40115c:	bf04      	itt	eq
  40115e:	2301      	moveq	r3, #1
  401160:	6183      	streq	r3, [r0, #24]
  401162:	f000 f81f 	bl	4011a4 <__sfp>
  401166:	6060      	str	r0, [r4, #4]
  401168:	4620      	mov	r0, r4
  40116a:	f000 f81b 	bl	4011a4 <__sfp>
  40116e:	60a0      	str	r0, [r4, #8]
  401170:	4620      	mov	r0, r4
  401172:	f000 f817 	bl	4011a4 <__sfp>
  401176:	2200      	movs	r2, #0
  401178:	60e0      	str	r0, [r4, #12]
  40117a:	2104      	movs	r1, #4
  40117c:	6860      	ldr	r0, [r4, #4]
  40117e:	f7ff ffa7 	bl	4010d0 <std.isra.0>
  401182:	2201      	movs	r2, #1
  401184:	2109      	movs	r1, #9
  401186:	68a0      	ldr	r0, [r4, #8]
  401188:	f7ff ffa2 	bl	4010d0 <std.isra.0>
  40118c:	2202      	movs	r2, #2
  40118e:	2112      	movs	r1, #18
  401190:	68e0      	ldr	r0, [r4, #12]
  401192:	f7ff ff9d 	bl	4010d0 <std.isra.0>
  401196:	2301      	movs	r3, #1
  401198:	61a3      	str	r3, [r4, #24]
  40119a:	bd10      	pop	{r4, pc}
  40119c:	00401604 	.word	0x00401604
  4011a0:	004010c5 	.word	0x004010c5

004011a4 <__sfp>:
  4011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011a6:	4b1c      	ldr	r3, [pc, #112]	; (401218 <__sfp+0x74>)
  4011a8:	681e      	ldr	r6, [r3, #0]
  4011aa:	69b3      	ldr	r3, [r6, #24]
  4011ac:	4607      	mov	r7, r0
  4011ae:	b913      	cbnz	r3, 4011b6 <__sfp+0x12>
  4011b0:	4630      	mov	r0, r6
  4011b2:	f7ff ffc7 	bl	401144 <__sinit>
  4011b6:	3648      	adds	r6, #72	; 0x48
  4011b8:	68b4      	ldr	r4, [r6, #8]
  4011ba:	6873      	ldr	r3, [r6, #4]
  4011bc:	3b01      	subs	r3, #1
  4011be:	d503      	bpl.n	4011c8 <__sfp+0x24>
  4011c0:	6833      	ldr	r3, [r6, #0]
  4011c2:	b133      	cbz	r3, 4011d2 <__sfp+0x2e>
  4011c4:	6836      	ldr	r6, [r6, #0]
  4011c6:	e7f7      	b.n	4011b8 <__sfp+0x14>
  4011c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  4011cc:	b16d      	cbz	r5, 4011ea <__sfp+0x46>
  4011ce:	3468      	adds	r4, #104	; 0x68
  4011d0:	e7f4      	b.n	4011bc <__sfp+0x18>
  4011d2:	2104      	movs	r1, #4
  4011d4:	4638      	mov	r0, r7
  4011d6:	f7ff ff9f 	bl	401118 <__sfmoreglue>
  4011da:	6030      	str	r0, [r6, #0]
  4011dc:	2800      	cmp	r0, #0
  4011de:	d1f1      	bne.n	4011c4 <__sfp+0x20>
  4011e0:	230c      	movs	r3, #12
  4011e2:	603b      	str	r3, [r7, #0]
  4011e4:	4604      	mov	r4, r0
  4011e6:	4620      	mov	r0, r4
  4011e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4011ee:	81e3      	strh	r3, [r4, #14]
  4011f0:	2301      	movs	r3, #1
  4011f2:	81a3      	strh	r3, [r4, #12]
  4011f4:	6665      	str	r5, [r4, #100]	; 0x64
  4011f6:	6025      	str	r5, [r4, #0]
  4011f8:	60a5      	str	r5, [r4, #8]
  4011fa:	6065      	str	r5, [r4, #4]
  4011fc:	6125      	str	r5, [r4, #16]
  4011fe:	6165      	str	r5, [r4, #20]
  401200:	61a5      	str	r5, [r4, #24]
  401202:	2208      	movs	r2, #8
  401204:	4629      	mov	r1, r5
  401206:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  40120a:	f7ff fdeb 	bl	400de4 <memset>
  40120e:	6365      	str	r5, [r4, #52]	; 0x34
  401210:	63a5      	str	r5, [r4, #56]	; 0x38
  401212:	64a5      	str	r5, [r4, #72]	; 0x48
  401214:	64e5      	str	r5, [r4, #76]	; 0x4c
  401216:	e7e6      	b.n	4011e6 <__sfp+0x42>
  401218:	00401604 	.word	0x00401604

0040121c <_fwalk_reent>:
  40121c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401220:	4680      	mov	r8, r0
  401222:	4689      	mov	r9, r1
  401224:	f100 0448 	add.w	r4, r0, #72	; 0x48
  401228:	2600      	movs	r6, #0
  40122a:	b914      	cbnz	r4, 401232 <_fwalk_reent+0x16>
  40122c:	4630      	mov	r0, r6
  40122e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401232:	68a5      	ldr	r5, [r4, #8]
  401234:	6867      	ldr	r7, [r4, #4]
  401236:	3f01      	subs	r7, #1
  401238:	d501      	bpl.n	40123e <_fwalk_reent+0x22>
  40123a:	6824      	ldr	r4, [r4, #0]
  40123c:	e7f5      	b.n	40122a <_fwalk_reent+0xe>
  40123e:	89ab      	ldrh	r3, [r5, #12]
  401240:	2b01      	cmp	r3, #1
  401242:	d907      	bls.n	401254 <_fwalk_reent+0x38>
  401244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  401248:	3301      	adds	r3, #1
  40124a:	d003      	beq.n	401254 <_fwalk_reent+0x38>
  40124c:	4629      	mov	r1, r5
  40124e:	4640      	mov	r0, r8
  401250:	47c8      	blx	r9
  401252:	4306      	orrs	r6, r0
  401254:	3568      	adds	r5, #104	; 0x68
  401256:	e7ee      	b.n	401236 <_fwalk_reent+0x1a>

00401258 <__swhatbuf_r>:
  401258:	b570      	push	{r4, r5, r6, lr}
  40125a:	460e      	mov	r6, r1
  40125c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401260:	2900      	cmp	r1, #0
  401262:	b090      	sub	sp, #64	; 0x40
  401264:	4614      	mov	r4, r2
  401266:	461d      	mov	r5, r3
  401268:	da07      	bge.n	40127a <__swhatbuf_r+0x22>
  40126a:	2300      	movs	r3, #0
  40126c:	602b      	str	r3, [r5, #0]
  40126e:	89b3      	ldrh	r3, [r6, #12]
  401270:	061a      	lsls	r2, r3, #24
  401272:	d410      	bmi.n	401296 <__swhatbuf_r+0x3e>
  401274:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401278:	e00e      	b.n	401298 <__swhatbuf_r+0x40>
  40127a:	aa01      	add	r2, sp, #4
  40127c:	f000 f93a 	bl	4014f4 <_fstat_r>
  401280:	2800      	cmp	r0, #0
  401282:	dbf2      	blt.n	40126a <__swhatbuf_r+0x12>
  401284:	9a02      	ldr	r2, [sp, #8]
  401286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40128a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  40128e:	425a      	negs	r2, r3
  401290:	415a      	adcs	r2, r3
  401292:	602a      	str	r2, [r5, #0]
  401294:	e7ee      	b.n	401274 <__swhatbuf_r+0x1c>
  401296:	2340      	movs	r3, #64	; 0x40
  401298:	2000      	movs	r0, #0
  40129a:	6023      	str	r3, [r4, #0]
  40129c:	b010      	add	sp, #64	; 0x40
  40129e:	bd70      	pop	{r4, r5, r6, pc}

004012a0 <malloc>:
  4012a0:	4b02      	ldr	r3, [pc, #8]	; (4012ac <malloc+0xc>)
  4012a2:	4601      	mov	r1, r0
  4012a4:	6818      	ldr	r0, [r3, #0]
  4012a6:	f000 b851 	b.w	40134c <_malloc_r>
  4012aa:	bf00      	nop
  4012ac:	20400024 	.word	0x20400024

004012b0 <_free_r>:
  4012b0:	b538      	push	{r3, r4, r5, lr}
  4012b2:	4605      	mov	r5, r0
  4012b4:	2900      	cmp	r1, #0
  4012b6:	d045      	beq.n	401344 <_free_r+0x94>
  4012b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4012bc:	1f0c      	subs	r4, r1, #4
  4012be:	2b00      	cmp	r3, #0
  4012c0:	bfb8      	it	lt
  4012c2:	18e4      	addlt	r4, r4, r3
  4012c4:	f000 f93a 	bl	40153c <__malloc_lock>
  4012c8:	4a1f      	ldr	r2, [pc, #124]	; (401348 <_free_r+0x98>)
  4012ca:	6813      	ldr	r3, [r2, #0]
  4012cc:	4610      	mov	r0, r2
  4012ce:	b933      	cbnz	r3, 4012de <_free_r+0x2e>
  4012d0:	6063      	str	r3, [r4, #4]
  4012d2:	6014      	str	r4, [r2, #0]
  4012d4:	4628      	mov	r0, r5
  4012d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4012da:	f000 b930 	b.w	40153e <__malloc_unlock>
  4012de:	42a3      	cmp	r3, r4
  4012e0:	d90c      	bls.n	4012fc <_free_r+0x4c>
  4012e2:	6821      	ldr	r1, [r4, #0]
  4012e4:	1862      	adds	r2, r4, r1
  4012e6:	4293      	cmp	r3, r2
  4012e8:	bf04      	itt	eq
  4012ea:	681a      	ldreq	r2, [r3, #0]
  4012ec:	685b      	ldreq	r3, [r3, #4]
  4012ee:	6063      	str	r3, [r4, #4]
  4012f0:	bf04      	itt	eq
  4012f2:	1852      	addeq	r2, r2, r1
  4012f4:	6022      	streq	r2, [r4, #0]
  4012f6:	6004      	str	r4, [r0, #0]
  4012f8:	e7ec      	b.n	4012d4 <_free_r+0x24>
  4012fa:	4613      	mov	r3, r2
  4012fc:	685a      	ldr	r2, [r3, #4]
  4012fe:	b10a      	cbz	r2, 401304 <_free_r+0x54>
  401300:	42a2      	cmp	r2, r4
  401302:	d9fa      	bls.n	4012fa <_free_r+0x4a>
  401304:	6819      	ldr	r1, [r3, #0]
  401306:	1858      	adds	r0, r3, r1
  401308:	42a0      	cmp	r0, r4
  40130a:	d10b      	bne.n	401324 <_free_r+0x74>
  40130c:	6820      	ldr	r0, [r4, #0]
  40130e:	4401      	add	r1, r0
  401310:	1858      	adds	r0, r3, r1
  401312:	4282      	cmp	r2, r0
  401314:	6019      	str	r1, [r3, #0]
  401316:	d1dd      	bne.n	4012d4 <_free_r+0x24>
  401318:	6810      	ldr	r0, [r2, #0]
  40131a:	6852      	ldr	r2, [r2, #4]
  40131c:	605a      	str	r2, [r3, #4]
  40131e:	4401      	add	r1, r0
  401320:	6019      	str	r1, [r3, #0]
  401322:	e7d7      	b.n	4012d4 <_free_r+0x24>
  401324:	d902      	bls.n	40132c <_free_r+0x7c>
  401326:	230c      	movs	r3, #12
  401328:	602b      	str	r3, [r5, #0]
  40132a:	e7d3      	b.n	4012d4 <_free_r+0x24>
  40132c:	6820      	ldr	r0, [r4, #0]
  40132e:	1821      	adds	r1, r4, r0
  401330:	428a      	cmp	r2, r1
  401332:	bf04      	itt	eq
  401334:	6811      	ldreq	r1, [r2, #0]
  401336:	6852      	ldreq	r2, [r2, #4]
  401338:	6062      	str	r2, [r4, #4]
  40133a:	bf04      	itt	eq
  40133c:	1809      	addeq	r1, r1, r0
  40133e:	6021      	streq	r1, [r4, #0]
  401340:	605c      	str	r4, [r3, #4]
  401342:	e7c7      	b.n	4012d4 <_free_r+0x24>
  401344:	bd38      	pop	{r3, r4, r5, pc}
  401346:	bf00      	nop
  401348:	204000b0 	.word	0x204000b0

0040134c <_malloc_r>:
  40134c:	b570      	push	{r4, r5, r6, lr}
  40134e:	1ccd      	adds	r5, r1, #3
  401350:	f025 0503 	bic.w	r5, r5, #3
  401354:	3508      	adds	r5, #8
  401356:	2d0c      	cmp	r5, #12
  401358:	bf38      	it	cc
  40135a:	250c      	movcc	r5, #12
  40135c:	2d00      	cmp	r5, #0
  40135e:	4606      	mov	r6, r0
  401360:	db01      	blt.n	401366 <_malloc_r+0x1a>
  401362:	42a9      	cmp	r1, r5
  401364:	d903      	bls.n	40136e <_malloc_r+0x22>
  401366:	230c      	movs	r3, #12
  401368:	6033      	str	r3, [r6, #0]
  40136a:	2000      	movs	r0, #0
  40136c:	bd70      	pop	{r4, r5, r6, pc}
  40136e:	f000 f8e5 	bl	40153c <__malloc_lock>
  401372:	4a23      	ldr	r2, [pc, #140]	; (401400 <_malloc_r+0xb4>)
  401374:	6814      	ldr	r4, [r2, #0]
  401376:	4621      	mov	r1, r4
  401378:	b991      	cbnz	r1, 4013a0 <_malloc_r+0x54>
  40137a:	4c22      	ldr	r4, [pc, #136]	; (401404 <_malloc_r+0xb8>)
  40137c:	6823      	ldr	r3, [r4, #0]
  40137e:	b91b      	cbnz	r3, 401388 <_malloc_r+0x3c>
  401380:	4630      	mov	r0, r6
  401382:	f000 f841 	bl	401408 <_sbrk_r>
  401386:	6020      	str	r0, [r4, #0]
  401388:	4629      	mov	r1, r5
  40138a:	4630      	mov	r0, r6
  40138c:	f000 f83c 	bl	401408 <_sbrk_r>
  401390:	1c43      	adds	r3, r0, #1
  401392:	d126      	bne.n	4013e2 <_malloc_r+0x96>
  401394:	230c      	movs	r3, #12
  401396:	6033      	str	r3, [r6, #0]
  401398:	4630      	mov	r0, r6
  40139a:	f000 f8d0 	bl	40153e <__malloc_unlock>
  40139e:	e7e4      	b.n	40136a <_malloc_r+0x1e>
  4013a0:	680b      	ldr	r3, [r1, #0]
  4013a2:	1b5b      	subs	r3, r3, r5
  4013a4:	d41a      	bmi.n	4013dc <_malloc_r+0x90>
  4013a6:	2b0b      	cmp	r3, #11
  4013a8:	d90f      	bls.n	4013ca <_malloc_r+0x7e>
  4013aa:	600b      	str	r3, [r1, #0]
  4013ac:	50cd      	str	r5, [r1, r3]
  4013ae:	18cc      	adds	r4, r1, r3
  4013b0:	4630      	mov	r0, r6
  4013b2:	f000 f8c4 	bl	40153e <__malloc_unlock>
  4013b6:	f104 000b 	add.w	r0, r4, #11
  4013ba:	1d23      	adds	r3, r4, #4
  4013bc:	f020 0007 	bic.w	r0, r0, #7
  4013c0:	1ac3      	subs	r3, r0, r3
  4013c2:	d01b      	beq.n	4013fc <_malloc_r+0xb0>
  4013c4:	425a      	negs	r2, r3
  4013c6:	50e2      	str	r2, [r4, r3]
  4013c8:	bd70      	pop	{r4, r5, r6, pc}
  4013ca:	428c      	cmp	r4, r1
  4013cc:	bf0d      	iteet	eq
  4013ce:	6863      	ldreq	r3, [r4, #4]
  4013d0:	684b      	ldrne	r3, [r1, #4]
  4013d2:	6063      	strne	r3, [r4, #4]
  4013d4:	6013      	streq	r3, [r2, #0]
  4013d6:	bf18      	it	ne
  4013d8:	460c      	movne	r4, r1
  4013da:	e7e9      	b.n	4013b0 <_malloc_r+0x64>
  4013dc:	460c      	mov	r4, r1
  4013de:	6849      	ldr	r1, [r1, #4]
  4013e0:	e7ca      	b.n	401378 <_malloc_r+0x2c>
  4013e2:	1cc4      	adds	r4, r0, #3
  4013e4:	f024 0403 	bic.w	r4, r4, #3
  4013e8:	42a0      	cmp	r0, r4
  4013ea:	d005      	beq.n	4013f8 <_malloc_r+0xac>
  4013ec:	1a21      	subs	r1, r4, r0
  4013ee:	4630      	mov	r0, r6
  4013f0:	f000 f80a 	bl	401408 <_sbrk_r>
  4013f4:	3001      	adds	r0, #1
  4013f6:	d0cd      	beq.n	401394 <_malloc_r+0x48>
  4013f8:	6025      	str	r5, [r4, #0]
  4013fa:	e7d9      	b.n	4013b0 <_malloc_r+0x64>
  4013fc:	bd70      	pop	{r4, r5, r6, pc}
  4013fe:	bf00      	nop
  401400:	204000b0 	.word	0x204000b0
  401404:	204000b4 	.word	0x204000b4

00401408 <_sbrk_r>:
  401408:	b538      	push	{r3, r4, r5, lr}
  40140a:	4c06      	ldr	r4, [pc, #24]	; (401424 <_sbrk_r+0x1c>)
  40140c:	2300      	movs	r3, #0
  40140e:	4605      	mov	r5, r0
  401410:	4608      	mov	r0, r1
  401412:	6023      	str	r3, [r4, #0]
  401414:	f7ff f98a 	bl	40072c <_sbrk>
  401418:	1c43      	adds	r3, r0, #1
  40141a:	d102      	bne.n	401422 <_sbrk_r+0x1a>
  40141c:	6823      	ldr	r3, [r4, #0]
  40141e:	b103      	cbz	r3, 401422 <_sbrk_r+0x1a>
  401420:	602b      	str	r3, [r5, #0]
  401422:	bd38      	pop	{r3, r4, r5, pc}
  401424:	20400108 	.word	0x20400108

00401428 <__sread>:
  401428:	b510      	push	{r4, lr}
  40142a:	460c      	mov	r4, r1
  40142c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401430:	f000 f886 	bl	401540 <_read_r>
  401434:	2800      	cmp	r0, #0
  401436:	bfab      	itete	ge
  401438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  40143a:	89a3      	ldrhlt	r3, [r4, #12]
  40143c:	181b      	addge	r3, r3, r0
  40143e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  401442:	bfac      	ite	ge
  401444:	6563      	strge	r3, [r4, #84]	; 0x54
  401446:	81a3      	strhlt	r3, [r4, #12]
  401448:	bd10      	pop	{r4, pc}

0040144a <__swrite>:
  40144a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40144e:	461f      	mov	r7, r3
  401450:	898b      	ldrh	r3, [r1, #12]
  401452:	05db      	lsls	r3, r3, #23
  401454:	4605      	mov	r5, r0
  401456:	460c      	mov	r4, r1
  401458:	4616      	mov	r6, r2
  40145a:	d505      	bpl.n	401468 <__swrite+0x1e>
  40145c:	2302      	movs	r3, #2
  40145e:	2200      	movs	r2, #0
  401460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401464:	f000 f858 	bl	401518 <_lseek_r>
  401468:	89a3      	ldrh	r3, [r4, #12]
  40146a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40146e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  401472:	81a3      	strh	r3, [r4, #12]
  401474:	4632      	mov	r2, r6
  401476:	463b      	mov	r3, r7
  401478:	4628      	mov	r0, r5
  40147a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40147e:	f000 b817 	b.w	4014b0 <_write_r>

00401482 <__sseek>:
  401482:	b510      	push	{r4, lr}
  401484:	460c      	mov	r4, r1
  401486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40148a:	f000 f845 	bl	401518 <_lseek_r>
  40148e:	1c43      	adds	r3, r0, #1
  401490:	89a3      	ldrh	r3, [r4, #12]
  401492:	bf15      	itete	ne
  401494:	6560      	strne	r0, [r4, #84]	; 0x54
  401496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40149a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40149e:	81a3      	strheq	r3, [r4, #12]
  4014a0:	bf18      	it	ne
  4014a2:	81a3      	strhne	r3, [r4, #12]
  4014a4:	bd10      	pop	{r4, pc}

004014a6 <__sclose>:
  4014a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4014aa:	f000 b813 	b.w	4014d4 <_close_r>
	...

004014b0 <_write_r>:
  4014b0:	b538      	push	{r3, r4, r5, lr}
  4014b2:	4c07      	ldr	r4, [pc, #28]	; (4014d0 <_write_r+0x20>)
  4014b4:	4605      	mov	r5, r0
  4014b6:	4608      	mov	r0, r1
  4014b8:	4611      	mov	r1, r2
  4014ba:	2200      	movs	r2, #0
  4014bc:	6022      	str	r2, [r4, #0]
  4014be:	461a      	mov	r2, r3
  4014c0:	f7ff fc0e 	bl	400ce0 <_write>
  4014c4:	1c43      	adds	r3, r0, #1
  4014c6:	d102      	bne.n	4014ce <_write_r+0x1e>
  4014c8:	6823      	ldr	r3, [r4, #0]
  4014ca:	b103      	cbz	r3, 4014ce <_write_r+0x1e>
  4014cc:	602b      	str	r3, [r5, #0]
  4014ce:	bd38      	pop	{r3, r4, r5, pc}
  4014d0:	20400108 	.word	0x20400108

004014d4 <_close_r>:
  4014d4:	b538      	push	{r3, r4, r5, lr}
  4014d6:	4c06      	ldr	r4, [pc, #24]	; (4014f0 <_close_r+0x1c>)
  4014d8:	2300      	movs	r3, #0
  4014da:	4605      	mov	r5, r0
  4014dc:	4608      	mov	r0, r1
  4014de:	6023      	str	r3, [r4, #0]
  4014e0:	f7ff f936 	bl	400750 <_close>
  4014e4:	1c43      	adds	r3, r0, #1
  4014e6:	d102      	bne.n	4014ee <_close_r+0x1a>
  4014e8:	6823      	ldr	r3, [r4, #0]
  4014ea:	b103      	cbz	r3, 4014ee <_close_r+0x1a>
  4014ec:	602b      	str	r3, [r5, #0]
  4014ee:	bd38      	pop	{r3, r4, r5, pc}
  4014f0:	20400108 	.word	0x20400108

004014f4 <_fstat_r>:
  4014f4:	b538      	push	{r3, r4, r5, lr}
  4014f6:	4c07      	ldr	r4, [pc, #28]	; (401514 <_fstat_r+0x20>)
  4014f8:	2300      	movs	r3, #0
  4014fa:	4605      	mov	r5, r0
  4014fc:	4608      	mov	r0, r1
  4014fe:	4611      	mov	r1, r2
  401500:	6023      	str	r3, [r4, #0]
  401502:	f7ff f928 	bl	400756 <_fstat>
  401506:	1c43      	adds	r3, r0, #1
  401508:	d102      	bne.n	401510 <_fstat_r+0x1c>
  40150a:	6823      	ldr	r3, [r4, #0]
  40150c:	b103      	cbz	r3, 401510 <_fstat_r+0x1c>
  40150e:	602b      	str	r3, [r5, #0]
  401510:	bd38      	pop	{r3, r4, r5, pc}
  401512:	bf00      	nop
  401514:	20400108 	.word	0x20400108

00401518 <_lseek_r>:
  401518:	b538      	push	{r3, r4, r5, lr}
  40151a:	4c07      	ldr	r4, [pc, #28]	; (401538 <_lseek_r+0x20>)
  40151c:	4605      	mov	r5, r0
  40151e:	4608      	mov	r0, r1
  401520:	4611      	mov	r1, r2
  401522:	2200      	movs	r2, #0
  401524:	6022      	str	r2, [r4, #0]
  401526:	461a      	mov	r2, r3
  401528:	f7ff f91a 	bl	400760 <_lseek>
  40152c:	1c43      	adds	r3, r0, #1
  40152e:	d102      	bne.n	401536 <_lseek_r+0x1e>
  401530:	6823      	ldr	r3, [r4, #0]
  401532:	b103      	cbz	r3, 401536 <_lseek_r+0x1e>
  401534:	602b      	str	r3, [r5, #0]
  401536:	bd38      	pop	{r3, r4, r5, pc}
  401538:	20400108 	.word	0x20400108

0040153c <__malloc_lock>:
  40153c:	4770      	bx	lr

0040153e <__malloc_unlock>:
  40153e:	4770      	bx	lr

00401540 <_read_r>:
  401540:	b538      	push	{r3, r4, r5, lr}
  401542:	4c07      	ldr	r4, [pc, #28]	; (401560 <_read_r+0x20>)
  401544:	4605      	mov	r5, r0
  401546:	4608      	mov	r0, r1
  401548:	4611      	mov	r1, r2
  40154a:	2200      	movs	r2, #0
  40154c:	6022      	str	r2, [r4, #0]
  40154e:	461a      	mov	r2, r3
  401550:	f7ff fbb4 	bl	400cbc <_read>
  401554:	1c43      	adds	r3, r0, #1
  401556:	d102      	bne.n	40155e <_read_r+0x1e>
  401558:	6823      	ldr	r3, [r4, #0]
  40155a:	b103      	cbz	r3, 40155e <_read_r+0x1e>
  40155c:	602b      	str	r3, [r5, #0]
  40155e:	bd38      	pop	{r3, r4, r5, pc}
  401560:	20400108 	.word	0x20400108
  401564:	682f2e2e 	.word	0x682f2e2e
  401568:	732f6c61 	.word	0x732f6c61
  40156c:	682f6372 	.word	0x682f6372
  401570:	695f6c61 	.word	0x695f6c61
  401574:	00632e6f 	.word	0x00632e6f
  401578:	682f2e2e 	.word	0x682f2e2e
  40157c:	732f6c61 	.word	0x732f6c61
  401580:	682f6372 	.word	0x682f6372
  401584:	745f6c61 	.word	0x745f6c61
  401588:	72656d69 	.word	0x72656d69
  40158c:	0000632e 	.word	0x0000632e
  401590:	682f2e2e 	.word	0x682f2e2e
  401594:	732f6c61 	.word	0x732f6c61
  401598:	682f6372 	.word	0x682f6372
  40159c:	755f6c61 	.word	0x755f6c61
  4015a0:	74726173 	.word	0x74726173
  4015a4:	6e79735f 	.word	0x6e79735f
  4015a8:	00632e63 	.word	0x00632e63
  4015ac:	682f2e2e 	.word	0x682f2e2e
  4015b0:	752f6c61 	.word	0x752f6c61
  4015b4:	736c6974 	.word	0x736c6974
  4015b8:	6372732f 	.word	0x6372732f
  4015bc:	6974752f 	.word	0x6974752f
  4015c0:	6c5f736c 	.word	0x6c5f736c
  4015c4:	2e747369 	.word	0x2e747369
  4015c8:	00000063 	.word	0x00000063
  4015cc:	682f2e2e 	.word	0x682f2e2e
  4015d0:	742f6c70 	.word	0x742f6c70
  4015d4:	70682f63 	.word	0x70682f63
  4015d8:	63745f6c 	.word	0x63745f6c
  4015dc:	0000632e 	.word	0x0000632e

004015e0 <_uarts>:
  4015e0:	00000001 00000800 00000051 682f2e2e     ........Q...../h
  4015f0:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  401600:	0000632e                                .c..

00401604 <_global_impure_ptr>:
  401604:	20400028                                (.@ 

00401608 <__sf_fake_stderr>:
	...

00401628 <__sf_fake_stdin>:
	...

00401648 <__sf_fake_stdout>:
	...

00401668 <_init>:
  401668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40166a:	bf00      	nop
  40166c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40166e:	bc08      	pop	{r3}
  401670:	469e      	mov	lr, r3
  401672:	4770      	bx	lr

00401674 <__init_array_start>:
  401674:	0040018d 	.word	0x0040018d

00401678 <_fini>:
  401678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40167a:	bf00      	nop
  40167c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40167e:	bc08      	pop	{r3}
  401680:	469e      	mov	lr, r3
  401682:	4770      	bx	lr

00401684 <__fini_array_start>:
  401684:	00400169 	.word	0x00400169
