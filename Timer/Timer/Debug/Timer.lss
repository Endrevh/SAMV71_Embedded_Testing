
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001718  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20400000  00401718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000088  20400088  004017a0  00020088  2**2
                  ALLOC
  3 .heap         00000200  20400110  00401828  00020088  2**0
                  ALLOC
  4 .stack        00000400  20400310  00401a28  00020088  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010770  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002bef  00000000  00000000  0003087f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004497  00000000  00000000  0003346e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006f8  00000000  00000000  00037905  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005d8  00000000  00000000  00037ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003f818  00000000  00000000  000385d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011635  00000000  00000000  00077ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0014565d  00000000  00000000  00089422  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001568  00000000  00000000  001cea80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 07 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     ..@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40006c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	09 0a 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400088 	.word	0x20400088
  400184:	00000000 	.word	0x00000000
  400188:	00401718 	.word	0x00401718

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00401718 	.word	0x00401718
  4001c8:	2040008c 	.word	0x2040008c
  4001cc:	00401718 	.word	0x00401718
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400309 	.word	0x00400309
  4001e4:	00400e0d 	.word	0x00400e0d

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	00401718 	.word	0x00401718
  400238:	20400088 	.word	0x20400088
  40023c:	20400088 	.word	0x20400088
  400240:	20400110 	.word	0x20400110
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	00400e2d 	.word	0x00400e2d
  400250:	00400c85 	.word	0x00400c85

00400254 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  400254:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400256:	4b08      	ldr	r3, [pc, #32]	; (400278 <TIMER_0_init+0x24>)
  400258:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40025a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40025e:	d103      	bne.n	400268 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400260:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400264:	4b04      	ldr	r3, [pc, #16]	; (400278 <TIMER_0_init+0x24>)
  400266:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400268:	4b04      	ldr	r3, [pc, #16]	; (40027c <TIMER_0_init+0x28>)
  40026a:	4798      	blx	r3
  40026c:	4602      	mov	r2, r0
  40026e:	4904      	ldr	r1, [pc, #16]	; (400280 <TIMER_0_init+0x2c>)
  400270:	4804      	ldr	r0, [pc, #16]	; (400284 <TIMER_0_init+0x30>)
  400272:	4b05      	ldr	r3, [pc, #20]	; (400288 <TIMER_0_init+0x34>)
  400274:	4798      	blx	r3
  400276:	bd08      	pop	{r3, pc}
  400278:	400e0600 	.word	0x400e0600
  40027c:	00400a05 	.word	0x00400a05
  400280:	4000c000 	.word	0x4000c000
  400284:	204000c8 	.word	0x204000c8
  400288:	00400489 	.word	0x00400489

0040028c <TARGET_IO_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <TARGET_IO_PORT_init+0x2c>)
  40028e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400290:	f022 0220 	bic.w	r2, r2, #32
  400294:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400296:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400298:	f042 0220 	orr.w	r2, r2, #32
  40029c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40029e:	2220      	movs	r2, #32
  4002a0:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  4002a8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4002b0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002b2:	2240      	movs	r2, #64	; 0x40
  4002b4:	605a      	str	r2, [r3, #4]
  4002b6:	4770      	bx	lr
  4002b8:	400e0e00 	.word	0x400e0e00

004002bc <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002bc:	4b04      	ldr	r3, [pc, #16]	; (4002d0 <TARGET_IO_CLOCK_init+0x14>)
  4002be:	699b      	ldr	r3, [r3, #24]
  4002c0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002c4:	d103      	bne.n	4002ce <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002c6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4002ca:	4b01      	ldr	r3, [pc, #4]	; (4002d0 <TARGET_IO_CLOCK_init+0x14>)
  4002cc:	611a      	str	r2, [r3, #16]
  4002ce:	4770      	bx	lr
  4002d0:	400e0600 	.word	0x400e0600

004002d4 <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_UART1);
}

void TARGET_IO_init(void)
{
  4002d4:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  4002d6:	4b06      	ldr	r3, [pc, #24]	; (4002f0 <TARGET_IO_init+0x1c>)
  4002d8:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, UART1, _uart_get_usart_sync());
  4002da:	4b06      	ldr	r3, [pc, #24]	; (4002f4 <TARGET_IO_init+0x20>)
  4002dc:	4798      	blx	r3
  4002de:	4602      	mov	r2, r0
  4002e0:	4905      	ldr	r1, [pc, #20]	; (4002f8 <TARGET_IO_init+0x24>)
  4002e2:	4806      	ldr	r0, [pc, #24]	; (4002fc <TARGET_IO_init+0x28>)
  4002e4:	4b06      	ldr	r3, [pc, #24]	; (400300 <TARGET_IO_init+0x2c>)
  4002e6:	4798      	blx	r3
	TARGET_IO_PORT_init();
  4002e8:	4b06      	ldr	r3, [pc, #24]	; (400304 <TARGET_IO_init+0x30>)
  4002ea:	4798      	blx	r3
  4002ec:	bd08      	pop	{r3, pc}
  4002ee:	bf00      	nop
  4002f0:	004002bd 	.word	0x004002bd
  4002f4:	00400c51 	.word	0x00400c51
  4002f8:	400e0a00 	.word	0x400e0a00
  4002fc:	204000bc 	.word	0x204000bc
  400300:	00400679 	.word	0x00400679
  400304:	0040028d 	.word	0x0040028d

00400308 <system_init>:
}

void system_init(void)
{
  400308:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40030a:	4b06      	ldr	r3, [pc, #24]	; (400324 <system_init+0x1c>)
  40030c:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40030e:	4a06      	ldr	r2, [pc, #24]	; (400328 <system_init+0x20>)
  400310:	6853      	ldr	r3, [r2, #4]
  400312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400316:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	TIMER_0_init();
  400318:	4b04      	ldr	r3, [pc, #16]	; (40032c <system_init+0x24>)
  40031a:	4798      	blx	r3

	TARGET_IO_init();
  40031c:	4b04      	ldr	r3, [pc, #16]	; (400330 <system_init+0x28>)
  40031e:	4798      	blx	r3
  400320:	bd08      	pop	{r3, pc}
  400322:	bf00      	nop
  400324:	004007b5 	.word	0x004007b5
  400328:	400e1850 	.word	0x400e1850
  40032c:	00400255 	.word	0x00400255
  400330:	004002d5 	.word	0x004002d5

00400334 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400334:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400338:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40033a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40033c:	f3bf 8f5f 	dmb	sy
  400340:	4770      	bx	lr

00400342 <atomic_leave_critical>:
  400342:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400346:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400348:	f383 8810 	msr	PRIMASK, r3
  40034c:	4770      	bx	lr
	...

00400350 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  400350:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  400352:	4b04      	ldr	r3, [pc, #16]	; (400364 <delay_us+0x14>)
  400354:	681c      	ldr	r4, [r3, #0]
  400356:	4b04      	ldr	r3, [pc, #16]	; (400368 <delay_us+0x18>)
  400358:	4798      	blx	r3
  40035a:	4601      	mov	r1, r0
  40035c:	4620      	mov	r0, r4
  40035e:	4b03      	ldr	r3, [pc, #12]	; (40036c <delay_us+0x1c>)
  400360:	4798      	blx	r3
  400362:	bd10      	pop	{r4, pc}
  400364:	204000a4 	.word	0x204000a4
  400368:	004007a5 	.word	0x004007a5
  40036c:	004007af 	.word	0x004007af

00400370 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400370:	b570      	push	{r4, r5, r6, lr}
  400372:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400374:	4604      	mov	r4, r0
  400376:	460d      	mov	r5, r1
  400378:	2800      	cmp	r0, #0
  40037a:	bf18      	it	ne
  40037c:	2900      	cmpne	r1, #0
  40037e:	bf14      	ite	ne
  400380:	2001      	movne	r0, #1
  400382:	2000      	moveq	r0, #0
  400384:	2234      	movs	r2, #52	; 0x34
  400386:	4904      	ldr	r1, [pc, #16]	; (400398 <io_write+0x28>)
  400388:	4b04      	ldr	r3, [pc, #16]	; (40039c <io_write+0x2c>)
  40038a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  40038c:	6823      	ldr	r3, [r4, #0]
  40038e:	4632      	mov	r2, r6
  400390:	4629      	mov	r1, r5
  400392:	4620      	mov	r0, r4
  400394:	4798      	blx	r3
}
  400396:	bd70      	pop	{r4, r5, r6, pc}
  400398:	004015f4 	.word	0x004015f4
  40039c:	004006ed 	.word	0x004006ed

004003a0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4003a0:	b570      	push	{r4, r5, r6, lr}
  4003a2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4003a4:	4604      	mov	r4, r0
  4003a6:	460d      	mov	r5, r1
  4003a8:	2800      	cmp	r0, #0
  4003aa:	bf18      	it	ne
  4003ac:	2900      	cmpne	r1, #0
  4003ae:	bf14      	ite	ne
  4003b0:	2001      	movne	r0, #1
  4003b2:	2000      	moveq	r0, #0
  4003b4:	223d      	movs	r2, #61	; 0x3d
  4003b6:	4904      	ldr	r1, [pc, #16]	; (4003c8 <io_read+0x28>)
  4003b8:	4b04      	ldr	r3, [pc, #16]	; (4003cc <io_read+0x2c>)
  4003ba:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4003bc:	6863      	ldr	r3, [r4, #4]
  4003be:	4632      	mov	r2, r6
  4003c0:	4629      	mov	r1, r5
  4003c2:	4620      	mov	r0, r4
  4003c4:	4798      	blx	r3
}
  4003c6:	bd70      	pop	{r4, r5, r6, pc}
  4003c8:	004015f4 	.word	0x004015f4
  4003cc:	004006ed 	.word	0x004006ed

004003d0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4003d2:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4003d4:	b117      	cbz	r7, 4003dc <timer_add_timer_task+0xc>
  4003d6:	463c      	mov	r4, r7
  4003d8:	2600      	movs	r6, #0
  4003da:	e00b      	b.n	4003f4 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4003dc:	4b0e      	ldr	r3, [pc, #56]	; (400418 <timer_add_timer_task+0x48>)
  4003de:	4798      	blx	r3
		return;
  4003e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4003e2:	68a5      	ldr	r5, [r4, #8]
  4003e4:	442b      	add	r3, r5
  4003e6:	1a9b      	subs	r3, r3, r2
  4003e8:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4003ea:	688d      	ldr	r5, [r1, #8]
  4003ec:	42ab      	cmp	r3, r5
  4003ee:	d209      	bcs.n	400404 <timer_add_timer_task+0x34>
			break;
		prev = it;
  4003f0:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4003f2:	6824      	ldr	r4, [r4, #0]
  4003f4:	b134      	cbz	r4, 400404 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4003f6:	6863      	ldr	r3, [r4, #4]
  4003f8:	4293      	cmp	r3, r2
  4003fa:	d8f2      	bhi.n	4003e2 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  4003fc:	68a5      	ldr	r5, [r4, #8]
  4003fe:	1a9b      	subs	r3, r3, r2
  400400:	442b      	add	r3, r5
  400402:	e7f2      	b.n	4003ea <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400404:	42bc      	cmp	r4, r7
  400406:	d003      	beq.n	400410 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400408:	4630      	mov	r0, r6
  40040a:	4b04      	ldr	r3, [pc, #16]	; (40041c <timer_add_timer_task+0x4c>)
  40040c:	4798      	blx	r3
  40040e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400410:	4b01      	ldr	r3, [pc, #4]	; (400418 <timer_add_timer_task+0x48>)
  400412:	4798      	blx	r3
  400414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400416:	bf00      	nop
  400418:	00400709 	.word	0x00400709
  40041c:	00400735 	.word	0x00400735

00400420 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400422:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400424:	6906      	ldr	r6, [r0, #16]
  400426:	3601      	adds	r6, #1
  400428:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  40042a:	7e03      	ldrb	r3, [r0, #24]
  40042c:	f013 0f01 	tst.w	r3, #1
  400430:	d105      	bne.n	40043e <timer_process_counted+0x1e>
  400432:	7e03      	ldrb	r3, [r0, #24]
  400434:	f013 0f02 	tst.w	r3, #2
  400438:	d101      	bne.n	40043e <timer_process_counted+0x1e>
  40043a:	4605      	mov	r5, r0
  40043c:	e009      	b.n	400452 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  40043e:	7e03      	ldrb	r3, [r0, #24]
  400440:	f043 0302 	orr.w	r3, r3, #2
  400444:	7603      	strb	r3, [r0, #24]
		return;
  400446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400448:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  40044a:	68e3      	ldr	r3, [r4, #12]
  40044c:	4620      	mov	r0, r4
  40044e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400450:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400452:	b19c      	cbz	r4, 40047c <timer_process_counted+0x5c>
  400454:	6863      	ldr	r3, [r4, #4]
  400456:	1af3      	subs	r3, r6, r3
  400458:	68a2      	ldr	r2, [r4, #8]
  40045a:	4293      	cmp	r3, r2
  40045c:	d30e      	bcc.n	40047c <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  40045e:	f105 0714 	add.w	r7, r5, #20
  400462:	4638      	mov	r0, r7
  400464:	4b06      	ldr	r3, [pc, #24]	; (400480 <timer_process_counted+0x60>)
  400466:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400468:	7c23      	ldrb	r3, [r4, #16]
  40046a:	2b01      	cmp	r3, #1
  40046c:	d1ec      	bne.n	400448 <timer_process_counted+0x28>
			tmp->time_label = time;
  40046e:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400470:	4632      	mov	r2, r6
  400472:	4621      	mov	r1, r4
  400474:	4638      	mov	r0, r7
  400476:	4b03      	ldr	r3, [pc, #12]	; (400484 <timer_process_counted+0x64>)
  400478:	4798      	blx	r3
  40047a:	e7e5      	b.n	400448 <timer_process_counted+0x28>
  40047c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40047e:	bf00      	nop
  400480:	0040073d 	.word	0x0040073d
  400484:	004003d1 	.word	0x004003d1

00400488 <timer_init>:
{
  400488:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40048a:	4604      	mov	r4, r0
  40048c:	460d      	mov	r5, r1
  40048e:	2800      	cmp	r0, #0
  400490:	bf18      	it	ne
  400492:	2900      	cmpne	r1, #0
  400494:	bf14      	ite	ne
  400496:	2001      	movne	r0, #1
  400498:	2000      	moveq	r0, #0
  40049a:	223b      	movs	r2, #59	; 0x3b
  40049c:	4905      	ldr	r1, [pc, #20]	; (4004b4 <timer_init+0x2c>)
  40049e:	4b06      	ldr	r3, [pc, #24]	; (4004b8 <timer_init+0x30>)
  4004a0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  4004a2:	4629      	mov	r1, r5
  4004a4:	4620      	mov	r0, r4
  4004a6:	4b05      	ldr	r3, [pc, #20]	; (4004bc <timer_init+0x34>)
  4004a8:	4798      	blx	r3
	descr->time                           = 0;
  4004aa:	2000      	movs	r0, #0
  4004ac:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  4004ae:	4b04      	ldr	r3, [pc, #16]	; (4004c0 <timer_init+0x38>)
  4004b0:	6023      	str	r3, [r4, #0]
}
  4004b2:	bd38      	pop	{r3, r4, r5, pc}
  4004b4:	00401608 	.word	0x00401608
  4004b8:	004006ed 	.word	0x004006ed
  4004bc:	0040091d 	.word	0x0040091d
  4004c0:	00400421 	.word	0x00400421

004004c4 <timer_start>:
{
  4004c4:	b510      	push	{r4, lr}
	ASSERT(descr);
  4004c6:	4604      	mov	r4, r0
  4004c8:	2253      	movs	r2, #83	; 0x53
  4004ca:	4909      	ldr	r1, [pc, #36]	; (4004f0 <timer_start+0x2c>)
  4004cc:	3000      	adds	r0, #0
  4004ce:	bf18      	it	ne
  4004d0:	2001      	movne	r0, #1
  4004d2:	4b08      	ldr	r3, [pc, #32]	; (4004f4 <timer_start+0x30>)
  4004d4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4004d6:	4620      	mov	r0, r4
  4004d8:	4b07      	ldr	r3, [pc, #28]	; (4004f8 <timer_start+0x34>)
  4004da:	4798      	blx	r3
  4004dc:	b920      	cbnz	r0, 4004e8 <timer_start+0x24>
	_timer_start(&descr->device);
  4004de:	4620      	mov	r0, r4
  4004e0:	4b06      	ldr	r3, [pc, #24]	; (4004fc <timer_start+0x38>)
  4004e2:	4798      	blx	r3
	return ERR_NONE;
  4004e4:	2000      	movs	r0, #0
  4004e6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4004e8:	f06f 0010 	mvn.w	r0, #16
}
  4004ec:	bd10      	pop	{r4, pc}
  4004ee:	bf00      	nop
  4004f0:	00401608 	.word	0x00401608
  4004f4:	004006ed 	.word	0x004006ed
  4004f8:	004009e1 	.word	0x004009e1
  4004fc:	004009d9 	.word	0x004009d9

00400500 <timer_add_task>:
{
  400500:	b570      	push	{r4, r5, r6, lr}
  400502:	b082      	sub	sp, #8
	ASSERT(descr && task);
  400504:	4604      	mov	r4, r0
  400506:	460d      	mov	r5, r1
  400508:	2800      	cmp	r0, #0
  40050a:	bf18      	it	ne
  40050c:	2900      	cmpne	r1, #0
  40050e:	bf14      	ite	ne
  400510:	2001      	movne	r0, #1
  400512:	2000      	moveq	r0, #0
  400514:	227a      	movs	r2, #122	; 0x7a
  400516:	491d      	ldr	r1, [pc, #116]	; (40058c <timer_add_task+0x8c>)
  400518:	4b1d      	ldr	r3, [pc, #116]	; (400590 <timer_add_task+0x90>)
  40051a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  40051c:	7e23      	ldrb	r3, [r4, #24]
  40051e:	f043 0301 	orr.w	r3, r3, #1
  400522:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  400524:	f104 0614 	add.w	r6, r4, #20
  400528:	4629      	mov	r1, r5
  40052a:	4630      	mov	r0, r6
  40052c:	4b19      	ldr	r3, [pc, #100]	; (400594 <timer_add_task+0x94>)
  40052e:	4798      	blx	r3
  400530:	b988      	cbnz	r0, 400556 <timer_add_task+0x56>
	task->time_label = descr->time;
  400532:	6923      	ldr	r3, [r4, #16]
  400534:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  400536:	6922      	ldr	r2, [r4, #16]
  400538:	4629      	mov	r1, r5
  40053a:	4630      	mov	r0, r6
  40053c:	4b16      	ldr	r3, [pc, #88]	; (400598 <timer_add_task+0x98>)
  40053e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400540:	7e23      	ldrb	r3, [r4, #24]
  400542:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400546:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  400548:	7e23      	ldrb	r3, [r4, #24]
  40054a:	f013 0f02 	tst.w	r3, #2
  40054e:	d10e      	bne.n	40056e <timer_add_task+0x6e>
	return ERR_NONE;
  400550:	2000      	movs	r0, #0
}
  400552:	b002      	add	sp, #8
  400554:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400556:	7e23      	ldrb	r3, [r4, #24]
  400558:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  40055c:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  40055e:	227f      	movs	r2, #127	; 0x7f
  400560:	490a      	ldr	r1, [pc, #40]	; (40058c <timer_add_task+0x8c>)
  400562:	2000      	movs	r0, #0
  400564:	4b0a      	ldr	r3, [pc, #40]	; (400590 <timer_add_task+0x90>)
  400566:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  400568:	f06f 0011 	mvn.w	r0, #17
  40056c:	e7f1      	b.n	400552 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  40056e:	a801      	add	r0, sp, #4
  400570:	4b0a      	ldr	r3, [pc, #40]	; (40059c <timer_add_task+0x9c>)
  400572:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  400574:	7e23      	ldrb	r3, [r4, #24]
  400576:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  40057a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  40057c:	4620      	mov	r0, r4
  40057e:	4b08      	ldr	r3, [pc, #32]	; (4005a0 <timer_add_task+0xa0>)
  400580:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  400582:	a801      	add	r0, sp, #4
  400584:	4b07      	ldr	r3, [pc, #28]	; (4005a4 <timer_add_task+0xa4>)
  400586:	4798      	blx	r3
	return ERR_NONE;
  400588:	2000      	movs	r0, #0
  40058a:	e7e2      	b.n	400552 <timer_add_task+0x52>
  40058c:	00401608 	.word	0x00401608
  400590:	004006ed 	.word	0x004006ed
  400594:	004006f3 	.word	0x004006f3
  400598:	004003d1 	.word	0x004003d1
  40059c:	00400335 	.word	0x00400335
  4005a0:	004009ed 	.word	0x004009ed
  4005a4:	00400343 	.word	0x00400343

004005a8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4005a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005aa:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4005ac:	4605      	mov	r5, r0
  4005ae:	460f      	mov	r7, r1
  4005b0:	2800      	cmp	r0, #0
  4005b2:	bf18      	it	ne
  4005b4:	2900      	cmpne	r1, #0
  4005b6:	d002      	beq.n	4005be <usart_sync_write+0x16>
  4005b8:	bb0a      	cbnz	r2, 4005fe <usart_sync_write+0x56>
  4005ba:	2000      	movs	r0, #0
  4005bc:	e000      	b.n	4005c0 <usart_sync_write+0x18>
  4005be:	2000      	movs	r0, #0
  4005c0:	22f1      	movs	r2, #241	; 0xf1
  4005c2:	4910      	ldr	r1, [pc, #64]	; (400604 <usart_sync_write+0x5c>)
  4005c4:	4b10      	ldr	r3, [pc, #64]	; (400608 <usart_sync_write+0x60>)
  4005c6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4005c8:	f105 0408 	add.w	r4, r5, #8
  4005cc:	4620      	mov	r0, r4
  4005ce:	4b0f      	ldr	r3, [pc, #60]	; (40060c <usart_sync_write+0x64>)
  4005d0:	4798      	blx	r3
  4005d2:	2800      	cmp	r0, #0
  4005d4:	d0f8      	beq.n	4005c8 <usart_sync_write+0x20>
  4005d6:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4005d8:	5d79      	ldrb	r1, [r7, r5]
  4005da:	4620      	mov	r0, r4
  4005dc:	4b0c      	ldr	r3, [pc, #48]	; (400610 <usart_sync_write+0x68>)
  4005de:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4005e0:	4620      	mov	r0, r4
  4005e2:	4b0a      	ldr	r3, [pc, #40]	; (40060c <usart_sync_write+0x64>)
  4005e4:	4798      	blx	r3
  4005e6:	2800      	cmp	r0, #0
  4005e8:	d0fa      	beq.n	4005e0 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  4005ea:	3501      	adds	r5, #1
  4005ec:	42b5      	cmp	r5, r6
  4005ee:	d3f3      	bcc.n	4005d8 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4005f0:	4620      	mov	r0, r4
  4005f2:	4b08      	ldr	r3, [pc, #32]	; (400614 <usart_sync_write+0x6c>)
  4005f4:	4798      	blx	r3
  4005f6:	2800      	cmp	r0, #0
  4005f8:	d0fa      	beq.n	4005f0 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4005fa:	4628      	mov	r0, r5
  4005fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4005fe:	2001      	movs	r0, #1
  400600:	e7de      	b.n	4005c0 <usart_sync_write+0x18>
  400602:	bf00      	nop
  400604:	00401620 	.word	0x00401620
  400608:	004006ed 	.word	0x004006ed
  40060c:	00400bd9 	.word	0x00400bd9
  400610:	00400b91 	.word	0x00400b91
  400614:	00400c01 	.word	0x00400c01

00400618 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40061c:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40061e:	4605      	mov	r5, r0
  400620:	4688      	mov	r8, r1
  400622:	2800      	cmp	r0, #0
  400624:	bf18      	it	ne
  400626:	2900      	cmpne	r1, #0
  400628:	d002      	beq.n	400630 <usart_sync_read+0x18>
  40062a:	b9d2      	cbnz	r2, 400662 <usart_sync_read+0x4a>
  40062c:	2000      	movs	r0, #0
  40062e:	e000      	b.n	400632 <usart_sync_read+0x1a>
  400630:	2000      	movs	r0, #0
  400632:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400636:	490c      	ldr	r1, [pc, #48]	; (400668 <usart_sync_read+0x50>)
  400638:	4b0c      	ldr	r3, [pc, #48]	; (40066c <usart_sync_read+0x54>)
  40063a:	4798      	blx	r3
	uint32_t                      offset = 0;
  40063c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  40063e:	f105 0408 	add.w	r4, r5, #8
  400642:	4620      	mov	r0, r4
  400644:	4b0a      	ldr	r3, [pc, #40]	; (400670 <usart_sync_read+0x58>)
  400646:	4798      	blx	r3
  400648:	2800      	cmp	r0, #0
  40064a:	d0f8      	beq.n	40063e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  40064c:	4620      	mov	r0, r4
  40064e:	4b09      	ldr	r3, [pc, #36]	; (400674 <usart_sync_read+0x5c>)
  400650:	4798      	blx	r3
  400652:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400656:	3601      	adds	r6, #1
  400658:	42be      	cmp	r6, r7
  40065a:	d3f0      	bcc.n	40063e <usart_sync_read+0x26>

	return (int32_t)offset;
}
  40065c:	4630      	mov	r0, r6
  40065e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400662:	2001      	movs	r0, #1
  400664:	e7e5      	b.n	400632 <usart_sync_read+0x1a>
  400666:	bf00      	nop
  400668:	00401620 	.word	0x00401620
  40066c:	004006ed 	.word	0x004006ed
  400670:	00400c29 	.word	0x00400c29
  400674:	00400bb5 	.word	0x00400bb5

00400678 <usart_sync_init>:
{
  400678:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40067a:	4604      	mov	r4, r0
  40067c:	460d      	mov	r5, r1
  40067e:	2800      	cmp	r0, #0
  400680:	bf18      	it	ne
  400682:	2900      	cmpne	r1, #0
  400684:	bf14      	ite	ne
  400686:	2001      	movne	r0, #1
  400688:	2000      	moveq	r0, #0
  40068a:	2234      	movs	r2, #52	; 0x34
  40068c:	4907      	ldr	r1, [pc, #28]	; (4006ac <usart_sync_init+0x34>)
  40068e:	4b08      	ldr	r3, [pc, #32]	; (4006b0 <usart_sync_init+0x38>)
  400690:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400692:	4629      	mov	r1, r5
  400694:	f104 0008 	add.w	r0, r4, #8
  400698:	4b06      	ldr	r3, [pc, #24]	; (4006b4 <usart_sync_init+0x3c>)
  40069a:	4798      	blx	r3
	if (init_status) {
  40069c:	4603      	mov	r3, r0
  40069e:	b918      	cbnz	r0, 4006a8 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4006a0:	4a05      	ldr	r2, [pc, #20]	; (4006b8 <usart_sync_init+0x40>)
  4006a2:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  4006a4:	4a05      	ldr	r2, [pc, #20]	; (4006bc <usart_sync_init+0x44>)
  4006a6:	6022      	str	r2, [r4, #0]
}
  4006a8:	4618      	mov	r0, r3
  4006aa:	bd38      	pop	{r3, r4, r5, pc}
  4006ac:	00401620 	.word	0x00401620
  4006b0:	004006ed 	.word	0x004006ed
  4006b4:	00400b25 	.word	0x00400b25
  4006b8:	00400619 	.word	0x00400619
  4006bc:	004005a9 	.word	0x004005a9

004006c0 <usart_sync_enable>:
{
  4006c0:	b510      	push	{r4, lr}
	ASSERT(descr);
  4006c2:	4604      	mov	r4, r0
  4006c4:	2253      	movs	r2, #83	; 0x53
  4006c6:	4906      	ldr	r1, [pc, #24]	; (4006e0 <usart_sync_enable+0x20>)
  4006c8:	3000      	adds	r0, #0
  4006ca:	bf18      	it	ne
  4006cc:	2001      	movne	r0, #1
  4006ce:	4b05      	ldr	r3, [pc, #20]	; (4006e4 <usart_sync_enable+0x24>)
  4006d0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  4006d2:	f104 0008 	add.w	r0, r4, #8
  4006d6:	4b04      	ldr	r3, [pc, #16]	; (4006e8 <usart_sync_enable+0x28>)
  4006d8:	4798      	blx	r3
}
  4006da:	2000      	movs	r0, #0
  4006dc:	bd10      	pop	{r4, pc}
  4006de:	bf00      	nop
  4006e0:	00401620 	.word	0x00401620
  4006e4:	004006ed 	.word	0x004006ed
  4006e8:	00400b5d 	.word	0x00400b5d

004006ec <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4006ec:	b900      	cbnz	r0, 4006f0 <assert+0x4>
		__asm("BKPT #0");
  4006ee:	be00      	bkpt	0x0000
  4006f0:	4770      	bx	lr

004006f2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4006f2:	6803      	ldr	r3, [r0, #0]
  4006f4:	b11b      	cbz	r3, 4006fe <is_list_element+0xc>
		if (it == element) {
  4006f6:	428b      	cmp	r3, r1
  4006f8:	d003      	beq.n	400702 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  4006fa:	681b      	ldr	r3, [r3, #0]
  4006fc:	e7fa      	b.n	4006f4 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  4006fe:	2000      	movs	r0, #0
  400700:	4770      	bx	lr
			return true;
  400702:	2001      	movs	r0, #1
}
  400704:	4770      	bx	lr
	...

00400708 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400708:	b538      	push	{r3, r4, r5, lr}
  40070a:	4604      	mov	r4, r0
  40070c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  40070e:	4b06      	ldr	r3, [pc, #24]	; (400728 <list_insert_as_head+0x20>)
  400710:	4798      	blx	r3
  400712:	f080 0001 	eor.w	r0, r0, #1
  400716:	2239      	movs	r2, #57	; 0x39
  400718:	4904      	ldr	r1, [pc, #16]	; (40072c <list_insert_as_head+0x24>)
  40071a:	b2c0      	uxtb	r0, r0
  40071c:	4b04      	ldr	r3, [pc, #16]	; (400730 <list_insert_as_head+0x28>)
  40071e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400720:	6823      	ldr	r3, [r4, #0]
  400722:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400724:	6025      	str	r5, [r4, #0]
  400726:	bd38      	pop	{r3, r4, r5, pc}
  400728:	004006f3 	.word	0x004006f3
  40072c:	0040163c 	.word	0x0040163c
  400730:	004006ed 	.word	0x004006ed

00400734 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400734:	6803      	ldr	r3, [r0, #0]
  400736:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400738:	6001      	str	r1, [r0, #0]
  40073a:	4770      	bx	lr

0040073c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  40073c:	6803      	ldr	r3, [r0, #0]
  40073e:	b11b      	cbz	r3, 400748 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400740:	681a      	ldr	r2, [r3, #0]
  400742:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400744:	4618      	mov	r0, r3
  400746:	4770      	bx	lr
	}

	return NULL;
  400748:	2000      	movs	r0, #0
}
  40074a:	4770      	bx	lr

0040074c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  40074c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40074e:	4a06      	ldr	r2, [pc, #24]	; (400768 <_sbrk+0x1c>)
  400750:	6812      	ldr	r2, [r2, #0]
  400752:	b122      	cbz	r2, 40075e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400754:	4a04      	ldr	r2, [pc, #16]	; (400768 <_sbrk+0x1c>)
  400756:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400758:	4403      	add	r3, r0
  40075a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  40075c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40075e:	4903      	ldr	r1, [pc, #12]	; (40076c <_sbrk+0x20>)
  400760:	4a01      	ldr	r2, [pc, #4]	; (400768 <_sbrk+0x1c>)
  400762:	6011      	str	r1, [r2, #0]
  400764:	e7f6      	b.n	400754 <_sbrk+0x8>
  400766:	bf00      	nop
  400768:	204000a8 	.word	0x204000a8
  40076c:	20400710 	.word	0x20400710

00400770 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400770:	f04f 30ff 	mov.w	r0, #4294967295
  400774:	4770      	bx	lr

00400776 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40077a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40077c:	2000      	movs	r0, #0
  40077e:	4770      	bx	lr

00400780 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400780:	2000      	movs	r0, #0
  400782:	4770      	bx	lr

00400784 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  400784:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400786:	2b00      	cmp	r3, #0
  400788:	db09      	blt.n	40079e <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40078a:	095b      	lsrs	r3, r3, #5
  40078c:	f000 001f 	and.w	r0, r0, #31
  400790:	2201      	movs	r2, #1
  400792:	fa02 f000 	lsl.w	r0, r2, r0
  400796:	3340      	adds	r3, #64	; 0x40
  400798:	4a01      	ldr	r2, [pc, #4]	; (4007a0 <_irq_set+0x1c>)
  40079a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  40079e:	4770      	bx	lr
  4007a0:	e000e100 	.word	0xe000e100

004007a4 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  4007a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
  4007a8:	fb03 f000 	mul.w	r0, r3, r0
  4007ac:	4770      	bx	lr

004007ae <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm("__delay:\n"
  4007ae:	3901      	subs	r1, #1
  4007b0:	d8fd      	bhi.n	4007ae <_delay_cycles>
  4007b2:	4770      	bx	lr

004007b4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4007b4:	b500      	push	{lr}
  4007b6:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4007b8:	a801      	add	r0, sp, #4
  4007ba:	4b0e      	ldr	r3, [pc, #56]	; (4007f4 <_init_chip+0x40>)
  4007bc:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4007be:	4a0e      	ldr	r2, [pc, #56]	; (4007f8 <_init_chip+0x44>)
  4007c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4007c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4007c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4007cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007d0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4007d4:	a801      	add	r0, sp, #4
  4007d6:	4b09      	ldr	r3, [pc, #36]	; (4007fc <_init_chip+0x48>)
  4007d8:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4007da:	4a09      	ldr	r2, [pc, #36]	; (400800 <_init_chip+0x4c>)
  4007dc:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4007de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4007e2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  4007e6:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  4007e8:	4b06      	ldr	r3, [pc, #24]	; (400804 <_init_chip+0x50>)
  4007ea:	4798      	blx	r3
}
  4007ec:	b003      	add	sp, #12
  4007ee:	f85d fb04 	ldr.w	pc, [sp], #4
  4007f2:	bf00      	nop
  4007f4:	00400335 	.word	0x00400335
  4007f8:	e000ed00 	.word	0xe000ed00
  4007fc:	00400343 	.word	0x00400343
  400800:	400e0c00 	.word	0x400e0c00
  400804:	004008a5 	.word	0x004008a5

00400808 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400808:	490e      	ldr	r1, [pc, #56]	; (400844 <_pmc_init_sources+0x3c>)
  40080a:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  40080c:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400810:	4b0d      	ldr	r3, [pc, #52]	; (400848 <_pmc_init_sources+0x40>)
  400812:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400814:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400816:	4b0b      	ldr	r3, [pc, #44]	; (400844 <_pmc_init_sources+0x3c>)
  400818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40081a:	f013 0f01 	tst.w	r3, #1
  40081e:	d0fa      	beq.n	400816 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400820:	4b08      	ldr	r3, [pc, #32]	; (400844 <_pmc_init_sources+0x3c>)
  400822:	6a19      	ldr	r1, [r3, #32]
  400824:	4a09      	ldr	r2, [pc, #36]	; (40084c <_pmc_init_sources+0x44>)
  400826:	430a      	orrs	r2, r1
  400828:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40082a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  40082c:	4a08      	ldr	r2, [pc, #32]	; (400850 <_pmc_init_sources+0x48>)
  40082e:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400830:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400832:	4a08      	ldr	r2, [pc, #32]	; (400854 <_pmc_init_sources+0x4c>)
  400834:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400836:	4b03      	ldr	r3, [pc, #12]	; (400844 <_pmc_init_sources+0x3c>)
  400838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40083a:	f013 0f02 	tst.w	r3, #2
  40083e:	d0fa      	beq.n	400836 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400840:	4770      	bx	lr
  400842:	bf00      	nop
  400844:	400e0600 	.word	0x400e0600
  400848:	00373e01 	.word	0x00373e01
  40084c:	01370000 	.word	0x01370000
  400850:	f800ffff 	.word	0xf800ffff
  400854:	20183f01 	.word	0x20183f01

00400858 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400858:	4a11      	ldr	r2, [pc, #68]	; (4008a0 <_pmc_init_master_clock+0x48>)
  40085a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  40085c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400860:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400862:	4b0f      	ldr	r3, [pc, #60]	; (4008a0 <_pmc_init_master_clock+0x48>)
  400864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400866:	f013 0f08 	tst.w	r3, #8
  40086a:	d0fa      	beq.n	400862 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40086c:	4a0c      	ldr	r2, [pc, #48]	; (4008a0 <_pmc_init_master_clock+0x48>)
  40086e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400878:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40087a:	4b09      	ldr	r3, [pc, #36]	; (4008a0 <_pmc_init_master_clock+0x48>)
  40087c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40087e:	f013 0f08 	tst.w	r3, #8
  400882:	d0fa      	beq.n	40087a <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400884:	4a06      	ldr	r2, [pc, #24]	; (4008a0 <_pmc_init_master_clock+0x48>)
  400886:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400888:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  40088c:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400890:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400892:	4b03      	ldr	r3, [pc, #12]	; (4008a0 <_pmc_init_master_clock+0x48>)
  400894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400896:	f013 0f08 	tst.w	r3, #8
  40089a:	d0fa      	beq.n	400892 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  40089c:	4770      	bx	lr
  40089e:	bf00      	nop
  4008a0:	400e0600 	.word	0x400e0600

004008a4 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4008a4:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4008a6:	4b02      	ldr	r3, [pc, #8]	; (4008b0 <_pmc_init+0xc>)
  4008a8:	4798      	blx	r3
	_pmc_init_master_clock();
  4008aa:	4b02      	ldr	r3, [pc, #8]	; (4008b4 <_pmc_init+0x10>)
  4008ac:	4798      	blx	r3
  4008ae:	bd08      	pop	{r3, pc}
  4008b0:	00400809 	.word	0x00400809
  4008b4:	00400859 	.word	0x00400859

004008b8 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4008b8:	2300      	movs	r3, #0
  4008ba:	b13b      	cbz	r3, 4008cc <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  4008bc:	2000      	movs	r0, #0
  4008be:	4770      	bx	lr
			return &(_tcs[i]);
  4008c0:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  4008c4:	00a3      	lsls	r3, r4, #2
  4008c6:	4608      	mov	r0, r1
  4008c8:	4418      	add	r0, r3
  4008ca:	e00c      	b.n	4008e6 <get_cfg+0x2e>
{
  4008cc:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  4008ce:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4008d2:	008a      	lsls	r2, r1, #2
  4008d4:	4905      	ldr	r1, [pc, #20]	; (4008ec <get_cfg+0x34>)
  4008d6:	588a      	ldr	r2, [r1, r2]
  4008d8:	4282      	cmp	r2, r0
  4008da:	d0f1      	beq.n	4008c0 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4008dc:	3301      	adds	r3, #1
  4008de:	b2db      	uxtb	r3, r3
  4008e0:	2b00      	cmp	r3, #0
  4008e2:	d0f4      	beq.n	4008ce <get_cfg+0x16>
	return NULL;
  4008e4:	2000      	movs	r0, #0
}
  4008e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008ea:	4770      	bx	lr
  4008ec:	20400000 	.word	0x20400000

004008f0 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  4008f0:	4b03      	ldr	r3, [pc, #12]	; (400900 <_tc_init_irq_param+0x10>)
  4008f2:	4298      	cmp	r0, r3
  4008f4:	d000      	beq.n	4008f8 <_tc_init_irq_param+0x8>
  4008f6:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  4008f8:	4b02      	ldr	r3, [pc, #8]	; (400904 <_tc_init_irq_param+0x14>)
  4008fa:	6019      	str	r1, [r3, #0]
	}
}
  4008fc:	e7fb      	b.n	4008f6 <_tc_init_irq_param+0x6>
  4008fe:	bf00      	nop
  400900:	4000c000 	.word	0x4000c000
  400904:	204000ac 	.word	0x204000ac

00400908 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  400908:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  40090a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  40090c:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  40090e:	f013 0f10 	tst.w	r3, #16
  400912:	d100      	bne.n	400916 <tc_interrupt_handler+0xe>
  400914:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  400916:	6803      	ldr	r3, [r0, #0]
  400918:	4798      	blx	r3
	}
}
  40091a:	e7fb      	b.n	400914 <tc_interrupt_handler+0xc>

0040091c <_timer_init>:
{
  40091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40091e:	4607      	mov	r7, r0
  400920:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  400922:	4608      	mov	r0, r1
  400924:	4b27      	ldr	r3, [pc, #156]	; (4009c4 <_timer_init+0xa8>)
  400926:	4798      	blx	r3
  400928:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  40092a:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  40092c:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  40092e:	2291      	movs	r2, #145	; 0x91
  400930:	4925      	ldr	r1, [pc, #148]	; (4009c8 <_timer_init+0xac>)
  400932:	2001      	movs	r0, #1
  400934:	4b25      	ldr	r3, [pc, #148]	; (4009cc <_timer_init+0xb0>)
  400936:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  400938:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  40093c:	d001      	beq.n	400942 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  40093e:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  400942:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  400944:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  400946:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  400948:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  40094a:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  40094c:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  40094e:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  400950:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  400952:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  400954:	2310      	movs	r3, #16
  400956:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  400958:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  40095a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  40095e:	4639      	mov	r1, r7
  400960:	4620      	mov	r0, r4
  400962:	4b1b      	ldr	r3, [pc, #108]	; (4009d0 <_timer_init+0xb4>)
  400964:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400966:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40096a:	2b00      	cmp	r3, #0
  40096c:	db0d      	blt.n	40098a <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40096e:	095a      	lsrs	r2, r3, #5
  400970:	f003 031f 	and.w	r3, r3, #31
  400974:	2101      	movs	r1, #1
  400976:	fa01 f303 	lsl.w	r3, r1, r3
  40097a:	3220      	adds	r2, #32
  40097c:	4915      	ldr	r1, [pc, #84]	; (4009d4 <_timer_init+0xb8>)
  40097e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400982:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400986:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40098a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40098e:	2b00      	cmp	r3, #0
  400990:	db09      	blt.n	4009a6 <_timer_init+0x8a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400992:	095a      	lsrs	r2, r3, #5
  400994:	f003 031f 	and.w	r3, r3, #31
  400998:	2101      	movs	r1, #1
  40099a:	fa01 f303 	lsl.w	r3, r1, r3
  40099e:	3260      	adds	r2, #96	; 0x60
  4009a0:	490c      	ldr	r1, [pc, #48]	; (4009d4 <_timer_init+0xb8>)
  4009a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4009a6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4009aa:	2b00      	cmp	r3, #0
  4009ac:	db08      	blt.n	4009c0 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4009ae:	0959      	lsrs	r1, r3, #5
  4009b0:	f003 031f 	and.w	r3, r3, #31
  4009b4:	2201      	movs	r2, #1
  4009b6:	fa02 f303 	lsl.w	r3, r2, r3
  4009ba:	4a06      	ldr	r2, [pc, #24]	; (4009d4 <_timer_init+0xb8>)
  4009bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  4009c0:	2000      	movs	r0, #0
  4009c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009c4:	004008b9 	.word	0x004008b9
  4009c8:	0040165c 	.word	0x0040165c
  4009cc:	004006ed 	.word	0x004006ed
  4009d0:	004008f1 	.word	0x004008f1
  4009d4:	e000e100 	.word	0xe000e100

004009d8 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  4009d8:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  4009da:	2205      	movs	r2, #5
  4009dc:	601a      	str	r2, [r3, #0]
  4009de:	4770      	bx	lr

004009e0 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  4009e0:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  4009e2:	6a18      	ldr	r0, [r3, #32]
}
  4009e4:	f3c0 4000 	ubfx	r0, r0, #16, #1
  4009e8:	4770      	bx	lr
	...

004009ec <_timer_set_irq>:
{
  4009ec:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  4009ee:	68c0      	ldr	r0, [r0, #12]
  4009f0:	4b02      	ldr	r3, [pc, #8]	; (4009fc <_timer_set_irq+0x10>)
  4009f2:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  4009f4:	7900      	ldrb	r0, [r0, #4]
  4009f6:	4b02      	ldr	r3, [pc, #8]	; (400a00 <_timer_set_irq+0x14>)
  4009f8:	4798      	blx	r3
  4009fa:	bd08      	pop	{r3, pc}
  4009fc:	004008b9 	.word	0x004008b9
  400a00:	00400785 	.word	0x00400785

00400a04 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  400a04:	2000      	movs	r0, #0
  400a06:	4770      	bx	lr

00400a08 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  400a08:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  400a0a:	4b02      	ldr	r3, [pc, #8]	; (400a14 <TC0_Handler+0xc>)
  400a0c:	6818      	ldr	r0, [r3, #0]
  400a0e:	4b02      	ldr	r3, [pc, #8]	; (400a18 <TC0_Handler+0x10>)
  400a10:	4798      	blx	r3
  400a12:	bd08      	pop	{r3, pc}
  400a14:	204000ac 	.word	0x204000ac
  400a18:	00400909 	.word	0x00400909

00400a1c <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  400a1c:	b510      	push	{r4, lr}
	ASSERT(hw);
  400a1e:	4604      	mov	r4, r0
  400a20:	f240 2219 	movw	r2, #537	; 0x219
  400a24:	4912      	ldr	r1, [pc, #72]	; (400a70 <_uart_get_hardware_index+0x54>)
  400a26:	3000      	adds	r0, #0
  400a28:	bf18      	it	ne
  400a2a:	2001      	movne	r0, #1
  400a2c:	4b11      	ldr	r3, [pc, #68]	; (400a74 <_uart_get_hardware_index+0x58>)
  400a2e:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  400a30:	4b11      	ldr	r3, [pc, #68]	; (400a78 <_uart_get_hardware_index+0x5c>)
  400a32:	429c      	cmp	r4, r3
  400a34:	d013      	beq.n	400a5e <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  400a36:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400a3a:	429c      	cmp	r4, r3
  400a3c:	d011      	beq.n	400a62 <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  400a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  400a42:	429c      	cmp	r4, r3
  400a44:	d00f      	beq.n	400a66 <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  400a46:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400a4a:	429c      	cmp	r4, r3
  400a4c:	d00d      	beq.n	400a6a <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  400a4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400a52:	429c      	cmp	r4, r3
  400a54:	d001      	beq.n	400a5a <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  400a56:	20ff      	movs	r0, #255	; 0xff
	}
}
  400a58:	bd10      	pop	{r4, pc}
		return 4;
  400a5a:	2004      	movs	r0, #4
  400a5c:	bd10      	pop	{r4, pc}
		return 0;
  400a5e:	2000      	movs	r0, #0
  400a60:	bd10      	pop	{r4, pc}
		return 1;
  400a62:	2001      	movs	r0, #1
  400a64:	bd10      	pop	{r4, pc}
		return 2;
  400a66:	2002      	movs	r0, #2
  400a68:	bd10      	pop	{r4, pc}
		return 3;
  400a6a:	2003      	movs	r0, #3
  400a6c:	bd10      	pop	{r4, pc}
  400a6e:	bf00      	nop
  400a70:	0040167c 	.word	0x0040167c
  400a74:	004006ed 	.word	0x004006ed
  400a78:	400e0800 	.word	0x400e0800

00400a7c <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  400a7c:	b510      	push	{r4, lr}
	ASSERT(hw);
  400a7e:	4604      	mov	r4, r0
  400a80:	f44f 7227 	mov.w	r2, #668	; 0x29c
  400a84:	490e      	ldr	r1, [pc, #56]	; (400ac0 <_get_uart_index+0x44>)
  400a86:	3000      	adds	r0, #0
  400a88:	bf18      	it	ne
  400a8a:	2001      	movne	r0, #1
  400a8c:	4b0d      	ldr	r3, [pc, #52]	; (400ac4 <_get_uart_index+0x48>)
  400a8e:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  400a90:	4620      	mov	r0, r4
  400a92:	4b0d      	ldr	r3, [pc, #52]	; (400ac8 <_get_uart_index+0x4c>)
  400a94:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400a96:	2300      	movs	r3, #0
  400a98:	b143      	cbz	r3, 400aac <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400a9a:	f240 22a6 	movw	r2, #678	; 0x2a6
  400a9e:	4908      	ldr	r1, [pc, #32]	; (400ac0 <_get_uart_index+0x44>)
  400aa0:	2000      	movs	r0, #0
  400aa2:	4b08      	ldr	r3, [pc, #32]	; (400ac4 <_get_uart_index+0x48>)
  400aa4:	4798      	blx	r3
	return 0;
  400aa6:	2300      	movs	r3, #0
}
  400aa8:	4618      	mov	r0, r3
  400aaa:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  400aac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400ab0:	008a      	lsls	r2, r1, #2
  400ab2:	4906      	ldr	r1, [pc, #24]	; (400acc <_get_uart_index+0x50>)
  400ab4:	5c8a      	ldrb	r2, [r1, r2]
  400ab6:	4290      	cmp	r0, r2
  400ab8:	d0f6      	beq.n	400aa8 <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400aba:	3301      	adds	r3, #1
  400abc:	b2db      	uxtb	r3, r3
  400abe:	e7eb      	b.n	400a98 <_get_uart_index+0x1c>
  400ac0:	0040167c 	.word	0x0040167c
  400ac4:	004006ed 	.word	0x004006ed
  400ac8:	00400a1d 	.word	0x00400a1d
  400acc:	00401670 	.word	0x00401670

00400ad0 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  400ad0:	b510      	push	{r4, lr}
	ASSERT(hw);
  400ad2:	4604      	mov	r4, r0
  400ad4:	f240 22b3 	movw	r2, #691	; 0x2b3
  400ad8:	490d      	ldr	r1, [pc, #52]	; (400b10 <_uart_init+0x40>)
  400ada:	3000      	adds	r0, #0
  400adc:	bf18      	it	ne
  400ade:	2001      	movne	r0, #1
  400ae0:	4b0c      	ldr	r3, [pc, #48]	; (400b14 <_uart_init+0x44>)
  400ae2:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  400ae4:	4620      	mov	r0, r4
  400ae6:	4b0c      	ldr	r3, [pc, #48]	; (400b18 <_uart_init+0x48>)
  400ae8:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  400aea:	4b0c      	ldr	r3, [pc, #48]	; (400b1c <_uart_init+0x4c>)
  400aec:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  400af0:	23ac      	movs	r3, #172	; 0xac
  400af2:	6023      	str	r3, [r4, #0]
  400af4:	f44f 7380 	mov.w	r3, #256	; 0x100
  400af8:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  400afa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400afe:	0082      	lsls	r2, r0, #2
  400b00:	4b07      	ldr	r3, [pc, #28]	; (400b20 <_uart_init+0x50>)
  400b02:	4413      	add	r3, r2
  400b04:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  400b06:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  400b08:	2351      	movs	r3, #81	; 0x51
  400b0a:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  400b0c:	2000      	movs	r0, #0
  400b0e:	bd10      	pop	{r4, pc}
  400b10:	0040167c 	.word	0x0040167c
  400b14:	004006ed 	.word	0x004006ed
  400b18:	00400a7d 	.word	0x00400a7d
  400b1c:	55415200 	.word	0x55415200
  400b20:	00401670 	.word	0x00401670

00400b24 <_usart_sync_init>:
{
  400b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b26:	460c      	mov	r4, r1
	ASSERT(device);
  400b28:	4e09      	ldr	r6, [pc, #36]	; (400b50 <_usart_sync_init+0x2c>)
  400b2a:	4607      	mov	r7, r0
  400b2c:	22a9      	movs	r2, #169	; 0xa9
  400b2e:	4631      	mov	r1, r6
  400b30:	3000      	adds	r0, #0
  400b32:	bf18      	it	ne
  400b34:	2001      	movne	r0, #1
  400b36:	4d07      	ldr	r5, [pc, #28]	; (400b54 <_usart_sync_init+0x30>)
  400b38:	47a8      	blx	r5
	ASSERT(hw);
  400b3a:	22aa      	movs	r2, #170	; 0xaa
  400b3c:	4631      	mov	r1, r6
  400b3e:	1c20      	adds	r0, r4, #0
  400b40:	bf18      	it	ne
  400b42:	2001      	movne	r0, #1
  400b44:	47a8      	blx	r5
	device->hw = hw;
  400b46:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  400b48:	4620      	mov	r0, r4
  400b4a:	4b03      	ldr	r3, [pc, #12]	; (400b58 <_usart_sync_init+0x34>)
  400b4c:	4798      	blx	r3
}
  400b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b50:	0040167c 	.word	0x0040167c
  400b54:	004006ed 	.word	0x004006ed
  400b58:	00400ad1 	.word	0x00400ad1

00400b5c <_usart_sync_enable>:
{
  400b5c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  400b5e:	4e0a      	ldr	r6, [pc, #40]	; (400b88 <_usart_sync_enable+0x2c>)
  400b60:	4604      	mov	r4, r0
  400b62:	22f2      	movs	r2, #242	; 0xf2
  400b64:	4631      	mov	r1, r6
  400b66:	3000      	adds	r0, #0
  400b68:	bf18      	it	ne
  400b6a:	2001      	movne	r0, #1
  400b6c:	4d07      	ldr	r5, [pc, #28]	; (400b8c <_usart_sync_enable+0x30>)
  400b6e:	47a8      	blx	r5
	_uart_enable(device->hw);
  400b70:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _uart_enable(void *const hw)
{
	ASSERT(hw);
  400b72:	f240 22d7 	movw	r2, #727	; 0x2d7
  400b76:	4631      	mov	r1, r6
  400b78:	1c20      	adds	r0, r4, #0
  400b7a:	bf18      	it	ne
  400b7c:	2001      	movne	r0, #1
  400b7e:	47a8      	blx	r5
	((Uart *)hw)->UART_CR = data;
  400b80:	2350      	movs	r3, #80	; 0x50
  400b82:	6023      	str	r3, [r4, #0]
  400b84:	bd70      	pop	{r4, r5, r6, pc}
  400b86:	bf00      	nop
  400b88:	0040167c 	.word	0x0040167c
  400b8c:	004006ed 	.word	0x004006ed

00400b90 <_usart_sync_write_byte>:
{
  400b90:	b538      	push	{r3, r4, r5, lr}
  400b92:	460c      	mov	r4, r1
	ASSERT(device);
  400b94:	4605      	mov	r5, r0
  400b96:	f240 1295 	movw	r2, #405	; 0x195
  400b9a:	4904      	ldr	r1, [pc, #16]	; (400bac <_usart_sync_write_byte+0x1c>)
  400b9c:	3000      	adds	r0, #0
  400b9e:	bf18      	it	ne
  400ba0:	2001      	movne	r0, #1
  400ba2:	4b03      	ldr	r3, [pc, #12]	; (400bb0 <_usart_sync_write_byte+0x20>)
  400ba4:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  400ba6:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  400ba8:	61dc      	str	r4, [r3, #28]
  400baa:	bd38      	pop	{r3, r4, r5, pc}
  400bac:	0040167c 	.word	0x0040167c
  400bb0:	004006ed 	.word	0x004006ed

00400bb4 <_usart_sync_read_byte>:
{
  400bb4:	b510      	push	{r4, lr}
	ASSERT(device);
  400bb6:	4604      	mov	r4, r0
  400bb8:	f240 12a7 	movw	r2, #423	; 0x1a7
  400bbc:	4904      	ldr	r1, [pc, #16]	; (400bd0 <_usart_sync_read_byte+0x1c>)
  400bbe:	3000      	adds	r0, #0
  400bc0:	bf18      	it	ne
  400bc2:	2001      	movne	r0, #1
  400bc4:	4b03      	ldr	r3, [pc, #12]	; (400bd4 <_usart_sync_read_byte+0x20>)
  400bc6:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  400bc8:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  400bca:	6998      	ldr	r0, [r3, #24]
}
  400bcc:	b2c0      	uxtb	r0, r0
  400bce:	bd10      	pop	{r4, pc}
  400bd0:	0040167c 	.word	0x0040167c
  400bd4:	004006ed 	.word	0x004006ed

00400bd8 <_usart_sync_is_ready_to_send>:
{
  400bd8:	b510      	push	{r4, lr}
	ASSERT(device);
  400bda:	4604      	mov	r4, r0
  400bdc:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  400be0:	4905      	ldr	r1, [pc, #20]	; (400bf8 <_usart_sync_is_ready_to_send+0x20>)
  400be2:	3000      	adds	r0, #0
  400be4:	bf18      	it	ne
  400be6:	2001      	movne	r0, #1
  400be8:	4b04      	ldr	r3, [pc, #16]	; (400bfc <_usart_sync_is_ready_to_send+0x24>)
  400bea:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  400bec:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  400bee:	6958      	ldr	r0, [r3, #20]
}
  400bf0:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400bf4:	bd10      	pop	{r4, pc}
  400bf6:	bf00      	nop
  400bf8:	0040167c 	.word	0x0040167c
  400bfc:	004006ed 	.word	0x004006ed

00400c00 <_usart_sync_is_transmit_done>:
{
  400c00:	b510      	push	{r4, lr}
	ASSERT(device);
  400c02:	4604      	mov	r4, r0
  400c04:	f240 12b9 	movw	r2, #441	; 0x1b9
  400c08:	4905      	ldr	r1, [pc, #20]	; (400c20 <_usart_sync_is_transmit_done+0x20>)
  400c0a:	3000      	adds	r0, #0
  400c0c:	bf18      	it	ne
  400c0e:	2001      	movne	r0, #1
  400c10:	4b04      	ldr	r3, [pc, #16]	; (400c24 <_usart_sync_is_transmit_done+0x24>)
  400c12:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  400c14:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  400c16:	6958      	ldr	r0, [r3, #20]
}
  400c18:	f3c0 2040 	ubfx	r0, r0, #9, #1
  400c1c:	bd10      	pop	{r4, pc}
  400c1e:	bf00      	nop
  400c20:	0040167c 	.word	0x0040167c
  400c24:	004006ed 	.word	0x004006ed

00400c28 <_usart_sync_is_byte_received>:
{
  400c28:	b510      	push	{r4, lr}
	ASSERT(device);
  400c2a:	4604      	mov	r4, r0
  400c2c:	f240 12cb 	movw	r2, #459	; 0x1cb
  400c30:	4905      	ldr	r1, [pc, #20]	; (400c48 <_usart_sync_is_byte_received+0x20>)
  400c32:	3000      	adds	r0, #0
  400c34:	bf18      	it	ne
  400c36:	2001      	movne	r0, #1
  400c38:	4b04      	ldr	r3, [pc, #16]	; (400c4c <_usart_sync_is_byte_received+0x24>)
  400c3a:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  400c3c:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  400c3e:	6958      	ldr	r0, [r3, #20]
  400c40:	f000 0001 	and.w	r0, r0, #1
}
  400c44:	bd10      	pop	{r4, pc}
  400c46:	bf00      	nop
  400c48:	0040167c 	.word	0x0040167c
  400c4c:	004006ed 	.word	0x004006ed

00400c50 <_uart_get_usart_sync>:
}
  400c50:	2000      	movs	r0, #0
  400c52:	4770      	bx	lr

00400c54 <TIMER_0_task1_callback>:
	tmp = ((Pio *)hw)->PIO_ODSR;
  400c54:	4a04      	ldr	r2, [pc, #16]	; (400c68 <TIMER_0_task1_callback+0x14>)
  400c56:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  400c58:	f003 0302 	and.w	r3, r3, #2
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  400c5c:	43d9      	mvns	r1, r3
  400c5e:	f001 0102 	and.w	r1, r1, #2
	((Pio *)hw)->PIO_SODR = mask;
  400c62:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  400c64:	6353      	str	r3, [r2, #52]	; 0x34
  400c66:	4770      	bx	lr
  400c68:	400e1400 	.word	0x400e1400

00400c6c <TIMER_0_task2_callback>:
	tmp = ((Pio *)hw)->PIO_ODSR;
  400c6c:	4a04      	ldr	r2, [pc, #16]	; (400c80 <TIMER_0_task2_callback+0x14>)
  400c6e:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  400c70:	f003 0304 	and.w	r3, r3, #4
  400c74:	43d9      	mvns	r1, r3
  400c76:	f001 0104 	and.w	r1, r1, #4
	((Pio *)hw)->PIO_SODR = mask;
  400c7a:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  400c7c:	6353      	str	r3, [r2, #52]	; 0x34
  400c7e:	4770      	bx	lr
  400c80:	400e1400 	.word	0x400e1400

00400c84 <main>:
static void TIMER_0_task2_callback(const struct timer_task *const timer_task);

struct timer_task TIMER_0_task1, TIMER_0_task2;

int main(void)
{
  400c84:	b570      	push	{r4, r5, r6, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  400c86:	4b26      	ldr	r3, [pc, #152]	; (400d20 <main+0x9c>)
  400c88:	4798      	blx	r3
	((Pio *)hw)->PIO_OER = mask;
  400c8a:	4b26      	ldr	r3, [pc, #152]	; (400d24 <main+0xa0>)
  400c8c:	2202      	movs	r2, #2
  400c8e:	611a      	str	r2, [r3, #16]
  400c90:	2204      	movs	r2, #4
  400c92:	611a      	str	r2, [r3, #16]
	gpio_set_pin_direction(PD1, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(PD2, GPIO_DIRECTION_OUT);

	TIMER_0_task1.interval = 100;
  400c94:	4924      	ldr	r1, [pc, #144]	; (400d28 <main+0xa4>)
  400c96:	2364      	movs	r3, #100	; 0x64
  400c98:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_callback;
  400c9a:	4b24      	ldr	r3, [pc, #144]	; (400d2c <main+0xa8>)
  400c9c:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
  400c9e:	2301      	movs	r3, #1
  400ca0:	740b      	strb	r3, [r1, #16]
	TIMER_0_task2.interval = 600;
  400ca2:	4c23      	ldr	r4, [pc, #140]	; (400d30 <main+0xac>)
  400ca4:	f44f 7216 	mov.w	r2, #600	; 0x258
  400ca8:	60a2      	str	r2, [r4, #8]
	TIMER_0_task2.cb       = TIMER_0_task2_callback;
  400caa:	4a22      	ldr	r2, [pc, #136]	; (400d34 <main+0xb0>)
  400cac:	60e2      	str	r2, [r4, #12]
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
  400cae:	7423      	strb	r3, [r4, #16]

	timer_add_task(&TIMER_0, &TIMER_0_task1);
  400cb0:	4d21      	ldr	r5, [pc, #132]	; (400d38 <main+0xb4>)
  400cb2:	4628      	mov	r0, r5
  400cb4:	4e21      	ldr	r6, [pc, #132]	; (400d3c <main+0xb8>)
  400cb6:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
  400cb8:	4621      	mov	r1, r4
  400cba:	4628      	mov	r0, r5
  400cbc:	47b0      	blx	r6
	timer_start(&TIMER_0);
  400cbe:	4628      	mov	r0, r5
  400cc0:	4b1f      	ldr	r3, [pc, #124]	; (400d40 <main+0xbc>)
  400cc2:	4798      	blx	r3
	
	for(int i = 0; i < 12; i++)
  400cc4:	2200      	movs	r2, #0
  400cc6:	e00e      	b.n	400ce6 <main+0x62>
	{
		gpio_set_pin_direction(GPIO(GPIO_PORTC, i), GPIO_DIRECTION_OUT);
  400cc8:	f002 031f 	and.w	r3, r2, #31
  400ccc:	3340      	adds	r3, #64	; 0x40
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
  400cce:	f3c3 1047 	ubfx	r0, r3, #5, #8
  400cd2:	f003 031f 	and.w	r3, r3, #31
  400cd6:	2101      	movs	r1, #1
  400cd8:	4099      	lsls	r1, r3
	return (void *)((uint32_t)PIOA + port * 0x200);
  400cda:	4b1a      	ldr	r3, [pc, #104]	; (400d44 <main+0xc0>)
  400cdc:	eb03 2340 	add.w	r3, r3, r0, lsl #9
  400ce0:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  400ce2:	6319      	str	r1, [r3, #48]	; 0x30
	for(int i = 0; i < 12; i++)
  400ce4:	3201      	adds	r2, #1
  400ce6:	2a0b      	cmp	r2, #11
  400ce8:	ddee      	ble.n	400cc8 <main+0x44>
  400cea:	e017      	b.n	400d1c <main+0x98>
	
	/* Replace with your application code */
	while (1) {
		for(int i = 0; i < 12; i++)
		{
			gpio_toggle_pin_level(GPIO(GPIO_PORTC, i));
  400cec:	f004 031f 	and.w	r3, r4, #31
  400cf0:	3340      	adds	r3, #64	; 0x40
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
  400cf2:	f3c3 1147 	ubfx	r1, r3, #5, #8
  400cf6:	f003 031f 	and.w	r3, r3, #31
  400cfa:	2001      	movs	r0, #1
  400cfc:	fa00 f303 	lsl.w	r3, r0, r3
  400d00:	4a10      	ldr	r2, [pc, #64]	; (400d44 <main+0xc0>)
  400d02:	eb02 2241 	add.w	r2, r2, r1, lsl #9
	tmp = ((Pio *)hw)->PIO_ODSR;
  400d06:	6b91      	ldr	r1, [r2, #56]	; 0x38
	tmp &= mask;
  400d08:	4019      	ands	r1, r3
	bits_set   = (~bits_clear) & mask;
  400d0a:	ea23 0301 	bic.w	r3, r3, r1
	((Pio *)hw)->PIO_SODR = mask;
  400d0e:	6313      	str	r3, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  400d10:	6351      	str	r1, [r2, #52]	; 0x34
			delay_us(1);
  400d12:	4b0d      	ldr	r3, [pc, #52]	; (400d48 <main+0xc4>)
  400d14:	4798      	blx	r3
		for(int i = 0; i < 12; i++)
  400d16:	3401      	adds	r4, #1
  400d18:	2c0b      	cmp	r4, #11
  400d1a:	dde7      	ble.n	400cec <main+0x68>
  400d1c:	2400      	movs	r4, #0
  400d1e:	e7fb      	b.n	400d18 <main+0x94>
  400d20:	004001d5 	.word	0x004001d5
  400d24:	400e1400 	.word	0x400e1400
  400d28:	204000f8 	.word	0x204000f8
  400d2c:	00400c55 	.word	0x00400c55
  400d30:	204000e4 	.word	0x204000e4
  400d34:	00400c6d 	.word	0x00400c6d
  400d38:	204000c8 	.word	0x204000c8
  400d3c:	00400501 	.word	0x00400501
  400d40:	004004c5 	.word	0x004004c5
  400d44:	400e0e00 	.word	0x400e0e00
  400d48:	00400351 	.word	0x00400351

00400d4c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  400d4c:	b958      	cbnz	r0, 400d66 <_read+0x1a>
{
  400d4e:	b508      	push	{r3, lr}
  400d50:	460b      	mov	r3, r1
  400d52:	4611      	mov	r1, r2
  400d54:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  400d56:	4b05      	ldr	r3, [pc, #20]	; (400d6c <_read+0x20>)
  400d58:	4798      	blx	r3
	if (n < 0) {
  400d5a:	2800      	cmp	r0, #0
  400d5c:	db00      	blt.n	400d60 <_read+0x14>
		return -1;
	}

	return n;
}
  400d5e:	bd08      	pop	{r3, pc}
		return -1;
  400d60:	f04f 30ff 	mov.w	r0, #4294967295
  400d64:	bd08      	pop	{r3, pc}
		return -1;
  400d66:	f04f 30ff 	mov.w	r0, #4294967295
  400d6a:	4770      	bx	lr
  400d6c:	00400dc5 	.word	0x00400dc5

00400d70 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  400d70:	3801      	subs	r0, #1
  400d72:	2802      	cmp	r0, #2
  400d74:	d80b      	bhi.n	400d8e <_write+0x1e>
{
  400d76:	b508      	push	{r3, lr}
  400d78:	460b      	mov	r3, r1
  400d7a:	4611      	mov	r1, r2
  400d7c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  400d7e:	4b05      	ldr	r3, [pc, #20]	; (400d94 <_write+0x24>)
  400d80:	4798      	blx	r3
	if (n < 0) {
  400d82:	2800      	cmp	r0, #0
  400d84:	db00      	blt.n	400d88 <_write+0x18>
		return -1;
	}

	return n;
}
  400d86:	bd08      	pop	{r3, pc}
		return -1;
  400d88:	f04f 30ff 	mov.w	r0, #4294967295
  400d8c:	bd08      	pop	{r3, pc}
		return -1;
  400d8e:	f04f 30ff 	mov.w	r0, #4294967295
  400d92:	4770      	bx	lr
  400d94:	00400de9 	.word	0x00400de9

00400d98 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  400d98:	b570      	push	{r4, r5, r6, lr}
  400d9a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  400d9c:	4d06      	ldr	r5, [pc, #24]	; (400db8 <stdio_io_init+0x20>)
  400d9e:	682b      	ldr	r3, [r5, #0]
  400da0:	2100      	movs	r1, #0
  400da2:	6898      	ldr	r0, [r3, #8]
  400da4:	4c05      	ldr	r4, [pc, #20]	; (400dbc <stdio_io_init+0x24>)
  400da6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400da8:	682b      	ldr	r3, [r5, #0]
  400daa:	2100      	movs	r1, #0
  400dac:	6858      	ldr	r0, [r3, #4]
  400dae:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  400db0:	4b03      	ldr	r3, [pc, #12]	; (400dc0 <stdio_io_init+0x28>)
  400db2:	601e      	str	r6, [r3, #0]
  400db4:	bd70      	pop	{r4, r5, r6, pc}
  400db6:	bf00      	nop
  400db8:	20400024 	.word	0x20400024
  400dbc:	00400e85 	.word	0x00400e85
  400dc0:	204000b0 	.word	0x204000b0

00400dc4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  400dc4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  400dc6:	4b06      	ldr	r3, [pc, #24]	; (400de0 <stdio_io_read+0x1c>)
  400dc8:	681b      	ldr	r3, [r3, #0]
  400dca:	b133      	cbz	r3, 400dda <stdio_io_read+0x16>
  400dcc:	460a      	mov	r2, r1
  400dce:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  400dd0:	b292      	uxth	r2, r2
  400dd2:	4618      	mov	r0, r3
  400dd4:	4b03      	ldr	r3, [pc, #12]	; (400de4 <stdio_io_read+0x20>)
  400dd6:	4798      	blx	r3
  400dd8:	bd08      	pop	{r3, pc}
		return 0;
  400dda:	2000      	movs	r0, #0
}
  400ddc:	bd08      	pop	{r3, pc}
  400dde:	bf00      	nop
  400de0:	204000b0 	.word	0x204000b0
  400de4:	004003a1 	.word	0x004003a1

00400de8 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  400de8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  400dea:	4b06      	ldr	r3, [pc, #24]	; (400e04 <stdio_io_write+0x1c>)
  400dec:	681b      	ldr	r3, [r3, #0]
  400dee:	b133      	cbz	r3, 400dfe <stdio_io_write+0x16>
  400df0:	460a      	mov	r2, r1
  400df2:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  400df4:	b292      	uxth	r2, r2
  400df6:	4618      	mov	r0, r3
  400df8:	4b03      	ldr	r3, [pc, #12]	; (400e08 <stdio_io_write+0x20>)
  400dfa:	4798      	blx	r3
  400dfc:	bd08      	pop	{r3, pc}
		return 0;
  400dfe:	2000      	movs	r0, #0
}
  400e00:	bd08      	pop	{r3, pc}
  400e02:	bf00      	nop
  400e04:	204000b0 	.word	0x204000b0
  400e08:	00400371 	.word	0x00400371

00400e0c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  400e0c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  400e0e:	4c04      	ldr	r4, [pc, #16]	; (400e20 <stdio_redirect_init+0x14>)
  400e10:	4620      	mov	r0, r4
  400e12:	4b04      	ldr	r3, [pc, #16]	; (400e24 <stdio_redirect_init+0x18>)
  400e14:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  400e16:	4620      	mov	r0, r4
  400e18:	4b03      	ldr	r3, [pc, #12]	; (400e28 <stdio_redirect_init+0x1c>)
  400e1a:	4798      	blx	r3
  400e1c:	bd10      	pop	{r4, pc}
  400e1e:	bf00      	nop
  400e20:	204000bc 	.word	0x204000bc
  400e24:	004006c1 	.word	0x004006c1
  400e28:	00400d99 	.word	0x00400d99

00400e2c <__libc_init_array>:
  400e2c:	b570      	push	{r4, r5, r6, lr}
  400e2e:	4e0d      	ldr	r6, [pc, #52]	; (400e64 <__libc_init_array+0x38>)
  400e30:	4c0d      	ldr	r4, [pc, #52]	; (400e68 <__libc_init_array+0x3c>)
  400e32:	1ba4      	subs	r4, r4, r6
  400e34:	10a4      	asrs	r4, r4, #2
  400e36:	2500      	movs	r5, #0
  400e38:	42a5      	cmp	r5, r4
  400e3a:	d109      	bne.n	400e50 <__libc_init_array+0x24>
  400e3c:	4e0b      	ldr	r6, [pc, #44]	; (400e6c <__libc_init_array+0x40>)
  400e3e:	4c0c      	ldr	r4, [pc, #48]	; (400e70 <__libc_init_array+0x44>)
  400e40:	f000 fc5a 	bl	4016f8 <_init>
  400e44:	1ba4      	subs	r4, r4, r6
  400e46:	10a4      	asrs	r4, r4, #2
  400e48:	2500      	movs	r5, #0
  400e4a:	42a5      	cmp	r5, r4
  400e4c:	d105      	bne.n	400e5a <__libc_init_array+0x2e>
  400e4e:	bd70      	pop	{r4, r5, r6, pc}
  400e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400e54:	4798      	blx	r3
  400e56:	3501      	adds	r5, #1
  400e58:	e7ee      	b.n	400e38 <__libc_init_array+0xc>
  400e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400e5e:	4798      	blx	r3
  400e60:	3501      	adds	r5, #1
  400e62:	e7f2      	b.n	400e4a <__libc_init_array+0x1e>
  400e64:	00401704 	.word	0x00401704
  400e68:	00401704 	.word	0x00401704
  400e6c:	00401704 	.word	0x00401704
  400e70:	00401708 	.word	0x00401708

00400e74 <memset>:
  400e74:	4402      	add	r2, r0
  400e76:	4603      	mov	r3, r0
  400e78:	4293      	cmp	r3, r2
  400e7a:	d100      	bne.n	400e7e <memset+0xa>
  400e7c:	4770      	bx	lr
  400e7e:	f803 1b01 	strb.w	r1, [r3], #1
  400e82:	e7f9      	b.n	400e78 <memset+0x4>

00400e84 <setbuf>:
  400e84:	2900      	cmp	r1, #0
  400e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400e8a:	bf0c      	ite	eq
  400e8c:	2202      	moveq	r2, #2
  400e8e:	2200      	movne	r2, #0
  400e90:	f000 b800 	b.w	400e94 <setvbuf>

00400e94 <setvbuf>:
  400e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  400e98:	461d      	mov	r5, r3
  400e9a:	4b51      	ldr	r3, [pc, #324]	; (400fe0 <setvbuf+0x14c>)
  400e9c:	681e      	ldr	r6, [r3, #0]
  400e9e:	4604      	mov	r4, r0
  400ea0:	460f      	mov	r7, r1
  400ea2:	4690      	mov	r8, r2
  400ea4:	b126      	cbz	r6, 400eb0 <setvbuf+0x1c>
  400ea6:	69b3      	ldr	r3, [r6, #24]
  400ea8:	b913      	cbnz	r3, 400eb0 <setvbuf+0x1c>
  400eaa:	4630      	mov	r0, r6
  400eac:	f000 f992 	bl	4011d4 <__sinit>
  400eb0:	4b4c      	ldr	r3, [pc, #304]	; (400fe4 <setvbuf+0x150>)
  400eb2:	429c      	cmp	r4, r3
  400eb4:	d152      	bne.n	400f5c <setvbuf+0xc8>
  400eb6:	6874      	ldr	r4, [r6, #4]
  400eb8:	f1b8 0f02 	cmp.w	r8, #2
  400ebc:	d006      	beq.n	400ecc <setvbuf+0x38>
  400ebe:	f1b8 0f01 	cmp.w	r8, #1
  400ec2:	f200 8089 	bhi.w	400fd8 <setvbuf+0x144>
  400ec6:	2d00      	cmp	r5, #0
  400ec8:	f2c0 8086 	blt.w	400fd8 <setvbuf+0x144>
  400ecc:	4621      	mov	r1, r4
  400ece:	4630      	mov	r0, r6
  400ed0:	f000 f916 	bl	401100 <_fflush_r>
  400ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  400ed6:	b141      	cbz	r1, 400eea <setvbuf+0x56>
  400ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  400edc:	4299      	cmp	r1, r3
  400ede:	d002      	beq.n	400ee6 <setvbuf+0x52>
  400ee0:	4630      	mov	r0, r6
  400ee2:	f000 fa2d 	bl	401340 <_free_r>
  400ee6:	2300      	movs	r3, #0
  400ee8:	6363      	str	r3, [r4, #52]	; 0x34
  400eea:	2300      	movs	r3, #0
  400eec:	61a3      	str	r3, [r4, #24]
  400eee:	6063      	str	r3, [r4, #4]
  400ef0:	89a3      	ldrh	r3, [r4, #12]
  400ef2:	061b      	lsls	r3, r3, #24
  400ef4:	d503      	bpl.n	400efe <setvbuf+0x6a>
  400ef6:	6921      	ldr	r1, [r4, #16]
  400ef8:	4630      	mov	r0, r6
  400efa:	f000 fa21 	bl	401340 <_free_r>
  400efe:	89a3      	ldrh	r3, [r4, #12]
  400f00:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  400f04:	f023 0303 	bic.w	r3, r3, #3
  400f08:	f1b8 0f02 	cmp.w	r8, #2
  400f0c:	81a3      	strh	r3, [r4, #12]
  400f0e:	d05d      	beq.n	400fcc <setvbuf+0x138>
  400f10:	ab01      	add	r3, sp, #4
  400f12:	466a      	mov	r2, sp
  400f14:	4621      	mov	r1, r4
  400f16:	4630      	mov	r0, r6
  400f18:	f000 f9e6 	bl	4012e8 <__swhatbuf_r>
  400f1c:	89a3      	ldrh	r3, [r4, #12]
  400f1e:	4318      	orrs	r0, r3
  400f20:	81a0      	strh	r0, [r4, #12]
  400f22:	bb2d      	cbnz	r5, 400f70 <setvbuf+0xdc>
  400f24:	9d00      	ldr	r5, [sp, #0]
  400f26:	4628      	mov	r0, r5
  400f28:	f000 fa02 	bl	401330 <malloc>
  400f2c:	4607      	mov	r7, r0
  400f2e:	2800      	cmp	r0, #0
  400f30:	d14e      	bne.n	400fd0 <setvbuf+0x13c>
  400f32:	f8dd 9000 	ldr.w	r9, [sp]
  400f36:	45a9      	cmp	r9, r5
  400f38:	d13c      	bne.n	400fb4 <setvbuf+0x120>
  400f3a:	f04f 30ff 	mov.w	r0, #4294967295
  400f3e:	89a3      	ldrh	r3, [r4, #12]
  400f40:	f043 0302 	orr.w	r3, r3, #2
  400f44:	81a3      	strh	r3, [r4, #12]
  400f46:	2300      	movs	r3, #0
  400f48:	60a3      	str	r3, [r4, #8]
  400f4a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  400f4e:	6023      	str	r3, [r4, #0]
  400f50:	6123      	str	r3, [r4, #16]
  400f52:	2301      	movs	r3, #1
  400f54:	6163      	str	r3, [r4, #20]
  400f56:	b003      	add	sp, #12
  400f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400f5c:	4b22      	ldr	r3, [pc, #136]	; (400fe8 <setvbuf+0x154>)
  400f5e:	429c      	cmp	r4, r3
  400f60:	d101      	bne.n	400f66 <setvbuf+0xd2>
  400f62:	68b4      	ldr	r4, [r6, #8]
  400f64:	e7a8      	b.n	400eb8 <setvbuf+0x24>
  400f66:	4b21      	ldr	r3, [pc, #132]	; (400fec <setvbuf+0x158>)
  400f68:	429c      	cmp	r4, r3
  400f6a:	bf08      	it	eq
  400f6c:	68f4      	ldreq	r4, [r6, #12]
  400f6e:	e7a3      	b.n	400eb8 <setvbuf+0x24>
  400f70:	2f00      	cmp	r7, #0
  400f72:	d0d8      	beq.n	400f26 <setvbuf+0x92>
  400f74:	69b3      	ldr	r3, [r6, #24]
  400f76:	b913      	cbnz	r3, 400f7e <setvbuf+0xea>
  400f78:	4630      	mov	r0, r6
  400f7a:	f000 f92b 	bl	4011d4 <__sinit>
  400f7e:	f1b8 0f01 	cmp.w	r8, #1
  400f82:	bf08      	it	eq
  400f84:	89a3      	ldrheq	r3, [r4, #12]
  400f86:	6027      	str	r7, [r4, #0]
  400f88:	bf04      	itt	eq
  400f8a:	f043 0301 	orreq.w	r3, r3, #1
  400f8e:	81a3      	strheq	r3, [r4, #12]
  400f90:	89a3      	ldrh	r3, [r4, #12]
  400f92:	6127      	str	r7, [r4, #16]
  400f94:	f013 0008 	ands.w	r0, r3, #8
  400f98:	6165      	str	r5, [r4, #20]
  400f9a:	d01b      	beq.n	400fd4 <setvbuf+0x140>
  400f9c:	f013 0001 	ands.w	r0, r3, #1
  400fa0:	bf18      	it	ne
  400fa2:	426d      	negne	r5, r5
  400fa4:	f04f 0300 	mov.w	r3, #0
  400fa8:	bf1d      	ittte	ne
  400faa:	60a3      	strne	r3, [r4, #8]
  400fac:	61a5      	strne	r5, [r4, #24]
  400fae:	4618      	movne	r0, r3
  400fb0:	60a5      	streq	r5, [r4, #8]
  400fb2:	e7d0      	b.n	400f56 <setvbuf+0xc2>
  400fb4:	4648      	mov	r0, r9
  400fb6:	f000 f9bb 	bl	401330 <malloc>
  400fba:	4607      	mov	r7, r0
  400fbc:	2800      	cmp	r0, #0
  400fbe:	d0bc      	beq.n	400f3a <setvbuf+0xa6>
  400fc0:	89a3      	ldrh	r3, [r4, #12]
  400fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400fc6:	81a3      	strh	r3, [r4, #12]
  400fc8:	464d      	mov	r5, r9
  400fca:	e7d3      	b.n	400f74 <setvbuf+0xe0>
  400fcc:	2000      	movs	r0, #0
  400fce:	e7b6      	b.n	400f3e <setvbuf+0xaa>
  400fd0:	46a9      	mov	r9, r5
  400fd2:	e7f5      	b.n	400fc0 <setvbuf+0x12c>
  400fd4:	60a0      	str	r0, [r4, #8]
  400fd6:	e7be      	b.n	400f56 <setvbuf+0xc2>
  400fd8:	f04f 30ff 	mov.w	r0, #4294967295
  400fdc:	e7bb      	b.n	400f56 <setvbuf+0xc2>
  400fde:	bf00      	nop
  400fe0:	20400024 	.word	0x20400024
  400fe4:	004016b8 	.word	0x004016b8
  400fe8:	004016d8 	.word	0x004016d8
  400fec:	00401698 	.word	0x00401698

00400ff0 <__sflush_r>:
  400ff0:	898a      	ldrh	r2, [r1, #12]
  400ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ff6:	4605      	mov	r5, r0
  400ff8:	0710      	lsls	r0, r2, #28
  400ffa:	460c      	mov	r4, r1
  400ffc:	d45a      	bmi.n	4010b4 <__sflush_r+0xc4>
  400ffe:	684b      	ldr	r3, [r1, #4]
  401000:	2b00      	cmp	r3, #0
  401002:	dc05      	bgt.n	401010 <__sflush_r+0x20>
  401004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  401006:	2b00      	cmp	r3, #0
  401008:	dc02      	bgt.n	401010 <__sflush_r+0x20>
  40100a:	2000      	movs	r0, #0
  40100c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401012:	2e00      	cmp	r6, #0
  401014:	d0f9      	beq.n	40100a <__sflush_r+0x1a>
  401016:	2300      	movs	r3, #0
  401018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  40101c:	682f      	ldr	r7, [r5, #0]
  40101e:	602b      	str	r3, [r5, #0]
  401020:	d033      	beq.n	40108a <__sflush_r+0x9a>
  401022:	6d60      	ldr	r0, [r4, #84]	; 0x54
  401024:	89a3      	ldrh	r3, [r4, #12]
  401026:	075a      	lsls	r2, r3, #29
  401028:	d505      	bpl.n	401036 <__sflush_r+0x46>
  40102a:	6863      	ldr	r3, [r4, #4]
  40102c:	1ac0      	subs	r0, r0, r3
  40102e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  401030:	b10b      	cbz	r3, 401036 <__sflush_r+0x46>
  401032:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401034:	1ac0      	subs	r0, r0, r3
  401036:	2300      	movs	r3, #0
  401038:	4602      	mov	r2, r0
  40103a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40103c:	6a21      	ldr	r1, [r4, #32]
  40103e:	4628      	mov	r0, r5
  401040:	47b0      	blx	r6
  401042:	1c43      	adds	r3, r0, #1
  401044:	89a3      	ldrh	r3, [r4, #12]
  401046:	d106      	bne.n	401056 <__sflush_r+0x66>
  401048:	6829      	ldr	r1, [r5, #0]
  40104a:	291d      	cmp	r1, #29
  40104c:	d84b      	bhi.n	4010e6 <__sflush_r+0xf6>
  40104e:	4a2b      	ldr	r2, [pc, #172]	; (4010fc <__sflush_r+0x10c>)
  401050:	40ca      	lsrs	r2, r1
  401052:	07d6      	lsls	r6, r2, #31
  401054:	d547      	bpl.n	4010e6 <__sflush_r+0xf6>
  401056:	2200      	movs	r2, #0
  401058:	6062      	str	r2, [r4, #4]
  40105a:	04d9      	lsls	r1, r3, #19
  40105c:	6922      	ldr	r2, [r4, #16]
  40105e:	6022      	str	r2, [r4, #0]
  401060:	d504      	bpl.n	40106c <__sflush_r+0x7c>
  401062:	1c42      	adds	r2, r0, #1
  401064:	d101      	bne.n	40106a <__sflush_r+0x7a>
  401066:	682b      	ldr	r3, [r5, #0]
  401068:	b903      	cbnz	r3, 40106c <__sflush_r+0x7c>
  40106a:	6560      	str	r0, [r4, #84]	; 0x54
  40106c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40106e:	602f      	str	r7, [r5, #0]
  401070:	2900      	cmp	r1, #0
  401072:	d0ca      	beq.n	40100a <__sflush_r+0x1a>
  401074:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401078:	4299      	cmp	r1, r3
  40107a:	d002      	beq.n	401082 <__sflush_r+0x92>
  40107c:	4628      	mov	r0, r5
  40107e:	f000 f95f 	bl	401340 <_free_r>
  401082:	2000      	movs	r0, #0
  401084:	6360      	str	r0, [r4, #52]	; 0x34
  401086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40108a:	6a21      	ldr	r1, [r4, #32]
  40108c:	2301      	movs	r3, #1
  40108e:	4628      	mov	r0, r5
  401090:	47b0      	blx	r6
  401092:	1c41      	adds	r1, r0, #1
  401094:	d1c6      	bne.n	401024 <__sflush_r+0x34>
  401096:	682b      	ldr	r3, [r5, #0]
  401098:	2b00      	cmp	r3, #0
  40109a:	d0c3      	beq.n	401024 <__sflush_r+0x34>
  40109c:	2b1d      	cmp	r3, #29
  40109e:	d001      	beq.n	4010a4 <__sflush_r+0xb4>
  4010a0:	2b16      	cmp	r3, #22
  4010a2:	d101      	bne.n	4010a8 <__sflush_r+0xb8>
  4010a4:	602f      	str	r7, [r5, #0]
  4010a6:	e7b0      	b.n	40100a <__sflush_r+0x1a>
  4010a8:	89a3      	ldrh	r3, [r4, #12]
  4010aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4010ae:	81a3      	strh	r3, [r4, #12]
  4010b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010b4:	690f      	ldr	r7, [r1, #16]
  4010b6:	2f00      	cmp	r7, #0
  4010b8:	d0a7      	beq.n	40100a <__sflush_r+0x1a>
  4010ba:	0793      	lsls	r3, r2, #30
  4010bc:	680e      	ldr	r6, [r1, #0]
  4010be:	bf08      	it	eq
  4010c0:	694b      	ldreq	r3, [r1, #20]
  4010c2:	600f      	str	r7, [r1, #0]
  4010c4:	bf18      	it	ne
  4010c6:	2300      	movne	r3, #0
  4010c8:	eba6 0807 	sub.w	r8, r6, r7
  4010cc:	608b      	str	r3, [r1, #8]
  4010ce:	f1b8 0f00 	cmp.w	r8, #0
  4010d2:	dd9a      	ble.n	40100a <__sflush_r+0x1a>
  4010d4:	4643      	mov	r3, r8
  4010d6:	463a      	mov	r2, r7
  4010d8:	6a21      	ldr	r1, [r4, #32]
  4010da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4010dc:	4628      	mov	r0, r5
  4010de:	47b0      	blx	r6
  4010e0:	2800      	cmp	r0, #0
  4010e2:	dc07      	bgt.n	4010f4 <__sflush_r+0x104>
  4010e4:	89a3      	ldrh	r3, [r4, #12]
  4010e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4010ea:	81a3      	strh	r3, [r4, #12]
  4010ec:	f04f 30ff 	mov.w	r0, #4294967295
  4010f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010f4:	4407      	add	r7, r0
  4010f6:	eba8 0800 	sub.w	r8, r8, r0
  4010fa:	e7e8      	b.n	4010ce <__sflush_r+0xde>
  4010fc:	20400001 	.word	0x20400001

00401100 <_fflush_r>:
  401100:	b538      	push	{r3, r4, r5, lr}
  401102:	690b      	ldr	r3, [r1, #16]
  401104:	4605      	mov	r5, r0
  401106:	460c      	mov	r4, r1
  401108:	b1db      	cbz	r3, 401142 <_fflush_r+0x42>
  40110a:	b118      	cbz	r0, 401114 <_fflush_r+0x14>
  40110c:	6983      	ldr	r3, [r0, #24]
  40110e:	b90b      	cbnz	r3, 401114 <_fflush_r+0x14>
  401110:	f000 f860 	bl	4011d4 <__sinit>
  401114:	4b0c      	ldr	r3, [pc, #48]	; (401148 <_fflush_r+0x48>)
  401116:	429c      	cmp	r4, r3
  401118:	d109      	bne.n	40112e <_fflush_r+0x2e>
  40111a:	686c      	ldr	r4, [r5, #4]
  40111c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401120:	b17b      	cbz	r3, 401142 <_fflush_r+0x42>
  401122:	4621      	mov	r1, r4
  401124:	4628      	mov	r0, r5
  401126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40112a:	f7ff bf61 	b.w	400ff0 <__sflush_r>
  40112e:	4b07      	ldr	r3, [pc, #28]	; (40114c <_fflush_r+0x4c>)
  401130:	429c      	cmp	r4, r3
  401132:	d101      	bne.n	401138 <_fflush_r+0x38>
  401134:	68ac      	ldr	r4, [r5, #8]
  401136:	e7f1      	b.n	40111c <_fflush_r+0x1c>
  401138:	4b05      	ldr	r3, [pc, #20]	; (401150 <_fflush_r+0x50>)
  40113a:	429c      	cmp	r4, r3
  40113c:	bf08      	it	eq
  40113e:	68ec      	ldreq	r4, [r5, #12]
  401140:	e7ec      	b.n	40111c <_fflush_r+0x1c>
  401142:	2000      	movs	r0, #0
  401144:	bd38      	pop	{r3, r4, r5, pc}
  401146:	bf00      	nop
  401148:	004016b8 	.word	0x004016b8
  40114c:	004016d8 	.word	0x004016d8
  401150:	00401698 	.word	0x00401698

00401154 <_cleanup_r>:
  401154:	4901      	ldr	r1, [pc, #4]	; (40115c <_cleanup_r+0x8>)
  401156:	f000 b8a9 	b.w	4012ac <_fwalk_reent>
  40115a:	bf00      	nop
  40115c:	00401101 	.word	0x00401101

00401160 <std.isra.0>:
  401160:	2300      	movs	r3, #0
  401162:	b510      	push	{r4, lr}
  401164:	4604      	mov	r4, r0
  401166:	6003      	str	r3, [r0, #0]
  401168:	6043      	str	r3, [r0, #4]
  40116a:	6083      	str	r3, [r0, #8]
  40116c:	8181      	strh	r1, [r0, #12]
  40116e:	6643      	str	r3, [r0, #100]	; 0x64
  401170:	81c2      	strh	r2, [r0, #14]
  401172:	6103      	str	r3, [r0, #16]
  401174:	6143      	str	r3, [r0, #20]
  401176:	6183      	str	r3, [r0, #24]
  401178:	4619      	mov	r1, r3
  40117a:	2208      	movs	r2, #8
  40117c:	305c      	adds	r0, #92	; 0x5c
  40117e:	f7ff fe79 	bl	400e74 <memset>
  401182:	4b05      	ldr	r3, [pc, #20]	; (401198 <std.isra.0+0x38>)
  401184:	6263      	str	r3, [r4, #36]	; 0x24
  401186:	4b05      	ldr	r3, [pc, #20]	; (40119c <std.isra.0+0x3c>)
  401188:	62a3      	str	r3, [r4, #40]	; 0x28
  40118a:	4b05      	ldr	r3, [pc, #20]	; (4011a0 <std.isra.0+0x40>)
  40118c:	62e3      	str	r3, [r4, #44]	; 0x2c
  40118e:	4b05      	ldr	r3, [pc, #20]	; (4011a4 <std.isra.0+0x44>)
  401190:	6224      	str	r4, [r4, #32]
  401192:	6323      	str	r3, [r4, #48]	; 0x30
  401194:	bd10      	pop	{r4, pc}
  401196:	bf00      	nop
  401198:	004014b9 	.word	0x004014b9
  40119c:	004014db 	.word	0x004014db
  4011a0:	00401513 	.word	0x00401513
  4011a4:	00401537 	.word	0x00401537

004011a8 <__sfmoreglue>:
  4011a8:	b570      	push	{r4, r5, r6, lr}
  4011aa:	1e4a      	subs	r2, r1, #1
  4011ac:	2568      	movs	r5, #104	; 0x68
  4011ae:	4355      	muls	r5, r2
  4011b0:	460e      	mov	r6, r1
  4011b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4011b6:	f000 f911 	bl	4013dc <_malloc_r>
  4011ba:	4604      	mov	r4, r0
  4011bc:	b140      	cbz	r0, 4011d0 <__sfmoreglue+0x28>
  4011be:	2100      	movs	r1, #0
  4011c0:	e880 0042 	stmia.w	r0, {r1, r6}
  4011c4:	300c      	adds	r0, #12
  4011c6:	60a0      	str	r0, [r4, #8]
  4011c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4011cc:	f7ff fe52 	bl	400e74 <memset>
  4011d0:	4620      	mov	r0, r4
  4011d2:	bd70      	pop	{r4, r5, r6, pc}

004011d4 <__sinit>:
  4011d4:	6983      	ldr	r3, [r0, #24]
  4011d6:	b510      	push	{r4, lr}
  4011d8:	4604      	mov	r4, r0
  4011da:	bb33      	cbnz	r3, 40122a <__sinit+0x56>
  4011dc:	6483      	str	r3, [r0, #72]	; 0x48
  4011de:	64c3      	str	r3, [r0, #76]	; 0x4c
  4011e0:	6503      	str	r3, [r0, #80]	; 0x50
  4011e2:	4b12      	ldr	r3, [pc, #72]	; (40122c <__sinit+0x58>)
  4011e4:	4a12      	ldr	r2, [pc, #72]	; (401230 <__sinit+0x5c>)
  4011e6:	681b      	ldr	r3, [r3, #0]
  4011e8:	6282      	str	r2, [r0, #40]	; 0x28
  4011ea:	4298      	cmp	r0, r3
  4011ec:	bf04      	itt	eq
  4011ee:	2301      	moveq	r3, #1
  4011f0:	6183      	streq	r3, [r0, #24]
  4011f2:	f000 f81f 	bl	401234 <__sfp>
  4011f6:	6060      	str	r0, [r4, #4]
  4011f8:	4620      	mov	r0, r4
  4011fa:	f000 f81b 	bl	401234 <__sfp>
  4011fe:	60a0      	str	r0, [r4, #8]
  401200:	4620      	mov	r0, r4
  401202:	f000 f817 	bl	401234 <__sfp>
  401206:	2200      	movs	r2, #0
  401208:	60e0      	str	r0, [r4, #12]
  40120a:	2104      	movs	r1, #4
  40120c:	6860      	ldr	r0, [r4, #4]
  40120e:	f7ff ffa7 	bl	401160 <std.isra.0>
  401212:	2201      	movs	r2, #1
  401214:	2109      	movs	r1, #9
  401216:	68a0      	ldr	r0, [r4, #8]
  401218:	f7ff ffa2 	bl	401160 <std.isra.0>
  40121c:	2202      	movs	r2, #2
  40121e:	2112      	movs	r1, #18
  401220:	68e0      	ldr	r0, [r4, #12]
  401222:	f7ff ff9d 	bl	401160 <std.isra.0>
  401226:	2301      	movs	r3, #1
  401228:	61a3      	str	r3, [r4, #24]
  40122a:	bd10      	pop	{r4, pc}
  40122c:	00401694 	.word	0x00401694
  401230:	00401155 	.word	0x00401155

00401234 <__sfp>:
  401234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401236:	4b1c      	ldr	r3, [pc, #112]	; (4012a8 <__sfp+0x74>)
  401238:	681e      	ldr	r6, [r3, #0]
  40123a:	69b3      	ldr	r3, [r6, #24]
  40123c:	4607      	mov	r7, r0
  40123e:	b913      	cbnz	r3, 401246 <__sfp+0x12>
  401240:	4630      	mov	r0, r6
  401242:	f7ff ffc7 	bl	4011d4 <__sinit>
  401246:	3648      	adds	r6, #72	; 0x48
  401248:	68b4      	ldr	r4, [r6, #8]
  40124a:	6873      	ldr	r3, [r6, #4]
  40124c:	3b01      	subs	r3, #1
  40124e:	d503      	bpl.n	401258 <__sfp+0x24>
  401250:	6833      	ldr	r3, [r6, #0]
  401252:	b133      	cbz	r3, 401262 <__sfp+0x2e>
  401254:	6836      	ldr	r6, [r6, #0]
  401256:	e7f7      	b.n	401248 <__sfp+0x14>
  401258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40125c:	b16d      	cbz	r5, 40127a <__sfp+0x46>
  40125e:	3468      	adds	r4, #104	; 0x68
  401260:	e7f4      	b.n	40124c <__sfp+0x18>
  401262:	2104      	movs	r1, #4
  401264:	4638      	mov	r0, r7
  401266:	f7ff ff9f 	bl	4011a8 <__sfmoreglue>
  40126a:	6030      	str	r0, [r6, #0]
  40126c:	2800      	cmp	r0, #0
  40126e:	d1f1      	bne.n	401254 <__sfp+0x20>
  401270:	230c      	movs	r3, #12
  401272:	603b      	str	r3, [r7, #0]
  401274:	4604      	mov	r4, r0
  401276:	4620      	mov	r0, r4
  401278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40127a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40127e:	81e3      	strh	r3, [r4, #14]
  401280:	2301      	movs	r3, #1
  401282:	81a3      	strh	r3, [r4, #12]
  401284:	6665      	str	r5, [r4, #100]	; 0x64
  401286:	6025      	str	r5, [r4, #0]
  401288:	60a5      	str	r5, [r4, #8]
  40128a:	6065      	str	r5, [r4, #4]
  40128c:	6125      	str	r5, [r4, #16]
  40128e:	6165      	str	r5, [r4, #20]
  401290:	61a5      	str	r5, [r4, #24]
  401292:	2208      	movs	r2, #8
  401294:	4629      	mov	r1, r5
  401296:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  40129a:	f7ff fdeb 	bl	400e74 <memset>
  40129e:	6365      	str	r5, [r4, #52]	; 0x34
  4012a0:	63a5      	str	r5, [r4, #56]	; 0x38
  4012a2:	64a5      	str	r5, [r4, #72]	; 0x48
  4012a4:	64e5      	str	r5, [r4, #76]	; 0x4c
  4012a6:	e7e6      	b.n	401276 <__sfp+0x42>
  4012a8:	00401694 	.word	0x00401694

004012ac <_fwalk_reent>:
  4012ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4012b0:	4680      	mov	r8, r0
  4012b2:	4689      	mov	r9, r1
  4012b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4012b8:	2600      	movs	r6, #0
  4012ba:	b914      	cbnz	r4, 4012c2 <_fwalk_reent+0x16>
  4012bc:	4630      	mov	r0, r6
  4012be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4012c2:	68a5      	ldr	r5, [r4, #8]
  4012c4:	6867      	ldr	r7, [r4, #4]
  4012c6:	3f01      	subs	r7, #1
  4012c8:	d501      	bpl.n	4012ce <_fwalk_reent+0x22>
  4012ca:	6824      	ldr	r4, [r4, #0]
  4012cc:	e7f5      	b.n	4012ba <_fwalk_reent+0xe>
  4012ce:	89ab      	ldrh	r3, [r5, #12]
  4012d0:	2b01      	cmp	r3, #1
  4012d2:	d907      	bls.n	4012e4 <_fwalk_reent+0x38>
  4012d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4012d8:	3301      	adds	r3, #1
  4012da:	d003      	beq.n	4012e4 <_fwalk_reent+0x38>
  4012dc:	4629      	mov	r1, r5
  4012de:	4640      	mov	r0, r8
  4012e0:	47c8      	blx	r9
  4012e2:	4306      	orrs	r6, r0
  4012e4:	3568      	adds	r5, #104	; 0x68
  4012e6:	e7ee      	b.n	4012c6 <_fwalk_reent+0x1a>

004012e8 <__swhatbuf_r>:
  4012e8:	b570      	push	{r4, r5, r6, lr}
  4012ea:	460e      	mov	r6, r1
  4012ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4012f0:	2900      	cmp	r1, #0
  4012f2:	b090      	sub	sp, #64	; 0x40
  4012f4:	4614      	mov	r4, r2
  4012f6:	461d      	mov	r5, r3
  4012f8:	da07      	bge.n	40130a <__swhatbuf_r+0x22>
  4012fa:	2300      	movs	r3, #0
  4012fc:	602b      	str	r3, [r5, #0]
  4012fe:	89b3      	ldrh	r3, [r6, #12]
  401300:	061a      	lsls	r2, r3, #24
  401302:	d410      	bmi.n	401326 <__swhatbuf_r+0x3e>
  401304:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401308:	e00e      	b.n	401328 <__swhatbuf_r+0x40>
  40130a:	aa01      	add	r2, sp, #4
  40130c:	f000 f93a 	bl	401584 <_fstat_r>
  401310:	2800      	cmp	r0, #0
  401312:	dbf2      	blt.n	4012fa <__swhatbuf_r+0x12>
  401314:	9a02      	ldr	r2, [sp, #8]
  401316:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40131a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  40131e:	425a      	negs	r2, r3
  401320:	415a      	adcs	r2, r3
  401322:	602a      	str	r2, [r5, #0]
  401324:	e7ee      	b.n	401304 <__swhatbuf_r+0x1c>
  401326:	2340      	movs	r3, #64	; 0x40
  401328:	2000      	movs	r0, #0
  40132a:	6023      	str	r3, [r4, #0]
  40132c:	b010      	add	sp, #64	; 0x40
  40132e:	bd70      	pop	{r4, r5, r6, pc}

00401330 <malloc>:
  401330:	4b02      	ldr	r3, [pc, #8]	; (40133c <malloc+0xc>)
  401332:	4601      	mov	r1, r0
  401334:	6818      	ldr	r0, [r3, #0]
  401336:	f000 b851 	b.w	4013dc <_malloc_r>
  40133a:	bf00      	nop
  40133c:	20400024 	.word	0x20400024

00401340 <_free_r>:
  401340:	b538      	push	{r3, r4, r5, lr}
  401342:	4605      	mov	r5, r0
  401344:	2900      	cmp	r1, #0
  401346:	d045      	beq.n	4013d4 <_free_r+0x94>
  401348:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40134c:	1f0c      	subs	r4, r1, #4
  40134e:	2b00      	cmp	r3, #0
  401350:	bfb8      	it	lt
  401352:	18e4      	addlt	r4, r4, r3
  401354:	f000 f93a 	bl	4015cc <__malloc_lock>
  401358:	4a1f      	ldr	r2, [pc, #124]	; (4013d8 <_free_r+0x98>)
  40135a:	6813      	ldr	r3, [r2, #0]
  40135c:	4610      	mov	r0, r2
  40135e:	b933      	cbnz	r3, 40136e <_free_r+0x2e>
  401360:	6063      	str	r3, [r4, #4]
  401362:	6014      	str	r4, [r2, #0]
  401364:	4628      	mov	r0, r5
  401366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40136a:	f000 b930 	b.w	4015ce <__malloc_unlock>
  40136e:	42a3      	cmp	r3, r4
  401370:	d90c      	bls.n	40138c <_free_r+0x4c>
  401372:	6821      	ldr	r1, [r4, #0]
  401374:	1862      	adds	r2, r4, r1
  401376:	4293      	cmp	r3, r2
  401378:	bf04      	itt	eq
  40137a:	681a      	ldreq	r2, [r3, #0]
  40137c:	685b      	ldreq	r3, [r3, #4]
  40137e:	6063      	str	r3, [r4, #4]
  401380:	bf04      	itt	eq
  401382:	1852      	addeq	r2, r2, r1
  401384:	6022      	streq	r2, [r4, #0]
  401386:	6004      	str	r4, [r0, #0]
  401388:	e7ec      	b.n	401364 <_free_r+0x24>
  40138a:	4613      	mov	r3, r2
  40138c:	685a      	ldr	r2, [r3, #4]
  40138e:	b10a      	cbz	r2, 401394 <_free_r+0x54>
  401390:	42a2      	cmp	r2, r4
  401392:	d9fa      	bls.n	40138a <_free_r+0x4a>
  401394:	6819      	ldr	r1, [r3, #0]
  401396:	1858      	adds	r0, r3, r1
  401398:	42a0      	cmp	r0, r4
  40139a:	d10b      	bne.n	4013b4 <_free_r+0x74>
  40139c:	6820      	ldr	r0, [r4, #0]
  40139e:	4401      	add	r1, r0
  4013a0:	1858      	adds	r0, r3, r1
  4013a2:	4282      	cmp	r2, r0
  4013a4:	6019      	str	r1, [r3, #0]
  4013a6:	d1dd      	bne.n	401364 <_free_r+0x24>
  4013a8:	6810      	ldr	r0, [r2, #0]
  4013aa:	6852      	ldr	r2, [r2, #4]
  4013ac:	605a      	str	r2, [r3, #4]
  4013ae:	4401      	add	r1, r0
  4013b0:	6019      	str	r1, [r3, #0]
  4013b2:	e7d7      	b.n	401364 <_free_r+0x24>
  4013b4:	d902      	bls.n	4013bc <_free_r+0x7c>
  4013b6:	230c      	movs	r3, #12
  4013b8:	602b      	str	r3, [r5, #0]
  4013ba:	e7d3      	b.n	401364 <_free_r+0x24>
  4013bc:	6820      	ldr	r0, [r4, #0]
  4013be:	1821      	adds	r1, r4, r0
  4013c0:	428a      	cmp	r2, r1
  4013c2:	bf04      	itt	eq
  4013c4:	6811      	ldreq	r1, [r2, #0]
  4013c6:	6852      	ldreq	r2, [r2, #4]
  4013c8:	6062      	str	r2, [r4, #4]
  4013ca:	bf04      	itt	eq
  4013cc:	1809      	addeq	r1, r1, r0
  4013ce:	6021      	streq	r1, [r4, #0]
  4013d0:	605c      	str	r4, [r3, #4]
  4013d2:	e7c7      	b.n	401364 <_free_r+0x24>
  4013d4:	bd38      	pop	{r3, r4, r5, pc}
  4013d6:	bf00      	nop
  4013d8:	204000b4 	.word	0x204000b4

004013dc <_malloc_r>:
  4013dc:	b570      	push	{r4, r5, r6, lr}
  4013de:	1ccd      	adds	r5, r1, #3
  4013e0:	f025 0503 	bic.w	r5, r5, #3
  4013e4:	3508      	adds	r5, #8
  4013e6:	2d0c      	cmp	r5, #12
  4013e8:	bf38      	it	cc
  4013ea:	250c      	movcc	r5, #12
  4013ec:	2d00      	cmp	r5, #0
  4013ee:	4606      	mov	r6, r0
  4013f0:	db01      	blt.n	4013f6 <_malloc_r+0x1a>
  4013f2:	42a9      	cmp	r1, r5
  4013f4:	d903      	bls.n	4013fe <_malloc_r+0x22>
  4013f6:	230c      	movs	r3, #12
  4013f8:	6033      	str	r3, [r6, #0]
  4013fa:	2000      	movs	r0, #0
  4013fc:	bd70      	pop	{r4, r5, r6, pc}
  4013fe:	f000 f8e5 	bl	4015cc <__malloc_lock>
  401402:	4a23      	ldr	r2, [pc, #140]	; (401490 <_malloc_r+0xb4>)
  401404:	6814      	ldr	r4, [r2, #0]
  401406:	4621      	mov	r1, r4
  401408:	b991      	cbnz	r1, 401430 <_malloc_r+0x54>
  40140a:	4c22      	ldr	r4, [pc, #136]	; (401494 <_malloc_r+0xb8>)
  40140c:	6823      	ldr	r3, [r4, #0]
  40140e:	b91b      	cbnz	r3, 401418 <_malloc_r+0x3c>
  401410:	4630      	mov	r0, r6
  401412:	f000 f841 	bl	401498 <_sbrk_r>
  401416:	6020      	str	r0, [r4, #0]
  401418:	4629      	mov	r1, r5
  40141a:	4630      	mov	r0, r6
  40141c:	f000 f83c 	bl	401498 <_sbrk_r>
  401420:	1c43      	adds	r3, r0, #1
  401422:	d126      	bne.n	401472 <_malloc_r+0x96>
  401424:	230c      	movs	r3, #12
  401426:	6033      	str	r3, [r6, #0]
  401428:	4630      	mov	r0, r6
  40142a:	f000 f8d0 	bl	4015ce <__malloc_unlock>
  40142e:	e7e4      	b.n	4013fa <_malloc_r+0x1e>
  401430:	680b      	ldr	r3, [r1, #0]
  401432:	1b5b      	subs	r3, r3, r5
  401434:	d41a      	bmi.n	40146c <_malloc_r+0x90>
  401436:	2b0b      	cmp	r3, #11
  401438:	d90f      	bls.n	40145a <_malloc_r+0x7e>
  40143a:	600b      	str	r3, [r1, #0]
  40143c:	50cd      	str	r5, [r1, r3]
  40143e:	18cc      	adds	r4, r1, r3
  401440:	4630      	mov	r0, r6
  401442:	f000 f8c4 	bl	4015ce <__malloc_unlock>
  401446:	f104 000b 	add.w	r0, r4, #11
  40144a:	1d23      	adds	r3, r4, #4
  40144c:	f020 0007 	bic.w	r0, r0, #7
  401450:	1ac3      	subs	r3, r0, r3
  401452:	d01b      	beq.n	40148c <_malloc_r+0xb0>
  401454:	425a      	negs	r2, r3
  401456:	50e2      	str	r2, [r4, r3]
  401458:	bd70      	pop	{r4, r5, r6, pc}
  40145a:	428c      	cmp	r4, r1
  40145c:	bf0d      	iteet	eq
  40145e:	6863      	ldreq	r3, [r4, #4]
  401460:	684b      	ldrne	r3, [r1, #4]
  401462:	6063      	strne	r3, [r4, #4]
  401464:	6013      	streq	r3, [r2, #0]
  401466:	bf18      	it	ne
  401468:	460c      	movne	r4, r1
  40146a:	e7e9      	b.n	401440 <_malloc_r+0x64>
  40146c:	460c      	mov	r4, r1
  40146e:	6849      	ldr	r1, [r1, #4]
  401470:	e7ca      	b.n	401408 <_malloc_r+0x2c>
  401472:	1cc4      	adds	r4, r0, #3
  401474:	f024 0403 	bic.w	r4, r4, #3
  401478:	42a0      	cmp	r0, r4
  40147a:	d005      	beq.n	401488 <_malloc_r+0xac>
  40147c:	1a21      	subs	r1, r4, r0
  40147e:	4630      	mov	r0, r6
  401480:	f000 f80a 	bl	401498 <_sbrk_r>
  401484:	3001      	adds	r0, #1
  401486:	d0cd      	beq.n	401424 <_malloc_r+0x48>
  401488:	6025      	str	r5, [r4, #0]
  40148a:	e7d9      	b.n	401440 <_malloc_r+0x64>
  40148c:	bd70      	pop	{r4, r5, r6, pc}
  40148e:	bf00      	nop
  401490:	204000b4 	.word	0x204000b4
  401494:	204000b8 	.word	0x204000b8

00401498 <_sbrk_r>:
  401498:	b538      	push	{r3, r4, r5, lr}
  40149a:	4c06      	ldr	r4, [pc, #24]	; (4014b4 <_sbrk_r+0x1c>)
  40149c:	2300      	movs	r3, #0
  40149e:	4605      	mov	r5, r0
  4014a0:	4608      	mov	r0, r1
  4014a2:	6023      	str	r3, [r4, #0]
  4014a4:	f7ff f952 	bl	40074c <_sbrk>
  4014a8:	1c43      	adds	r3, r0, #1
  4014aa:	d102      	bne.n	4014b2 <_sbrk_r+0x1a>
  4014ac:	6823      	ldr	r3, [r4, #0]
  4014ae:	b103      	cbz	r3, 4014b2 <_sbrk_r+0x1a>
  4014b0:	602b      	str	r3, [r5, #0]
  4014b2:	bd38      	pop	{r3, r4, r5, pc}
  4014b4:	2040010c 	.word	0x2040010c

004014b8 <__sread>:
  4014b8:	b510      	push	{r4, lr}
  4014ba:	460c      	mov	r4, r1
  4014bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4014c0:	f000 f886 	bl	4015d0 <_read_r>
  4014c4:	2800      	cmp	r0, #0
  4014c6:	bfab      	itete	ge
  4014c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4014ca:	89a3      	ldrhlt	r3, [r4, #12]
  4014cc:	181b      	addge	r3, r3, r0
  4014ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4014d2:	bfac      	ite	ge
  4014d4:	6563      	strge	r3, [r4, #84]	; 0x54
  4014d6:	81a3      	strhlt	r3, [r4, #12]
  4014d8:	bd10      	pop	{r4, pc}

004014da <__swrite>:
  4014da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014de:	461f      	mov	r7, r3
  4014e0:	898b      	ldrh	r3, [r1, #12]
  4014e2:	05db      	lsls	r3, r3, #23
  4014e4:	4605      	mov	r5, r0
  4014e6:	460c      	mov	r4, r1
  4014e8:	4616      	mov	r6, r2
  4014ea:	d505      	bpl.n	4014f8 <__swrite+0x1e>
  4014ec:	2302      	movs	r3, #2
  4014ee:	2200      	movs	r2, #0
  4014f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4014f4:	f000 f858 	bl	4015a8 <_lseek_r>
  4014f8:	89a3      	ldrh	r3, [r4, #12]
  4014fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4014fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  401502:	81a3      	strh	r3, [r4, #12]
  401504:	4632      	mov	r2, r6
  401506:	463b      	mov	r3, r7
  401508:	4628      	mov	r0, r5
  40150a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40150e:	f000 b817 	b.w	401540 <_write_r>

00401512 <__sseek>:
  401512:	b510      	push	{r4, lr}
  401514:	460c      	mov	r4, r1
  401516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40151a:	f000 f845 	bl	4015a8 <_lseek_r>
  40151e:	1c43      	adds	r3, r0, #1
  401520:	89a3      	ldrh	r3, [r4, #12]
  401522:	bf15      	itete	ne
  401524:	6560      	strne	r0, [r4, #84]	; 0x54
  401526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40152a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40152e:	81a3      	strheq	r3, [r4, #12]
  401530:	bf18      	it	ne
  401532:	81a3      	strhne	r3, [r4, #12]
  401534:	bd10      	pop	{r4, pc}

00401536 <__sclose>:
  401536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40153a:	f000 b813 	b.w	401564 <_close_r>
	...

00401540 <_write_r>:
  401540:	b538      	push	{r3, r4, r5, lr}
  401542:	4c07      	ldr	r4, [pc, #28]	; (401560 <_write_r+0x20>)
  401544:	4605      	mov	r5, r0
  401546:	4608      	mov	r0, r1
  401548:	4611      	mov	r1, r2
  40154a:	2200      	movs	r2, #0
  40154c:	6022      	str	r2, [r4, #0]
  40154e:	461a      	mov	r2, r3
  401550:	f7ff fc0e 	bl	400d70 <_write>
  401554:	1c43      	adds	r3, r0, #1
  401556:	d102      	bne.n	40155e <_write_r+0x1e>
  401558:	6823      	ldr	r3, [r4, #0]
  40155a:	b103      	cbz	r3, 40155e <_write_r+0x1e>
  40155c:	602b      	str	r3, [r5, #0]
  40155e:	bd38      	pop	{r3, r4, r5, pc}
  401560:	2040010c 	.word	0x2040010c

00401564 <_close_r>:
  401564:	b538      	push	{r3, r4, r5, lr}
  401566:	4c06      	ldr	r4, [pc, #24]	; (401580 <_close_r+0x1c>)
  401568:	2300      	movs	r3, #0
  40156a:	4605      	mov	r5, r0
  40156c:	4608      	mov	r0, r1
  40156e:	6023      	str	r3, [r4, #0]
  401570:	f7ff f8fe 	bl	400770 <_close>
  401574:	1c43      	adds	r3, r0, #1
  401576:	d102      	bne.n	40157e <_close_r+0x1a>
  401578:	6823      	ldr	r3, [r4, #0]
  40157a:	b103      	cbz	r3, 40157e <_close_r+0x1a>
  40157c:	602b      	str	r3, [r5, #0]
  40157e:	bd38      	pop	{r3, r4, r5, pc}
  401580:	2040010c 	.word	0x2040010c

00401584 <_fstat_r>:
  401584:	b538      	push	{r3, r4, r5, lr}
  401586:	4c07      	ldr	r4, [pc, #28]	; (4015a4 <_fstat_r+0x20>)
  401588:	2300      	movs	r3, #0
  40158a:	4605      	mov	r5, r0
  40158c:	4608      	mov	r0, r1
  40158e:	4611      	mov	r1, r2
  401590:	6023      	str	r3, [r4, #0]
  401592:	f7ff f8f0 	bl	400776 <_fstat>
  401596:	1c43      	adds	r3, r0, #1
  401598:	d102      	bne.n	4015a0 <_fstat_r+0x1c>
  40159a:	6823      	ldr	r3, [r4, #0]
  40159c:	b103      	cbz	r3, 4015a0 <_fstat_r+0x1c>
  40159e:	602b      	str	r3, [r5, #0]
  4015a0:	bd38      	pop	{r3, r4, r5, pc}
  4015a2:	bf00      	nop
  4015a4:	2040010c 	.word	0x2040010c

004015a8 <_lseek_r>:
  4015a8:	b538      	push	{r3, r4, r5, lr}
  4015aa:	4c07      	ldr	r4, [pc, #28]	; (4015c8 <_lseek_r+0x20>)
  4015ac:	4605      	mov	r5, r0
  4015ae:	4608      	mov	r0, r1
  4015b0:	4611      	mov	r1, r2
  4015b2:	2200      	movs	r2, #0
  4015b4:	6022      	str	r2, [r4, #0]
  4015b6:	461a      	mov	r2, r3
  4015b8:	f7ff f8e2 	bl	400780 <_lseek>
  4015bc:	1c43      	adds	r3, r0, #1
  4015be:	d102      	bne.n	4015c6 <_lseek_r+0x1e>
  4015c0:	6823      	ldr	r3, [r4, #0]
  4015c2:	b103      	cbz	r3, 4015c6 <_lseek_r+0x1e>
  4015c4:	602b      	str	r3, [r5, #0]
  4015c6:	bd38      	pop	{r3, r4, r5, pc}
  4015c8:	2040010c 	.word	0x2040010c

004015cc <__malloc_lock>:
  4015cc:	4770      	bx	lr

004015ce <__malloc_unlock>:
  4015ce:	4770      	bx	lr

004015d0 <_read_r>:
  4015d0:	b538      	push	{r3, r4, r5, lr}
  4015d2:	4c07      	ldr	r4, [pc, #28]	; (4015f0 <_read_r+0x20>)
  4015d4:	4605      	mov	r5, r0
  4015d6:	4608      	mov	r0, r1
  4015d8:	4611      	mov	r1, r2
  4015da:	2200      	movs	r2, #0
  4015dc:	6022      	str	r2, [r4, #0]
  4015de:	461a      	mov	r2, r3
  4015e0:	f7ff fbb4 	bl	400d4c <_read>
  4015e4:	1c43      	adds	r3, r0, #1
  4015e6:	d102      	bne.n	4015ee <_read_r+0x1e>
  4015e8:	6823      	ldr	r3, [r4, #0]
  4015ea:	b103      	cbz	r3, 4015ee <_read_r+0x1e>
  4015ec:	602b      	str	r3, [r5, #0]
  4015ee:	bd38      	pop	{r3, r4, r5, pc}
  4015f0:	2040010c 	.word	0x2040010c
  4015f4:	682f2e2e 	.word	0x682f2e2e
  4015f8:	732f6c61 	.word	0x732f6c61
  4015fc:	682f6372 	.word	0x682f6372
  401600:	695f6c61 	.word	0x695f6c61
  401604:	00632e6f 	.word	0x00632e6f
  401608:	682f2e2e 	.word	0x682f2e2e
  40160c:	732f6c61 	.word	0x732f6c61
  401610:	682f6372 	.word	0x682f6372
  401614:	745f6c61 	.word	0x745f6c61
  401618:	72656d69 	.word	0x72656d69
  40161c:	0000632e 	.word	0x0000632e
  401620:	682f2e2e 	.word	0x682f2e2e
  401624:	732f6c61 	.word	0x732f6c61
  401628:	682f6372 	.word	0x682f6372
  40162c:	755f6c61 	.word	0x755f6c61
  401630:	74726173 	.word	0x74726173
  401634:	6e79735f 	.word	0x6e79735f
  401638:	00632e63 	.word	0x00632e63
  40163c:	682f2e2e 	.word	0x682f2e2e
  401640:	752f6c61 	.word	0x752f6c61
  401644:	736c6974 	.word	0x736c6974
  401648:	6372732f 	.word	0x6372732f
  40164c:	6974752f 	.word	0x6974752f
  401650:	6c5f736c 	.word	0x6c5f736c
  401654:	2e747369 	.word	0x2e747369
  401658:	00000063 	.word	0x00000063
  40165c:	682f2e2e 	.word	0x682f2e2e
  401660:	742f6c70 	.word	0x742f6c70
  401664:	70682f63 	.word	0x70682f63
  401668:	63745f6c 	.word	0x63745f6c
  40166c:	0000632e 	.word	0x0000632e

00401670 <_uarts>:
  401670:	00000001 00000800 00000051 682f2e2e     ........Q...../h
  401680:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  401690:	0000632e                                .c..

00401694 <_global_impure_ptr>:
  401694:	20400028                                (.@ 

00401698 <__sf_fake_stderr>:
	...

004016b8 <__sf_fake_stdin>:
	...

004016d8 <__sf_fake_stdout>:
	...

004016f8 <_init>:
  4016f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016fa:	bf00      	nop
  4016fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4016fe:	bc08      	pop	{r3}
  401700:	469e      	mov	lr, r3
  401702:	4770      	bx	lr

00401704 <__init_array_start>:
  401704:	0040018d 	.word	0x0040018d

00401708 <_fini>:
  401708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40170a:	bf00      	nop
  40170c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40170e:	bc08      	pop	{r3}
  401710:	469e      	mov	lr, r3
  401712:	4770      	bx	lr

00401714 <__fini_array_start>:
  401714:	00400169 	.word	0x00400169
