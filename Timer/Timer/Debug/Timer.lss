
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f5c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20400000  00401f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  20400088  00401fe4  00020088  2**2
                  ALLOC
  3 .heap         00000204  204000e4  00402040  00020088  2**0
                  ALLOC
  4 .stack        00000400  204002e8  00402244  00020088  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010009  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000029d5  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000445f  00000000  00000000  00032aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006c0  00000000  00000000  00036f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005b0  00000000  00000000  0003760c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003f163  00000000  00000000  00037bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000108fb  00000000  00000000  00076d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00145bc5  00000000  00000000  0008761a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000172c  00000000  00000000  001cd1e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 06 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     ..@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40006c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	f9 09 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400088 	.word	0x20400088
  400184:	00000000 	.word	0x00000000
  400188:	00401f5c 	.word	0x00401f5c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00401f5c 	.word	0x00401f5c
  4001c8:	2040008c 	.word	0x2040008c
  4001cc:	00401f5c 	.word	0x00401f5c
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400325 	.word	0x00400325
  4001e4:	00400d5d 	.word	0x00400d5d

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	00401f5c 	.word	0x00401f5c
  400238:	20400088 	.word	0x20400088
  40023c:	20400088 	.word	0x20400088
  400240:	204000e4 	.word	0x204000e4
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	00400d7d 	.word	0x00400d7d
  400250:	00400c45 	.word	0x00400c45

00400254 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  400254:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400256:	4b08      	ldr	r3, [pc, #32]	; (400278 <TIMER_0_init+0x24>)
  400258:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40025a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40025e:	d103      	bne.n	400268 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400260:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400264:	4b04      	ldr	r3, [pc, #16]	; (400278 <TIMER_0_init+0x24>)
  400266:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400268:	4b04      	ldr	r3, [pc, #16]	; (40027c <TIMER_0_init+0x28>)
  40026a:	4798      	blx	r3
  40026c:	4602      	mov	r2, r0
  40026e:	4904      	ldr	r1, [pc, #16]	; (400280 <TIMER_0_init+0x2c>)
  400270:	4804      	ldr	r0, [pc, #16]	; (400284 <TIMER_0_init+0x30>)
  400272:	4b05      	ldr	r3, [pc, #20]	; (400288 <TIMER_0_init+0x34>)
  400274:	4798      	blx	r3
  400276:	bd08      	pop	{r3, pc}
  400278:	400e0600 	.word	0x400e0600
  40027c:	004009f5 	.word	0x004009f5
  400280:	4000c000 	.word	0x4000c000
  400284:	204000c4 	.word	0x204000c4
  400288:	00400485 	.word	0x00400485

0040028c <TARGET_IO_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40028c:	4b0f      	ldr	r3, [pc, #60]	; (4002cc <TARGET_IO_PORT_init+0x40>)
  40028e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400290:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400294:	671a      	str	r2, [r3, #112]	; 0x70
  400296:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400298:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40029c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40029e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002a2:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  4002a4:	4a0a      	ldr	r2, [pc, #40]	; (4002d0 <TARGET_IO_PORT_init+0x44>)
  4002a6:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4002aa:	f043 0310 	orr.w	r3, r3, #16
  4002ae:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002b2:	4b08      	ldr	r3, [pc, #32]	; (4002d4 <TARGET_IO_PORT_init+0x48>)
  4002b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002b6:	f042 0210 	orr.w	r2, r2, #16
  4002ba:	671a      	str	r2, [r3, #112]	; 0x70
  4002bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002be:	f042 0210 	orr.w	r2, r2, #16
  4002c2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002c4:	2210      	movs	r2, #16
  4002c6:	605a      	str	r2, [r3, #4]
  4002c8:	4770      	bx	lr
  4002ca:	bf00      	nop
  4002cc:	400e0e00 	.word	0x400e0e00
  4002d0:	40088000 	.word	0x40088000
  4002d4:	400e1000 	.word	0x400e1000

004002d8 <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002d8:	4b04      	ldr	r3, [pc, #16]	; (4002ec <TARGET_IO_CLOCK_init+0x14>)
  4002da:	699b      	ldr	r3, [r3, #24]
  4002dc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4002e0:	d103      	bne.n	4002ea <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4002e6:	4b01      	ldr	r3, [pc, #4]	; (4002ec <TARGET_IO_CLOCK_init+0x14>)
  4002e8:	611a      	str	r2, [r3, #16]
  4002ea:	4770      	bx	lr
  4002ec:	400e0600 	.word	0x400e0600

004002f0 <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void TARGET_IO_init(void)
{
  4002f0:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  4002f2:	4b06      	ldr	r3, [pc, #24]	; (40030c <TARGET_IO_init+0x1c>)
  4002f4:	4798      	blx	r3
	TARGET_IO_PORT_init();
  4002f6:	4b06      	ldr	r3, [pc, #24]	; (400310 <TARGET_IO_init+0x20>)
  4002f8:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, USART1, _usart_get_usart_sync());
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <TARGET_IO_init+0x24>)
  4002fc:	4798      	blx	r3
  4002fe:	4602      	mov	r2, r0
  400300:	4905      	ldr	r1, [pc, #20]	; (400318 <TARGET_IO_init+0x28>)
  400302:	4806      	ldr	r0, [pc, #24]	; (40031c <TARGET_IO_init+0x2c>)
  400304:	4b06      	ldr	r3, [pc, #24]	; (400320 <TARGET_IO_init+0x30>)
  400306:	4798      	blx	r3
  400308:	bd08      	pop	{r3, pc}
  40030a:	bf00      	nop
  40030c:	004002d9 	.word	0x004002d9
  400310:	0040028d 	.word	0x0040028d
  400314:	00400c21 	.word	0x00400c21
  400318:	40028000 	.word	0x40028000
  40031c:	204000b8 	.word	0x204000b8
  400320:	00400675 	.word	0x00400675

00400324 <system_init>:
}

void system_init(void)
{
  400324:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400326:	4b06      	ldr	r3, [pc, #24]	; (400340 <system_init+0x1c>)
  400328:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40032a:	4a06      	ldr	r2, [pc, #24]	; (400344 <system_init+0x20>)
  40032c:	6853      	ldr	r3, [r2, #4]
  40032e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400332:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	TIMER_0_init();
  400334:	4b04      	ldr	r3, [pc, #16]	; (400348 <system_init+0x24>)
  400336:	4798      	blx	r3

	TARGET_IO_init();
  400338:	4b04      	ldr	r3, [pc, #16]	; (40034c <system_init+0x28>)
  40033a:	4798      	blx	r3
  40033c:	bd08      	pop	{r3, pc}
  40033e:	bf00      	nop
  400340:	004007a5 	.word	0x004007a5
  400344:	400e1850 	.word	0x400e1850
  400348:	00400255 	.word	0x00400255
  40034c:	004002f1 	.word	0x004002f1

00400350 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400350:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400354:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400356:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400358:	f3bf 8f5f 	dmb	sy
  40035c:	4770      	bx	lr

0040035e <atomic_leave_critical>:
  40035e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400362:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400364:	f383 8810 	msr	PRIMASK, r3
  400368:	4770      	bx	lr
	...

0040036c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  40036c:	b570      	push	{r4, r5, r6, lr}
  40036e:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400370:	4604      	mov	r4, r0
  400372:	460d      	mov	r5, r1
  400374:	2800      	cmp	r0, #0
  400376:	bf18      	it	ne
  400378:	2900      	cmpne	r1, #0
  40037a:	bf14      	ite	ne
  40037c:	2001      	movne	r0, #1
  40037e:	2000      	moveq	r0, #0
  400380:	2234      	movs	r2, #52	; 0x34
  400382:	4904      	ldr	r1, [pc, #16]	; (400394 <io_write+0x28>)
  400384:	4b04      	ldr	r3, [pc, #16]	; (400398 <io_write+0x2c>)
  400386:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400388:	6823      	ldr	r3, [r4, #0]
  40038a:	4632      	mov	r2, r6
  40038c:	4629      	mov	r1, r5
  40038e:	4620      	mov	r0, r4
  400390:	4798      	blx	r3
}
  400392:	bd70      	pop	{r4, r5, r6, pc}
  400394:	00401de8 	.word	0x00401de8
  400398:	004006e9 	.word	0x004006e9

0040039c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40039c:	b570      	push	{r4, r5, r6, lr}
  40039e:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4003a0:	4604      	mov	r4, r0
  4003a2:	460d      	mov	r5, r1
  4003a4:	2800      	cmp	r0, #0
  4003a6:	bf18      	it	ne
  4003a8:	2900      	cmpne	r1, #0
  4003aa:	bf14      	ite	ne
  4003ac:	2001      	movne	r0, #1
  4003ae:	2000      	moveq	r0, #0
  4003b0:	223d      	movs	r2, #61	; 0x3d
  4003b2:	4904      	ldr	r1, [pc, #16]	; (4003c4 <io_read+0x28>)
  4003b4:	4b04      	ldr	r3, [pc, #16]	; (4003c8 <io_read+0x2c>)
  4003b6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4003b8:	6863      	ldr	r3, [r4, #4]
  4003ba:	4632      	mov	r2, r6
  4003bc:	4629      	mov	r1, r5
  4003be:	4620      	mov	r0, r4
  4003c0:	4798      	blx	r3
}
  4003c2:	bd70      	pop	{r4, r5, r6, pc}
  4003c4:	00401de8 	.word	0x00401de8
  4003c8:	004006e9 	.word	0x004006e9

004003cc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4003ce:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4003d0:	b117      	cbz	r7, 4003d8 <timer_add_timer_task+0xc>
  4003d2:	463c      	mov	r4, r7
  4003d4:	2600      	movs	r6, #0
  4003d6:	e00b      	b.n	4003f0 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4003d8:	4b0e      	ldr	r3, [pc, #56]	; (400414 <timer_add_timer_task+0x48>)
  4003da:	4798      	blx	r3
		return;
  4003dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4003de:	68a5      	ldr	r5, [r4, #8]
  4003e0:	442b      	add	r3, r5
  4003e2:	1a9b      	subs	r3, r3, r2
  4003e4:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4003e6:	688d      	ldr	r5, [r1, #8]
  4003e8:	42ab      	cmp	r3, r5
  4003ea:	d209      	bcs.n	400400 <timer_add_timer_task+0x34>
			break;
		prev = it;
  4003ec:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4003ee:	6824      	ldr	r4, [r4, #0]
  4003f0:	b134      	cbz	r4, 400400 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4003f2:	6863      	ldr	r3, [r4, #4]
  4003f4:	4293      	cmp	r3, r2
  4003f6:	d8f2      	bhi.n	4003de <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  4003f8:	68a5      	ldr	r5, [r4, #8]
  4003fa:	1a9b      	subs	r3, r3, r2
  4003fc:	442b      	add	r3, r5
  4003fe:	e7f2      	b.n	4003e6 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400400:	42bc      	cmp	r4, r7
  400402:	d003      	beq.n	40040c <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400404:	4630      	mov	r0, r6
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <timer_add_timer_task+0x4c>)
  400408:	4798      	blx	r3
  40040a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  40040c:	4b01      	ldr	r3, [pc, #4]	; (400414 <timer_add_timer_task+0x48>)
  40040e:	4798      	blx	r3
  400410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400412:	bf00      	nop
  400414:	00400705 	.word	0x00400705
  400418:	00400731 	.word	0x00400731

0040041c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  40041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40041e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400420:	6906      	ldr	r6, [r0, #16]
  400422:	3601      	adds	r6, #1
  400424:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400426:	7e03      	ldrb	r3, [r0, #24]
  400428:	f013 0f01 	tst.w	r3, #1
  40042c:	d105      	bne.n	40043a <timer_process_counted+0x1e>
  40042e:	7e03      	ldrb	r3, [r0, #24]
  400430:	f013 0f02 	tst.w	r3, #2
  400434:	d101      	bne.n	40043a <timer_process_counted+0x1e>
  400436:	4605      	mov	r5, r0
  400438:	e009      	b.n	40044e <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  40043a:	7e03      	ldrb	r3, [r0, #24]
  40043c:	f043 0302 	orr.w	r3, r3, #2
  400440:	7603      	strb	r3, [r0, #24]
		return;
  400442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400444:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400446:	68e3      	ldr	r3, [r4, #12]
  400448:	4620      	mov	r0, r4
  40044a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  40044c:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  40044e:	b19c      	cbz	r4, 400478 <timer_process_counted+0x5c>
  400450:	6863      	ldr	r3, [r4, #4]
  400452:	1af3      	subs	r3, r6, r3
  400454:	68a2      	ldr	r2, [r4, #8]
  400456:	4293      	cmp	r3, r2
  400458:	d30e      	bcc.n	400478 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  40045a:	f105 0714 	add.w	r7, r5, #20
  40045e:	4638      	mov	r0, r7
  400460:	4b06      	ldr	r3, [pc, #24]	; (40047c <timer_process_counted+0x60>)
  400462:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400464:	7c23      	ldrb	r3, [r4, #16]
  400466:	2b01      	cmp	r3, #1
  400468:	d1ec      	bne.n	400444 <timer_process_counted+0x28>
			tmp->time_label = time;
  40046a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  40046c:	4632      	mov	r2, r6
  40046e:	4621      	mov	r1, r4
  400470:	4638      	mov	r0, r7
  400472:	4b03      	ldr	r3, [pc, #12]	; (400480 <timer_process_counted+0x64>)
  400474:	4798      	blx	r3
  400476:	e7e5      	b.n	400444 <timer_process_counted+0x28>
  400478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40047a:	bf00      	nop
  40047c:	00400739 	.word	0x00400739
  400480:	004003cd 	.word	0x004003cd

00400484 <timer_init>:
{
  400484:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400486:	4604      	mov	r4, r0
  400488:	460d      	mov	r5, r1
  40048a:	2800      	cmp	r0, #0
  40048c:	bf18      	it	ne
  40048e:	2900      	cmpne	r1, #0
  400490:	bf14      	ite	ne
  400492:	2001      	movne	r0, #1
  400494:	2000      	moveq	r0, #0
  400496:	223b      	movs	r2, #59	; 0x3b
  400498:	4905      	ldr	r1, [pc, #20]	; (4004b0 <timer_init+0x2c>)
  40049a:	4b06      	ldr	r3, [pc, #24]	; (4004b4 <timer_init+0x30>)
  40049c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  40049e:	4629      	mov	r1, r5
  4004a0:	4620      	mov	r0, r4
  4004a2:	4b05      	ldr	r3, [pc, #20]	; (4004b8 <timer_init+0x34>)
  4004a4:	4798      	blx	r3
	descr->time                           = 0;
  4004a6:	2000      	movs	r0, #0
  4004a8:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  4004aa:	4b04      	ldr	r3, [pc, #16]	; (4004bc <timer_init+0x38>)
  4004ac:	6023      	str	r3, [r4, #0]
}
  4004ae:	bd38      	pop	{r3, r4, r5, pc}
  4004b0:	00401dfc 	.word	0x00401dfc
  4004b4:	004006e9 	.word	0x004006e9
  4004b8:	0040090d 	.word	0x0040090d
  4004bc:	0040041d 	.word	0x0040041d

004004c0 <timer_start>:
{
  4004c0:	b510      	push	{r4, lr}
	ASSERT(descr);
  4004c2:	4604      	mov	r4, r0
  4004c4:	2253      	movs	r2, #83	; 0x53
  4004c6:	4909      	ldr	r1, [pc, #36]	; (4004ec <timer_start+0x2c>)
  4004c8:	3000      	adds	r0, #0
  4004ca:	bf18      	it	ne
  4004cc:	2001      	movne	r0, #1
  4004ce:	4b08      	ldr	r3, [pc, #32]	; (4004f0 <timer_start+0x30>)
  4004d0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4004d2:	4620      	mov	r0, r4
  4004d4:	4b07      	ldr	r3, [pc, #28]	; (4004f4 <timer_start+0x34>)
  4004d6:	4798      	blx	r3
  4004d8:	b920      	cbnz	r0, 4004e4 <timer_start+0x24>
	_timer_start(&descr->device);
  4004da:	4620      	mov	r0, r4
  4004dc:	4b06      	ldr	r3, [pc, #24]	; (4004f8 <timer_start+0x38>)
  4004de:	4798      	blx	r3
	return ERR_NONE;
  4004e0:	2000      	movs	r0, #0
  4004e2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4004e4:	f06f 0010 	mvn.w	r0, #16
}
  4004e8:	bd10      	pop	{r4, pc}
  4004ea:	bf00      	nop
  4004ec:	00401dfc 	.word	0x00401dfc
  4004f0:	004006e9 	.word	0x004006e9
  4004f4:	004009d1 	.word	0x004009d1
  4004f8:	004009c9 	.word	0x004009c9

004004fc <timer_add_task>:
{
  4004fc:	b570      	push	{r4, r5, r6, lr}
  4004fe:	b082      	sub	sp, #8
	ASSERT(descr && task);
  400500:	4604      	mov	r4, r0
  400502:	460d      	mov	r5, r1
  400504:	2800      	cmp	r0, #0
  400506:	bf18      	it	ne
  400508:	2900      	cmpne	r1, #0
  40050a:	bf14      	ite	ne
  40050c:	2001      	movne	r0, #1
  40050e:	2000      	moveq	r0, #0
  400510:	227a      	movs	r2, #122	; 0x7a
  400512:	491d      	ldr	r1, [pc, #116]	; (400588 <timer_add_task+0x8c>)
  400514:	4b1d      	ldr	r3, [pc, #116]	; (40058c <timer_add_task+0x90>)
  400516:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  400518:	7e23      	ldrb	r3, [r4, #24]
  40051a:	f043 0301 	orr.w	r3, r3, #1
  40051e:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  400520:	f104 0614 	add.w	r6, r4, #20
  400524:	4629      	mov	r1, r5
  400526:	4630      	mov	r0, r6
  400528:	4b19      	ldr	r3, [pc, #100]	; (400590 <timer_add_task+0x94>)
  40052a:	4798      	blx	r3
  40052c:	b988      	cbnz	r0, 400552 <timer_add_task+0x56>
	task->time_label = descr->time;
  40052e:	6923      	ldr	r3, [r4, #16]
  400530:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  400532:	6922      	ldr	r2, [r4, #16]
  400534:	4629      	mov	r1, r5
  400536:	4630      	mov	r0, r6
  400538:	4b16      	ldr	r3, [pc, #88]	; (400594 <timer_add_task+0x98>)
  40053a:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  40053c:	7e23      	ldrb	r3, [r4, #24]
  40053e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400542:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  400544:	7e23      	ldrb	r3, [r4, #24]
  400546:	f013 0f02 	tst.w	r3, #2
  40054a:	d10e      	bne.n	40056a <timer_add_task+0x6e>
	return ERR_NONE;
  40054c:	2000      	movs	r0, #0
}
  40054e:	b002      	add	sp, #8
  400550:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400552:	7e23      	ldrb	r3, [r4, #24]
  400554:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400558:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  40055a:	227f      	movs	r2, #127	; 0x7f
  40055c:	490a      	ldr	r1, [pc, #40]	; (400588 <timer_add_task+0x8c>)
  40055e:	2000      	movs	r0, #0
  400560:	4b0a      	ldr	r3, [pc, #40]	; (40058c <timer_add_task+0x90>)
  400562:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  400564:	f06f 0011 	mvn.w	r0, #17
  400568:	e7f1      	b.n	40054e <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  40056a:	a801      	add	r0, sp, #4
  40056c:	4b0a      	ldr	r3, [pc, #40]	; (400598 <timer_add_task+0x9c>)
  40056e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  400570:	7e23      	ldrb	r3, [r4, #24]
  400572:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  400576:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  400578:	4620      	mov	r0, r4
  40057a:	4b08      	ldr	r3, [pc, #32]	; (40059c <timer_add_task+0xa0>)
  40057c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  40057e:	a801      	add	r0, sp, #4
  400580:	4b07      	ldr	r3, [pc, #28]	; (4005a0 <timer_add_task+0xa4>)
  400582:	4798      	blx	r3
	return ERR_NONE;
  400584:	2000      	movs	r0, #0
  400586:	e7e2      	b.n	40054e <timer_add_task+0x52>
  400588:	00401dfc 	.word	0x00401dfc
  40058c:	004006e9 	.word	0x004006e9
  400590:	004006ef 	.word	0x004006ef
  400594:	004003cd 	.word	0x004003cd
  400598:	00400351 	.word	0x00400351
  40059c:	004009dd 	.word	0x004009dd
  4005a0:	0040035f 	.word	0x0040035f

004005a4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005a6:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4005a8:	4605      	mov	r5, r0
  4005aa:	460f      	mov	r7, r1
  4005ac:	2800      	cmp	r0, #0
  4005ae:	bf18      	it	ne
  4005b0:	2900      	cmpne	r1, #0
  4005b2:	d002      	beq.n	4005ba <usart_sync_write+0x16>
  4005b4:	bb0a      	cbnz	r2, 4005fa <usart_sync_write+0x56>
  4005b6:	2000      	movs	r0, #0
  4005b8:	e000      	b.n	4005bc <usart_sync_write+0x18>
  4005ba:	2000      	movs	r0, #0
  4005bc:	22f1      	movs	r2, #241	; 0xf1
  4005be:	4910      	ldr	r1, [pc, #64]	; (400600 <usart_sync_write+0x5c>)
  4005c0:	4b10      	ldr	r3, [pc, #64]	; (400604 <usart_sync_write+0x60>)
  4005c2:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4005c4:	f105 0408 	add.w	r4, r5, #8
  4005c8:	4620      	mov	r0, r4
  4005ca:	4b0f      	ldr	r3, [pc, #60]	; (400608 <usart_sync_write+0x64>)
  4005cc:	4798      	blx	r3
  4005ce:	2800      	cmp	r0, #0
  4005d0:	d0f8      	beq.n	4005c4 <usart_sync_write+0x20>
  4005d2:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4005d4:	5d79      	ldrb	r1, [r7, r5]
  4005d6:	4620      	mov	r0, r4
  4005d8:	4b0c      	ldr	r3, [pc, #48]	; (40060c <usart_sync_write+0x68>)
  4005da:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4005dc:	4620      	mov	r0, r4
  4005de:	4b0a      	ldr	r3, [pc, #40]	; (400608 <usart_sync_write+0x64>)
  4005e0:	4798      	blx	r3
  4005e2:	2800      	cmp	r0, #0
  4005e4:	d0fa      	beq.n	4005dc <usart_sync_write+0x38>
			;
	} while (++offset < length);
  4005e6:	3501      	adds	r5, #1
  4005e8:	42b5      	cmp	r5, r6
  4005ea:	d3f3      	bcc.n	4005d4 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4005ec:	4620      	mov	r0, r4
  4005ee:	4b08      	ldr	r3, [pc, #32]	; (400610 <usart_sync_write+0x6c>)
  4005f0:	4798      	blx	r3
  4005f2:	2800      	cmp	r0, #0
  4005f4:	d0fa      	beq.n	4005ec <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4005f6:	4628      	mov	r0, r5
  4005f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4005fa:	2001      	movs	r0, #1
  4005fc:	e7de      	b.n	4005bc <usart_sync_write+0x18>
  4005fe:	bf00      	nop
  400600:	00401e14 	.word	0x00401e14
  400604:	004006e9 	.word	0x004006e9
  400608:	00400ba9 	.word	0x00400ba9
  40060c:	00400b61 	.word	0x00400b61
  400610:	00400bd1 	.word	0x00400bd1

00400614 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400618:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40061a:	4605      	mov	r5, r0
  40061c:	4688      	mov	r8, r1
  40061e:	2800      	cmp	r0, #0
  400620:	bf18      	it	ne
  400622:	2900      	cmpne	r1, #0
  400624:	d002      	beq.n	40062c <usart_sync_read+0x18>
  400626:	b9d2      	cbnz	r2, 40065e <usart_sync_read+0x4a>
  400628:	2000      	movs	r0, #0
  40062a:	e000      	b.n	40062e <usart_sync_read+0x1a>
  40062c:	2000      	movs	r0, #0
  40062e:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400632:	490c      	ldr	r1, [pc, #48]	; (400664 <usart_sync_read+0x50>)
  400634:	4b0c      	ldr	r3, [pc, #48]	; (400668 <usart_sync_read+0x54>)
  400636:	4798      	blx	r3
	uint32_t                      offset = 0;
  400638:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  40063a:	f105 0408 	add.w	r4, r5, #8
  40063e:	4620      	mov	r0, r4
  400640:	4b0a      	ldr	r3, [pc, #40]	; (40066c <usart_sync_read+0x58>)
  400642:	4798      	blx	r3
  400644:	2800      	cmp	r0, #0
  400646:	d0f8      	beq.n	40063a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400648:	4620      	mov	r0, r4
  40064a:	4b09      	ldr	r3, [pc, #36]	; (400670 <usart_sync_read+0x5c>)
  40064c:	4798      	blx	r3
  40064e:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400652:	3601      	adds	r6, #1
  400654:	42be      	cmp	r6, r7
  400656:	d3f0      	bcc.n	40063a <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400658:	4630      	mov	r0, r6
  40065a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  40065e:	2001      	movs	r0, #1
  400660:	e7e5      	b.n	40062e <usart_sync_read+0x1a>
  400662:	bf00      	nop
  400664:	00401e14 	.word	0x00401e14
  400668:	004006e9 	.word	0x004006e9
  40066c:	00400bf9 	.word	0x00400bf9
  400670:	00400b85 	.word	0x00400b85

00400674 <usart_sync_init>:
{
  400674:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400676:	4604      	mov	r4, r0
  400678:	460d      	mov	r5, r1
  40067a:	2800      	cmp	r0, #0
  40067c:	bf18      	it	ne
  40067e:	2900      	cmpne	r1, #0
  400680:	bf14      	ite	ne
  400682:	2001      	movne	r0, #1
  400684:	2000      	moveq	r0, #0
  400686:	2234      	movs	r2, #52	; 0x34
  400688:	4907      	ldr	r1, [pc, #28]	; (4006a8 <usart_sync_init+0x34>)
  40068a:	4b08      	ldr	r3, [pc, #32]	; (4006ac <usart_sync_init+0x38>)
  40068c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  40068e:	4629      	mov	r1, r5
  400690:	f104 0008 	add.w	r0, r4, #8
  400694:	4b06      	ldr	r3, [pc, #24]	; (4006b0 <usart_sync_init+0x3c>)
  400696:	4798      	blx	r3
	if (init_status) {
  400698:	4603      	mov	r3, r0
  40069a:	b918      	cbnz	r0, 4006a4 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  40069c:	4a05      	ldr	r2, [pc, #20]	; (4006b4 <usart_sync_init+0x40>)
  40069e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  4006a0:	4a05      	ldr	r2, [pc, #20]	; (4006b8 <usart_sync_init+0x44>)
  4006a2:	6022      	str	r2, [r4, #0]
}
  4006a4:	4618      	mov	r0, r3
  4006a6:	bd38      	pop	{r3, r4, r5, pc}
  4006a8:	00401e14 	.word	0x00401e14
  4006ac:	004006e9 	.word	0x004006e9
  4006b0:	00400af5 	.word	0x00400af5
  4006b4:	00400615 	.word	0x00400615
  4006b8:	004005a5 	.word	0x004005a5

004006bc <usart_sync_enable>:
{
  4006bc:	b510      	push	{r4, lr}
	ASSERT(descr);
  4006be:	4604      	mov	r4, r0
  4006c0:	2253      	movs	r2, #83	; 0x53
  4006c2:	4906      	ldr	r1, [pc, #24]	; (4006dc <usart_sync_enable+0x20>)
  4006c4:	3000      	adds	r0, #0
  4006c6:	bf18      	it	ne
  4006c8:	2001      	movne	r0, #1
  4006ca:	4b05      	ldr	r3, [pc, #20]	; (4006e0 <usart_sync_enable+0x24>)
  4006cc:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  4006ce:	f104 0008 	add.w	r0, r4, #8
  4006d2:	4b04      	ldr	r3, [pc, #16]	; (4006e4 <usart_sync_enable+0x28>)
  4006d4:	4798      	blx	r3
}
  4006d6:	2000      	movs	r0, #0
  4006d8:	bd10      	pop	{r4, pc}
  4006da:	bf00      	nop
  4006dc:	00401e14 	.word	0x00401e14
  4006e0:	004006e9 	.word	0x004006e9
  4006e4:	00400b2d 	.word	0x00400b2d

004006e8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4006e8:	b900      	cbnz	r0, 4006ec <assert+0x4>
		__asm("BKPT #0");
  4006ea:	be00      	bkpt	0x0000
  4006ec:	4770      	bx	lr

004006ee <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4006ee:	6803      	ldr	r3, [r0, #0]
  4006f0:	b11b      	cbz	r3, 4006fa <is_list_element+0xc>
		if (it == element) {
  4006f2:	428b      	cmp	r3, r1
  4006f4:	d003      	beq.n	4006fe <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	e7fa      	b.n	4006f0 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  4006fa:	2000      	movs	r0, #0
  4006fc:	4770      	bx	lr
			return true;
  4006fe:	2001      	movs	r0, #1
}
  400700:	4770      	bx	lr
	...

00400704 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400704:	b538      	push	{r3, r4, r5, lr}
  400706:	4604      	mov	r4, r0
  400708:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  40070a:	4b06      	ldr	r3, [pc, #24]	; (400724 <list_insert_as_head+0x20>)
  40070c:	4798      	blx	r3
  40070e:	f080 0001 	eor.w	r0, r0, #1
  400712:	2239      	movs	r2, #57	; 0x39
  400714:	4904      	ldr	r1, [pc, #16]	; (400728 <list_insert_as_head+0x24>)
  400716:	b2c0      	uxtb	r0, r0
  400718:	4b04      	ldr	r3, [pc, #16]	; (40072c <list_insert_as_head+0x28>)
  40071a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  40071c:	6823      	ldr	r3, [r4, #0]
  40071e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400720:	6025      	str	r5, [r4, #0]
  400722:	bd38      	pop	{r3, r4, r5, pc}
  400724:	004006ef 	.word	0x004006ef
  400728:	00401e30 	.word	0x00401e30
  40072c:	004006e9 	.word	0x004006e9

00400730 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400730:	6803      	ldr	r3, [r0, #0]
  400732:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400734:	6001      	str	r1, [r0, #0]
  400736:	4770      	bx	lr

00400738 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400738:	6803      	ldr	r3, [r0, #0]
  40073a:	b11b      	cbz	r3, 400744 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  40073c:	681a      	ldr	r2, [r3, #0]
  40073e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400740:	4618      	mov	r0, r3
  400742:	4770      	bx	lr
	}

	return NULL;
  400744:	2000      	movs	r0, #0
}
  400746:	4770      	bx	lr

00400748 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400748:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40074a:	4a06      	ldr	r2, [pc, #24]	; (400764 <_sbrk+0x1c>)
  40074c:	6812      	ldr	r2, [r2, #0]
  40074e:	b122      	cbz	r2, 40075a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400750:	4a04      	ldr	r2, [pc, #16]	; (400764 <_sbrk+0x1c>)
  400752:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400754:	4403      	add	r3, r0
  400756:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400758:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40075a:	4903      	ldr	r1, [pc, #12]	; (400768 <_sbrk+0x20>)
  40075c:	4a01      	ldr	r2, [pc, #4]	; (400764 <_sbrk+0x1c>)
  40075e:	6011      	str	r1, [r2, #0]
  400760:	e7f6      	b.n	400750 <_sbrk+0x8>
  400762:	bf00      	nop
  400764:	204000a4 	.word	0x204000a4
  400768:	204006e8 	.word	0x204006e8

0040076c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  40076c:	f04f 30ff 	mov.w	r0, #4294967295
  400770:	4770      	bx	lr

00400772 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400776:	604b      	str	r3, [r1, #4]

	return 0;
}
  400778:	2000      	movs	r0, #0
  40077a:	4770      	bx	lr

0040077c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  40077c:	2001      	movs	r0, #1
  40077e:	4770      	bx	lr

00400780 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400780:	2000      	movs	r0, #0
  400782:	4770      	bx	lr

00400784 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  400784:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400786:	2b00      	cmp	r3, #0
  400788:	db09      	blt.n	40079e <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40078a:	095b      	lsrs	r3, r3, #5
  40078c:	f000 001f 	and.w	r0, r0, #31
  400790:	2201      	movs	r2, #1
  400792:	fa02 f000 	lsl.w	r0, r2, r0
  400796:	3340      	adds	r3, #64	; 0x40
  400798:	4a01      	ldr	r2, [pc, #4]	; (4007a0 <_irq_set+0x1c>)
  40079a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  40079e:	4770      	bx	lr
  4007a0:	e000e100 	.word	0xe000e100

004007a4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4007a4:	b500      	push	{lr}
  4007a6:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4007a8:	a801      	add	r0, sp, #4
  4007aa:	4b0e      	ldr	r3, [pc, #56]	; (4007e4 <_init_chip+0x40>)
  4007ac:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4007ae:	4a0e      	ldr	r2, [pc, #56]	; (4007e8 <_init_chip+0x44>)
  4007b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4007b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4007b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4007bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007c0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4007c4:	a801      	add	r0, sp, #4
  4007c6:	4b09      	ldr	r3, [pc, #36]	; (4007ec <_init_chip+0x48>)
  4007c8:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4007ca:	4a09      	ldr	r2, [pc, #36]	; (4007f0 <_init_chip+0x4c>)
  4007cc:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4007ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4007d2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  4007d6:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  4007d8:	4b06      	ldr	r3, [pc, #24]	; (4007f4 <_init_chip+0x50>)
  4007da:	4798      	blx	r3
}
  4007dc:	b003      	add	sp, #12
  4007de:	f85d fb04 	ldr.w	pc, [sp], #4
  4007e2:	bf00      	nop
  4007e4:	00400351 	.word	0x00400351
  4007e8:	e000ed00 	.word	0xe000ed00
  4007ec:	0040035f 	.word	0x0040035f
  4007f0:	400e0c00 	.word	0x400e0c00
  4007f4:	00400895 	.word	0x00400895

004007f8 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4007f8:	490e      	ldr	r1, [pc, #56]	; (400834 <_pmc_init_sources+0x3c>)
  4007fa:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  4007fc:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400800:	4b0d      	ldr	r3, [pc, #52]	; (400838 <_pmc_init_sources+0x40>)
  400802:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400804:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400806:	4b0b      	ldr	r3, [pc, #44]	; (400834 <_pmc_init_sources+0x3c>)
  400808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40080a:	f013 0f01 	tst.w	r3, #1
  40080e:	d0fa      	beq.n	400806 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400810:	4b08      	ldr	r3, [pc, #32]	; (400834 <_pmc_init_sources+0x3c>)
  400812:	6a19      	ldr	r1, [r3, #32]
  400814:	4a09      	ldr	r2, [pc, #36]	; (40083c <_pmc_init_sources+0x44>)
  400816:	430a      	orrs	r2, r1
  400818:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40081a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  40081c:	4a08      	ldr	r2, [pc, #32]	; (400840 <_pmc_init_sources+0x48>)
  40081e:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400820:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400822:	4a08      	ldr	r2, [pc, #32]	; (400844 <_pmc_init_sources+0x4c>)
  400824:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400826:	4b03      	ldr	r3, [pc, #12]	; (400834 <_pmc_init_sources+0x3c>)
  400828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40082a:	f013 0f02 	tst.w	r3, #2
  40082e:	d0fa      	beq.n	400826 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400830:	4770      	bx	lr
  400832:	bf00      	nop
  400834:	400e0600 	.word	0x400e0600
  400838:	00373e01 	.word	0x00373e01
  40083c:	01370000 	.word	0x01370000
  400840:	f800ffff 	.word	0xf800ffff
  400844:	20183f01 	.word	0x20183f01

00400848 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400848:	4a11      	ldr	r2, [pc, #68]	; (400890 <_pmc_init_master_clock+0x48>)
  40084a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  40084c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400850:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400852:	4b0f      	ldr	r3, [pc, #60]	; (400890 <_pmc_init_master_clock+0x48>)
  400854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400856:	f013 0f08 	tst.w	r3, #8
  40085a:	d0fa      	beq.n	400852 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40085c:	4a0c      	ldr	r2, [pc, #48]	; (400890 <_pmc_init_master_clock+0x48>)
  40085e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400868:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40086a:	4b09      	ldr	r3, [pc, #36]	; (400890 <_pmc_init_master_clock+0x48>)
  40086c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40086e:	f013 0f08 	tst.w	r3, #8
  400872:	d0fa      	beq.n	40086a <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400874:	4a06      	ldr	r2, [pc, #24]	; (400890 <_pmc_init_master_clock+0x48>)
  400876:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400878:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  40087c:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400880:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400882:	4b03      	ldr	r3, [pc, #12]	; (400890 <_pmc_init_master_clock+0x48>)
  400884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400886:	f013 0f08 	tst.w	r3, #8
  40088a:	d0fa      	beq.n	400882 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  40088c:	4770      	bx	lr
  40088e:	bf00      	nop
  400890:	400e0600 	.word	0x400e0600

00400894 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400894:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400896:	4b02      	ldr	r3, [pc, #8]	; (4008a0 <_pmc_init+0xc>)
  400898:	4798      	blx	r3
	_pmc_init_master_clock();
  40089a:	4b02      	ldr	r3, [pc, #8]	; (4008a4 <_pmc_init+0x10>)
  40089c:	4798      	blx	r3
  40089e:	bd08      	pop	{r3, pc}
  4008a0:	004007f9 	.word	0x004007f9
  4008a4:	00400849 	.word	0x00400849

004008a8 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4008a8:	2300      	movs	r3, #0
  4008aa:	b13b      	cbz	r3, 4008bc <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  4008ac:	2000      	movs	r0, #0
  4008ae:	4770      	bx	lr
			return &(_tcs[i]);
  4008b0:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  4008b4:	00a3      	lsls	r3, r4, #2
  4008b6:	4608      	mov	r0, r1
  4008b8:	4418      	add	r0, r3
  4008ba:	e00c      	b.n	4008d6 <get_cfg+0x2e>
{
  4008bc:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  4008be:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4008c2:	008a      	lsls	r2, r1, #2
  4008c4:	4905      	ldr	r1, [pc, #20]	; (4008dc <get_cfg+0x34>)
  4008c6:	588a      	ldr	r2, [r1, r2]
  4008c8:	4282      	cmp	r2, r0
  4008ca:	d0f1      	beq.n	4008b0 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4008cc:	3301      	adds	r3, #1
  4008ce:	b2db      	uxtb	r3, r3
  4008d0:	2b00      	cmp	r3, #0
  4008d2:	d0f4      	beq.n	4008be <get_cfg+0x16>
	return NULL;
  4008d4:	2000      	movs	r0, #0
}
  4008d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008da:	4770      	bx	lr
  4008dc:	20400000 	.word	0x20400000

004008e0 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  4008e0:	4b03      	ldr	r3, [pc, #12]	; (4008f0 <_tc_init_irq_param+0x10>)
  4008e2:	4298      	cmp	r0, r3
  4008e4:	d000      	beq.n	4008e8 <_tc_init_irq_param+0x8>
  4008e6:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  4008e8:	4b02      	ldr	r3, [pc, #8]	; (4008f4 <_tc_init_irq_param+0x14>)
  4008ea:	6019      	str	r1, [r3, #0]
	}
}
  4008ec:	e7fb      	b.n	4008e6 <_tc_init_irq_param+0x6>
  4008ee:	bf00      	nop
  4008f0:	4000c000 	.word	0x4000c000
  4008f4:	204000a8 	.word	0x204000a8

004008f8 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  4008f8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  4008fa:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  4008fc:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  4008fe:	f013 0f10 	tst.w	r3, #16
  400902:	d100      	bne.n	400906 <tc_interrupt_handler+0xe>
  400904:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  400906:	6803      	ldr	r3, [r0, #0]
  400908:	4798      	blx	r3
	}
}
  40090a:	e7fb      	b.n	400904 <tc_interrupt_handler+0xc>

0040090c <_timer_init>:
{
  40090c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40090e:	4607      	mov	r7, r0
  400910:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  400912:	4608      	mov	r0, r1
  400914:	4b27      	ldr	r3, [pc, #156]	; (4009b4 <_timer_init+0xa8>)
  400916:	4798      	blx	r3
  400918:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  40091a:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  40091c:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  40091e:	2291      	movs	r2, #145	; 0x91
  400920:	4925      	ldr	r1, [pc, #148]	; (4009b8 <_timer_init+0xac>)
  400922:	2001      	movs	r0, #1
  400924:	4b25      	ldr	r3, [pc, #148]	; (4009bc <_timer_init+0xb0>)
  400926:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  400928:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  40092c:	d001      	beq.n	400932 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  40092e:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  400932:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  400934:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  400936:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  400938:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  40093a:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  40093c:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  40093e:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  400940:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  400942:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  400944:	2310      	movs	r3, #16
  400946:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  400948:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  40094a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  40094e:	4639      	mov	r1, r7
  400950:	4620      	mov	r0, r4
  400952:	4b1b      	ldr	r3, [pc, #108]	; (4009c0 <_timer_init+0xb4>)
  400954:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400956:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40095a:	2b00      	cmp	r3, #0
  40095c:	db0d      	blt.n	40097a <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40095e:	095a      	lsrs	r2, r3, #5
  400960:	f003 031f 	and.w	r3, r3, #31
  400964:	2101      	movs	r1, #1
  400966:	fa01 f303 	lsl.w	r3, r1, r3
  40096a:	3220      	adds	r2, #32
  40096c:	4915      	ldr	r1, [pc, #84]	; (4009c4 <_timer_init+0xb8>)
  40096e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400972:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400976:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40097a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40097e:	2b00      	cmp	r3, #0
  400980:	db09      	blt.n	400996 <_timer_init+0x8a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400982:	095a      	lsrs	r2, r3, #5
  400984:	f003 031f 	and.w	r3, r3, #31
  400988:	2101      	movs	r1, #1
  40098a:	fa01 f303 	lsl.w	r3, r1, r3
  40098e:	3260      	adds	r2, #96	; 0x60
  400990:	490c      	ldr	r1, [pc, #48]	; (4009c4 <_timer_init+0xb8>)
  400992:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  400996:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40099a:	2b00      	cmp	r3, #0
  40099c:	db08      	blt.n	4009b0 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40099e:	0959      	lsrs	r1, r3, #5
  4009a0:	f003 031f 	and.w	r3, r3, #31
  4009a4:	2201      	movs	r2, #1
  4009a6:	fa02 f303 	lsl.w	r3, r2, r3
  4009aa:	4a06      	ldr	r2, [pc, #24]	; (4009c4 <_timer_init+0xb8>)
  4009ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  4009b0:	2000      	movs	r0, #0
  4009b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009b4:	004008a9 	.word	0x004008a9
  4009b8:	00401e50 	.word	0x00401e50
  4009bc:	004006e9 	.word	0x004006e9
  4009c0:	004008e1 	.word	0x004008e1
  4009c4:	e000e100 	.word	0xe000e100

004009c8 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  4009c8:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  4009ca:	2205      	movs	r2, #5
  4009cc:	601a      	str	r2, [r3, #0]
  4009ce:	4770      	bx	lr

004009d0 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  4009d0:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  4009d2:	6a18      	ldr	r0, [r3, #32]
}
  4009d4:	f3c0 4000 	ubfx	r0, r0, #16, #1
  4009d8:	4770      	bx	lr
	...

004009dc <_timer_set_irq>:
{
  4009dc:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  4009de:	68c0      	ldr	r0, [r0, #12]
  4009e0:	4b02      	ldr	r3, [pc, #8]	; (4009ec <_timer_set_irq+0x10>)
  4009e2:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  4009e4:	7900      	ldrb	r0, [r0, #4]
  4009e6:	4b02      	ldr	r3, [pc, #8]	; (4009f0 <_timer_set_irq+0x14>)
  4009e8:	4798      	blx	r3
  4009ea:	bd08      	pop	{r3, pc}
  4009ec:	004008a9 	.word	0x004008a9
  4009f0:	00400785 	.word	0x00400785

004009f4 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  4009f4:	2000      	movs	r0, #0
  4009f6:	4770      	bx	lr

004009f8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  4009f8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  4009fa:	4b02      	ldr	r3, [pc, #8]	; (400a04 <TC0_Handler+0xc>)
  4009fc:	6818      	ldr	r0, [r3, #0]
  4009fe:	4b02      	ldr	r3, [pc, #8]	; (400a08 <TC0_Handler+0x10>)
  400a00:	4798      	blx	r3
  400a02:	bd08      	pop	{r3, pc}
  400a04:	204000a8 	.word	0x204000a8
  400a08:	004008f9 	.word	0x004008f9

00400a0c <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  400a0c:	b510      	push	{r4, lr}
	ASSERT(hw);
  400a0e:	4604      	mov	r4, r0
  400a10:	f240 222b 	movw	r2, #555	; 0x22b
  400a14:	4905      	ldr	r1, [pc, #20]	; (400a2c <_usart_get_hardware_index+0x20>)
  400a16:	3000      	adds	r0, #0
  400a18:	bf18      	it	ne
  400a1a:	2001      	movne	r0, #1
  400a1c:	4b04      	ldr	r3, [pc, #16]	; (400a30 <_usart_get_hardware_index+0x24>)
  400a1e:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  400a20:	4804      	ldr	r0, [pc, #16]	; (400a34 <_usart_get_hardware_index+0x28>)
  400a22:	4420      	add	r0, r4
}
  400a24:	f3c0 3087 	ubfx	r0, r0, #14, #8
  400a28:	bd10      	pop	{r4, pc}
  400a2a:	bf00      	nop
  400a2c:	00401e70 	.word	0x00401e70
  400a30:	004006e9 	.word	0x004006e9
  400a34:	bffdc000 	.word	0xbffdc000

00400a38 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  400a38:	b510      	push	{r4, lr}
	ASSERT(hw);
  400a3a:	4604      	mov	r4, r0
  400a3c:	f240 2287 	movw	r2, #647	; 0x287
  400a40:	490e      	ldr	r1, [pc, #56]	; (400a7c <_get_usart_index+0x44>)
  400a42:	3000      	adds	r0, #0
  400a44:	bf18      	it	ne
  400a46:	2001      	movne	r0, #1
  400a48:	4b0d      	ldr	r3, [pc, #52]	; (400a80 <_get_usart_index+0x48>)
  400a4a:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  400a4c:	4620      	mov	r0, r4
  400a4e:	4b0d      	ldr	r3, [pc, #52]	; (400a84 <_get_usart_index+0x4c>)
  400a50:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  400a52:	2300      	movs	r3, #0
  400a54:	b143      	cbz	r3, 400a68 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400a56:	f240 2291 	movw	r2, #657	; 0x291
  400a5a:	4908      	ldr	r1, [pc, #32]	; (400a7c <_get_usart_index+0x44>)
  400a5c:	2000      	movs	r0, #0
  400a5e:	4b08      	ldr	r3, [pc, #32]	; (400a80 <_get_usart_index+0x48>)
  400a60:	4798      	blx	r3
	return 0;
  400a62:	2300      	movs	r3, #0
}
  400a64:	4618      	mov	r0, r3
  400a66:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  400a68:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400a6c:	008a      	lsls	r2, r1, #2
  400a6e:	4906      	ldr	r1, [pc, #24]	; (400a88 <_get_usart_index+0x50>)
  400a70:	5c8a      	ldrb	r2, [r1, r2]
  400a72:	4290      	cmp	r0, r2
  400a74:	d0f6      	beq.n	400a64 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  400a76:	3301      	adds	r3, #1
  400a78:	b2db      	uxtb	r3, r3
  400a7a:	e7eb      	b.n	400a54 <_get_usart_index+0x1c>
  400a7c:	00401e70 	.word	0x00401e70
  400a80:	004006e9 	.word	0x004006e9
  400a84:	00400a0d 	.word	0x00400a0d
  400a88:	00401e64 	.word	0x00401e64

00400a8c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  400a8c:	b510      	push	{r4, lr}
	ASSERT(hw);
  400a8e:	4604      	mov	r4, r0
  400a90:	f240 229e 	movw	r2, #670	; 0x29e
  400a94:	4911      	ldr	r1, [pc, #68]	; (400adc <_usart_init+0x50>)
  400a96:	3000      	adds	r0, #0
  400a98:	bf18      	it	ne
  400a9a:	2001      	movne	r0, #1
  400a9c:	4b10      	ldr	r3, [pc, #64]	; (400ae0 <_usart_init+0x54>)
  400a9e:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  400aa0:	4620      	mov	r0, r4
  400aa2:	4b10      	ldr	r3, [pc, #64]	; (400ae4 <_usart_init+0x58>)
  400aa4:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  400aa6:	4b10      	ldr	r3, [pc, #64]	; (400ae8 <_usart_init+0x5c>)
  400aa8:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  400aac:	2300      	movs	r3, #0
  400aae:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  400ab0:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  400ab2:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  400ab4:	22ac      	movs	r2, #172	; 0xac
  400ab6:	6022      	str	r2, [r4, #0]
  400ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
  400abc:	6022      	str	r2, [r4, #0]
  400abe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400ac2:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  400ac4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400ac8:	0081      	lsls	r1, r0, #2
  400aca:	4a08      	ldr	r2, [pc, #32]	; (400aec <_usart_init+0x60>)
  400acc:	440a      	add	r2, r1
  400ace:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  400ad0:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  400ad2:	4a07      	ldr	r2, [pc, #28]	; (400af0 <_usart_init+0x64>)
  400ad4:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  400ad6:	4618      	mov	r0, r3
  400ad8:	bd10      	pop	{r4, pc}
  400ada:	bf00      	nop
  400adc:	00401e70 	.word	0x00401e70
  400ae0:	004006e9 	.word	0x004006e9
  400ae4:	00400a39 	.word	0x00400a39
  400ae8:	55534100 	.word	0x55534100
  400aec:	00401e64 	.word	0x00401e64
  400af0:	00030051 	.word	0x00030051

00400af4 <_usart_sync_init>:
{
  400af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400af6:	460c      	mov	r4, r1
	ASSERT(device);
  400af8:	4e09      	ldr	r6, [pc, #36]	; (400b20 <_usart_sync_init+0x2c>)
  400afa:	4607      	mov	r7, r0
  400afc:	22bd      	movs	r2, #189	; 0xbd
  400afe:	4631      	mov	r1, r6
  400b00:	3000      	adds	r0, #0
  400b02:	bf18      	it	ne
  400b04:	2001      	movne	r0, #1
  400b06:	4d07      	ldr	r5, [pc, #28]	; (400b24 <_usart_sync_init+0x30>)
  400b08:	47a8      	blx	r5
	ASSERT(hw);
  400b0a:	22be      	movs	r2, #190	; 0xbe
  400b0c:	4631      	mov	r1, r6
  400b0e:	1c20      	adds	r0, r4, #0
  400b10:	bf18      	it	ne
  400b12:	2001      	movne	r0, #1
  400b14:	47a8      	blx	r5
	device->hw = hw;
  400b16:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  400b18:	4620      	mov	r0, r4
  400b1a:	4b03      	ldr	r3, [pc, #12]	; (400b28 <_usart_sync_init+0x34>)
  400b1c:	4798      	blx	r3
}
  400b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b20:	00401e70 	.word	0x00401e70
  400b24:	004006e9 	.word	0x004006e9
  400b28:	00400a8d 	.word	0x00400a8d

00400b2c <_usart_sync_enable>:
{
  400b2c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  400b2e:	4e0a      	ldr	r6, [pc, #40]	; (400b58 <_usart_sync_enable+0x2c>)
  400b30:	4604      	mov	r4, r0
  400b32:	f240 1205 	movw	r2, #261	; 0x105
  400b36:	4631      	mov	r1, r6
  400b38:	3000      	adds	r0, #0
  400b3a:	bf18      	it	ne
  400b3c:	2001      	movne	r0, #1
  400b3e:	4d07      	ldr	r5, [pc, #28]	; (400b5c <_usart_sync_enable+0x30>)
  400b40:	47a8      	blx	r5
	_usart_enable(device->hw);
  400b42:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  400b44:	f240 22c7 	movw	r2, #711	; 0x2c7
  400b48:	4631      	mov	r1, r6
  400b4a:	1c20      	adds	r0, r4, #0
  400b4c:	bf18      	it	ne
  400b4e:	2001      	movne	r0, #1
  400b50:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  400b52:	2350      	movs	r3, #80	; 0x50
  400b54:	6023      	str	r3, [r4, #0]
  400b56:	bd70      	pop	{r4, r5, r6, pc}
  400b58:	00401e70 	.word	0x00401e70
  400b5c:	004006e9 	.word	0x004006e9

00400b60 <_usart_sync_write_byte>:
{
  400b60:	b538      	push	{r3, r4, r5, lr}
  400b62:	460c      	mov	r4, r1
	ASSERT(device);
  400b64:	4605      	mov	r5, r0
  400b66:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  400b6a:	4904      	ldr	r1, [pc, #16]	; (400b7c <_usart_sync_write_byte+0x1c>)
  400b6c:	3000      	adds	r0, #0
  400b6e:	bf18      	it	ne
  400b70:	2001      	movne	r0, #1
  400b72:	4b03      	ldr	r3, [pc, #12]	; (400b80 <_usart_sync_write_byte+0x20>)
  400b74:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  400b76:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  400b78:	61dc      	str	r4, [r3, #28]
  400b7a:	bd38      	pop	{r3, r4, r5, pc}
  400b7c:	00401e70 	.word	0x00401e70
  400b80:	004006e9 	.word	0x004006e9

00400b84 <_usart_sync_read_byte>:
{
  400b84:	b510      	push	{r4, lr}
	ASSERT(device);
  400b86:	4604      	mov	r4, r0
  400b88:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  400b8c:	4904      	ldr	r1, [pc, #16]	; (400ba0 <_usart_sync_read_byte+0x1c>)
  400b8e:	3000      	adds	r0, #0
  400b90:	bf18      	it	ne
  400b92:	2001      	movne	r0, #1
  400b94:	4b03      	ldr	r3, [pc, #12]	; (400ba4 <_usart_sync_read_byte+0x20>)
  400b96:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  400b98:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  400b9a:	6998      	ldr	r0, [r3, #24]
}
  400b9c:	b2c0      	uxtb	r0, r0
  400b9e:	bd10      	pop	{r4, pc}
  400ba0:	00401e70 	.word	0x00401e70
  400ba4:	004006e9 	.word	0x004006e9

00400ba8 <_usart_sync_is_ready_to_send>:
{
  400ba8:	b510      	push	{r4, lr}
	ASSERT(device);
  400baa:	4604      	mov	r4, r0
  400bac:	f240 12c3 	movw	r2, #451	; 0x1c3
  400bb0:	4905      	ldr	r1, [pc, #20]	; (400bc8 <_usart_sync_is_ready_to_send+0x20>)
  400bb2:	3000      	adds	r0, #0
  400bb4:	bf18      	it	ne
  400bb6:	2001      	movne	r0, #1
  400bb8:	4b04      	ldr	r3, [pc, #16]	; (400bcc <_usart_sync_is_ready_to_send+0x24>)
  400bba:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  400bbc:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  400bbe:	6958      	ldr	r0, [r3, #20]
}
  400bc0:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400bc4:	bd10      	pop	{r4, pc}
  400bc6:	bf00      	nop
  400bc8:	00401e70 	.word	0x00401e70
  400bcc:	004006e9 	.word	0x004006e9

00400bd0 <_usart_sync_is_transmit_done>:
{
  400bd0:	b510      	push	{r4, lr}
	ASSERT(device);
  400bd2:	4604      	mov	r4, r0
  400bd4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  400bd8:	4905      	ldr	r1, [pc, #20]	; (400bf0 <_usart_sync_is_transmit_done+0x20>)
  400bda:	3000      	adds	r0, #0
  400bdc:	bf18      	it	ne
  400bde:	2001      	movne	r0, #1
  400be0:	4b04      	ldr	r3, [pc, #16]	; (400bf4 <_usart_sync_is_transmit_done+0x24>)
  400be2:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  400be4:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  400be6:	6958      	ldr	r0, [r3, #20]
}
  400be8:	f3c0 2040 	ubfx	r0, r0, #9, #1
  400bec:	bd10      	pop	{r4, pc}
  400bee:	bf00      	nop
  400bf0:	00401e70 	.word	0x00401e70
  400bf4:	004006e9 	.word	0x004006e9

00400bf8 <_usart_sync_is_byte_received>:
{
  400bf8:	b510      	push	{r4, lr}
	ASSERT(device);
  400bfa:	4604      	mov	r4, r0
  400bfc:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  400c00:	4905      	ldr	r1, [pc, #20]	; (400c18 <_usart_sync_is_byte_received+0x20>)
  400c02:	3000      	adds	r0, #0
  400c04:	bf18      	it	ne
  400c06:	2001      	movne	r0, #1
  400c08:	4b04      	ldr	r3, [pc, #16]	; (400c1c <_usart_sync_is_byte_received+0x24>)
  400c0a:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  400c0c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  400c0e:	6958      	ldr	r0, [r3, #20]
  400c10:	f000 0001 	and.w	r0, r0, #1
}
  400c14:	bd10      	pop	{r4, pc}
  400c16:	bf00      	nop
  400c18:	00401e70 	.word	0x00401e70
  400c1c:	004006e9 	.word	0x004006e9

00400c20 <_usart_get_usart_sync>:
}
  400c20:	2000      	movs	r0, #0
  400c22:	4770      	bx	lr

00400c24 <TIMER_0_task2_callback>:
{
	printf("Timer 0 time is: %d \n", TIMER_0.time);
}

static void TIMER_0_task2_callback(const struct timer_task *const timer_task)
{
  400c24:	4770      	bx	lr
	...

00400c28 <TIMER_0_task1_callback>:
{
  400c28:	b508      	push	{r3, lr}
	printf("Timer 0 time is: %d \n", TIMER_0.time);
  400c2a:	4b03      	ldr	r3, [pc, #12]	; (400c38 <TIMER_0_task1_callback+0x10>)
  400c2c:	6919      	ldr	r1, [r3, #16]
  400c2e:	4803      	ldr	r0, [pc, #12]	; (400c3c <TIMER_0_task1_callback+0x14>)
  400c30:	4b03      	ldr	r3, [pc, #12]	; (400c40 <TIMER_0_task1_callback+0x18>)
  400c32:	4798      	blx	r3
  400c34:	bd08      	pop	{r3, pc}
  400c36:	bf00      	nop
  400c38:	204000c4 	.word	0x204000c4
  400c3c:	00401e8c 	.word	0x00401e8c
  400c40:	00400dd5 	.word	0x00400dd5

00400c44 <main>:
{
  400c44:	b500      	push	{lr}
  400c46:	b08b      	sub	sp, #44	; 0x2c
	atmel_start_init();
  400c48:	4b0e      	ldr	r3, [pc, #56]	; (400c84 <main+0x40>)
  400c4a:	4798      	blx	r3
	TIMER_0_task1.interval = 999;
  400c4c:	f240 33e7 	movw	r3, #999	; 0x3e7
  400c50:	9307      	str	r3, [sp, #28]
	TIMER_0_task1.cb       = TIMER_0_task1_callback;
  400c52:	4b0d      	ldr	r3, [pc, #52]	; (400c88 <main+0x44>)
  400c54:	9308      	str	r3, [sp, #32]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
  400c56:	2301      	movs	r3, #1
  400c58:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	TIMER_0_task2.interval = 2000;
  400c5c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  400c60:	9202      	str	r2, [sp, #8]
	TIMER_0_task2.cb       = TIMER_0_task2_callback;
  400c62:	4a0a      	ldr	r2, [pc, #40]	; (400c8c <main+0x48>)
  400c64:	9203      	str	r2, [sp, #12]
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
  400c66:	f88d 3010 	strb.w	r3, [sp, #16]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
  400c6a:	4c09      	ldr	r4, [pc, #36]	; (400c90 <main+0x4c>)
  400c6c:	a905      	add	r1, sp, #20
  400c6e:	4620      	mov	r0, r4
  400c70:	4d08      	ldr	r5, [pc, #32]	; (400c94 <main+0x50>)
  400c72:	47a8      	blx	r5
	timer_add_task(&TIMER_0, &TIMER_0_task2);
  400c74:	4669      	mov	r1, sp
  400c76:	4620      	mov	r0, r4
  400c78:	47a8      	blx	r5
	timer_start(&TIMER_0);
  400c7a:	4620      	mov	r0, r4
  400c7c:	4b06      	ldr	r3, [pc, #24]	; (400c98 <main+0x54>)
  400c7e:	4798      	blx	r3
  400c80:	e7fe      	b.n	400c80 <main+0x3c>
  400c82:	bf00      	nop
  400c84:	004001d5 	.word	0x004001d5
  400c88:	00400c29 	.word	0x00400c29
  400c8c:	00400c25 	.word	0x00400c25
  400c90:	204000c4 	.word	0x204000c4
  400c94:	004004fd 	.word	0x004004fd
  400c98:	004004c1 	.word	0x004004c1

00400c9c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  400c9c:	b958      	cbnz	r0, 400cb6 <_read+0x1a>
{
  400c9e:	b508      	push	{r3, lr}
  400ca0:	460b      	mov	r3, r1
  400ca2:	4611      	mov	r1, r2
  400ca4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  400ca6:	4b05      	ldr	r3, [pc, #20]	; (400cbc <_read+0x20>)
  400ca8:	4798      	blx	r3
	if (n < 0) {
  400caa:	2800      	cmp	r0, #0
  400cac:	db00      	blt.n	400cb0 <_read+0x14>
		return -1;
	}

	return n;
}
  400cae:	bd08      	pop	{r3, pc}
		return -1;
  400cb0:	f04f 30ff 	mov.w	r0, #4294967295
  400cb4:	bd08      	pop	{r3, pc}
		return -1;
  400cb6:	f04f 30ff 	mov.w	r0, #4294967295
  400cba:	4770      	bx	lr
  400cbc:	00400d15 	.word	0x00400d15

00400cc0 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  400cc0:	3801      	subs	r0, #1
  400cc2:	2802      	cmp	r0, #2
  400cc4:	d80b      	bhi.n	400cde <_write+0x1e>
{
  400cc6:	b508      	push	{r3, lr}
  400cc8:	460b      	mov	r3, r1
  400cca:	4611      	mov	r1, r2
  400ccc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  400cce:	4b05      	ldr	r3, [pc, #20]	; (400ce4 <_write+0x24>)
  400cd0:	4798      	blx	r3
	if (n < 0) {
  400cd2:	2800      	cmp	r0, #0
  400cd4:	db00      	blt.n	400cd8 <_write+0x18>
		return -1;
	}

	return n;
}
  400cd6:	bd08      	pop	{r3, pc}
		return -1;
  400cd8:	f04f 30ff 	mov.w	r0, #4294967295
  400cdc:	bd08      	pop	{r3, pc}
		return -1;
  400cde:	f04f 30ff 	mov.w	r0, #4294967295
  400ce2:	4770      	bx	lr
  400ce4:	00400d39 	.word	0x00400d39

00400ce8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  400ce8:	b570      	push	{r4, r5, r6, lr}
  400cea:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  400cec:	4d06      	ldr	r5, [pc, #24]	; (400d08 <stdio_io_init+0x20>)
  400cee:	682b      	ldr	r3, [r5, #0]
  400cf0:	2100      	movs	r1, #0
  400cf2:	6898      	ldr	r0, [r3, #8]
  400cf4:	4c05      	ldr	r4, [pc, #20]	; (400d0c <stdio_io_init+0x24>)
  400cf6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400cf8:	682b      	ldr	r3, [r5, #0]
  400cfa:	2100      	movs	r1, #0
  400cfc:	6858      	ldr	r0, [r3, #4]
  400cfe:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  400d00:	4b03      	ldr	r3, [pc, #12]	; (400d10 <stdio_io_init+0x28>)
  400d02:	601e      	str	r6, [r3, #0]
  400d04:	bd70      	pop	{r4, r5, r6, pc}
  400d06:	bf00      	nop
  400d08:	20400024 	.word	0x20400024
  400d0c:	00400e05 	.word	0x00400e05
  400d10:	204000ac 	.word	0x204000ac

00400d14 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  400d14:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  400d16:	4b06      	ldr	r3, [pc, #24]	; (400d30 <stdio_io_read+0x1c>)
  400d18:	681b      	ldr	r3, [r3, #0]
  400d1a:	b133      	cbz	r3, 400d2a <stdio_io_read+0x16>
  400d1c:	460a      	mov	r2, r1
  400d1e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  400d20:	b292      	uxth	r2, r2
  400d22:	4618      	mov	r0, r3
  400d24:	4b03      	ldr	r3, [pc, #12]	; (400d34 <stdio_io_read+0x20>)
  400d26:	4798      	blx	r3
  400d28:	bd08      	pop	{r3, pc}
		return 0;
  400d2a:	2000      	movs	r0, #0
}
  400d2c:	bd08      	pop	{r3, pc}
  400d2e:	bf00      	nop
  400d30:	204000ac 	.word	0x204000ac
  400d34:	0040039d 	.word	0x0040039d

00400d38 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  400d38:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  400d3a:	4b06      	ldr	r3, [pc, #24]	; (400d54 <stdio_io_write+0x1c>)
  400d3c:	681b      	ldr	r3, [r3, #0]
  400d3e:	b133      	cbz	r3, 400d4e <stdio_io_write+0x16>
  400d40:	460a      	mov	r2, r1
  400d42:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  400d44:	b292      	uxth	r2, r2
  400d46:	4618      	mov	r0, r3
  400d48:	4b03      	ldr	r3, [pc, #12]	; (400d58 <stdio_io_write+0x20>)
  400d4a:	4798      	blx	r3
  400d4c:	bd08      	pop	{r3, pc}
		return 0;
  400d4e:	2000      	movs	r0, #0
}
  400d50:	bd08      	pop	{r3, pc}
  400d52:	bf00      	nop
  400d54:	204000ac 	.word	0x204000ac
  400d58:	0040036d 	.word	0x0040036d

00400d5c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  400d5c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  400d5e:	4c04      	ldr	r4, [pc, #16]	; (400d70 <stdio_redirect_init+0x14>)
  400d60:	4620      	mov	r0, r4
  400d62:	4b04      	ldr	r3, [pc, #16]	; (400d74 <stdio_redirect_init+0x18>)
  400d64:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  400d66:	4620      	mov	r0, r4
  400d68:	4b03      	ldr	r3, [pc, #12]	; (400d78 <stdio_redirect_init+0x1c>)
  400d6a:	4798      	blx	r3
  400d6c:	bd10      	pop	{r4, pc}
  400d6e:	bf00      	nop
  400d70:	204000b8 	.word	0x204000b8
  400d74:	004006bd 	.word	0x004006bd
  400d78:	00400ce9 	.word	0x00400ce9

00400d7c <__libc_init_array>:
  400d7c:	b570      	push	{r4, r5, r6, lr}
  400d7e:	4e0d      	ldr	r6, [pc, #52]	; (400db4 <__libc_init_array+0x38>)
  400d80:	4c0d      	ldr	r4, [pc, #52]	; (400db8 <__libc_init_array+0x3c>)
  400d82:	1ba4      	subs	r4, r4, r6
  400d84:	10a4      	asrs	r4, r4, #2
  400d86:	2500      	movs	r5, #0
  400d88:	42a5      	cmp	r5, r4
  400d8a:	d109      	bne.n	400da0 <__libc_init_array+0x24>
  400d8c:	4e0b      	ldr	r6, [pc, #44]	; (400dbc <__libc_init_array+0x40>)
  400d8e:	4c0c      	ldr	r4, [pc, #48]	; (400dc0 <__libc_init_array+0x44>)
  400d90:	f001 f8d4 	bl	401f3c <_init>
  400d94:	1ba4      	subs	r4, r4, r6
  400d96:	10a4      	asrs	r4, r4, #2
  400d98:	2500      	movs	r5, #0
  400d9a:	42a5      	cmp	r5, r4
  400d9c:	d105      	bne.n	400daa <__libc_init_array+0x2e>
  400d9e:	bd70      	pop	{r4, r5, r6, pc}
  400da0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400da4:	4798      	blx	r3
  400da6:	3501      	adds	r5, #1
  400da8:	e7ee      	b.n	400d88 <__libc_init_array+0xc>
  400daa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400dae:	4798      	blx	r3
  400db0:	3501      	adds	r5, #1
  400db2:	e7f2      	b.n	400d9a <__libc_init_array+0x1e>
  400db4:	00401f48 	.word	0x00401f48
  400db8:	00401f48 	.word	0x00401f48
  400dbc:	00401f48 	.word	0x00401f48
  400dc0:	00401f4c 	.word	0x00401f4c

00400dc4 <memset>:
  400dc4:	4402      	add	r2, r0
  400dc6:	4603      	mov	r3, r0
  400dc8:	4293      	cmp	r3, r2
  400dca:	d100      	bne.n	400dce <memset+0xa>
  400dcc:	4770      	bx	lr
  400dce:	f803 1b01 	strb.w	r1, [r3], #1
  400dd2:	e7f9      	b.n	400dc8 <memset+0x4>

00400dd4 <iprintf>:
  400dd4:	b40f      	push	{r0, r1, r2, r3}
  400dd6:	4b0a      	ldr	r3, [pc, #40]	; (400e00 <iprintf+0x2c>)
  400dd8:	b513      	push	{r0, r1, r4, lr}
  400dda:	681c      	ldr	r4, [r3, #0]
  400ddc:	b124      	cbz	r4, 400de8 <iprintf+0x14>
  400dde:	69a3      	ldr	r3, [r4, #24]
  400de0:	b913      	cbnz	r3, 400de8 <iprintf+0x14>
  400de2:	4620      	mov	r0, r4
  400de4:	f000 fa76 	bl	4012d4 <__sinit>
  400de8:	ab05      	add	r3, sp, #20
  400dea:	9a04      	ldr	r2, [sp, #16]
  400dec:	68a1      	ldr	r1, [r4, #8]
  400dee:	9301      	str	r3, [sp, #4]
  400df0:	4620      	mov	r0, r4
  400df2:	f000 fc39 	bl	401668 <_vfiprintf_r>
  400df6:	b002      	add	sp, #8
  400df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400dfc:	b004      	add	sp, #16
  400dfe:	4770      	bx	lr
  400e00:	20400024 	.word	0x20400024

00400e04 <setbuf>:
  400e04:	2900      	cmp	r1, #0
  400e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400e0a:	bf0c      	ite	eq
  400e0c:	2202      	moveq	r2, #2
  400e0e:	2200      	movne	r2, #0
  400e10:	f000 b800 	b.w	400e14 <setvbuf>

00400e14 <setvbuf>:
  400e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  400e18:	461d      	mov	r5, r3
  400e1a:	4b51      	ldr	r3, [pc, #324]	; (400f60 <setvbuf+0x14c>)
  400e1c:	681e      	ldr	r6, [r3, #0]
  400e1e:	4604      	mov	r4, r0
  400e20:	460f      	mov	r7, r1
  400e22:	4690      	mov	r8, r2
  400e24:	b126      	cbz	r6, 400e30 <setvbuf+0x1c>
  400e26:	69b3      	ldr	r3, [r6, #24]
  400e28:	b913      	cbnz	r3, 400e30 <setvbuf+0x1c>
  400e2a:	4630      	mov	r0, r6
  400e2c:	f000 fa52 	bl	4012d4 <__sinit>
  400e30:	4b4c      	ldr	r3, [pc, #304]	; (400f64 <setvbuf+0x150>)
  400e32:	429c      	cmp	r4, r3
  400e34:	d152      	bne.n	400edc <setvbuf+0xc8>
  400e36:	6874      	ldr	r4, [r6, #4]
  400e38:	f1b8 0f02 	cmp.w	r8, #2
  400e3c:	d006      	beq.n	400e4c <setvbuf+0x38>
  400e3e:	f1b8 0f01 	cmp.w	r8, #1
  400e42:	f200 8089 	bhi.w	400f58 <setvbuf+0x144>
  400e46:	2d00      	cmp	r5, #0
  400e48:	f2c0 8086 	blt.w	400f58 <setvbuf+0x144>
  400e4c:	4621      	mov	r1, r4
  400e4e:	4630      	mov	r0, r6
  400e50:	f000 f9d6 	bl	401200 <_fflush_r>
  400e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
  400e56:	b141      	cbz	r1, 400e6a <setvbuf+0x56>
  400e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
  400e5c:	4299      	cmp	r1, r3
  400e5e:	d002      	beq.n	400e66 <setvbuf+0x52>
  400e60:	4630      	mov	r0, r6
  400e62:	f000 fb2d 	bl	4014c0 <_free_r>
  400e66:	2300      	movs	r3, #0
  400e68:	6363      	str	r3, [r4, #52]	; 0x34
  400e6a:	2300      	movs	r3, #0
  400e6c:	61a3      	str	r3, [r4, #24]
  400e6e:	6063      	str	r3, [r4, #4]
  400e70:	89a3      	ldrh	r3, [r4, #12]
  400e72:	061b      	lsls	r3, r3, #24
  400e74:	d503      	bpl.n	400e7e <setvbuf+0x6a>
  400e76:	6921      	ldr	r1, [r4, #16]
  400e78:	4630      	mov	r0, r6
  400e7a:	f000 fb21 	bl	4014c0 <_free_r>
  400e7e:	89a3      	ldrh	r3, [r4, #12]
  400e80:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  400e84:	f023 0303 	bic.w	r3, r3, #3
  400e88:	f1b8 0f02 	cmp.w	r8, #2
  400e8c:	81a3      	strh	r3, [r4, #12]
  400e8e:	d05d      	beq.n	400f4c <setvbuf+0x138>
  400e90:	ab01      	add	r3, sp, #4
  400e92:	466a      	mov	r2, sp
  400e94:	4621      	mov	r1, r4
  400e96:	4630      	mov	r0, r6
  400e98:	f000 faa6 	bl	4013e8 <__swhatbuf_r>
  400e9c:	89a3      	ldrh	r3, [r4, #12]
  400e9e:	4318      	orrs	r0, r3
  400ea0:	81a0      	strh	r0, [r4, #12]
  400ea2:	bb2d      	cbnz	r5, 400ef0 <setvbuf+0xdc>
  400ea4:	9d00      	ldr	r5, [sp, #0]
  400ea6:	4628      	mov	r0, r5
  400ea8:	f000 fb02 	bl	4014b0 <malloc>
  400eac:	4607      	mov	r7, r0
  400eae:	2800      	cmp	r0, #0
  400eb0:	d14e      	bne.n	400f50 <setvbuf+0x13c>
  400eb2:	f8dd 9000 	ldr.w	r9, [sp]
  400eb6:	45a9      	cmp	r9, r5
  400eb8:	d13c      	bne.n	400f34 <setvbuf+0x120>
  400eba:	f04f 30ff 	mov.w	r0, #4294967295
  400ebe:	89a3      	ldrh	r3, [r4, #12]
  400ec0:	f043 0302 	orr.w	r3, r3, #2
  400ec4:	81a3      	strh	r3, [r4, #12]
  400ec6:	2300      	movs	r3, #0
  400ec8:	60a3      	str	r3, [r4, #8]
  400eca:	f104 0347 	add.w	r3, r4, #71	; 0x47
  400ece:	6023      	str	r3, [r4, #0]
  400ed0:	6123      	str	r3, [r4, #16]
  400ed2:	2301      	movs	r3, #1
  400ed4:	6163      	str	r3, [r4, #20]
  400ed6:	b003      	add	sp, #12
  400ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400edc:	4b22      	ldr	r3, [pc, #136]	; (400f68 <setvbuf+0x154>)
  400ede:	429c      	cmp	r4, r3
  400ee0:	d101      	bne.n	400ee6 <setvbuf+0xd2>
  400ee2:	68b4      	ldr	r4, [r6, #8]
  400ee4:	e7a8      	b.n	400e38 <setvbuf+0x24>
  400ee6:	4b21      	ldr	r3, [pc, #132]	; (400f6c <setvbuf+0x158>)
  400ee8:	429c      	cmp	r4, r3
  400eea:	bf08      	it	eq
  400eec:	68f4      	ldreq	r4, [r6, #12]
  400eee:	e7a3      	b.n	400e38 <setvbuf+0x24>
  400ef0:	2f00      	cmp	r7, #0
  400ef2:	d0d8      	beq.n	400ea6 <setvbuf+0x92>
  400ef4:	69b3      	ldr	r3, [r6, #24]
  400ef6:	b913      	cbnz	r3, 400efe <setvbuf+0xea>
  400ef8:	4630      	mov	r0, r6
  400efa:	f000 f9eb 	bl	4012d4 <__sinit>
  400efe:	f1b8 0f01 	cmp.w	r8, #1
  400f02:	bf08      	it	eq
  400f04:	89a3      	ldrheq	r3, [r4, #12]
  400f06:	6027      	str	r7, [r4, #0]
  400f08:	bf04      	itt	eq
  400f0a:	f043 0301 	orreq.w	r3, r3, #1
  400f0e:	81a3      	strheq	r3, [r4, #12]
  400f10:	89a3      	ldrh	r3, [r4, #12]
  400f12:	6127      	str	r7, [r4, #16]
  400f14:	f013 0008 	ands.w	r0, r3, #8
  400f18:	6165      	str	r5, [r4, #20]
  400f1a:	d01b      	beq.n	400f54 <setvbuf+0x140>
  400f1c:	f013 0001 	ands.w	r0, r3, #1
  400f20:	bf18      	it	ne
  400f22:	426d      	negne	r5, r5
  400f24:	f04f 0300 	mov.w	r3, #0
  400f28:	bf1d      	ittte	ne
  400f2a:	60a3      	strne	r3, [r4, #8]
  400f2c:	61a5      	strne	r5, [r4, #24]
  400f2e:	4618      	movne	r0, r3
  400f30:	60a5      	streq	r5, [r4, #8]
  400f32:	e7d0      	b.n	400ed6 <setvbuf+0xc2>
  400f34:	4648      	mov	r0, r9
  400f36:	f000 fabb 	bl	4014b0 <malloc>
  400f3a:	4607      	mov	r7, r0
  400f3c:	2800      	cmp	r0, #0
  400f3e:	d0bc      	beq.n	400eba <setvbuf+0xa6>
  400f40:	89a3      	ldrh	r3, [r4, #12]
  400f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400f46:	81a3      	strh	r3, [r4, #12]
  400f48:	464d      	mov	r5, r9
  400f4a:	e7d3      	b.n	400ef4 <setvbuf+0xe0>
  400f4c:	2000      	movs	r0, #0
  400f4e:	e7b6      	b.n	400ebe <setvbuf+0xaa>
  400f50:	46a9      	mov	r9, r5
  400f52:	e7f5      	b.n	400f40 <setvbuf+0x12c>
  400f54:	60a0      	str	r0, [r4, #8]
  400f56:	e7be      	b.n	400ed6 <setvbuf+0xc2>
  400f58:	f04f 30ff 	mov.w	r0, #4294967295
  400f5c:	e7bb      	b.n	400ed6 <setvbuf+0xc2>
  400f5e:	bf00      	nop
  400f60:	20400024 	.word	0x20400024
  400f64:	00401ec8 	.word	0x00401ec8
  400f68:	00401ee8 	.word	0x00401ee8
  400f6c:	00401ea8 	.word	0x00401ea8

00400f70 <__swbuf_r>:
  400f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f72:	460e      	mov	r6, r1
  400f74:	4614      	mov	r4, r2
  400f76:	4605      	mov	r5, r0
  400f78:	b118      	cbz	r0, 400f82 <__swbuf_r+0x12>
  400f7a:	6983      	ldr	r3, [r0, #24]
  400f7c:	b90b      	cbnz	r3, 400f82 <__swbuf_r+0x12>
  400f7e:	f000 f9a9 	bl	4012d4 <__sinit>
  400f82:	4b21      	ldr	r3, [pc, #132]	; (401008 <__swbuf_r+0x98>)
  400f84:	429c      	cmp	r4, r3
  400f86:	d12a      	bne.n	400fde <__swbuf_r+0x6e>
  400f88:	686c      	ldr	r4, [r5, #4]
  400f8a:	69a3      	ldr	r3, [r4, #24]
  400f8c:	60a3      	str	r3, [r4, #8]
  400f8e:	89a3      	ldrh	r3, [r4, #12]
  400f90:	071a      	lsls	r2, r3, #28
  400f92:	d52e      	bpl.n	400ff2 <__swbuf_r+0x82>
  400f94:	6923      	ldr	r3, [r4, #16]
  400f96:	b363      	cbz	r3, 400ff2 <__swbuf_r+0x82>
  400f98:	6923      	ldr	r3, [r4, #16]
  400f9a:	6820      	ldr	r0, [r4, #0]
  400f9c:	1ac0      	subs	r0, r0, r3
  400f9e:	6963      	ldr	r3, [r4, #20]
  400fa0:	b2f6      	uxtb	r6, r6
  400fa2:	4298      	cmp	r0, r3
  400fa4:	4637      	mov	r7, r6
  400fa6:	db04      	blt.n	400fb2 <__swbuf_r+0x42>
  400fa8:	4621      	mov	r1, r4
  400faa:	4628      	mov	r0, r5
  400fac:	f000 f928 	bl	401200 <_fflush_r>
  400fb0:	bb28      	cbnz	r0, 400ffe <__swbuf_r+0x8e>
  400fb2:	68a3      	ldr	r3, [r4, #8]
  400fb4:	3b01      	subs	r3, #1
  400fb6:	60a3      	str	r3, [r4, #8]
  400fb8:	6823      	ldr	r3, [r4, #0]
  400fba:	1c5a      	adds	r2, r3, #1
  400fbc:	6022      	str	r2, [r4, #0]
  400fbe:	701e      	strb	r6, [r3, #0]
  400fc0:	6963      	ldr	r3, [r4, #20]
  400fc2:	3001      	adds	r0, #1
  400fc4:	4298      	cmp	r0, r3
  400fc6:	d004      	beq.n	400fd2 <__swbuf_r+0x62>
  400fc8:	89a3      	ldrh	r3, [r4, #12]
  400fca:	07db      	lsls	r3, r3, #31
  400fcc:	d519      	bpl.n	401002 <__swbuf_r+0x92>
  400fce:	2e0a      	cmp	r6, #10
  400fd0:	d117      	bne.n	401002 <__swbuf_r+0x92>
  400fd2:	4621      	mov	r1, r4
  400fd4:	4628      	mov	r0, r5
  400fd6:	f000 f913 	bl	401200 <_fflush_r>
  400fda:	b190      	cbz	r0, 401002 <__swbuf_r+0x92>
  400fdc:	e00f      	b.n	400ffe <__swbuf_r+0x8e>
  400fde:	4b0b      	ldr	r3, [pc, #44]	; (40100c <__swbuf_r+0x9c>)
  400fe0:	429c      	cmp	r4, r3
  400fe2:	d101      	bne.n	400fe8 <__swbuf_r+0x78>
  400fe4:	68ac      	ldr	r4, [r5, #8]
  400fe6:	e7d0      	b.n	400f8a <__swbuf_r+0x1a>
  400fe8:	4b09      	ldr	r3, [pc, #36]	; (401010 <__swbuf_r+0xa0>)
  400fea:	429c      	cmp	r4, r3
  400fec:	bf08      	it	eq
  400fee:	68ec      	ldreq	r4, [r5, #12]
  400ff0:	e7cb      	b.n	400f8a <__swbuf_r+0x1a>
  400ff2:	4621      	mov	r1, r4
  400ff4:	4628      	mov	r0, r5
  400ff6:	f000 f80d 	bl	401014 <__swsetup_r>
  400ffa:	2800      	cmp	r0, #0
  400ffc:	d0cc      	beq.n	400f98 <__swbuf_r+0x28>
  400ffe:	f04f 37ff 	mov.w	r7, #4294967295
  401002:	4638      	mov	r0, r7
  401004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401006:	bf00      	nop
  401008:	00401ec8 	.word	0x00401ec8
  40100c:	00401ee8 	.word	0x00401ee8
  401010:	00401ea8 	.word	0x00401ea8

00401014 <__swsetup_r>:
  401014:	4b32      	ldr	r3, [pc, #200]	; (4010e0 <__swsetup_r+0xcc>)
  401016:	b570      	push	{r4, r5, r6, lr}
  401018:	681d      	ldr	r5, [r3, #0]
  40101a:	4606      	mov	r6, r0
  40101c:	460c      	mov	r4, r1
  40101e:	b125      	cbz	r5, 40102a <__swsetup_r+0x16>
  401020:	69ab      	ldr	r3, [r5, #24]
  401022:	b913      	cbnz	r3, 40102a <__swsetup_r+0x16>
  401024:	4628      	mov	r0, r5
  401026:	f000 f955 	bl	4012d4 <__sinit>
  40102a:	4b2e      	ldr	r3, [pc, #184]	; (4010e4 <__swsetup_r+0xd0>)
  40102c:	429c      	cmp	r4, r3
  40102e:	d10f      	bne.n	401050 <__swsetup_r+0x3c>
  401030:	686c      	ldr	r4, [r5, #4]
  401032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401036:	b29a      	uxth	r2, r3
  401038:	0715      	lsls	r5, r2, #28
  40103a:	d42c      	bmi.n	401096 <__swsetup_r+0x82>
  40103c:	06d0      	lsls	r0, r2, #27
  40103e:	d411      	bmi.n	401064 <__swsetup_r+0x50>
  401040:	2209      	movs	r2, #9
  401042:	6032      	str	r2, [r6, #0]
  401044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401048:	81a3      	strh	r3, [r4, #12]
  40104a:	f04f 30ff 	mov.w	r0, #4294967295
  40104e:	bd70      	pop	{r4, r5, r6, pc}
  401050:	4b25      	ldr	r3, [pc, #148]	; (4010e8 <__swsetup_r+0xd4>)
  401052:	429c      	cmp	r4, r3
  401054:	d101      	bne.n	40105a <__swsetup_r+0x46>
  401056:	68ac      	ldr	r4, [r5, #8]
  401058:	e7eb      	b.n	401032 <__swsetup_r+0x1e>
  40105a:	4b24      	ldr	r3, [pc, #144]	; (4010ec <__swsetup_r+0xd8>)
  40105c:	429c      	cmp	r4, r3
  40105e:	bf08      	it	eq
  401060:	68ec      	ldreq	r4, [r5, #12]
  401062:	e7e6      	b.n	401032 <__swsetup_r+0x1e>
  401064:	0751      	lsls	r1, r2, #29
  401066:	d512      	bpl.n	40108e <__swsetup_r+0x7a>
  401068:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40106a:	b141      	cbz	r1, 40107e <__swsetup_r+0x6a>
  40106c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401070:	4299      	cmp	r1, r3
  401072:	d002      	beq.n	40107a <__swsetup_r+0x66>
  401074:	4630      	mov	r0, r6
  401076:	f000 fa23 	bl	4014c0 <_free_r>
  40107a:	2300      	movs	r3, #0
  40107c:	6363      	str	r3, [r4, #52]	; 0x34
  40107e:	89a3      	ldrh	r3, [r4, #12]
  401080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  401084:	81a3      	strh	r3, [r4, #12]
  401086:	2300      	movs	r3, #0
  401088:	6063      	str	r3, [r4, #4]
  40108a:	6923      	ldr	r3, [r4, #16]
  40108c:	6023      	str	r3, [r4, #0]
  40108e:	89a3      	ldrh	r3, [r4, #12]
  401090:	f043 0308 	orr.w	r3, r3, #8
  401094:	81a3      	strh	r3, [r4, #12]
  401096:	6923      	ldr	r3, [r4, #16]
  401098:	b94b      	cbnz	r3, 4010ae <__swsetup_r+0x9a>
  40109a:	89a3      	ldrh	r3, [r4, #12]
  40109c:	f403 7320 	and.w	r3, r3, #640	; 0x280
  4010a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4010a4:	d003      	beq.n	4010ae <__swsetup_r+0x9a>
  4010a6:	4621      	mov	r1, r4
  4010a8:	4630      	mov	r0, r6
  4010aa:	f000 f9c1 	bl	401430 <__smakebuf_r>
  4010ae:	89a2      	ldrh	r2, [r4, #12]
  4010b0:	f012 0301 	ands.w	r3, r2, #1
  4010b4:	d00c      	beq.n	4010d0 <__swsetup_r+0xbc>
  4010b6:	2300      	movs	r3, #0
  4010b8:	60a3      	str	r3, [r4, #8]
  4010ba:	6963      	ldr	r3, [r4, #20]
  4010bc:	425b      	negs	r3, r3
  4010be:	61a3      	str	r3, [r4, #24]
  4010c0:	6923      	ldr	r3, [r4, #16]
  4010c2:	b953      	cbnz	r3, 4010da <__swsetup_r+0xc6>
  4010c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  4010cc:	d1ba      	bne.n	401044 <__swsetup_r+0x30>
  4010ce:	bd70      	pop	{r4, r5, r6, pc}
  4010d0:	0792      	lsls	r2, r2, #30
  4010d2:	bf58      	it	pl
  4010d4:	6963      	ldrpl	r3, [r4, #20]
  4010d6:	60a3      	str	r3, [r4, #8]
  4010d8:	e7f2      	b.n	4010c0 <__swsetup_r+0xac>
  4010da:	2000      	movs	r0, #0
  4010dc:	e7f7      	b.n	4010ce <__swsetup_r+0xba>
  4010de:	bf00      	nop
  4010e0:	20400024 	.word	0x20400024
  4010e4:	00401ec8 	.word	0x00401ec8
  4010e8:	00401ee8 	.word	0x00401ee8
  4010ec:	00401ea8 	.word	0x00401ea8

004010f0 <__sflush_r>:
  4010f0:	898a      	ldrh	r2, [r1, #12]
  4010f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010f6:	4605      	mov	r5, r0
  4010f8:	0710      	lsls	r0, r2, #28
  4010fa:	460c      	mov	r4, r1
  4010fc:	d45a      	bmi.n	4011b4 <__sflush_r+0xc4>
  4010fe:	684b      	ldr	r3, [r1, #4]
  401100:	2b00      	cmp	r3, #0
  401102:	dc05      	bgt.n	401110 <__sflush_r+0x20>
  401104:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  401106:	2b00      	cmp	r3, #0
  401108:	dc02      	bgt.n	401110 <__sflush_r+0x20>
  40110a:	2000      	movs	r0, #0
  40110c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401112:	2e00      	cmp	r6, #0
  401114:	d0f9      	beq.n	40110a <__sflush_r+0x1a>
  401116:	2300      	movs	r3, #0
  401118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  40111c:	682f      	ldr	r7, [r5, #0]
  40111e:	602b      	str	r3, [r5, #0]
  401120:	d033      	beq.n	40118a <__sflush_r+0x9a>
  401122:	6d60      	ldr	r0, [r4, #84]	; 0x54
  401124:	89a3      	ldrh	r3, [r4, #12]
  401126:	075a      	lsls	r2, r3, #29
  401128:	d505      	bpl.n	401136 <__sflush_r+0x46>
  40112a:	6863      	ldr	r3, [r4, #4]
  40112c:	1ac0      	subs	r0, r0, r3
  40112e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  401130:	b10b      	cbz	r3, 401136 <__sflush_r+0x46>
  401132:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401134:	1ac0      	subs	r0, r0, r3
  401136:	2300      	movs	r3, #0
  401138:	4602      	mov	r2, r0
  40113a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40113c:	6a21      	ldr	r1, [r4, #32]
  40113e:	4628      	mov	r0, r5
  401140:	47b0      	blx	r6
  401142:	1c43      	adds	r3, r0, #1
  401144:	89a3      	ldrh	r3, [r4, #12]
  401146:	d106      	bne.n	401156 <__sflush_r+0x66>
  401148:	6829      	ldr	r1, [r5, #0]
  40114a:	291d      	cmp	r1, #29
  40114c:	d84b      	bhi.n	4011e6 <__sflush_r+0xf6>
  40114e:	4a2b      	ldr	r2, [pc, #172]	; (4011fc <__sflush_r+0x10c>)
  401150:	40ca      	lsrs	r2, r1
  401152:	07d6      	lsls	r6, r2, #31
  401154:	d547      	bpl.n	4011e6 <__sflush_r+0xf6>
  401156:	2200      	movs	r2, #0
  401158:	6062      	str	r2, [r4, #4]
  40115a:	04d9      	lsls	r1, r3, #19
  40115c:	6922      	ldr	r2, [r4, #16]
  40115e:	6022      	str	r2, [r4, #0]
  401160:	d504      	bpl.n	40116c <__sflush_r+0x7c>
  401162:	1c42      	adds	r2, r0, #1
  401164:	d101      	bne.n	40116a <__sflush_r+0x7a>
  401166:	682b      	ldr	r3, [r5, #0]
  401168:	b903      	cbnz	r3, 40116c <__sflush_r+0x7c>
  40116a:	6560      	str	r0, [r4, #84]	; 0x54
  40116c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40116e:	602f      	str	r7, [r5, #0]
  401170:	2900      	cmp	r1, #0
  401172:	d0ca      	beq.n	40110a <__sflush_r+0x1a>
  401174:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401178:	4299      	cmp	r1, r3
  40117a:	d002      	beq.n	401182 <__sflush_r+0x92>
  40117c:	4628      	mov	r0, r5
  40117e:	f000 f99f 	bl	4014c0 <_free_r>
  401182:	2000      	movs	r0, #0
  401184:	6360      	str	r0, [r4, #52]	; 0x34
  401186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40118a:	6a21      	ldr	r1, [r4, #32]
  40118c:	2301      	movs	r3, #1
  40118e:	4628      	mov	r0, r5
  401190:	47b0      	blx	r6
  401192:	1c41      	adds	r1, r0, #1
  401194:	d1c6      	bne.n	401124 <__sflush_r+0x34>
  401196:	682b      	ldr	r3, [r5, #0]
  401198:	2b00      	cmp	r3, #0
  40119a:	d0c3      	beq.n	401124 <__sflush_r+0x34>
  40119c:	2b1d      	cmp	r3, #29
  40119e:	d001      	beq.n	4011a4 <__sflush_r+0xb4>
  4011a0:	2b16      	cmp	r3, #22
  4011a2:	d101      	bne.n	4011a8 <__sflush_r+0xb8>
  4011a4:	602f      	str	r7, [r5, #0]
  4011a6:	e7b0      	b.n	40110a <__sflush_r+0x1a>
  4011a8:	89a3      	ldrh	r3, [r4, #12]
  4011aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4011ae:	81a3      	strh	r3, [r4, #12]
  4011b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011b4:	690f      	ldr	r7, [r1, #16]
  4011b6:	2f00      	cmp	r7, #0
  4011b8:	d0a7      	beq.n	40110a <__sflush_r+0x1a>
  4011ba:	0793      	lsls	r3, r2, #30
  4011bc:	680e      	ldr	r6, [r1, #0]
  4011be:	bf08      	it	eq
  4011c0:	694b      	ldreq	r3, [r1, #20]
  4011c2:	600f      	str	r7, [r1, #0]
  4011c4:	bf18      	it	ne
  4011c6:	2300      	movne	r3, #0
  4011c8:	eba6 0807 	sub.w	r8, r6, r7
  4011cc:	608b      	str	r3, [r1, #8]
  4011ce:	f1b8 0f00 	cmp.w	r8, #0
  4011d2:	dd9a      	ble.n	40110a <__sflush_r+0x1a>
  4011d4:	4643      	mov	r3, r8
  4011d6:	463a      	mov	r2, r7
  4011d8:	6a21      	ldr	r1, [r4, #32]
  4011da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4011dc:	4628      	mov	r0, r5
  4011de:	47b0      	blx	r6
  4011e0:	2800      	cmp	r0, #0
  4011e2:	dc07      	bgt.n	4011f4 <__sflush_r+0x104>
  4011e4:	89a3      	ldrh	r3, [r4, #12]
  4011e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4011ea:	81a3      	strh	r3, [r4, #12]
  4011ec:	f04f 30ff 	mov.w	r0, #4294967295
  4011f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011f4:	4407      	add	r7, r0
  4011f6:	eba8 0800 	sub.w	r8, r8, r0
  4011fa:	e7e8      	b.n	4011ce <__sflush_r+0xde>
  4011fc:	20400001 	.word	0x20400001

00401200 <_fflush_r>:
  401200:	b538      	push	{r3, r4, r5, lr}
  401202:	690b      	ldr	r3, [r1, #16]
  401204:	4605      	mov	r5, r0
  401206:	460c      	mov	r4, r1
  401208:	b1db      	cbz	r3, 401242 <_fflush_r+0x42>
  40120a:	b118      	cbz	r0, 401214 <_fflush_r+0x14>
  40120c:	6983      	ldr	r3, [r0, #24]
  40120e:	b90b      	cbnz	r3, 401214 <_fflush_r+0x14>
  401210:	f000 f860 	bl	4012d4 <__sinit>
  401214:	4b0c      	ldr	r3, [pc, #48]	; (401248 <_fflush_r+0x48>)
  401216:	429c      	cmp	r4, r3
  401218:	d109      	bne.n	40122e <_fflush_r+0x2e>
  40121a:	686c      	ldr	r4, [r5, #4]
  40121c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401220:	b17b      	cbz	r3, 401242 <_fflush_r+0x42>
  401222:	4621      	mov	r1, r4
  401224:	4628      	mov	r0, r5
  401226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40122a:	f7ff bf61 	b.w	4010f0 <__sflush_r>
  40122e:	4b07      	ldr	r3, [pc, #28]	; (40124c <_fflush_r+0x4c>)
  401230:	429c      	cmp	r4, r3
  401232:	d101      	bne.n	401238 <_fflush_r+0x38>
  401234:	68ac      	ldr	r4, [r5, #8]
  401236:	e7f1      	b.n	40121c <_fflush_r+0x1c>
  401238:	4b05      	ldr	r3, [pc, #20]	; (401250 <_fflush_r+0x50>)
  40123a:	429c      	cmp	r4, r3
  40123c:	bf08      	it	eq
  40123e:	68ec      	ldreq	r4, [r5, #12]
  401240:	e7ec      	b.n	40121c <_fflush_r+0x1c>
  401242:	2000      	movs	r0, #0
  401244:	bd38      	pop	{r3, r4, r5, pc}
  401246:	bf00      	nop
  401248:	00401ec8 	.word	0x00401ec8
  40124c:	00401ee8 	.word	0x00401ee8
  401250:	00401ea8 	.word	0x00401ea8

00401254 <_cleanup_r>:
  401254:	4901      	ldr	r1, [pc, #4]	; (40125c <_cleanup_r+0x8>)
  401256:	f000 b8a9 	b.w	4013ac <_fwalk_reent>
  40125a:	bf00      	nop
  40125c:	00401201 	.word	0x00401201

00401260 <std.isra.0>:
  401260:	2300      	movs	r3, #0
  401262:	b510      	push	{r4, lr}
  401264:	4604      	mov	r4, r0
  401266:	6003      	str	r3, [r0, #0]
  401268:	6043      	str	r3, [r0, #4]
  40126a:	6083      	str	r3, [r0, #8]
  40126c:	8181      	strh	r1, [r0, #12]
  40126e:	6643      	str	r3, [r0, #100]	; 0x64
  401270:	81c2      	strh	r2, [r0, #14]
  401272:	6103      	str	r3, [r0, #16]
  401274:	6143      	str	r3, [r0, #20]
  401276:	6183      	str	r3, [r0, #24]
  401278:	4619      	mov	r1, r3
  40127a:	2208      	movs	r2, #8
  40127c:	305c      	adds	r0, #92	; 0x5c
  40127e:	f7ff fda1 	bl	400dc4 <memset>
  401282:	4b05      	ldr	r3, [pc, #20]	; (401298 <std.isra.0+0x38>)
  401284:	6263      	str	r3, [r4, #36]	; 0x24
  401286:	4b05      	ldr	r3, [pc, #20]	; (40129c <std.isra.0+0x3c>)
  401288:	62a3      	str	r3, [r4, #40]	; 0x28
  40128a:	4b05      	ldr	r3, [pc, #20]	; (4012a0 <std.isra.0+0x40>)
  40128c:	62e3      	str	r3, [r4, #44]	; 0x2c
  40128e:	4b05      	ldr	r3, [pc, #20]	; (4012a4 <std.isra.0+0x44>)
  401290:	6224      	str	r4, [r4, #32]
  401292:	6323      	str	r3, [r4, #48]	; 0x30
  401294:	bd10      	pop	{r4, pc}
  401296:	bf00      	nop
  401298:	00401be1 	.word	0x00401be1
  40129c:	00401c03 	.word	0x00401c03
  4012a0:	00401c3b 	.word	0x00401c3b
  4012a4:	00401c5f 	.word	0x00401c5f

004012a8 <__sfmoreglue>:
  4012a8:	b570      	push	{r4, r5, r6, lr}
  4012aa:	1e4a      	subs	r2, r1, #1
  4012ac:	2568      	movs	r5, #104	; 0x68
  4012ae:	4355      	muls	r5, r2
  4012b0:	460e      	mov	r6, r1
  4012b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4012b6:	f000 f951 	bl	40155c <_malloc_r>
  4012ba:	4604      	mov	r4, r0
  4012bc:	b140      	cbz	r0, 4012d0 <__sfmoreglue+0x28>
  4012be:	2100      	movs	r1, #0
  4012c0:	e880 0042 	stmia.w	r0, {r1, r6}
  4012c4:	300c      	adds	r0, #12
  4012c6:	60a0      	str	r0, [r4, #8]
  4012c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4012cc:	f7ff fd7a 	bl	400dc4 <memset>
  4012d0:	4620      	mov	r0, r4
  4012d2:	bd70      	pop	{r4, r5, r6, pc}

004012d4 <__sinit>:
  4012d4:	6983      	ldr	r3, [r0, #24]
  4012d6:	b510      	push	{r4, lr}
  4012d8:	4604      	mov	r4, r0
  4012da:	bb33      	cbnz	r3, 40132a <__sinit+0x56>
  4012dc:	6483      	str	r3, [r0, #72]	; 0x48
  4012de:	64c3      	str	r3, [r0, #76]	; 0x4c
  4012e0:	6503      	str	r3, [r0, #80]	; 0x50
  4012e2:	4b12      	ldr	r3, [pc, #72]	; (40132c <__sinit+0x58>)
  4012e4:	4a12      	ldr	r2, [pc, #72]	; (401330 <__sinit+0x5c>)
  4012e6:	681b      	ldr	r3, [r3, #0]
  4012e8:	6282      	str	r2, [r0, #40]	; 0x28
  4012ea:	4298      	cmp	r0, r3
  4012ec:	bf04      	itt	eq
  4012ee:	2301      	moveq	r3, #1
  4012f0:	6183      	streq	r3, [r0, #24]
  4012f2:	f000 f81f 	bl	401334 <__sfp>
  4012f6:	6060      	str	r0, [r4, #4]
  4012f8:	4620      	mov	r0, r4
  4012fa:	f000 f81b 	bl	401334 <__sfp>
  4012fe:	60a0      	str	r0, [r4, #8]
  401300:	4620      	mov	r0, r4
  401302:	f000 f817 	bl	401334 <__sfp>
  401306:	2200      	movs	r2, #0
  401308:	60e0      	str	r0, [r4, #12]
  40130a:	2104      	movs	r1, #4
  40130c:	6860      	ldr	r0, [r4, #4]
  40130e:	f7ff ffa7 	bl	401260 <std.isra.0>
  401312:	2201      	movs	r2, #1
  401314:	2109      	movs	r1, #9
  401316:	68a0      	ldr	r0, [r4, #8]
  401318:	f7ff ffa2 	bl	401260 <std.isra.0>
  40131c:	2202      	movs	r2, #2
  40131e:	2112      	movs	r1, #18
  401320:	68e0      	ldr	r0, [r4, #12]
  401322:	f7ff ff9d 	bl	401260 <std.isra.0>
  401326:	2301      	movs	r3, #1
  401328:	61a3      	str	r3, [r4, #24]
  40132a:	bd10      	pop	{r4, pc}
  40132c:	00401ea4 	.word	0x00401ea4
  401330:	00401255 	.word	0x00401255

00401334 <__sfp>:
  401334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401336:	4b1c      	ldr	r3, [pc, #112]	; (4013a8 <__sfp+0x74>)
  401338:	681e      	ldr	r6, [r3, #0]
  40133a:	69b3      	ldr	r3, [r6, #24]
  40133c:	4607      	mov	r7, r0
  40133e:	b913      	cbnz	r3, 401346 <__sfp+0x12>
  401340:	4630      	mov	r0, r6
  401342:	f7ff ffc7 	bl	4012d4 <__sinit>
  401346:	3648      	adds	r6, #72	; 0x48
  401348:	68b4      	ldr	r4, [r6, #8]
  40134a:	6873      	ldr	r3, [r6, #4]
  40134c:	3b01      	subs	r3, #1
  40134e:	d503      	bpl.n	401358 <__sfp+0x24>
  401350:	6833      	ldr	r3, [r6, #0]
  401352:	b133      	cbz	r3, 401362 <__sfp+0x2e>
  401354:	6836      	ldr	r6, [r6, #0]
  401356:	e7f7      	b.n	401348 <__sfp+0x14>
  401358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40135c:	b16d      	cbz	r5, 40137a <__sfp+0x46>
  40135e:	3468      	adds	r4, #104	; 0x68
  401360:	e7f4      	b.n	40134c <__sfp+0x18>
  401362:	2104      	movs	r1, #4
  401364:	4638      	mov	r0, r7
  401366:	f7ff ff9f 	bl	4012a8 <__sfmoreglue>
  40136a:	6030      	str	r0, [r6, #0]
  40136c:	2800      	cmp	r0, #0
  40136e:	d1f1      	bne.n	401354 <__sfp+0x20>
  401370:	230c      	movs	r3, #12
  401372:	603b      	str	r3, [r7, #0]
  401374:	4604      	mov	r4, r0
  401376:	4620      	mov	r0, r4
  401378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40137a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40137e:	81e3      	strh	r3, [r4, #14]
  401380:	2301      	movs	r3, #1
  401382:	81a3      	strh	r3, [r4, #12]
  401384:	6665      	str	r5, [r4, #100]	; 0x64
  401386:	6025      	str	r5, [r4, #0]
  401388:	60a5      	str	r5, [r4, #8]
  40138a:	6065      	str	r5, [r4, #4]
  40138c:	6125      	str	r5, [r4, #16]
  40138e:	6165      	str	r5, [r4, #20]
  401390:	61a5      	str	r5, [r4, #24]
  401392:	2208      	movs	r2, #8
  401394:	4629      	mov	r1, r5
  401396:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  40139a:	f7ff fd13 	bl	400dc4 <memset>
  40139e:	6365      	str	r5, [r4, #52]	; 0x34
  4013a0:	63a5      	str	r5, [r4, #56]	; 0x38
  4013a2:	64a5      	str	r5, [r4, #72]	; 0x48
  4013a4:	64e5      	str	r5, [r4, #76]	; 0x4c
  4013a6:	e7e6      	b.n	401376 <__sfp+0x42>
  4013a8:	00401ea4 	.word	0x00401ea4

004013ac <_fwalk_reent>:
  4013ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4013b0:	4680      	mov	r8, r0
  4013b2:	4689      	mov	r9, r1
  4013b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4013b8:	2600      	movs	r6, #0
  4013ba:	b914      	cbnz	r4, 4013c2 <_fwalk_reent+0x16>
  4013bc:	4630      	mov	r0, r6
  4013be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4013c2:	68a5      	ldr	r5, [r4, #8]
  4013c4:	6867      	ldr	r7, [r4, #4]
  4013c6:	3f01      	subs	r7, #1
  4013c8:	d501      	bpl.n	4013ce <_fwalk_reent+0x22>
  4013ca:	6824      	ldr	r4, [r4, #0]
  4013cc:	e7f5      	b.n	4013ba <_fwalk_reent+0xe>
  4013ce:	89ab      	ldrh	r3, [r5, #12]
  4013d0:	2b01      	cmp	r3, #1
  4013d2:	d907      	bls.n	4013e4 <_fwalk_reent+0x38>
  4013d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4013d8:	3301      	adds	r3, #1
  4013da:	d003      	beq.n	4013e4 <_fwalk_reent+0x38>
  4013dc:	4629      	mov	r1, r5
  4013de:	4640      	mov	r0, r8
  4013e0:	47c8      	blx	r9
  4013e2:	4306      	orrs	r6, r0
  4013e4:	3568      	adds	r5, #104	; 0x68
  4013e6:	e7ee      	b.n	4013c6 <_fwalk_reent+0x1a>

004013e8 <__swhatbuf_r>:
  4013e8:	b570      	push	{r4, r5, r6, lr}
  4013ea:	460e      	mov	r6, r1
  4013ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4013f0:	2900      	cmp	r1, #0
  4013f2:	b090      	sub	sp, #64	; 0x40
  4013f4:	4614      	mov	r4, r2
  4013f6:	461d      	mov	r5, r3
  4013f8:	da07      	bge.n	40140a <__swhatbuf_r+0x22>
  4013fa:	2300      	movs	r3, #0
  4013fc:	602b      	str	r3, [r5, #0]
  4013fe:	89b3      	ldrh	r3, [r6, #12]
  401400:	061a      	lsls	r2, r3, #24
  401402:	d410      	bmi.n	401426 <__swhatbuf_r+0x3e>
  401404:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401408:	e00e      	b.n	401428 <__swhatbuf_r+0x40>
  40140a:	aa01      	add	r2, sp, #4
  40140c:	f000 fc4e 	bl	401cac <_fstat_r>
  401410:	2800      	cmp	r0, #0
  401412:	dbf2      	blt.n	4013fa <__swhatbuf_r+0x12>
  401414:	9a02      	ldr	r2, [sp, #8]
  401416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40141a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  40141e:	425a      	negs	r2, r3
  401420:	415a      	adcs	r2, r3
  401422:	602a      	str	r2, [r5, #0]
  401424:	e7ee      	b.n	401404 <__swhatbuf_r+0x1c>
  401426:	2340      	movs	r3, #64	; 0x40
  401428:	2000      	movs	r0, #0
  40142a:	6023      	str	r3, [r4, #0]
  40142c:	b010      	add	sp, #64	; 0x40
  40142e:	bd70      	pop	{r4, r5, r6, pc}

00401430 <__smakebuf_r>:
  401430:	898b      	ldrh	r3, [r1, #12]
  401432:	b573      	push	{r0, r1, r4, r5, r6, lr}
  401434:	079d      	lsls	r5, r3, #30
  401436:	4606      	mov	r6, r0
  401438:	460c      	mov	r4, r1
  40143a:	d507      	bpl.n	40144c <__smakebuf_r+0x1c>
  40143c:	f104 0347 	add.w	r3, r4, #71	; 0x47
  401440:	6023      	str	r3, [r4, #0]
  401442:	6123      	str	r3, [r4, #16]
  401444:	2301      	movs	r3, #1
  401446:	6163      	str	r3, [r4, #20]
  401448:	b002      	add	sp, #8
  40144a:	bd70      	pop	{r4, r5, r6, pc}
  40144c:	ab01      	add	r3, sp, #4
  40144e:	466a      	mov	r2, sp
  401450:	f7ff ffca 	bl	4013e8 <__swhatbuf_r>
  401454:	9900      	ldr	r1, [sp, #0]
  401456:	4605      	mov	r5, r0
  401458:	4630      	mov	r0, r6
  40145a:	f000 f87f 	bl	40155c <_malloc_r>
  40145e:	b948      	cbnz	r0, 401474 <__smakebuf_r+0x44>
  401460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401464:	059a      	lsls	r2, r3, #22
  401466:	d4ef      	bmi.n	401448 <__smakebuf_r+0x18>
  401468:	f023 0303 	bic.w	r3, r3, #3
  40146c:	f043 0302 	orr.w	r3, r3, #2
  401470:	81a3      	strh	r3, [r4, #12]
  401472:	e7e3      	b.n	40143c <__smakebuf_r+0xc>
  401474:	4b0d      	ldr	r3, [pc, #52]	; (4014ac <__smakebuf_r+0x7c>)
  401476:	62b3      	str	r3, [r6, #40]	; 0x28
  401478:	89a3      	ldrh	r3, [r4, #12]
  40147a:	6020      	str	r0, [r4, #0]
  40147c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401480:	81a3      	strh	r3, [r4, #12]
  401482:	9b00      	ldr	r3, [sp, #0]
  401484:	6163      	str	r3, [r4, #20]
  401486:	9b01      	ldr	r3, [sp, #4]
  401488:	6120      	str	r0, [r4, #16]
  40148a:	b15b      	cbz	r3, 4014a4 <__smakebuf_r+0x74>
  40148c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401490:	4630      	mov	r0, r6
  401492:	f000 fc1d 	bl	401cd0 <_isatty_r>
  401496:	b128      	cbz	r0, 4014a4 <__smakebuf_r+0x74>
  401498:	89a3      	ldrh	r3, [r4, #12]
  40149a:	f023 0303 	bic.w	r3, r3, #3
  40149e:	f043 0301 	orr.w	r3, r3, #1
  4014a2:	81a3      	strh	r3, [r4, #12]
  4014a4:	89a3      	ldrh	r3, [r4, #12]
  4014a6:	431d      	orrs	r5, r3
  4014a8:	81a5      	strh	r5, [r4, #12]
  4014aa:	e7cd      	b.n	401448 <__smakebuf_r+0x18>
  4014ac:	00401255 	.word	0x00401255

004014b0 <malloc>:
  4014b0:	4b02      	ldr	r3, [pc, #8]	; (4014bc <malloc+0xc>)
  4014b2:	4601      	mov	r1, r0
  4014b4:	6818      	ldr	r0, [r3, #0]
  4014b6:	f000 b851 	b.w	40155c <_malloc_r>
  4014ba:	bf00      	nop
  4014bc:	20400024 	.word	0x20400024

004014c0 <_free_r>:
  4014c0:	b538      	push	{r3, r4, r5, lr}
  4014c2:	4605      	mov	r5, r0
  4014c4:	2900      	cmp	r1, #0
  4014c6:	d045      	beq.n	401554 <_free_r+0x94>
  4014c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4014cc:	1f0c      	subs	r4, r1, #4
  4014ce:	2b00      	cmp	r3, #0
  4014d0:	bfb8      	it	lt
  4014d2:	18e4      	addlt	r4, r4, r3
  4014d4:	f000 fc74 	bl	401dc0 <__malloc_lock>
  4014d8:	4a1f      	ldr	r2, [pc, #124]	; (401558 <_free_r+0x98>)
  4014da:	6813      	ldr	r3, [r2, #0]
  4014dc:	4610      	mov	r0, r2
  4014de:	b933      	cbnz	r3, 4014ee <_free_r+0x2e>
  4014e0:	6063      	str	r3, [r4, #4]
  4014e2:	6014      	str	r4, [r2, #0]
  4014e4:	4628      	mov	r0, r5
  4014e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4014ea:	f000 bc6a 	b.w	401dc2 <__malloc_unlock>
  4014ee:	42a3      	cmp	r3, r4
  4014f0:	d90c      	bls.n	40150c <_free_r+0x4c>
  4014f2:	6821      	ldr	r1, [r4, #0]
  4014f4:	1862      	adds	r2, r4, r1
  4014f6:	4293      	cmp	r3, r2
  4014f8:	bf04      	itt	eq
  4014fa:	681a      	ldreq	r2, [r3, #0]
  4014fc:	685b      	ldreq	r3, [r3, #4]
  4014fe:	6063      	str	r3, [r4, #4]
  401500:	bf04      	itt	eq
  401502:	1852      	addeq	r2, r2, r1
  401504:	6022      	streq	r2, [r4, #0]
  401506:	6004      	str	r4, [r0, #0]
  401508:	e7ec      	b.n	4014e4 <_free_r+0x24>
  40150a:	4613      	mov	r3, r2
  40150c:	685a      	ldr	r2, [r3, #4]
  40150e:	b10a      	cbz	r2, 401514 <_free_r+0x54>
  401510:	42a2      	cmp	r2, r4
  401512:	d9fa      	bls.n	40150a <_free_r+0x4a>
  401514:	6819      	ldr	r1, [r3, #0]
  401516:	1858      	adds	r0, r3, r1
  401518:	42a0      	cmp	r0, r4
  40151a:	d10b      	bne.n	401534 <_free_r+0x74>
  40151c:	6820      	ldr	r0, [r4, #0]
  40151e:	4401      	add	r1, r0
  401520:	1858      	adds	r0, r3, r1
  401522:	4282      	cmp	r2, r0
  401524:	6019      	str	r1, [r3, #0]
  401526:	d1dd      	bne.n	4014e4 <_free_r+0x24>
  401528:	6810      	ldr	r0, [r2, #0]
  40152a:	6852      	ldr	r2, [r2, #4]
  40152c:	605a      	str	r2, [r3, #4]
  40152e:	4401      	add	r1, r0
  401530:	6019      	str	r1, [r3, #0]
  401532:	e7d7      	b.n	4014e4 <_free_r+0x24>
  401534:	d902      	bls.n	40153c <_free_r+0x7c>
  401536:	230c      	movs	r3, #12
  401538:	602b      	str	r3, [r5, #0]
  40153a:	e7d3      	b.n	4014e4 <_free_r+0x24>
  40153c:	6820      	ldr	r0, [r4, #0]
  40153e:	1821      	adds	r1, r4, r0
  401540:	428a      	cmp	r2, r1
  401542:	bf04      	itt	eq
  401544:	6811      	ldreq	r1, [r2, #0]
  401546:	6852      	ldreq	r2, [r2, #4]
  401548:	6062      	str	r2, [r4, #4]
  40154a:	bf04      	itt	eq
  40154c:	1809      	addeq	r1, r1, r0
  40154e:	6021      	streq	r1, [r4, #0]
  401550:	605c      	str	r4, [r3, #4]
  401552:	e7c7      	b.n	4014e4 <_free_r+0x24>
  401554:	bd38      	pop	{r3, r4, r5, pc}
  401556:	bf00      	nop
  401558:	204000b0 	.word	0x204000b0

0040155c <_malloc_r>:
  40155c:	b570      	push	{r4, r5, r6, lr}
  40155e:	1ccd      	adds	r5, r1, #3
  401560:	f025 0503 	bic.w	r5, r5, #3
  401564:	3508      	adds	r5, #8
  401566:	2d0c      	cmp	r5, #12
  401568:	bf38      	it	cc
  40156a:	250c      	movcc	r5, #12
  40156c:	2d00      	cmp	r5, #0
  40156e:	4606      	mov	r6, r0
  401570:	db01      	blt.n	401576 <_malloc_r+0x1a>
  401572:	42a9      	cmp	r1, r5
  401574:	d903      	bls.n	40157e <_malloc_r+0x22>
  401576:	230c      	movs	r3, #12
  401578:	6033      	str	r3, [r6, #0]
  40157a:	2000      	movs	r0, #0
  40157c:	bd70      	pop	{r4, r5, r6, pc}
  40157e:	f000 fc1f 	bl	401dc0 <__malloc_lock>
  401582:	4a23      	ldr	r2, [pc, #140]	; (401610 <_malloc_r+0xb4>)
  401584:	6814      	ldr	r4, [r2, #0]
  401586:	4621      	mov	r1, r4
  401588:	b991      	cbnz	r1, 4015b0 <_malloc_r+0x54>
  40158a:	4c22      	ldr	r4, [pc, #136]	; (401614 <_malloc_r+0xb8>)
  40158c:	6823      	ldr	r3, [r4, #0]
  40158e:	b91b      	cbnz	r3, 401598 <_malloc_r+0x3c>
  401590:	4630      	mov	r0, r6
  401592:	f000 fb15 	bl	401bc0 <_sbrk_r>
  401596:	6020      	str	r0, [r4, #0]
  401598:	4629      	mov	r1, r5
  40159a:	4630      	mov	r0, r6
  40159c:	f000 fb10 	bl	401bc0 <_sbrk_r>
  4015a0:	1c43      	adds	r3, r0, #1
  4015a2:	d126      	bne.n	4015f2 <_malloc_r+0x96>
  4015a4:	230c      	movs	r3, #12
  4015a6:	6033      	str	r3, [r6, #0]
  4015a8:	4630      	mov	r0, r6
  4015aa:	f000 fc0a 	bl	401dc2 <__malloc_unlock>
  4015ae:	e7e4      	b.n	40157a <_malloc_r+0x1e>
  4015b0:	680b      	ldr	r3, [r1, #0]
  4015b2:	1b5b      	subs	r3, r3, r5
  4015b4:	d41a      	bmi.n	4015ec <_malloc_r+0x90>
  4015b6:	2b0b      	cmp	r3, #11
  4015b8:	d90f      	bls.n	4015da <_malloc_r+0x7e>
  4015ba:	600b      	str	r3, [r1, #0]
  4015bc:	50cd      	str	r5, [r1, r3]
  4015be:	18cc      	adds	r4, r1, r3
  4015c0:	4630      	mov	r0, r6
  4015c2:	f000 fbfe 	bl	401dc2 <__malloc_unlock>
  4015c6:	f104 000b 	add.w	r0, r4, #11
  4015ca:	1d23      	adds	r3, r4, #4
  4015cc:	f020 0007 	bic.w	r0, r0, #7
  4015d0:	1ac3      	subs	r3, r0, r3
  4015d2:	d01b      	beq.n	40160c <_malloc_r+0xb0>
  4015d4:	425a      	negs	r2, r3
  4015d6:	50e2      	str	r2, [r4, r3]
  4015d8:	bd70      	pop	{r4, r5, r6, pc}
  4015da:	428c      	cmp	r4, r1
  4015dc:	bf0d      	iteet	eq
  4015de:	6863      	ldreq	r3, [r4, #4]
  4015e0:	684b      	ldrne	r3, [r1, #4]
  4015e2:	6063      	strne	r3, [r4, #4]
  4015e4:	6013      	streq	r3, [r2, #0]
  4015e6:	bf18      	it	ne
  4015e8:	460c      	movne	r4, r1
  4015ea:	e7e9      	b.n	4015c0 <_malloc_r+0x64>
  4015ec:	460c      	mov	r4, r1
  4015ee:	6849      	ldr	r1, [r1, #4]
  4015f0:	e7ca      	b.n	401588 <_malloc_r+0x2c>
  4015f2:	1cc4      	adds	r4, r0, #3
  4015f4:	f024 0403 	bic.w	r4, r4, #3
  4015f8:	42a0      	cmp	r0, r4
  4015fa:	d005      	beq.n	401608 <_malloc_r+0xac>
  4015fc:	1a21      	subs	r1, r4, r0
  4015fe:	4630      	mov	r0, r6
  401600:	f000 fade 	bl	401bc0 <_sbrk_r>
  401604:	3001      	adds	r0, #1
  401606:	d0cd      	beq.n	4015a4 <_malloc_r+0x48>
  401608:	6025      	str	r5, [r4, #0]
  40160a:	e7d9      	b.n	4015c0 <_malloc_r+0x64>
  40160c:	bd70      	pop	{r4, r5, r6, pc}
  40160e:	bf00      	nop
  401610:	204000b0 	.word	0x204000b0
  401614:	204000b4 	.word	0x204000b4

00401618 <__sfputc_r>:
  401618:	6893      	ldr	r3, [r2, #8]
  40161a:	3b01      	subs	r3, #1
  40161c:	2b00      	cmp	r3, #0
  40161e:	b410      	push	{r4}
  401620:	6093      	str	r3, [r2, #8]
  401622:	da08      	bge.n	401636 <__sfputc_r+0x1e>
  401624:	6994      	ldr	r4, [r2, #24]
  401626:	42a3      	cmp	r3, r4
  401628:	db02      	blt.n	401630 <__sfputc_r+0x18>
  40162a:	b2cb      	uxtb	r3, r1
  40162c:	2b0a      	cmp	r3, #10
  40162e:	d102      	bne.n	401636 <__sfputc_r+0x1e>
  401630:	bc10      	pop	{r4}
  401632:	f7ff bc9d 	b.w	400f70 <__swbuf_r>
  401636:	6813      	ldr	r3, [r2, #0]
  401638:	1c58      	adds	r0, r3, #1
  40163a:	6010      	str	r0, [r2, #0]
  40163c:	7019      	strb	r1, [r3, #0]
  40163e:	b2c8      	uxtb	r0, r1
  401640:	bc10      	pop	{r4}
  401642:	4770      	bx	lr

00401644 <__sfputs_r>:
  401644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401646:	4606      	mov	r6, r0
  401648:	460f      	mov	r7, r1
  40164a:	4614      	mov	r4, r2
  40164c:	18d5      	adds	r5, r2, r3
  40164e:	42ac      	cmp	r4, r5
  401650:	d101      	bne.n	401656 <__sfputs_r+0x12>
  401652:	2000      	movs	r0, #0
  401654:	e007      	b.n	401666 <__sfputs_r+0x22>
  401656:	463a      	mov	r2, r7
  401658:	f814 1b01 	ldrb.w	r1, [r4], #1
  40165c:	4630      	mov	r0, r6
  40165e:	f7ff ffdb 	bl	401618 <__sfputc_r>
  401662:	1c43      	adds	r3, r0, #1
  401664:	d1f3      	bne.n	40164e <__sfputs_r+0xa>
  401666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00401668 <_vfiprintf_r>:
  401668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40166c:	b09d      	sub	sp, #116	; 0x74
  40166e:	460c      	mov	r4, r1
  401670:	4617      	mov	r7, r2
  401672:	9303      	str	r3, [sp, #12]
  401674:	4606      	mov	r6, r0
  401676:	b118      	cbz	r0, 401680 <_vfiprintf_r+0x18>
  401678:	6983      	ldr	r3, [r0, #24]
  40167a:	b90b      	cbnz	r3, 401680 <_vfiprintf_r+0x18>
  40167c:	f7ff fe2a 	bl	4012d4 <__sinit>
  401680:	4b7c      	ldr	r3, [pc, #496]	; (401874 <_vfiprintf_r+0x20c>)
  401682:	429c      	cmp	r4, r3
  401684:	d157      	bne.n	401736 <_vfiprintf_r+0xce>
  401686:	6874      	ldr	r4, [r6, #4]
  401688:	89a3      	ldrh	r3, [r4, #12]
  40168a:	0718      	lsls	r0, r3, #28
  40168c:	d55d      	bpl.n	40174a <_vfiprintf_r+0xe2>
  40168e:	6923      	ldr	r3, [r4, #16]
  401690:	2b00      	cmp	r3, #0
  401692:	d05a      	beq.n	40174a <_vfiprintf_r+0xe2>
  401694:	2300      	movs	r3, #0
  401696:	9309      	str	r3, [sp, #36]	; 0x24
  401698:	2320      	movs	r3, #32
  40169a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40169e:	2330      	movs	r3, #48	; 0x30
  4016a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4016a4:	f04f 0b01 	mov.w	fp, #1
  4016a8:	46b8      	mov	r8, r7
  4016aa:	4645      	mov	r5, r8
  4016ac:	f815 3b01 	ldrb.w	r3, [r5], #1
  4016b0:	2b00      	cmp	r3, #0
  4016b2:	d155      	bne.n	401760 <_vfiprintf_r+0xf8>
  4016b4:	ebb8 0a07 	subs.w	sl, r8, r7
  4016b8:	d00b      	beq.n	4016d2 <_vfiprintf_r+0x6a>
  4016ba:	4653      	mov	r3, sl
  4016bc:	463a      	mov	r2, r7
  4016be:	4621      	mov	r1, r4
  4016c0:	4630      	mov	r0, r6
  4016c2:	f7ff ffbf 	bl	401644 <__sfputs_r>
  4016c6:	3001      	adds	r0, #1
  4016c8:	f000 80c4 	beq.w	401854 <_vfiprintf_r+0x1ec>
  4016cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4016ce:	4453      	add	r3, sl
  4016d0:	9309      	str	r3, [sp, #36]	; 0x24
  4016d2:	f898 3000 	ldrb.w	r3, [r8]
  4016d6:	2b00      	cmp	r3, #0
  4016d8:	f000 80bc 	beq.w	401854 <_vfiprintf_r+0x1ec>
  4016dc:	2300      	movs	r3, #0
  4016de:	f04f 32ff 	mov.w	r2, #4294967295
  4016e2:	9304      	str	r3, [sp, #16]
  4016e4:	9307      	str	r3, [sp, #28]
  4016e6:	9205      	str	r2, [sp, #20]
  4016e8:	9306      	str	r3, [sp, #24]
  4016ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  4016ee:	931a      	str	r3, [sp, #104]	; 0x68
  4016f0:	2205      	movs	r2, #5
  4016f2:	7829      	ldrb	r1, [r5, #0]
  4016f4:	4860      	ldr	r0, [pc, #384]	; (401878 <_vfiprintf_r+0x210>)
  4016f6:	f000 fb13 	bl	401d20 <memchr>
  4016fa:	f105 0801 	add.w	r8, r5, #1
  4016fe:	9b04      	ldr	r3, [sp, #16]
  401700:	2800      	cmp	r0, #0
  401702:	d131      	bne.n	401768 <_vfiprintf_r+0x100>
  401704:	06d9      	lsls	r1, r3, #27
  401706:	bf44      	itt	mi
  401708:	2220      	movmi	r2, #32
  40170a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40170e:	071a      	lsls	r2, r3, #28
  401710:	bf44      	itt	mi
  401712:	222b      	movmi	r2, #43	; 0x2b
  401714:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  401718:	782a      	ldrb	r2, [r5, #0]
  40171a:	2a2a      	cmp	r2, #42	; 0x2a
  40171c:	d02c      	beq.n	401778 <_vfiprintf_r+0x110>
  40171e:	9a07      	ldr	r2, [sp, #28]
  401720:	2100      	movs	r1, #0
  401722:	200a      	movs	r0, #10
  401724:	46a8      	mov	r8, r5
  401726:	3501      	adds	r5, #1
  401728:	f898 3000 	ldrb.w	r3, [r8]
  40172c:	3b30      	subs	r3, #48	; 0x30
  40172e:	2b09      	cmp	r3, #9
  401730:	d96d      	bls.n	40180e <_vfiprintf_r+0x1a6>
  401732:	b371      	cbz	r1, 401792 <_vfiprintf_r+0x12a>
  401734:	e026      	b.n	401784 <_vfiprintf_r+0x11c>
  401736:	4b51      	ldr	r3, [pc, #324]	; (40187c <_vfiprintf_r+0x214>)
  401738:	429c      	cmp	r4, r3
  40173a:	d101      	bne.n	401740 <_vfiprintf_r+0xd8>
  40173c:	68b4      	ldr	r4, [r6, #8]
  40173e:	e7a3      	b.n	401688 <_vfiprintf_r+0x20>
  401740:	4b4f      	ldr	r3, [pc, #316]	; (401880 <_vfiprintf_r+0x218>)
  401742:	429c      	cmp	r4, r3
  401744:	bf08      	it	eq
  401746:	68f4      	ldreq	r4, [r6, #12]
  401748:	e79e      	b.n	401688 <_vfiprintf_r+0x20>
  40174a:	4621      	mov	r1, r4
  40174c:	4630      	mov	r0, r6
  40174e:	f7ff fc61 	bl	401014 <__swsetup_r>
  401752:	2800      	cmp	r0, #0
  401754:	d09e      	beq.n	401694 <_vfiprintf_r+0x2c>
  401756:	f04f 30ff 	mov.w	r0, #4294967295
  40175a:	b01d      	add	sp, #116	; 0x74
  40175c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401760:	2b25      	cmp	r3, #37	; 0x25
  401762:	d0a7      	beq.n	4016b4 <_vfiprintf_r+0x4c>
  401764:	46a8      	mov	r8, r5
  401766:	e7a0      	b.n	4016aa <_vfiprintf_r+0x42>
  401768:	4a43      	ldr	r2, [pc, #268]	; (401878 <_vfiprintf_r+0x210>)
  40176a:	1a80      	subs	r0, r0, r2
  40176c:	fa0b f000 	lsl.w	r0, fp, r0
  401770:	4318      	orrs	r0, r3
  401772:	9004      	str	r0, [sp, #16]
  401774:	4645      	mov	r5, r8
  401776:	e7bb      	b.n	4016f0 <_vfiprintf_r+0x88>
  401778:	9a03      	ldr	r2, [sp, #12]
  40177a:	1d11      	adds	r1, r2, #4
  40177c:	6812      	ldr	r2, [r2, #0]
  40177e:	9103      	str	r1, [sp, #12]
  401780:	2a00      	cmp	r2, #0
  401782:	db01      	blt.n	401788 <_vfiprintf_r+0x120>
  401784:	9207      	str	r2, [sp, #28]
  401786:	e004      	b.n	401792 <_vfiprintf_r+0x12a>
  401788:	4252      	negs	r2, r2
  40178a:	f043 0302 	orr.w	r3, r3, #2
  40178e:	9207      	str	r2, [sp, #28]
  401790:	9304      	str	r3, [sp, #16]
  401792:	f898 3000 	ldrb.w	r3, [r8]
  401796:	2b2e      	cmp	r3, #46	; 0x2e
  401798:	d110      	bne.n	4017bc <_vfiprintf_r+0x154>
  40179a:	f898 3001 	ldrb.w	r3, [r8, #1]
  40179e:	2b2a      	cmp	r3, #42	; 0x2a
  4017a0:	f108 0101 	add.w	r1, r8, #1
  4017a4:	d137      	bne.n	401816 <_vfiprintf_r+0x1ae>
  4017a6:	9b03      	ldr	r3, [sp, #12]
  4017a8:	1d1a      	adds	r2, r3, #4
  4017aa:	681b      	ldr	r3, [r3, #0]
  4017ac:	9203      	str	r2, [sp, #12]
  4017ae:	2b00      	cmp	r3, #0
  4017b0:	bfb8      	it	lt
  4017b2:	f04f 33ff 	movlt.w	r3, #4294967295
  4017b6:	f108 0802 	add.w	r8, r8, #2
  4017ba:	9305      	str	r3, [sp, #20]
  4017bc:	4d31      	ldr	r5, [pc, #196]	; (401884 <_vfiprintf_r+0x21c>)
  4017be:	f898 1000 	ldrb.w	r1, [r8]
  4017c2:	2203      	movs	r2, #3
  4017c4:	4628      	mov	r0, r5
  4017c6:	f000 faab 	bl	401d20 <memchr>
  4017ca:	b140      	cbz	r0, 4017de <_vfiprintf_r+0x176>
  4017cc:	2340      	movs	r3, #64	; 0x40
  4017ce:	1b40      	subs	r0, r0, r5
  4017d0:	fa03 f000 	lsl.w	r0, r3, r0
  4017d4:	9b04      	ldr	r3, [sp, #16]
  4017d6:	4303      	orrs	r3, r0
  4017d8:	9304      	str	r3, [sp, #16]
  4017da:	f108 0801 	add.w	r8, r8, #1
  4017de:	f898 1000 	ldrb.w	r1, [r8]
  4017e2:	4829      	ldr	r0, [pc, #164]	; (401888 <_vfiprintf_r+0x220>)
  4017e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4017e8:	2206      	movs	r2, #6
  4017ea:	f108 0701 	add.w	r7, r8, #1
  4017ee:	f000 fa97 	bl	401d20 <memchr>
  4017f2:	2800      	cmp	r0, #0
  4017f4:	d034      	beq.n	401860 <_vfiprintf_r+0x1f8>
  4017f6:	4b25      	ldr	r3, [pc, #148]	; (40188c <_vfiprintf_r+0x224>)
  4017f8:	bb03      	cbnz	r3, 40183c <_vfiprintf_r+0x1d4>
  4017fa:	9b03      	ldr	r3, [sp, #12]
  4017fc:	3307      	adds	r3, #7
  4017fe:	f023 0307 	bic.w	r3, r3, #7
  401802:	3308      	adds	r3, #8
  401804:	9303      	str	r3, [sp, #12]
  401806:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401808:	444b      	add	r3, r9
  40180a:	9309      	str	r3, [sp, #36]	; 0x24
  40180c:	e74c      	b.n	4016a8 <_vfiprintf_r+0x40>
  40180e:	fb00 3202 	mla	r2, r0, r2, r3
  401812:	2101      	movs	r1, #1
  401814:	e786      	b.n	401724 <_vfiprintf_r+0xbc>
  401816:	2300      	movs	r3, #0
  401818:	9305      	str	r3, [sp, #20]
  40181a:	4618      	mov	r0, r3
  40181c:	250a      	movs	r5, #10
  40181e:	4688      	mov	r8, r1
  401820:	3101      	adds	r1, #1
  401822:	f898 2000 	ldrb.w	r2, [r8]
  401826:	3a30      	subs	r2, #48	; 0x30
  401828:	2a09      	cmp	r2, #9
  40182a:	d903      	bls.n	401834 <_vfiprintf_r+0x1cc>
  40182c:	2b00      	cmp	r3, #0
  40182e:	d0c5      	beq.n	4017bc <_vfiprintf_r+0x154>
  401830:	9005      	str	r0, [sp, #20]
  401832:	e7c3      	b.n	4017bc <_vfiprintf_r+0x154>
  401834:	fb05 2000 	mla	r0, r5, r0, r2
  401838:	2301      	movs	r3, #1
  40183a:	e7f0      	b.n	40181e <_vfiprintf_r+0x1b6>
  40183c:	ab03      	add	r3, sp, #12
  40183e:	9300      	str	r3, [sp, #0]
  401840:	4622      	mov	r2, r4
  401842:	4b13      	ldr	r3, [pc, #76]	; (401890 <_vfiprintf_r+0x228>)
  401844:	a904      	add	r1, sp, #16
  401846:	4630      	mov	r0, r6
  401848:	f3af 8000 	nop.w
  40184c:	f1b0 3fff 	cmp.w	r0, #4294967295
  401850:	4681      	mov	r9, r0
  401852:	d1d8      	bne.n	401806 <_vfiprintf_r+0x19e>
  401854:	89a3      	ldrh	r3, [r4, #12]
  401856:	065b      	lsls	r3, r3, #25
  401858:	f53f af7d 	bmi.w	401756 <_vfiprintf_r+0xee>
  40185c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40185e:	e77c      	b.n	40175a <_vfiprintf_r+0xf2>
  401860:	ab03      	add	r3, sp, #12
  401862:	9300      	str	r3, [sp, #0]
  401864:	4622      	mov	r2, r4
  401866:	4b0a      	ldr	r3, [pc, #40]	; (401890 <_vfiprintf_r+0x228>)
  401868:	a904      	add	r1, sp, #16
  40186a:	4630      	mov	r0, r6
  40186c:	f000 f888 	bl	401980 <_printf_i>
  401870:	e7ec      	b.n	40184c <_vfiprintf_r+0x1e4>
  401872:	bf00      	nop
  401874:	00401ec8 	.word	0x00401ec8
  401878:	00401f08 	.word	0x00401f08
  40187c:	00401ee8 	.word	0x00401ee8
  401880:	00401ea8 	.word	0x00401ea8
  401884:	00401f0e 	.word	0x00401f0e
  401888:	00401f12 	.word	0x00401f12
  40188c:	00000000 	.word	0x00000000
  401890:	00401645 	.word	0x00401645

00401894 <_printf_common>:
  401894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401898:	4691      	mov	r9, r2
  40189a:	461f      	mov	r7, r3
  40189c:	688a      	ldr	r2, [r1, #8]
  40189e:	690b      	ldr	r3, [r1, #16]
  4018a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4018a4:	4293      	cmp	r3, r2
  4018a6:	bfb8      	it	lt
  4018a8:	4613      	movlt	r3, r2
  4018aa:	f8c9 3000 	str.w	r3, [r9]
  4018ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4018b2:	4606      	mov	r6, r0
  4018b4:	460c      	mov	r4, r1
  4018b6:	b112      	cbz	r2, 4018be <_printf_common+0x2a>
  4018b8:	3301      	adds	r3, #1
  4018ba:	f8c9 3000 	str.w	r3, [r9]
  4018be:	6823      	ldr	r3, [r4, #0]
  4018c0:	0699      	lsls	r1, r3, #26
  4018c2:	bf42      	ittt	mi
  4018c4:	f8d9 3000 	ldrmi.w	r3, [r9]
  4018c8:	3302      	addmi	r3, #2
  4018ca:	f8c9 3000 	strmi.w	r3, [r9]
  4018ce:	6825      	ldr	r5, [r4, #0]
  4018d0:	f015 0506 	ands.w	r5, r5, #6
  4018d4:	d107      	bne.n	4018e6 <_printf_common+0x52>
  4018d6:	f104 0a19 	add.w	sl, r4, #25
  4018da:	68e3      	ldr	r3, [r4, #12]
  4018dc:	f8d9 2000 	ldr.w	r2, [r9]
  4018e0:	1a9b      	subs	r3, r3, r2
  4018e2:	429d      	cmp	r5, r3
  4018e4:	db29      	blt.n	40193a <_printf_common+0xa6>
  4018e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4018ea:	6822      	ldr	r2, [r4, #0]
  4018ec:	3300      	adds	r3, #0
  4018ee:	bf18      	it	ne
  4018f0:	2301      	movne	r3, #1
  4018f2:	0692      	lsls	r2, r2, #26
  4018f4:	d42e      	bmi.n	401954 <_printf_common+0xc0>
  4018f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4018fa:	4639      	mov	r1, r7
  4018fc:	4630      	mov	r0, r6
  4018fe:	47c0      	blx	r8
  401900:	3001      	adds	r0, #1
  401902:	d021      	beq.n	401948 <_printf_common+0xb4>
  401904:	6823      	ldr	r3, [r4, #0]
  401906:	68e5      	ldr	r5, [r4, #12]
  401908:	f8d9 2000 	ldr.w	r2, [r9]
  40190c:	f003 0306 	and.w	r3, r3, #6
  401910:	2b04      	cmp	r3, #4
  401912:	bf08      	it	eq
  401914:	1aad      	subeq	r5, r5, r2
  401916:	68a3      	ldr	r3, [r4, #8]
  401918:	6922      	ldr	r2, [r4, #16]
  40191a:	bf0c      	ite	eq
  40191c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  401920:	2500      	movne	r5, #0
  401922:	4293      	cmp	r3, r2
  401924:	bfc4      	itt	gt
  401926:	1a9b      	subgt	r3, r3, r2
  401928:	18ed      	addgt	r5, r5, r3
  40192a:	f04f 0900 	mov.w	r9, #0
  40192e:	341a      	adds	r4, #26
  401930:	454d      	cmp	r5, r9
  401932:	d11b      	bne.n	40196c <_printf_common+0xd8>
  401934:	2000      	movs	r0, #0
  401936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40193a:	2301      	movs	r3, #1
  40193c:	4652      	mov	r2, sl
  40193e:	4639      	mov	r1, r7
  401940:	4630      	mov	r0, r6
  401942:	47c0      	blx	r8
  401944:	3001      	adds	r0, #1
  401946:	d103      	bne.n	401950 <_printf_common+0xbc>
  401948:	f04f 30ff 	mov.w	r0, #4294967295
  40194c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401950:	3501      	adds	r5, #1
  401952:	e7c2      	b.n	4018da <_printf_common+0x46>
  401954:	18e1      	adds	r1, r4, r3
  401956:	1c5a      	adds	r2, r3, #1
  401958:	2030      	movs	r0, #48	; 0x30
  40195a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40195e:	4422      	add	r2, r4
  401960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  401964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  401968:	3302      	adds	r3, #2
  40196a:	e7c4      	b.n	4018f6 <_printf_common+0x62>
  40196c:	2301      	movs	r3, #1
  40196e:	4622      	mov	r2, r4
  401970:	4639      	mov	r1, r7
  401972:	4630      	mov	r0, r6
  401974:	47c0      	blx	r8
  401976:	3001      	adds	r0, #1
  401978:	d0e6      	beq.n	401948 <_printf_common+0xb4>
  40197a:	f109 0901 	add.w	r9, r9, #1
  40197e:	e7d7      	b.n	401930 <_printf_common+0x9c>

00401980 <_printf_i>:
  401980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401984:	4617      	mov	r7, r2
  401986:	7e0a      	ldrb	r2, [r1, #24]
  401988:	b085      	sub	sp, #20
  40198a:	2a6e      	cmp	r2, #110	; 0x6e
  40198c:	4698      	mov	r8, r3
  40198e:	4606      	mov	r6, r0
  401990:	460c      	mov	r4, r1
  401992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401994:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  401998:	f000 80bc 	beq.w	401b14 <_printf_i+0x194>
  40199c:	d81a      	bhi.n	4019d4 <_printf_i+0x54>
  40199e:	2a63      	cmp	r2, #99	; 0x63
  4019a0:	d02e      	beq.n	401a00 <_printf_i+0x80>
  4019a2:	d80a      	bhi.n	4019ba <_printf_i+0x3a>
  4019a4:	2a00      	cmp	r2, #0
  4019a6:	f000 80c8 	beq.w	401b3a <_printf_i+0x1ba>
  4019aa:	2a58      	cmp	r2, #88	; 0x58
  4019ac:	f000 808a 	beq.w	401ac4 <_printf_i+0x144>
  4019b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4019b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4019b8:	e02a      	b.n	401a10 <_printf_i+0x90>
  4019ba:	2a64      	cmp	r2, #100	; 0x64
  4019bc:	d001      	beq.n	4019c2 <_printf_i+0x42>
  4019be:	2a69      	cmp	r2, #105	; 0x69
  4019c0:	d1f6      	bne.n	4019b0 <_printf_i+0x30>
  4019c2:	6821      	ldr	r1, [r4, #0]
  4019c4:	681a      	ldr	r2, [r3, #0]
  4019c6:	f011 0f80 	tst.w	r1, #128	; 0x80
  4019ca:	d023      	beq.n	401a14 <_printf_i+0x94>
  4019cc:	1d11      	adds	r1, r2, #4
  4019ce:	6019      	str	r1, [r3, #0]
  4019d0:	6813      	ldr	r3, [r2, #0]
  4019d2:	e027      	b.n	401a24 <_printf_i+0xa4>
  4019d4:	2a73      	cmp	r2, #115	; 0x73
  4019d6:	f000 80b4 	beq.w	401b42 <_printf_i+0x1c2>
  4019da:	d808      	bhi.n	4019ee <_printf_i+0x6e>
  4019dc:	2a6f      	cmp	r2, #111	; 0x6f
  4019de:	d02a      	beq.n	401a36 <_printf_i+0xb6>
  4019e0:	2a70      	cmp	r2, #112	; 0x70
  4019e2:	d1e5      	bne.n	4019b0 <_printf_i+0x30>
  4019e4:	680a      	ldr	r2, [r1, #0]
  4019e6:	f042 0220 	orr.w	r2, r2, #32
  4019ea:	600a      	str	r2, [r1, #0]
  4019ec:	e003      	b.n	4019f6 <_printf_i+0x76>
  4019ee:	2a75      	cmp	r2, #117	; 0x75
  4019f0:	d021      	beq.n	401a36 <_printf_i+0xb6>
  4019f2:	2a78      	cmp	r2, #120	; 0x78
  4019f4:	d1dc      	bne.n	4019b0 <_printf_i+0x30>
  4019f6:	2278      	movs	r2, #120	; 0x78
  4019f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  4019fc:	496e      	ldr	r1, [pc, #440]	; (401bb8 <_printf_i+0x238>)
  4019fe:	e064      	b.n	401aca <_printf_i+0x14a>
  401a00:	681a      	ldr	r2, [r3, #0]
  401a02:	f101 0542 	add.w	r5, r1, #66	; 0x42
  401a06:	1d11      	adds	r1, r2, #4
  401a08:	6019      	str	r1, [r3, #0]
  401a0a:	6813      	ldr	r3, [r2, #0]
  401a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  401a10:	2301      	movs	r3, #1
  401a12:	e0a3      	b.n	401b5c <_printf_i+0x1dc>
  401a14:	f011 0f40 	tst.w	r1, #64	; 0x40
  401a18:	f102 0104 	add.w	r1, r2, #4
  401a1c:	6019      	str	r1, [r3, #0]
  401a1e:	d0d7      	beq.n	4019d0 <_printf_i+0x50>
  401a20:	f9b2 3000 	ldrsh.w	r3, [r2]
  401a24:	2b00      	cmp	r3, #0
  401a26:	da03      	bge.n	401a30 <_printf_i+0xb0>
  401a28:	222d      	movs	r2, #45	; 0x2d
  401a2a:	425b      	negs	r3, r3
  401a2c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  401a30:	4962      	ldr	r1, [pc, #392]	; (401bbc <_printf_i+0x23c>)
  401a32:	220a      	movs	r2, #10
  401a34:	e017      	b.n	401a66 <_printf_i+0xe6>
  401a36:	6820      	ldr	r0, [r4, #0]
  401a38:	6819      	ldr	r1, [r3, #0]
  401a3a:	f010 0f80 	tst.w	r0, #128	; 0x80
  401a3e:	d003      	beq.n	401a48 <_printf_i+0xc8>
  401a40:	1d08      	adds	r0, r1, #4
  401a42:	6018      	str	r0, [r3, #0]
  401a44:	680b      	ldr	r3, [r1, #0]
  401a46:	e006      	b.n	401a56 <_printf_i+0xd6>
  401a48:	f010 0f40 	tst.w	r0, #64	; 0x40
  401a4c:	f101 0004 	add.w	r0, r1, #4
  401a50:	6018      	str	r0, [r3, #0]
  401a52:	d0f7      	beq.n	401a44 <_printf_i+0xc4>
  401a54:	880b      	ldrh	r3, [r1, #0]
  401a56:	4959      	ldr	r1, [pc, #356]	; (401bbc <_printf_i+0x23c>)
  401a58:	2a6f      	cmp	r2, #111	; 0x6f
  401a5a:	bf14      	ite	ne
  401a5c:	220a      	movne	r2, #10
  401a5e:	2208      	moveq	r2, #8
  401a60:	2000      	movs	r0, #0
  401a62:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  401a66:	6865      	ldr	r5, [r4, #4]
  401a68:	60a5      	str	r5, [r4, #8]
  401a6a:	2d00      	cmp	r5, #0
  401a6c:	f2c0 809c 	blt.w	401ba8 <_printf_i+0x228>
  401a70:	6820      	ldr	r0, [r4, #0]
  401a72:	f020 0004 	bic.w	r0, r0, #4
  401a76:	6020      	str	r0, [r4, #0]
  401a78:	2b00      	cmp	r3, #0
  401a7a:	d13f      	bne.n	401afc <_printf_i+0x17c>
  401a7c:	2d00      	cmp	r5, #0
  401a7e:	f040 8095 	bne.w	401bac <_printf_i+0x22c>
  401a82:	4675      	mov	r5, lr
  401a84:	2a08      	cmp	r2, #8
  401a86:	d10b      	bne.n	401aa0 <_printf_i+0x120>
  401a88:	6823      	ldr	r3, [r4, #0]
  401a8a:	07da      	lsls	r2, r3, #31
  401a8c:	d508      	bpl.n	401aa0 <_printf_i+0x120>
  401a8e:	6923      	ldr	r3, [r4, #16]
  401a90:	6862      	ldr	r2, [r4, #4]
  401a92:	429a      	cmp	r2, r3
  401a94:	bfde      	ittt	le
  401a96:	2330      	movle	r3, #48	; 0x30
  401a98:	f805 3c01 	strble.w	r3, [r5, #-1]
  401a9c:	f105 35ff 	addle.w	r5, r5, #4294967295
  401aa0:	ebae 0305 	sub.w	r3, lr, r5
  401aa4:	6123      	str	r3, [r4, #16]
  401aa6:	f8cd 8000 	str.w	r8, [sp]
  401aaa:	463b      	mov	r3, r7
  401aac:	aa03      	add	r2, sp, #12
  401aae:	4621      	mov	r1, r4
  401ab0:	4630      	mov	r0, r6
  401ab2:	f7ff feef 	bl	401894 <_printf_common>
  401ab6:	3001      	adds	r0, #1
  401ab8:	d155      	bne.n	401b66 <_printf_i+0x1e6>
  401aba:	f04f 30ff 	mov.w	r0, #4294967295
  401abe:	b005      	add	sp, #20
  401ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401ac4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  401ac8:	493c      	ldr	r1, [pc, #240]	; (401bbc <_printf_i+0x23c>)
  401aca:	6822      	ldr	r2, [r4, #0]
  401acc:	6818      	ldr	r0, [r3, #0]
  401ace:	f012 0f80 	tst.w	r2, #128	; 0x80
  401ad2:	f100 0504 	add.w	r5, r0, #4
  401ad6:	601d      	str	r5, [r3, #0]
  401ad8:	d001      	beq.n	401ade <_printf_i+0x15e>
  401ada:	6803      	ldr	r3, [r0, #0]
  401adc:	e002      	b.n	401ae4 <_printf_i+0x164>
  401ade:	0655      	lsls	r5, r2, #25
  401ae0:	d5fb      	bpl.n	401ada <_printf_i+0x15a>
  401ae2:	8803      	ldrh	r3, [r0, #0]
  401ae4:	07d0      	lsls	r0, r2, #31
  401ae6:	bf44      	itt	mi
  401ae8:	f042 0220 	orrmi.w	r2, r2, #32
  401aec:	6022      	strmi	r2, [r4, #0]
  401aee:	b91b      	cbnz	r3, 401af8 <_printf_i+0x178>
  401af0:	6822      	ldr	r2, [r4, #0]
  401af2:	f022 0220 	bic.w	r2, r2, #32
  401af6:	6022      	str	r2, [r4, #0]
  401af8:	2210      	movs	r2, #16
  401afa:	e7b1      	b.n	401a60 <_printf_i+0xe0>
  401afc:	4675      	mov	r5, lr
  401afe:	fbb3 f0f2 	udiv	r0, r3, r2
  401b02:	fb02 3310 	mls	r3, r2, r0, r3
  401b06:	5ccb      	ldrb	r3, [r1, r3]
  401b08:	f805 3d01 	strb.w	r3, [r5, #-1]!
  401b0c:	4603      	mov	r3, r0
  401b0e:	2800      	cmp	r0, #0
  401b10:	d1f5      	bne.n	401afe <_printf_i+0x17e>
  401b12:	e7b7      	b.n	401a84 <_printf_i+0x104>
  401b14:	6808      	ldr	r0, [r1, #0]
  401b16:	681a      	ldr	r2, [r3, #0]
  401b18:	6949      	ldr	r1, [r1, #20]
  401b1a:	f010 0f80 	tst.w	r0, #128	; 0x80
  401b1e:	d004      	beq.n	401b2a <_printf_i+0x1aa>
  401b20:	1d10      	adds	r0, r2, #4
  401b22:	6018      	str	r0, [r3, #0]
  401b24:	6813      	ldr	r3, [r2, #0]
  401b26:	6019      	str	r1, [r3, #0]
  401b28:	e007      	b.n	401b3a <_printf_i+0x1ba>
  401b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
  401b2e:	f102 0004 	add.w	r0, r2, #4
  401b32:	6018      	str	r0, [r3, #0]
  401b34:	6813      	ldr	r3, [r2, #0]
  401b36:	d0f6      	beq.n	401b26 <_printf_i+0x1a6>
  401b38:	8019      	strh	r1, [r3, #0]
  401b3a:	2300      	movs	r3, #0
  401b3c:	6123      	str	r3, [r4, #16]
  401b3e:	4675      	mov	r5, lr
  401b40:	e7b1      	b.n	401aa6 <_printf_i+0x126>
  401b42:	681a      	ldr	r2, [r3, #0]
  401b44:	1d11      	adds	r1, r2, #4
  401b46:	6019      	str	r1, [r3, #0]
  401b48:	6815      	ldr	r5, [r2, #0]
  401b4a:	6862      	ldr	r2, [r4, #4]
  401b4c:	2100      	movs	r1, #0
  401b4e:	4628      	mov	r0, r5
  401b50:	f000 f8e6 	bl	401d20 <memchr>
  401b54:	b108      	cbz	r0, 401b5a <_printf_i+0x1da>
  401b56:	1b40      	subs	r0, r0, r5
  401b58:	6060      	str	r0, [r4, #4]
  401b5a:	6863      	ldr	r3, [r4, #4]
  401b5c:	6123      	str	r3, [r4, #16]
  401b5e:	2300      	movs	r3, #0
  401b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  401b64:	e79f      	b.n	401aa6 <_printf_i+0x126>
  401b66:	6923      	ldr	r3, [r4, #16]
  401b68:	462a      	mov	r2, r5
  401b6a:	4639      	mov	r1, r7
  401b6c:	4630      	mov	r0, r6
  401b6e:	47c0      	blx	r8
  401b70:	3001      	adds	r0, #1
  401b72:	d0a2      	beq.n	401aba <_printf_i+0x13a>
  401b74:	6823      	ldr	r3, [r4, #0]
  401b76:	079b      	lsls	r3, r3, #30
  401b78:	d507      	bpl.n	401b8a <_printf_i+0x20a>
  401b7a:	2500      	movs	r5, #0
  401b7c:	f104 0919 	add.w	r9, r4, #25
  401b80:	68e3      	ldr	r3, [r4, #12]
  401b82:	9a03      	ldr	r2, [sp, #12]
  401b84:	1a9b      	subs	r3, r3, r2
  401b86:	429d      	cmp	r5, r3
  401b88:	db05      	blt.n	401b96 <_printf_i+0x216>
  401b8a:	68e0      	ldr	r0, [r4, #12]
  401b8c:	9b03      	ldr	r3, [sp, #12]
  401b8e:	4298      	cmp	r0, r3
  401b90:	bfb8      	it	lt
  401b92:	4618      	movlt	r0, r3
  401b94:	e793      	b.n	401abe <_printf_i+0x13e>
  401b96:	2301      	movs	r3, #1
  401b98:	464a      	mov	r2, r9
  401b9a:	4639      	mov	r1, r7
  401b9c:	4630      	mov	r0, r6
  401b9e:	47c0      	blx	r8
  401ba0:	3001      	adds	r0, #1
  401ba2:	d08a      	beq.n	401aba <_printf_i+0x13a>
  401ba4:	3501      	adds	r5, #1
  401ba6:	e7eb      	b.n	401b80 <_printf_i+0x200>
  401ba8:	2b00      	cmp	r3, #0
  401baa:	d1a7      	bne.n	401afc <_printf_i+0x17c>
  401bac:	780b      	ldrb	r3, [r1, #0]
  401bae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  401bb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
  401bb6:	e765      	b.n	401a84 <_printf_i+0x104>
  401bb8:	00401f2a 	.word	0x00401f2a
  401bbc:	00401f19 	.word	0x00401f19

00401bc0 <_sbrk_r>:
  401bc0:	b538      	push	{r3, r4, r5, lr}
  401bc2:	4c06      	ldr	r4, [pc, #24]	; (401bdc <_sbrk_r+0x1c>)
  401bc4:	2300      	movs	r3, #0
  401bc6:	4605      	mov	r5, r0
  401bc8:	4608      	mov	r0, r1
  401bca:	6023      	str	r3, [r4, #0]
  401bcc:	f7fe fdbc 	bl	400748 <_sbrk>
  401bd0:	1c43      	adds	r3, r0, #1
  401bd2:	d102      	bne.n	401bda <_sbrk_r+0x1a>
  401bd4:	6823      	ldr	r3, [r4, #0]
  401bd6:	b103      	cbz	r3, 401bda <_sbrk_r+0x1a>
  401bd8:	602b      	str	r3, [r5, #0]
  401bda:	bd38      	pop	{r3, r4, r5, pc}
  401bdc:	204000e0 	.word	0x204000e0

00401be0 <__sread>:
  401be0:	b510      	push	{r4, lr}
  401be2:	460c      	mov	r4, r1
  401be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401be8:	f000 f8ec 	bl	401dc4 <_read_r>
  401bec:	2800      	cmp	r0, #0
  401bee:	bfab      	itete	ge
  401bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  401bf2:	89a3      	ldrhlt	r3, [r4, #12]
  401bf4:	181b      	addge	r3, r3, r0
  401bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  401bfa:	bfac      	ite	ge
  401bfc:	6563      	strge	r3, [r4, #84]	; 0x54
  401bfe:	81a3      	strhlt	r3, [r4, #12]
  401c00:	bd10      	pop	{r4, pc}

00401c02 <__swrite>:
  401c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c06:	461f      	mov	r7, r3
  401c08:	898b      	ldrh	r3, [r1, #12]
  401c0a:	05db      	lsls	r3, r3, #23
  401c0c:	4605      	mov	r5, r0
  401c0e:	460c      	mov	r4, r1
  401c10:	4616      	mov	r6, r2
  401c12:	d505      	bpl.n	401c20 <__swrite+0x1e>
  401c14:	2302      	movs	r3, #2
  401c16:	2200      	movs	r2, #0
  401c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401c1c:	f000 f868 	bl	401cf0 <_lseek_r>
  401c20:	89a3      	ldrh	r3, [r4, #12]
  401c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  401c2a:	81a3      	strh	r3, [r4, #12]
  401c2c:	4632      	mov	r2, r6
  401c2e:	463b      	mov	r3, r7
  401c30:	4628      	mov	r0, r5
  401c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401c36:	f000 b817 	b.w	401c68 <_write_r>

00401c3a <__sseek>:
  401c3a:	b510      	push	{r4, lr}
  401c3c:	460c      	mov	r4, r1
  401c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401c42:	f000 f855 	bl	401cf0 <_lseek_r>
  401c46:	1c43      	adds	r3, r0, #1
  401c48:	89a3      	ldrh	r3, [r4, #12]
  401c4a:	bf15      	itete	ne
  401c4c:	6560      	strne	r0, [r4, #84]	; 0x54
  401c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  401c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  401c56:	81a3      	strheq	r3, [r4, #12]
  401c58:	bf18      	it	ne
  401c5a:	81a3      	strhne	r3, [r4, #12]
  401c5c:	bd10      	pop	{r4, pc}

00401c5e <__sclose>:
  401c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401c62:	f000 b813 	b.w	401c8c <_close_r>
	...

00401c68 <_write_r>:
  401c68:	b538      	push	{r3, r4, r5, lr}
  401c6a:	4c07      	ldr	r4, [pc, #28]	; (401c88 <_write_r+0x20>)
  401c6c:	4605      	mov	r5, r0
  401c6e:	4608      	mov	r0, r1
  401c70:	4611      	mov	r1, r2
  401c72:	2200      	movs	r2, #0
  401c74:	6022      	str	r2, [r4, #0]
  401c76:	461a      	mov	r2, r3
  401c78:	f7ff f822 	bl	400cc0 <_write>
  401c7c:	1c43      	adds	r3, r0, #1
  401c7e:	d102      	bne.n	401c86 <_write_r+0x1e>
  401c80:	6823      	ldr	r3, [r4, #0]
  401c82:	b103      	cbz	r3, 401c86 <_write_r+0x1e>
  401c84:	602b      	str	r3, [r5, #0]
  401c86:	bd38      	pop	{r3, r4, r5, pc}
  401c88:	204000e0 	.word	0x204000e0

00401c8c <_close_r>:
  401c8c:	b538      	push	{r3, r4, r5, lr}
  401c8e:	4c06      	ldr	r4, [pc, #24]	; (401ca8 <_close_r+0x1c>)
  401c90:	2300      	movs	r3, #0
  401c92:	4605      	mov	r5, r0
  401c94:	4608      	mov	r0, r1
  401c96:	6023      	str	r3, [r4, #0]
  401c98:	f7fe fd68 	bl	40076c <_close>
  401c9c:	1c43      	adds	r3, r0, #1
  401c9e:	d102      	bne.n	401ca6 <_close_r+0x1a>
  401ca0:	6823      	ldr	r3, [r4, #0]
  401ca2:	b103      	cbz	r3, 401ca6 <_close_r+0x1a>
  401ca4:	602b      	str	r3, [r5, #0]
  401ca6:	bd38      	pop	{r3, r4, r5, pc}
  401ca8:	204000e0 	.word	0x204000e0

00401cac <_fstat_r>:
  401cac:	b538      	push	{r3, r4, r5, lr}
  401cae:	4c07      	ldr	r4, [pc, #28]	; (401ccc <_fstat_r+0x20>)
  401cb0:	2300      	movs	r3, #0
  401cb2:	4605      	mov	r5, r0
  401cb4:	4608      	mov	r0, r1
  401cb6:	4611      	mov	r1, r2
  401cb8:	6023      	str	r3, [r4, #0]
  401cba:	f7fe fd5a 	bl	400772 <_fstat>
  401cbe:	1c43      	adds	r3, r0, #1
  401cc0:	d102      	bne.n	401cc8 <_fstat_r+0x1c>
  401cc2:	6823      	ldr	r3, [r4, #0]
  401cc4:	b103      	cbz	r3, 401cc8 <_fstat_r+0x1c>
  401cc6:	602b      	str	r3, [r5, #0]
  401cc8:	bd38      	pop	{r3, r4, r5, pc}
  401cca:	bf00      	nop
  401ccc:	204000e0 	.word	0x204000e0

00401cd0 <_isatty_r>:
  401cd0:	b538      	push	{r3, r4, r5, lr}
  401cd2:	4c06      	ldr	r4, [pc, #24]	; (401cec <_isatty_r+0x1c>)
  401cd4:	2300      	movs	r3, #0
  401cd6:	4605      	mov	r5, r0
  401cd8:	4608      	mov	r0, r1
  401cda:	6023      	str	r3, [r4, #0]
  401cdc:	f7fe fd4e 	bl	40077c <_isatty>
  401ce0:	1c43      	adds	r3, r0, #1
  401ce2:	d102      	bne.n	401cea <_isatty_r+0x1a>
  401ce4:	6823      	ldr	r3, [r4, #0]
  401ce6:	b103      	cbz	r3, 401cea <_isatty_r+0x1a>
  401ce8:	602b      	str	r3, [r5, #0]
  401cea:	bd38      	pop	{r3, r4, r5, pc}
  401cec:	204000e0 	.word	0x204000e0

00401cf0 <_lseek_r>:
  401cf0:	b538      	push	{r3, r4, r5, lr}
  401cf2:	4c07      	ldr	r4, [pc, #28]	; (401d10 <_lseek_r+0x20>)
  401cf4:	4605      	mov	r5, r0
  401cf6:	4608      	mov	r0, r1
  401cf8:	4611      	mov	r1, r2
  401cfa:	2200      	movs	r2, #0
  401cfc:	6022      	str	r2, [r4, #0]
  401cfe:	461a      	mov	r2, r3
  401d00:	f7fe fd3e 	bl	400780 <_lseek>
  401d04:	1c43      	adds	r3, r0, #1
  401d06:	d102      	bne.n	401d0e <_lseek_r+0x1e>
  401d08:	6823      	ldr	r3, [r4, #0]
  401d0a:	b103      	cbz	r3, 401d0e <_lseek_r+0x1e>
  401d0c:	602b      	str	r3, [r5, #0]
  401d0e:	bd38      	pop	{r3, r4, r5, pc}
  401d10:	204000e0 	.word	0x204000e0
	...

00401d20 <memchr>:
  401d20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401d24:	2a10      	cmp	r2, #16
  401d26:	db2b      	blt.n	401d80 <memchr+0x60>
  401d28:	f010 0f07 	tst.w	r0, #7
  401d2c:	d008      	beq.n	401d40 <memchr+0x20>
  401d2e:	f810 3b01 	ldrb.w	r3, [r0], #1
  401d32:	3a01      	subs	r2, #1
  401d34:	428b      	cmp	r3, r1
  401d36:	d02d      	beq.n	401d94 <memchr+0x74>
  401d38:	f010 0f07 	tst.w	r0, #7
  401d3c:	b342      	cbz	r2, 401d90 <memchr+0x70>
  401d3e:	d1f6      	bne.n	401d2e <memchr+0xe>
  401d40:	b4f0      	push	{r4, r5, r6, r7}
  401d42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  401d46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  401d4a:	f022 0407 	bic.w	r4, r2, #7
  401d4e:	f07f 0700 	mvns.w	r7, #0
  401d52:	2300      	movs	r3, #0
  401d54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  401d58:	3c08      	subs	r4, #8
  401d5a:	ea85 0501 	eor.w	r5, r5, r1
  401d5e:	ea86 0601 	eor.w	r6, r6, r1
  401d62:	fa85 f547 	uadd8	r5, r5, r7
  401d66:	faa3 f587 	sel	r5, r3, r7
  401d6a:	fa86 f647 	uadd8	r6, r6, r7
  401d6e:	faa5 f687 	sel	r6, r5, r7
  401d72:	b98e      	cbnz	r6, 401d98 <memchr+0x78>
  401d74:	d1ee      	bne.n	401d54 <memchr+0x34>
  401d76:	bcf0      	pop	{r4, r5, r6, r7}
  401d78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401d7c:	f002 0207 	and.w	r2, r2, #7
  401d80:	b132      	cbz	r2, 401d90 <memchr+0x70>
  401d82:	f810 3b01 	ldrb.w	r3, [r0], #1
  401d86:	3a01      	subs	r2, #1
  401d88:	ea83 0301 	eor.w	r3, r3, r1
  401d8c:	b113      	cbz	r3, 401d94 <memchr+0x74>
  401d8e:	d1f8      	bne.n	401d82 <memchr+0x62>
  401d90:	2000      	movs	r0, #0
  401d92:	4770      	bx	lr
  401d94:	3801      	subs	r0, #1
  401d96:	4770      	bx	lr
  401d98:	2d00      	cmp	r5, #0
  401d9a:	bf06      	itte	eq
  401d9c:	4635      	moveq	r5, r6
  401d9e:	3803      	subeq	r0, #3
  401da0:	3807      	subne	r0, #7
  401da2:	f015 0f01 	tst.w	r5, #1
  401da6:	d107      	bne.n	401db8 <memchr+0x98>
  401da8:	3001      	adds	r0, #1
  401daa:	f415 7f80 	tst.w	r5, #256	; 0x100
  401dae:	bf02      	ittt	eq
  401db0:	3001      	addeq	r0, #1
  401db2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  401db6:	3001      	addeq	r0, #1
  401db8:	bcf0      	pop	{r4, r5, r6, r7}
  401dba:	3801      	subs	r0, #1
  401dbc:	4770      	bx	lr
  401dbe:	bf00      	nop

00401dc0 <__malloc_lock>:
  401dc0:	4770      	bx	lr

00401dc2 <__malloc_unlock>:
  401dc2:	4770      	bx	lr

00401dc4 <_read_r>:
  401dc4:	b538      	push	{r3, r4, r5, lr}
  401dc6:	4c07      	ldr	r4, [pc, #28]	; (401de4 <_read_r+0x20>)
  401dc8:	4605      	mov	r5, r0
  401dca:	4608      	mov	r0, r1
  401dcc:	4611      	mov	r1, r2
  401dce:	2200      	movs	r2, #0
  401dd0:	6022      	str	r2, [r4, #0]
  401dd2:	461a      	mov	r2, r3
  401dd4:	f7fe ff62 	bl	400c9c <_read>
  401dd8:	1c43      	adds	r3, r0, #1
  401dda:	d102      	bne.n	401de2 <_read_r+0x1e>
  401ddc:	6823      	ldr	r3, [r4, #0]
  401dde:	b103      	cbz	r3, 401de2 <_read_r+0x1e>
  401de0:	602b      	str	r3, [r5, #0]
  401de2:	bd38      	pop	{r3, r4, r5, pc}
  401de4:	204000e0 	.word	0x204000e0
  401de8:	682f2e2e 	.word	0x682f2e2e
  401dec:	732f6c61 	.word	0x732f6c61
  401df0:	682f6372 	.word	0x682f6372
  401df4:	695f6c61 	.word	0x695f6c61
  401df8:	00632e6f 	.word	0x00632e6f
  401dfc:	682f2e2e 	.word	0x682f2e2e
  401e00:	732f6c61 	.word	0x732f6c61
  401e04:	682f6372 	.word	0x682f6372
  401e08:	745f6c61 	.word	0x745f6c61
  401e0c:	72656d69 	.word	0x72656d69
  401e10:	0000632e 	.word	0x0000632e
  401e14:	682f2e2e 	.word	0x682f2e2e
  401e18:	732f6c61 	.word	0x732f6c61
  401e1c:	682f6372 	.word	0x682f6372
  401e20:	755f6c61 	.word	0x755f6c61
  401e24:	74726173 	.word	0x74726173
  401e28:	6e79735f 	.word	0x6e79735f
  401e2c:	00632e63 	.word	0x00632e63
  401e30:	682f2e2e 	.word	0x682f2e2e
  401e34:	752f6c61 	.word	0x752f6c61
  401e38:	736c6974 	.word	0x736c6974
  401e3c:	6372732f 	.word	0x6372732f
  401e40:	6974752f 	.word	0x6974752f
  401e44:	6c5f736c 	.word	0x6c5f736c
  401e48:	2e747369 	.word	0x2e747369
  401e4c:	00000063 	.word	0x00000063
  401e50:	682f2e2e 	.word	0x682f2e2e
  401e54:	742f6c70 	.word	0x742f6c70
  401e58:	70682f63 	.word	0x70682f63
  401e5c:	63745f6c 	.word	0x63745f6c
  401e60:	0000632e 	.word	0x0000632e

00401e64 <_usarts>:
  401e64:	00000001 001008c0 00030051 682f2e2e     ........Q...../h
  401e74:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  401e84:	632e7472 00000000 656d6954 20302072     rt.c....Timer 0 
  401e94:	656d6974 3a736920 20642520 0000000a     time is: %d ....

00401ea4 <_global_impure_ptr>:
  401ea4:	20400028                                (.@ 

00401ea8 <__sf_fake_stderr>:
	...

00401ec8 <__sf_fake_stdin>:
	...

00401ee8 <__sf_fake_stdout>:
	...
  401f08:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
  401f18:	32313000 36353433 41393837 45444342     .0123456789ABCDE
  401f28:	31300046 35343332 39383736 64636261     F.0123456789abcd
  401f38:	00006665                                ef..

00401f3c <_init>:
  401f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f3e:	bf00      	nop
  401f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401f42:	bc08      	pop	{r3}
  401f44:	469e      	mov	lr, r3
  401f46:	4770      	bx	lr

00401f48 <__init_array_start>:
  401f48:	0040018d 	.word	0x0040018d

00401f4c <_fini>:
  401f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f4e:	bf00      	nop
  401f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401f52:	bc08      	pop	{r3}
  401f54:	469e      	mov	lr, r3
  401f56:	4770      	bx	lr

00401f58 <__fini_array_start>:
  401f58:	00400169 	.word	0x00400169
