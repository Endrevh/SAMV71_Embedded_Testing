
CAN_ASF4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b64  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b0  20400000  00402b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b4  204000b0  00402c14  000200b0  2**2
                  ALLOC
  3 .heap         00000204  20400364  00402ec8  000200b0  2**0
                  ALLOC
  4 .stack        00000400  20400568  004030cc  000200b0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY
  7 .debug_info   000165d1  00000000  00000000  00020137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000033b0  00000000  00000000  00036708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000064b0  00000000  00000000  00039ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008d0  00000000  00000000  0003ff68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000790  00000000  00000000  00040838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00040b82  00000000  00000000  00040fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000139bb  00000000  00000000  00081b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001483df  00000000  00000000  00095505  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001d2c  00000000  00000000  001dd8e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	68 09 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     h.@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40006c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	0d 12 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	bd 0f 40 00 e9 01 40 00 d1 0f 40 00 e9 01 40 00     ..@...@...@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204000b0 	.word	0x204000b0
  400184:	00000000 	.word	0x00000000
  400188:	00402b64 	.word	0x00402b64

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00402b64 	.word	0x00402b64
  4001c8:	204000b4 	.word	0x204000b4
  4001cc:	00402b64 	.word	0x00402b64
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400411 	.word	0x00400411
  4001e4:	004017b9 	.word	0x004017b9

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	00402b64 	.word	0x00402b64
  400238:	204000b0 	.word	0x204000b0
  40023c:	204000b0 	.word	0x204000b0
  400240:	20400364 	.word	0x20400364
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	004017d9 	.word	0x004017d9
  400250:	0040167d 	.word	0x0040167d

00400254 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  400254:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400256:	4b08      	ldr	r3, [pc, #32]	; (400278 <TIMER_0_init+0x24>)
  400258:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40025a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40025e:	d103      	bne.n	400268 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400260:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400264:	4b04      	ldr	r3, [pc, #16]	; (400278 <TIMER_0_init+0x24>)
  400266:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400268:	4b04      	ldr	r3, [pc, #16]	; (40027c <TIMER_0_init+0x28>)
  40026a:	4798      	blx	r3
  40026c:	4602      	mov	r2, r0
  40026e:	4904      	ldr	r1, [pc, #16]	; (400280 <TIMER_0_init+0x2c>)
  400270:	4804      	ldr	r0, [pc, #16]	; (400284 <TIMER_0_init+0x30>)
  400272:	4b05      	ldr	r3, [pc, #20]	; (400288 <TIMER_0_init+0x34>)
  400274:	4798      	blx	r3
  400276:	bd08      	pop	{r3, pc}
  400278:	400e0600 	.word	0x400e0600
  40027c:	00401209 	.word	0x00401209
  400280:	4000c000 	.word	0x4000c000
  400284:	204001c4 	.word	0x204001c4
  400288:	00400719 	.word	0x00400719

0040028c <TARGET_IO_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40028c:	4b0f      	ldr	r3, [pc, #60]	; (4002cc <TARGET_IO_PORT_init+0x40>)
  40028e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400290:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400294:	671a      	str	r2, [r3, #112]	; 0x70
  400296:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400298:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40029c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40029e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002a2:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  4002a4:	4a0a      	ldr	r2, [pc, #40]	; (4002d0 <TARGET_IO_PORT_init+0x44>)
  4002a6:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4002aa:	f043 0310 	orr.w	r3, r3, #16
  4002ae:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002b2:	4b08      	ldr	r3, [pc, #32]	; (4002d4 <TARGET_IO_PORT_init+0x48>)
  4002b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002b6:	f042 0210 	orr.w	r2, r2, #16
  4002ba:	671a      	str	r2, [r3, #112]	; 0x70
  4002bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002be:	f042 0210 	orr.w	r2, r2, #16
  4002c2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002c4:	2210      	movs	r2, #16
  4002c6:	605a      	str	r2, [r3, #4]
  4002c8:	4770      	bx	lr
  4002ca:	bf00      	nop
  4002cc:	400e0e00 	.word	0x400e0e00
  4002d0:	40088000 	.word	0x40088000
  4002d4:	400e1000 	.word	0x400e1000

004002d8 <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002d8:	4b04      	ldr	r3, [pc, #16]	; (4002ec <TARGET_IO_CLOCK_init+0x14>)
  4002da:	699b      	ldr	r3, [r3, #24]
  4002dc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4002e0:	d103      	bne.n	4002ea <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4002e6:	4b01      	ldr	r3, [pc, #4]	; (4002ec <TARGET_IO_CLOCK_init+0x14>)
  4002e8:	611a      	str	r2, [r3, #16]
  4002ea:	4770      	bx	lr
  4002ec:	400e0600 	.word	0x400e0600

004002f0 <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void TARGET_IO_init(void)
{
  4002f0:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  4002f2:	4b06      	ldr	r3, [pc, #24]	; (40030c <TARGET_IO_init+0x1c>)
  4002f4:	4798      	blx	r3
	TARGET_IO_PORT_init();
  4002f6:	4b06      	ldr	r3, [pc, #24]	; (400310 <TARGET_IO_init+0x20>)
  4002f8:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, USART1, _usart_get_usart_sync());
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <TARGET_IO_init+0x24>)
  4002fc:	4798      	blx	r3
  4002fe:	4602      	mov	r2, r0
  400300:	4905      	ldr	r1, [pc, #20]	; (400318 <TARGET_IO_init+0x28>)
  400302:	4806      	ldr	r0, [pc, #24]	; (40031c <TARGET_IO_init+0x2c>)
  400304:	4b06      	ldr	r3, [pc, #24]	; (400320 <TARGET_IO_init+0x30>)
  400306:	4798      	blx	r3
  400308:	bd08      	pop	{r3, pc}
  40030a:	bf00      	nop
  40030c:	004002d9 	.word	0x004002d9
  400310:	0040028d 	.word	0x0040028d
  400314:	00401435 	.word	0x00401435
  400318:	40028000 	.word	0x40028000
  40031c:	20400190 	.word	0x20400190
  400320:	00400909 	.word	0x00400909

00400324 <CAN_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400324:	4b05      	ldr	r3, [pc, #20]	; (40033c <CAN_0_CLOCK_init+0x18>)
  400326:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40032a:	f013 0f08 	tst.w	r3, #8
  40032e:	d103      	bne.n	400338 <CAN_0_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400330:	2208      	movs	r2, #8
  400332:	4b02      	ldr	r3, [pc, #8]	; (40033c <CAN_0_CLOCK_init+0x18>)
  400334:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400338:	4770      	bx	lr
  40033a:	bf00      	nop
  40033c:	400e0600 	.word	0x400e0600

00400340 <CAN_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400340:	4b0a      	ldr	r3, [pc, #40]	; (40036c <CAN_0_PORT_init+0x2c>)
  400342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400344:	f022 0208 	bic.w	r2, r2, #8
  400348:	671a      	str	r2, [r3, #112]	; 0x70
  40034a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40034c:	f022 0208 	bic.w	r2, r2, #8
  400350:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400352:	2208      	movs	r2, #8
  400354:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400356:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400358:	f022 0204 	bic.w	r2, r2, #4
  40035c:	671a      	str	r2, [r3, #112]	; 0x70
  40035e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400360:	f022 0204 	bic.w	r2, r2, #4
  400364:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400366:	2204      	movs	r2, #4
  400368:	605a      	str	r2, [r3, #4]
  40036a:	4770      	bx	lr
  40036c:	400e1000 	.word	0x400e1000

00400370 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
  400370:	b508      	push	{r3, lr}
	CAN_0_CLOCK_init();
  400372:	4b04      	ldr	r3, [pc, #16]	; (400384 <CAN_0_init+0x14>)
  400374:	4798      	blx	r3
	CAN_0_PORT_init();
  400376:	4b04      	ldr	r3, [pc, #16]	; (400388 <CAN_0_init+0x18>)
  400378:	4798      	blx	r3
	can_async_init(&CAN_0, MCAN0);
  40037a:	4904      	ldr	r1, [pc, #16]	; (40038c <CAN_0_init+0x1c>)
  40037c:	4804      	ldr	r0, [pc, #16]	; (400390 <CAN_0_init+0x20>)
  40037e:	4b05      	ldr	r3, [pc, #20]	; (400394 <CAN_0_init+0x24>)
  400380:	4798      	blx	r3
  400382:	bd08      	pop	{r3, pc}
  400384:	00400325 	.word	0x00400325
  400388:	00400341 	.word	0x00400341
  40038c:	40030000 	.word	0x40030000
  400390:	20400168 	.word	0x20400168
  400394:	00400485 	.word	0x00400485

00400398 <CAN_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400398:	4b05      	ldr	r3, [pc, #20]	; (4003b0 <CAN_1_CLOCK_init+0x18>)
  40039a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  40039e:	f013 0f20 	tst.w	r3, #32
  4003a2:	d103      	bne.n	4003ac <CAN_1_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4003a4:	2220      	movs	r2, #32
  4003a6:	4b02      	ldr	r3, [pc, #8]	; (4003b0 <CAN_1_CLOCK_init+0x18>)
  4003a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4003ac:	4770      	bx	lr
  4003ae:	bf00      	nop
  4003b0:	400e0600 	.word	0x400e0600

004003b4 <CAN_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003b4:	4b0b      	ldr	r3, [pc, #44]	; (4003e4 <CAN_1_PORT_init+0x30>)
  4003b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4003bc:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4003c4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4003ca:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4003d2:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4003da:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4003e0:	605a      	str	r2, [r3, #4]
  4003e2:	4770      	bx	lr
  4003e4:	400e1200 	.word	0x400e1200

004003e8 <CAN_1_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_1_init(void)
{
  4003e8:	b508      	push	{r3, lr}
	CAN_1_CLOCK_init();
  4003ea:	4b04      	ldr	r3, [pc, #16]	; (4003fc <CAN_1_init+0x14>)
  4003ec:	4798      	blx	r3
	CAN_1_PORT_init();
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <CAN_1_init+0x18>)
  4003f0:	4798      	blx	r3
	can_async_init(&CAN_1, MCAN1);
  4003f2:	4904      	ldr	r1, [pc, #16]	; (400404 <CAN_1_init+0x1c>)
  4003f4:	4804      	ldr	r0, [pc, #16]	; (400408 <CAN_1_init+0x20>)
  4003f6:	4b05      	ldr	r3, [pc, #20]	; (40040c <CAN_1_init+0x24>)
  4003f8:	4798      	blx	r3
  4003fa:	bd08      	pop	{r3, pc}
  4003fc:	00400399 	.word	0x00400399
  400400:	004003b5 	.word	0x004003b5
  400404:	40034000 	.word	0x40034000
  400408:	2040019c 	.word	0x2040019c
  40040c:	00400485 	.word	0x00400485

00400410 <system_init>:
}

void system_init(void)
{
  400410:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400412:	4b08      	ldr	r3, [pc, #32]	; (400434 <system_init+0x24>)
  400414:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400416:	4a08      	ldr	r2, [pc, #32]	; (400438 <system_init+0x28>)
  400418:	6853      	ldr	r3, [r2, #4]
  40041a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40041e:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	TIMER_0_init();
  400420:	4b06      	ldr	r3, [pc, #24]	; (40043c <system_init+0x2c>)
  400422:	4798      	blx	r3

	TARGET_IO_init();
  400424:	4b06      	ldr	r3, [pc, #24]	; (400440 <system_init+0x30>)
  400426:	4798      	blx	r3

	CAN_0_init();
  400428:	4b06      	ldr	r3, [pc, #24]	; (400444 <system_init+0x34>)
  40042a:	4798      	blx	r3
	CAN_1_init();
  40042c:	4b06      	ldr	r3, [pc, #24]	; (400448 <system_init+0x38>)
  40042e:	4798      	blx	r3
  400430:	bd08      	pop	{r3, pc}
  400432:	bf00      	nop
  400434:	00400a51 	.word	0x00400a51
  400438:	400e1850 	.word	0x400e1850
  40043c:	00400255 	.word	0x00400255
  400440:	004002f1 	.word	0x004002f1
  400444:	00400371 	.word	0x00400371
  400448:	004003e9 	.word	0x004003e9

0040044c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40044c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400450:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400452:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400454:	f3bf 8f5f 	dmb	sy
  400458:	4770      	bx	lr

0040045a <atomic_leave_critical>:
  40045a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40045e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400460:	f383 8810 	msr	PRIMASK, r3
  400464:	4770      	bx	lr

00400466 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
  400466:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
  400468:	69c3      	ldr	r3, [r0, #28]
  40046a:	b103      	cbz	r3, 40046e <can_tx_done+0x8>
		descr->cb.tx_done(descr);
  40046c:	4798      	blx	r3
  40046e:	bd08      	pop	{r3, pc}

00400470 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
  400470:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
  400472:	6a03      	ldr	r3, [r0, #32]
  400474:	b103      	cbz	r3, 400478 <can_rx_done+0x8>
		descr->cb.rx_done(descr);
  400476:	4798      	blx	r3
  400478:	bd08      	pop	{r3, pc}

0040047a <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
  40047a:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
  40047c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  40047e:	b103      	cbz	r3, 400482 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
  400480:	4798      	blx	r3
  400482:	bd08      	pop	{r3, pc}

00400484 <can_async_init>:
{
  400484:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400486:	4604      	mov	r4, r0
  400488:	460d      	mov	r5, r1
  40048a:	2800      	cmp	r0, #0
  40048c:	bf18      	it	ne
  40048e:	2900      	cmpne	r1, #0
  400490:	bf14      	ite	ne
  400492:	2001      	movne	r0, #1
  400494:	2000      	moveq	r0, #0
  400496:	2241      	movs	r2, #65	; 0x41
  400498:	4908      	ldr	r1, [pc, #32]	; (4004bc <can_async_init+0x38>)
  40049a:	4b09      	ldr	r3, [pc, #36]	; (4004c0 <can_async_init+0x3c>)
  40049c:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
  40049e:	4629      	mov	r1, r5
  4004a0:	4620      	mov	r0, r4
  4004a2:	4b08      	ldr	r3, [pc, #32]	; (4004c4 <can_async_init+0x40>)
  4004a4:	4798      	blx	r3
	if (rc) {
  4004a6:	4603      	mov	r3, r0
  4004a8:	b928      	cbnz	r0, 4004b6 <can_async_init+0x32>
	descr->dev.cb.tx_done     = can_tx_done;
  4004aa:	4a07      	ldr	r2, [pc, #28]	; (4004c8 <can_async_init+0x44>)
  4004ac:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
  4004ae:	4a07      	ldr	r2, [pc, #28]	; (4004cc <can_async_init+0x48>)
  4004b0:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
  4004b2:	4a07      	ldr	r2, [pc, #28]	; (4004d0 <can_async_init+0x4c>)
  4004b4:	60e2      	str	r2, [r4, #12]
}
  4004b6:	4618      	mov	r0, r3
  4004b8:	bd38      	pop	{r3, r4, r5, pc}
  4004ba:	bf00      	nop
  4004bc:	00402918 	.word	0x00402918
  4004c0:	0040097d 	.word	0x0040097d
  4004c4:	00400b19 	.word	0x00400b19
  4004c8:	00400467 	.word	0x00400467
  4004cc:	00400471 	.word	0x00400471
  4004d0:	0040047b 	.word	0x0040047b

004004d4 <can_async_enable>:
{
  4004d4:	b510      	push	{r4, lr}
	ASSERT(descr);
  4004d6:	4604      	mov	r4, r0
  4004d8:	225c      	movs	r2, #92	; 0x5c
  4004da:	4905      	ldr	r1, [pc, #20]	; (4004f0 <can_async_enable+0x1c>)
  4004dc:	3000      	adds	r0, #0
  4004de:	bf18      	it	ne
  4004e0:	2001      	movne	r0, #1
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <can_async_enable+0x20>)
  4004e4:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
  4004e6:	4620      	mov	r0, r4
  4004e8:	4b03      	ldr	r3, [pc, #12]	; (4004f8 <can_async_enable+0x24>)
  4004ea:	4798      	blx	r3
}
  4004ec:	bd10      	pop	{r4, pc}
  4004ee:	bf00      	nop
  4004f0:	00402918 	.word	0x00402918
  4004f4:	0040097d 	.word	0x0040097d
  4004f8:	00400ced 	.word	0x00400ced

004004fc <can_async_read>:
{
  4004fc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && msg);
  4004fe:	4604      	mov	r4, r0
  400500:	460d      	mov	r5, r1
  400502:	2800      	cmp	r0, #0
  400504:	bf18      	it	ne
  400506:	2900      	cmpne	r1, #0
  400508:	bf14      	ite	ne
  40050a:	2001      	movne	r0, #1
  40050c:	2000      	moveq	r0, #0
  40050e:	226e      	movs	r2, #110	; 0x6e
  400510:	4903      	ldr	r1, [pc, #12]	; (400520 <can_async_read+0x24>)
  400512:	4b04      	ldr	r3, [pc, #16]	; (400524 <can_async_read+0x28>)
  400514:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
  400516:	4629      	mov	r1, r5
  400518:	4620      	mov	r0, r4
  40051a:	4b03      	ldr	r3, [pc, #12]	; (400528 <can_async_read+0x2c>)
  40051c:	4798      	blx	r3
}
  40051e:	bd38      	pop	{r3, r4, r5, pc}
  400520:	00402918 	.word	0x00402918
  400524:	0040097d 	.word	0x0040097d
  400528:	00400cfd 	.word	0x00400cfd

0040052c <can_async_write>:
{
  40052c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && msg);
  40052e:	4604      	mov	r4, r0
  400530:	460d      	mov	r5, r1
  400532:	2800      	cmp	r0, #0
  400534:	bf18      	it	ne
  400536:	2900      	cmpne	r1, #0
  400538:	bf14      	ite	ne
  40053a:	2001      	movne	r0, #1
  40053c:	2000      	moveq	r0, #0
  40053e:	2277      	movs	r2, #119	; 0x77
  400540:	4903      	ldr	r1, [pc, #12]	; (400550 <can_async_write+0x24>)
  400542:	4b04      	ldr	r3, [pc, #16]	; (400554 <can_async_write+0x28>)
  400544:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
  400546:	4629      	mov	r1, r5
  400548:	4620      	mov	r0, r4
  40054a:	4b03      	ldr	r3, [pc, #12]	; (400558 <can_async_write+0x2c>)
  40054c:	4798      	blx	r3
}
  40054e:	bd38      	pop	{r3, r4, r5, pc}
  400550:	00402918 	.word	0x00402918
  400554:	0040097d 	.word	0x0040097d
  400558:	00400dc9 	.word	0x00400dc9

0040055c <can_async_register_callback>:
{
  40055c:	b570      	push	{r4, r5, r6, lr}
  40055e:	460c      	mov	r4, r1
  400560:	4616      	mov	r6, r2
	ASSERT(descr);
  400562:	4605      	mov	r5, r0
  400564:	2281      	movs	r2, #129	; 0x81
  400566:	490e      	ldr	r1, [pc, #56]	; (4005a0 <can_async_register_callback+0x44>)
  400568:	3000      	adds	r0, #0
  40056a:	bf18      	it	ne
  40056c:	2001      	movne	r0, #1
  40056e:	4b0d      	ldr	r3, [pc, #52]	; (4005a4 <can_async_register_callback+0x48>)
  400570:	4798      	blx	r3
	switch (type) {
  400572:	2c01      	cmp	r4, #1
  400574:	d00f      	beq.n	400596 <can_async_register_callback+0x3a>
  400576:	b124      	cbz	r4, 400582 <can_async_register_callback+0x26>
  400578:	2c02      	cmp	r4, #2
  40057a:	d00e      	beq.n	40059a <can_async_register_callback+0x3e>
		return ERR_INVALID_ARG;
  40057c:	f06f 000c 	mvn.w	r0, #12
}
  400580:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
  400582:	622e      	str	r6, [r5, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
  400584:	1c32      	adds	r2, r6, #0
  400586:	bf18      	it	ne
  400588:	2201      	movne	r2, #1
  40058a:	4621      	mov	r1, r4
  40058c:	4628      	mov	r0, r5
  40058e:	4b06      	ldr	r3, [pc, #24]	; (4005a8 <can_async_register_callback+0x4c>)
  400590:	4798      	blx	r3
	return ERR_NONE;
  400592:	2000      	movs	r0, #0
  400594:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
  400596:	61ee      	str	r6, [r5, #28]
		break;
  400598:	e7f4      	b.n	400584 <can_async_register_callback+0x28>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
  40059a:	626e      	str	r6, [r5, #36]	; 0x24
		break;
  40059c:	e7f2      	b.n	400584 <can_async_register_callback+0x28>
  40059e:	bf00      	nop
  4005a0:	00402918 	.word	0x00402918
  4005a4:	0040097d 	.word	0x0040097d
  4005a8:	00400efd 	.word	0x00400efd

004005ac <can_async_set_filter>:
{
  4005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005ae:	460d      	mov	r5, r1
  4005b0:	4616      	mov	r6, r2
  4005b2:	461f      	mov	r7, r3
	ASSERT(descr);
  4005b4:	4604      	mov	r4, r0
  4005b6:	22b8      	movs	r2, #184	; 0xb8
  4005b8:	4906      	ldr	r1, [pc, #24]	; (4005d4 <can_async_set_filter+0x28>)
  4005ba:	3000      	adds	r0, #0
  4005bc:	bf18      	it	ne
  4005be:	2001      	movne	r0, #1
  4005c0:	4b05      	ldr	r3, [pc, #20]	; (4005d8 <can_async_set_filter+0x2c>)
  4005c2:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
  4005c4:	463b      	mov	r3, r7
  4005c6:	4632      	mov	r2, r6
  4005c8:	4629      	mov	r1, r5
  4005ca:	4620      	mov	r0, r4
  4005cc:	4c03      	ldr	r4, [pc, #12]	; (4005dc <can_async_set_filter+0x30>)
  4005ce:	47a0      	blx	r4
}
  4005d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4005d2:	bf00      	nop
  4005d4:	00402918 	.word	0x00402918
  4005d8:	0040097d 	.word	0x0040097d
  4005dc:	00400f41 	.word	0x00400f41

004005e0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4005e0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4005e2:	4b04      	ldr	r3, [pc, #16]	; (4005f4 <delay_ms+0x14>)
  4005e4:	681c      	ldr	r4, [r3, #0]
  4005e6:	4b04      	ldr	r3, [pc, #16]	; (4005f8 <delay_ms+0x18>)
  4005e8:	4798      	blx	r3
  4005ea:	4601      	mov	r1, r0
  4005ec:	4620      	mov	r0, r4
  4005ee:	4b03      	ldr	r3, [pc, #12]	; (4005fc <delay_ms+0x1c>)
  4005f0:	4798      	blx	r3
  4005f2:	bd10      	pop	{r4, pc}
  4005f4:	204000cc 	.word	0x204000cc
  4005f8:	00400a39 	.word	0x00400a39
  4005fc:	00400a4b 	.word	0x00400a4b

00400600 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400600:	b570      	push	{r4, r5, r6, lr}
  400602:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400604:	4604      	mov	r4, r0
  400606:	460d      	mov	r5, r1
  400608:	2800      	cmp	r0, #0
  40060a:	bf18      	it	ne
  40060c:	2900      	cmpne	r1, #0
  40060e:	bf14      	ite	ne
  400610:	2001      	movne	r0, #1
  400612:	2000      	moveq	r0, #0
  400614:	2234      	movs	r2, #52	; 0x34
  400616:	4904      	ldr	r1, [pc, #16]	; (400628 <io_write+0x28>)
  400618:	4b04      	ldr	r3, [pc, #16]	; (40062c <io_write+0x2c>)
  40061a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  40061c:	6823      	ldr	r3, [r4, #0]
  40061e:	4632      	mov	r2, r6
  400620:	4629      	mov	r1, r5
  400622:	4620      	mov	r0, r4
  400624:	4798      	blx	r3
}
  400626:	bd70      	pop	{r4, r5, r6, pc}
  400628:	00402934 	.word	0x00402934
  40062c:	0040097d 	.word	0x0040097d

00400630 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400630:	b570      	push	{r4, r5, r6, lr}
  400632:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400634:	4604      	mov	r4, r0
  400636:	460d      	mov	r5, r1
  400638:	2800      	cmp	r0, #0
  40063a:	bf18      	it	ne
  40063c:	2900      	cmpne	r1, #0
  40063e:	bf14      	ite	ne
  400640:	2001      	movne	r0, #1
  400642:	2000      	moveq	r0, #0
  400644:	223d      	movs	r2, #61	; 0x3d
  400646:	4904      	ldr	r1, [pc, #16]	; (400658 <io_read+0x28>)
  400648:	4b04      	ldr	r3, [pc, #16]	; (40065c <io_read+0x2c>)
  40064a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  40064c:	6863      	ldr	r3, [r4, #4]
  40064e:	4632      	mov	r2, r6
  400650:	4629      	mov	r1, r5
  400652:	4620      	mov	r0, r4
  400654:	4798      	blx	r3
}
  400656:	bd70      	pop	{r4, r5, r6, pc}
  400658:	00402934 	.word	0x00402934
  40065c:	0040097d 	.word	0x0040097d

00400660 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400662:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400664:	b117      	cbz	r7, 40066c <timer_add_timer_task+0xc>
  400666:	463c      	mov	r4, r7
  400668:	2600      	movs	r6, #0
  40066a:	e00b      	b.n	400684 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  40066c:	4b0e      	ldr	r3, [pc, #56]	; (4006a8 <timer_add_timer_task+0x48>)
  40066e:	4798      	blx	r3
		return;
  400670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400672:	68a5      	ldr	r5, [r4, #8]
  400674:	442b      	add	r3, r5
  400676:	1a9b      	subs	r3, r3, r2
  400678:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  40067a:	688d      	ldr	r5, [r1, #8]
  40067c:	42ab      	cmp	r3, r5
  40067e:	d209      	bcs.n	400694 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400680:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400682:	6824      	ldr	r4, [r4, #0]
  400684:	b134      	cbz	r4, 400694 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400686:	6863      	ldr	r3, [r4, #4]
  400688:	4293      	cmp	r3, r2
  40068a:	d8f2      	bhi.n	400672 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  40068c:	68a5      	ldr	r5, [r4, #8]
  40068e:	1a9b      	subs	r3, r3, r2
  400690:	442b      	add	r3, r5
  400692:	e7f2      	b.n	40067a <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400694:	42bc      	cmp	r4, r7
  400696:	d003      	beq.n	4006a0 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400698:	4630      	mov	r0, r6
  40069a:	4b04      	ldr	r3, [pc, #16]	; (4006ac <timer_add_timer_task+0x4c>)
  40069c:	4798      	blx	r3
  40069e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  4006a0:	4b01      	ldr	r3, [pc, #4]	; (4006a8 <timer_add_timer_task+0x48>)
  4006a2:	4798      	blx	r3
  4006a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006a6:	bf00      	nop
  4006a8:	00400999 	.word	0x00400999
  4006ac:	004009c5 	.word	0x004009c5

004006b0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  4006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006b2:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  4006b4:	6906      	ldr	r6, [r0, #16]
  4006b6:	3601      	adds	r6, #1
  4006b8:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  4006ba:	7e03      	ldrb	r3, [r0, #24]
  4006bc:	f013 0f01 	tst.w	r3, #1
  4006c0:	d105      	bne.n	4006ce <timer_process_counted+0x1e>
  4006c2:	7e03      	ldrb	r3, [r0, #24]
  4006c4:	f013 0f02 	tst.w	r3, #2
  4006c8:	d101      	bne.n	4006ce <timer_process_counted+0x1e>
  4006ca:	4605      	mov	r5, r0
  4006cc:	e009      	b.n	4006e2 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  4006ce:	7e03      	ldrb	r3, [r0, #24]
  4006d0:	f043 0302 	orr.w	r3, r3, #2
  4006d4:	7603      	strb	r3, [r0, #24]
		return;
  4006d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006d8:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4006da:	68e3      	ldr	r3, [r4, #12]
  4006dc:	4620      	mov	r0, r4
  4006de:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4006e0:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4006e2:	b19c      	cbz	r4, 40070c <timer_process_counted+0x5c>
  4006e4:	6863      	ldr	r3, [r4, #4]
  4006e6:	1af3      	subs	r3, r6, r3
  4006e8:	68a2      	ldr	r2, [r4, #8]
  4006ea:	4293      	cmp	r3, r2
  4006ec:	d30e      	bcc.n	40070c <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4006ee:	f105 0714 	add.w	r7, r5, #20
  4006f2:	4638      	mov	r0, r7
  4006f4:	4b06      	ldr	r3, [pc, #24]	; (400710 <timer_process_counted+0x60>)
  4006f6:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4006f8:	7c23      	ldrb	r3, [r4, #16]
  4006fa:	2b01      	cmp	r3, #1
  4006fc:	d1ec      	bne.n	4006d8 <timer_process_counted+0x28>
			tmp->time_label = time;
  4006fe:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400700:	4632      	mov	r2, r6
  400702:	4621      	mov	r1, r4
  400704:	4638      	mov	r0, r7
  400706:	4b03      	ldr	r3, [pc, #12]	; (400714 <timer_process_counted+0x64>)
  400708:	4798      	blx	r3
  40070a:	e7e5      	b.n	4006d8 <timer_process_counted+0x28>
  40070c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40070e:	bf00      	nop
  400710:	004009cd 	.word	0x004009cd
  400714:	00400661 	.word	0x00400661

00400718 <timer_init>:
{
  400718:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40071a:	4604      	mov	r4, r0
  40071c:	460d      	mov	r5, r1
  40071e:	2800      	cmp	r0, #0
  400720:	bf18      	it	ne
  400722:	2900      	cmpne	r1, #0
  400724:	bf14      	ite	ne
  400726:	2001      	movne	r0, #1
  400728:	2000      	moveq	r0, #0
  40072a:	223b      	movs	r2, #59	; 0x3b
  40072c:	4905      	ldr	r1, [pc, #20]	; (400744 <timer_init+0x2c>)
  40072e:	4b06      	ldr	r3, [pc, #24]	; (400748 <timer_init+0x30>)
  400730:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400732:	4629      	mov	r1, r5
  400734:	4620      	mov	r0, r4
  400736:	4b05      	ldr	r3, [pc, #20]	; (40074c <timer_init+0x34>)
  400738:	4798      	blx	r3
	descr->time                           = 0;
  40073a:	2000      	movs	r0, #0
  40073c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40073e:	4b04      	ldr	r3, [pc, #16]	; (400750 <timer_init+0x38>)
  400740:	6023      	str	r3, [r4, #0]
}
  400742:	bd38      	pop	{r3, r4, r5, pc}
  400744:	00402948 	.word	0x00402948
  400748:	0040097d 	.word	0x0040097d
  40074c:	00401121 	.word	0x00401121
  400750:	004006b1 	.word	0x004006b1

00400754 <timer_start>:
{
  400754:	b510      	push	{r4, lr}
	ASSERT(descr);
  400756:	4604      	mov	r4, r0
  400758:	2253      	movs	r2, #83	; 0x53
  40075a:	4909      	ldr	r1, [pc, #36]	; (400780 <timer_start+0x2c>)
  40075c:	3000      	adds	r0, #0
  40075e:	bf18      	it	ne
  400760:	2001      	movne	r0, #1
  400762:	4b08      	ldr	r3, [pc, #32]	; (400784 <timer_start+0x30>)
  400764:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400766:	4620      	mov	r0, r4
  400768:	4b07      	ldr	r3, [pc, #28]	; (400788 <timer_start+0x34>)
  40076a:	4798      	blx	r3
  40076c:	b920      	cbnz	r0, 400778 <timer_start+0x24>
	_timer_start(&descr->device);
  40076e:	4620      	mov	r0, r4
  400770:	4b06      	ldr	r3, [pc, #24]	; (40078c <timer_start+0x38>)
  400772:	4798      	blx	r3
	return ERR_NONE;
  400774:	2000      	movs	r0, #0
  400776:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400778:	f06f 0010 	mvn.w	r0, #16
}
  40077c:	bd10      	pop	{r4, pc}
  40077e:	bf00      	nop
  400780:	00402948 	.word	0x00402948
  400784:	0040097d 	.word	0x0040097d
  400788:	004011e5 	.word	0x004011e5
  40078c:	004011dd 	.word	0x004011dd

00400790 <timer_add_task>:
{
  400790:	b570      	push	{r4, r5, r6, lr}
  400792:	b082      	sub	sp, #8
	ASSERT(descr && task);
  400794:	4604      	mov	r4, r0
  400796:	460d      	mov	r5, r1
  400798:	2800      	cmp	r0, #0
  40079a:	bf18      	it	ne
  40079c:	2900      	cmpne	r1, #0
  40079e:	bf14      	ite	ne
  4007a0:	2001      	movne	r0, #1
  4007a2:	2000      	moveq	r0, #0
  4007a4:	227a      	movs	r2, #122	; 0x7a
  4007a6:	491d      	ldr	r1, [pc, #116]	; (40081c <timer_add_task+0x8c>)
  4007a8:	4b1d      	ldr	r3, [pc, #116]	; (400820 <timer_add_task+0x90>)
  4007aa:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  4007ac:	7e23      	ldrb	r3, [r4, #24]
  4007ae:	f043 0301 	orr.w	r3, r3, #1
  4007b2:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  4007b4:	f104 0614 	add.w	r6, r4, #20
  4007b8:	4629      	mov	r1, r5
  4007ba:	4630      	mov	r0, r6
  4007bc:	4b19      	ldr	r3, [pc, #100]	; (400824 <timer_add_task+0x94>)
  4007be:	4798      	blx	r3
  4007c0:	b988      	cbnz	r0, 4007e6 <timer_add_task+0x56>
	task->time_label = descr->time;
  4007c2:	6923      	ldr	r3, [r4, #16]
  4007c4:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  4007c6:	6922      	ldr	r2, [r4, #16]
  4007c8:	4629      	mov	r1, r5
  4007ca:	4630      	mov	r0, r6
  4007cc:	4b16      	ldr	r3, [pc, #88]	; (400828 <timer_add_task+0x98>)
  4007ce:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4007d0:	7e23      	ldrb	r3, [r4, #24]
  4007d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4007d6:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  4007d8:	7e23      	ldrb	r3, [r4, #24]
  4007da:	f013 0f02 	tst.w	r3, #2
  4007de:	d10e      	bne.n	4007fe <timer_add_task+0x6e>
	return ERR_NONE;
  4007e0:	2000      	movs	r0, #0
}
  4007e2:	b002      	add	sp, #8
  4007e4:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4007e6:	7e23      	ldrb	r3, [r4, #24]
  4007e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4007ec:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  4007ee:	227f      	movs	r2, #127	; 0x7f
  4007f0:	490a      	ldr	r1, [pc, #40]	; (40081c <timer_add_task+0x8c>)
  4007f2:	2000      	movs	r0, #0
  4007f4:	4b0a      	ldr	r3, [pc, #40]	; (400820 <timer_add_task+0x90>)
  4007f6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  4007f8:	f06f 0011 	mvn.w	r0, #17
  4007fc:	e7f1      	b.n	4007e2 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  4007fe:	a801      	add	r0, sp, #4
  400800:	4b0a      	ldr	r3, [pc, #40]	; (40082c <timer_add_task+0x9c>)
  400802:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  400804:	7e23      	ldrb	r3, [r4, #24]
  400806:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  40080a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  40080c:	4620      	mov	r0, r4
  40080e:	4b08      	ldr	r3, [pc, #32]	; (400830 <timer_add_task+0xa0>)
  400810:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  400812:	a801      	add	r0, sp, #4
  400814:	4b07      	ldr	r3, [pc, #28]	; (400834 <timer_add_task+0xa4>)
  400816:	4798      	blx	r3
	return ERR_NONE;
  400818:	2000      	movs	r0, #0
  40081a:	e7e2      	b.n	4007e2 <timer_add_task+0x52>
  40081c:	00402948 	.word	0x00402948
  400820:	0040097d 	.word	0x0040097d
  400824:	00400983 	.word	0x00400983
  400828:	00400661 	.word	0x00400661
  40082c:	0040044d 	.word	0x0040044d
  400830:	004011f1 	.word	0x004011f1
  400834:	0040045b 	.word	0x0040045b

00400838 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40083a:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40083c:	4605      	mov	r5, r0
  40083e:	460f      	mov	r7, r1
  400840:	2800      	cmp	r0, #0
  400842:	bf18      	it	ne
  400844:	2900      	cmpne	r1, #0
  400846:	d002      	beq.n	40084e <usart_sync_write+0x16>
  400848:	bb0a      	cbnz	r2, 40088e <usart_sync_write+0x56>
  40084a:	2000      	movs	r0, #0
  40084c:	e000      	b.n	400850 <usart_sync_write+0x18>
  40084e:	2000      	movs	r0, #0
  400850:	22f1      	movs	r2, #241	; 0xf1
  400852:	4910      	ldr	r1, [pc, #64]	; (400894 <usart_sync_write+0x5c>)
  400854:	4b10      	ldr	r3, [pc, #64]	; (400898 <usart_sync_write+0x60>)
  400856:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400858:	f105 0408 	add.w	r4, r5, #8
  40085c:	4620      	mov	r0, r4
  40085e:	4b0f      	ldr	r3, [pc, #60]	; (40089c <usart_sync_write+0x64>)
  400860:	4798      	blx	r3
  400862:	2800      	cmp	r0, #0
  400864:	d0f8      	beq.n	400858 <usart_sync_write+0x20>
  400866:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400868:	5d79      	ldrb	r1, [r7, r5]
  40086a:	4620      	mov	r0, r4
  40086c:	4b0c      	ldr	r3, [pc, #48]	; (4008a0 <usart_sync_write+0x68>)
  40086e:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400870:	4620      	mov	r0, r4
  400872:	4b0a      	ldr	r3, [pc, #40]	; (40089c <usart_sync_write+0x64>)
  400874:	4798      	blx	r3
  400876:	2800      	cmp	r0, #0
  400878:	d0fa      	beq.n	400870 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  40087a:	3501      	adds	r5, #1
  40087c:	42b5      	cmp	r5, r6
  40087e:	d3f3      	bcc.n	400868 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400880:	4620      	mov	r0, r4
  400882:	4b08      	ldr	r3, [pc, #32]	; (4008a4 <usart_sync_write+0x6c>)
  400884:	4798      	blx	r3
  400886:	2800      	cmp	r0, #0
  400888:	d0fa      	beq.n	400880 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  40088a:	4628      	mov	r0, r5
  40088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  40088e:	2001      	movs	r0, #1
  400890:	e7de      	b.n	400850 <usart_sync_write+0x18>
  400892:	bf00      	nop
  400894:	00402960 	.word	0x00402960
  400898:	0040097d 	.word	0x0040097d
  40089c:	004013bd 	.word	0x004013bd
  4008a0:	00401375 	.word	0x00401375
  4008a4:	004013e5 	.word	0x004013e5

004008a8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4008a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008ac:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4008ae:	4605      	mov	r5, r0
  4008b0:	4688      	mov	r8, r1
  4008b2:	2800      	cmp	r0, #0
  4008b4:	bf18      	it	ne
  4008b6:	2900      	cmpne	r1, #0
  4008b8:	d002      	beq.n	4008c0 <usart_sync_read+0x18>
  4008ba:	b9d2      	cbnz	r2, 4008f2 <usart_sync_read+0x4a>
  4008bc:	2000      	movs	r0, #0
  4008be:	e000      	b.n	4008c2 <usart_sync_read+0x1a>
  4008c0:	2000      	movs	r0, #0
  4008c2:	f44f 7286 	mov.w	r2, #268	; 0x10c
  4008c6:	490c      	ldr	r1, [pc, #48]	; (4008f8 <usart_sync_read+0x50>)
  4008c8:	4b0c      	ldr	r3, [pc, #48]	; (4008fc <usart_sync_read+0x54>)
  4008ca:	4798      	blx	r3
	uint32_t                      offset = 0;
  4008cc:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  4008ce:	f105 0408 	add.w	r4, r5, #8
  4008d2:	4620      	mov	r0, r4
  4008d4:	4b0a      	ldr	r3, [pc, #40]	; (400900 <usart_sync_read+0x58>)
  4008d6:	4798      	blx	r3
  4008d8:	2800      	cmp	r0, #0
  4008da:	d0f8      	beq.n	4008ce <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4008dc:	4620      	mov	r0, r4
  4008de:	4b09      	ldr	r3, [pc, #36]	; (400904 <usart_sync_read+0x5c>)
  4008e0:	4798      	blx	r3
  4008e2:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  4008e6:	3601      	adds	r6, #1
  4008e8:	42be      	cmp	r6, r7
  4008ea:	d3f0      	bcc.n	4008ce <usart_sync_read+0x26>

	return (int32_t)offset;
}
  4008ec:	4630      	mov	r0, r6
  4008ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  4008f2:	2001      	movs	r0, #1
  4008f4:	e7e5      	b.n	4008c2 <usart_sync_read+0x1a>
  4008f6:	bf00      	nop
  4008f8:	00402960 	.word	0x00402960
  4008fc:	0040097d 	.word	0x0040097d
  400900:	0040140d 	.word	0x0040140d
  400904:	00401399 	.word	0x00401399

00400908 <usart_sync_init>:
{
  400908:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40090a:	4604      	mov	r4, r0
  40090c:	460d      	mov	r5, r1
  40090e:	2800      	cmp	r0, #0
  400910:	bf18      	it	ne
  400912:	2900      	cmpne	r1, #0
  400914:	bf14      	ite	ne
  400916:	2001      	movne	r0, #1
  400918:	2000      	moveq	r0, #0
  40091a:	2234      	movs	r2, #52	; 0x34
  40091c:	4907      	ldr	r1, [pc, #28]	; (40093c <usart_sync_init+0x34>)
  40091e:	4b08      	ldr	r3, [pc, #32]	; (400940 <usart_sync_init+0x38>)
  400920:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400922:	4629      	mov	r1, r5
  400924:	f104 0008 	add.w	r0, r4, #8
  400928:	4b06      	ldr	r3, [pc, #24]	; (400944 <usart_sync_init+0x3c>)
  40092a:	4798      	blx	r3
	if (init_status) {
  40092c:	4603      	mov	r3, r0
  40092e:	b918      	cbnz	r0, 400938 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400930:	4a05      	ldr	r2, [pc, #20]	; (400948 <usart_sync_init+0x40>)
  400932:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400934:	4a05      	ldr	r2, [pc, #20]	; (40094c <usart_sync_init+0x44>)
  400936:	6022      	str	r2, [r4, #0]
}
  400938:	4618      	mov	r0, r3
  40093a:	bd38      	pop	{r3, r4, r5, pc}
  40093c:	00402960 	.word	0x00402960
  400940:	0040097d 	.word	0x0040097d
  400944:	00401309 	.word	0x00401309
  400948:	004008a9 	.word	0x004008a9
  40094c:	00400839 	.word	0x00400839

00400950 <usart_sync_enable>:
{
  400950:	b510      	push	{r4, lr}
	ASSERT(descr);
  400952:	4604      	mov	r4, r0
  400954:	2253      	movs	r2, #83	; 0x53
  400956:	4906      	ldr	r1, [pc, #24]	; (400970 <usart_sync_enable+0x20>)
  400958:	3000      	adds	r0, #0
  40095a:	bf18      	it	ne
  40095c:	2001      	movne	r0, #1
  40095e:	4b05      	ldr	r3, [pc, #20]	; (400974 <usart_sync_enable+0x24>)
  400960:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400962:	f104 0008 	add.w	r0, r4, #8
  400966:	4b04      	ldr	r3, [pc, #16]	; (400978 <usart_sync_enable+0x28>)
  400968:	4798      	blx	r3
}
  40096a:	2000      	movs	r0, #0
  40096c:	bd10      	pop	{r4, pc}
  40096e:	bf00      	nop
  400970:	00402960 	.word	0x00402960
  400974:	0040097d 	.word	0x0040097d
  400978:	00401341 	.word	0x00401341

0040097c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  40097c:	b900      	cbnz	r0, 400980 <assert+0x4>
		__asm("BKPT #0");
  40097e:	be00      	bkpt	0x0000
  400980:	4770      	bx	lr

00400982 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400982:	6803      	ldr	r3, [r0, #0]
  400984:	b11b      	cbz	r3, 40098e <is_list_element+0xc>
		if (it == element) {
  400986:	428b      	cmp	r3, r1
  400988:	d003      	beq.n	400992 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  40098a:	681b      	ldr	r3, [r3, #0]
  40098c:	e7fa      	b.n	400984 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  40098e:	2000      	movs	r0, #0
  400990:	4770      	bx	lr
			return true;
  400992:	2001      	movs	r0, #1
}
  400994:	4770      	bx	lr
	...

00400998 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400998:	b538      	push	{r3, r4, r5, lr}
  40099a:	4604      	mov	r4, r0
  40099c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  40099e:	4b06      	ldr	r3, [pc, #24]	; (4009b8 <list_insert_as_head+0x20>)
  4009a0:	4798      	blx	r3
  4009a2:	f080 0001 	eor.w	r0, r0, #1
  4009a6:	2239      	movs	r2, #57	; 0x39
  4009a8:	4904      	ldr	r1, [pc, #16]	; (4009bc <list_insert_as_head+0x24>)
  4009aa:	b2c0      	uxtb	r0, r0
  4009ac:	4b04      	ldr	r3, [pc, #16]	; (4009c0 <list_insert_as_head+0x28>)
  4009ae:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  4009b0:	6823      	ldr	r3, [r4, #0]
  4009b2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  4009b4:	6025      	str	r5, [r4, #0]
  4009b6:	bd38      	pop	{r3, r4, r5, pc}
  4009b8:	00400983 	.word	0x00400983
  4009bc:	0040297c 	.word	0x0040297c
  4009c0:	0040097d 	.word	0x0040097d

004009c4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  4009c4:	6803      	ldr	r3, [r0, #0]
  4009c6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  4009c8:	6001      	str	r1, [r0, #0]
  4009ca:	4770      	bx	lr

004009cc <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  4009cc:	6803      	ldr	r3, [r0, #0]
  4009ce:	b11b      	cbz	r3, 4009d8 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  4009d0:	681a      	ldr	r2, [r3, #0]
  4009d2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  4009d4:	4618      	mov	r0, r3
  4009d6:	4770      	bx	lr
	}

	return NULL;
  4009d8:	2000      	movs	r0, #0
}
  4009da:	4770      	bx	lr

004009dc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  4009dc:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  4009de:	4a06      	ldr	r2, [pc, #24]	; (4009f8 <_sbrk+0x1c>)
  4009e0:	6812      	ldr	r2, [r2, #0]
  4009e2:	b122      	cbz	r2, 4009ee <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4009e4:	4a04      	ldr	r2, [pc, #16]	; (4009f8 <_sbrk+0x1c>)
  4009e6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  4009e8:	4403      	add	r3, r0
  4009ea:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  4009ec:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4009ee:	4903      	ldr	r1, [pc, #12]	; (4009fc <_sbrk+0x20>)
  4009f0:	4a01      	ldr	r2, [pc, #4]	; (4009f8 <_sbrk+0x1c>)
  4009f2:	6011      	str	r1, [r2, #0]
  4009f4:	e7f6      	b.n	4009e4 <_sbrk+0x8>
  4009f6:	bf00      	nop
  4009f8:	204000d0 	.word	0x204000d0
  4009fc:	20400968 	.word	0x20400968

00400a00 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400a00:	f04f 30ff 	mov.w	r0, #4294967295
  400a04:	4770      	bx	lr

00400a06 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400a0a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400a0c:	2000      	movs	r0, #0
  400a0e:	4770      	bx	lr

00400a10 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  400a10:	2001      	movs	r0, #1
  400a12:	4770      	bx	lr

00400a14 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400a14:	2000      	movs	r0, #0
  400a16:	4770      	bx	lr

00400a18 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  400a18:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400a1a:	2b00      	cmp	r3, #0
  400a1c:	db09      	blt.n	400a32 <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a1e:	095b      	lsrs	r3, r3, #5
  400a20:	f000 001f 	and.w	r0, r0, #31
  400a24:	2201      	movs	r2, #1
  400a26:	fa02 f000 	lsl.w	r0, r2, r0
  400a2a:	3340      	adds	r3, #64	; 0x40
  400a2c:	4a01      	ldr	r2, [pc, #4]	; (400a34 <_irq_set+0x1c>)
  400a2e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  400a32:	4770      	bx	lr
  400a34:	e000e100 	.word	0xe000e100

00400a38 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) * 1000);
  400a38:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400a3c:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400a44:	fb03 f000 	mul.w	r0, r3, r0
  400a48:	4770      	bx	lr

00400a4a <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm("__delay:\n"
  400a4a:	3901      	subs	r1, #1
  400a4c:	d8fd      	bhi.n	400a4a <_delay_cycles>
  400a4e:	4770      	bx	lr

00400a50 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400a50:	b500      	push	{lr}
  400a52:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400a54:	a801      	add	r0, sp, #4
  400a56:	4b0e      	ldr	r3, [pc, #56]	; (400a90 <_init_chip+0x40>)
  400a58:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400a5a:	4a0e      	ldr	r2, [pc, #56]	; (400a94 <_init_chip+0x44>)
  400a5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400a68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a6c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400a70:	a801      	add	r0, sp, #4
  400a72:	4b09      	ldr	r3, [pc, #36]	; (400a98 <_init_chip+0x48>)
  400a74:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400a76:	4a09      	ldr	r2, [pc, #36]	; (400a9c <_init_chip+0x4c>)
  400a78:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400a7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400a7e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400a82:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400a84:	4b06      	ldr	r3, [pc, #24]	; (400aa0 <_init_chip+0x50>)
  400a86:	4798      	blx	r3
}
  400a88:	b003      	add	sp, #12
  400a8a:	f85d fb04 	ldr.w	pc, [sp], #4
  400a8e:	bf00      	nop
  400a90:	0040044d 	.word	0x0040044d
  400a94:	e000ed00 	.word	0xe000ed00
  400a98:	0040045b 	.word	0x0040045b
  400a9c:	400e0c00 	.word	0x400e0c00
  400aa0:	004010a1 	.word	0x004010a1

00400aa4 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  400aa4:	b538      	push	{r3, r4, r5, lr}
  400aa6:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  400aa8:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  400aaa:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  400aac:	f014 0f01 	tst.w	r4, #1
  400ab0:	d11a      	bne.n	400ae8 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  400ab2:	f414 7f00 	tst.w	r4, #512	; 0x200
  400ab6:	d11a      	bne.n	400aee <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  400ab8:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  400abc:	d11b      	bne.n	400af6 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  400abe:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  400ac2:	d11d      	bne.n	400b00 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  400ac4:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  400ac8:	d008      	beq.n	400adc <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400aca:	68eb      	ldr	r3, [r5, #12]
  400acc:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  400ace:	6c52      	ldr	r2, [r2, #68]	; 0x44
  400ad0:	f012 0f20 	tst.w	r2, #32
  400ad4:	d019      	beq.n	400b0a <_can_irq_handler+0x66>
  400ad6:	2102      	movs	r1, #2
  400ad8:	4628      	mov	r0, r5
  400ada:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  400adc:	f014 0f08 	tst.w	r4, #8
  400ae0:	d115      	bne.n	400b0e <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  400ae2:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  400ae4:	651c      	str	r4, [r3, #80]	; 0x50
  400ae6:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  400ae8:	6883      	ldr	r3, [r0, #8]
  400aea:	4798      	blx	r3
  400aec:	e7e1      	b.n	400ab2 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  400aee:	686b      	ldr	r3, [r5, #4]
  400af0:	4628      	mov	r0, r5
  400af2:	4798      	blx	r3
  400af4:	e7e0      	b.n	400ab8 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  400af6:	68eb      	ldr	r3, [r5, #12]
  400af8:	2103      	movs	r1, #3
  400afa:	4628      	mov	r0, r5
  400afc:	4798      	blx	r3
  400afe:	e7de      	b.n	400abe <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  400b00:	68eb      	ldr	r3, [r5, #12]
  400b02:	2100      	movs	r1, #0
  400b04:	4628      	mov	r0, r5
  400b06:	4798      	blx	r3
  400b08:	e7dc      	b.n	400ac4 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400b0a:	2101      	movs	r1, #1
  400b0c:	e7e4      	b.n	400ad8 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  400b0e:	68eb      	ldr	r3, [r5, #12]
  400b10:	2104      	movs	r1, #4
  400b12:	4628      	mov	r0, r5
  400b14:	4798      	blx	r3
  400b16:	e7e4      	b.n	400ae2 <_can_irq_handler+0x3e>

00400b18 <_can_async_init>:
{
  400b18:	b430      	push	{r4, r5}
	dev->hw = hw;
  400b1a:	6001      	str	r1, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_INIT;
  400b1c:	698b      	ldr	r3, [r1, #24]
  400b1e:	f043 0301 	orr.w	r3, r3, #1
  400b22:	618b      	str	r3, [r1, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw) == 0)
  400b24:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400b26:	699a      	ldr	r2, [r3, #24]
  400b28:	f012 0f01 	tst.w	r2, #1
  400b2c:	d0fa      	beq.n	400b24 <_can_async_init+0xc>
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_CCE;
  400b2e:	699a      	ldr	r2, [r3, #24]
  400b30:	f042 0202 	orr.w	r2, r2, #2
  400b34:	619a      	str	r2, [r3, #24]
	if (hw == MCAN0) {
  400b36:	4b62      	ldr	r3, [pc, #392]	; (400cc0 <_can_async_init+0x1a8>)
  400b38:	4299      	cmp	r1, r3
  400b3a:	d014      	beq.n	400b66 <_can_async_init+0x4e>
	if (hw == MCAN1) {
  400b3c:	4b61      	ldr	r3, [pc, #388]	; (400cc4 <_can_async_init+0x1ac>)
  400b3e:	4299      	cmp	r1, r3
  400b40:	d066      	beq.n	400c10 <_can_async_init+0xf8>
	hri_mcan_clear_CCCR_CCE_bit(dev->hw);
  400b42:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_CCE;
  400b44:	6993      	ldr	r3, [r2, #24]
  400b46:	f023 0302 	bic.w	r3, r3, #2
  400b4a:	6193      	str	r3, [r2, #24]
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  400b4c:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400b4e:	6993      	ldr	r3, [r2, #24]
  400b50:	f023 0301 	bic.w	r3, r3, #1
  400b54:	6193      	str	r3, [r2, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw)) {
  400b56:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400b58:	699b      	ldr	r3, [r3, #24]
  400b5a:	f013 0f01 	tst.w	r3, #1
  400b5e:	d1fa      	bne.n	400b56 <_can_async_init+0x3e>
}
  400b60:	2000      	movs	r0, #0
  400b62:	bc30      	pop	{r4, r5}
  400b64:	4770      	bx	lr
		dev->context = (void *)&_can0_context;
  400b66:	4b58      	ldr	r3, [pc, #352]	; (400cc8 <_can_async_init+0x1b0>)
  400b68:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
  400b6a:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  400b6c:	6993      	ldr	r3, [r2, #24]
  400b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400b72:	6193      	str	r3, [r2, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN0_NBTP_REG);
  400b74:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  400b76:	4a55      	ldr	r2, [pc, #340]	; (400ccc <_can_async_init+0x1b4>)
  400b78:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
  400b7a:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  400b7c:	f640 1233 	movw	r2, #2355	; 0x933
  400b80:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN0_TDCR_REG);
  400b82:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  400b84:	f640 320b 	movw	r2, #2827	; 0xb0b
  400b88:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | (((uint32_t)can0_rx_fifo) & 0xFFFF));
  400b8a:	6802      	ldr	r2, [r0, #0]
  400b8c:	4b50      	ldr	r3, [pc, #320]	; (400cd0 <_can_async_init+0x1b8>)
  400b8e:	b29b      	uxth	r3, r3
  400b90:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
}

static inline void hri_mcan_write_RXF0C_reg(const void *const hw, hri_mcan_rxf0c_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXF0C = data;
  400b94:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN0_RXESC_REG);
  400b98:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_RXESC_reg(const void *const hw, hri_mcan_rxesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXESC = data;
  400b9a:	2400      	movs	r4, #0
  400b9c:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN0_TXESC_REG);
  400ba0:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_TXESC_reg(const void *const hw, hri_mcan_txesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXESC = data;
  400ba2:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | (((uint32_t)can0_tx_fifo) & 0xFFFF));
  400ba6:	6802      	ldr	r2, [r0, #0]
  400ba8:	4b4a      	ldr	r3, [pc, #296]	; (400cd4 <_can_async_init+0x1bc>)
  400baa:	b29b      	uxth	r3, r3
  400bac:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
	((Mcan *)hw)->MCAN_TXBC = data;
  400bb0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | (((uint32_t)can0_tx_event_fifo) & 0xFFFF));
  400bb4:	6805      	ldr	r5, [r0, #0]
  400bb6:	4a48      	ldr	r2, [pc, #288]	; (400cd8 <_can_async_init+0x1c0>)
  400bb8:	b293      	uxth	r3, r2
  400bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
}

static inline void hri_mcan_write_TXEFC_reg(const void *const hw, hri_mcan_txefc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXEFC = data;
  400bbe:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN0_GFC_REG);
  400bc2:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  400bc4:	252b      	movs	r5, #43	; 0x2b
  400bc6:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | (((uint32_t)can0_rx_std_filter) & 0xFFFF));
  400bca:	6805      	ldr	r5, [r0, #0]
  400bcc:	f102 0310 	add.w	r3, r2, #16
  400bd0:	b29b      	uxth	r3, r3
  400bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_SIDFC = data;
  400bd6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | (((uint32_t)can0_rx_ext_filter) & 0xFFFF));
  400bda:	6805      	ldr	r5, [r0, #0]
  400bdc:	f102 0318 	add.w	r3, r2, #24
  400be0:	b29b      	uxth	r3, r3
  400be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_XIDFC = data;
  400be6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN0_XIDAM_REG);
  400bea:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  400bec:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		_can0_dev = dev;
  400bf0:	6290      	str	r0, [r2, #40]	; 0x28
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400bf2:	4b3a      	ldr	r3, [pc, #232]	; (400cdc <_can_async_init+0x1c4>)
  400bf4:	2208      	movs	r2, #8
  400bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400bfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400bfe:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c02:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c06:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400c08:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400c0a:	2201      	movs	r2, #1
  400c0c:	65da      	str	r2, [r3, #92]	; 0x5c
  400c0e:	e795      	b.n	400b3c <_can_async_init+0x24>
		dev->context = (void *)&_can1_context;
  400c10:	4b33      	ldr	r3, [pc, #204]	; (400ce0 <_can_async_init+0x1c8>)
  400c12:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
  400c14:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  400c16:	6993      	ldr	r3, [r2, #24]
  400c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400c1c:	6193      	str	r3, [r2, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN1_NBTP_REG);
  400c1e:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  400c20:	4a2a      	ldr	r2, [pc, #168]	; (400ccc <_can_async_init+0x1b4>)
  400c22:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
  400c24:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  400c26:	f640 1233 	movw	r2, #2355	; 0x933
  400c2a:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN1_TDCR_REG);
  400c2c:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  400c2e:	f640 320b 	movw	r2, #2827	; 0xb0b
  400c32:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | (((uint32_t)can1_rx_fifo) & 0xFFFF));
  400c34:	6802      	ldr	r2, [r0, #0]
  400c36:	4b2b      	ldr	r3, [pc, #172]	; (400ce4 <_can_async_init+0x1cc>)
  400c38:	b29b      	uxth	r3, r3
  400c3a:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
	((Mcan *)hw)->MCAN_RXF0C = data;
  400c3e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
  400c42:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_RXESC = data;
  400c44:	2200      	movs	r2, #0
  400c46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
  400c4a:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TXESC = data;
  400c4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | (((uint32_t)can1_tx_fifo) & 0xFFFF));
  400c50:	6801      	ldr	r1, [r0, #0]
  400c52:	4b25      	ldr	r3, [pc, #148]	; (400ce8 <_can_async_init+0x1d0>)
  400c54:	b29b      	uxth	r3, r3
  400c56:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
	((Mcan *)hw)->MCAN_TXBC = data;
  400c5a:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | (((uint32_t)can1_tx_event_fifo) & 0xFFFF));
  400c5e:	6804      	ldr	r4, [r0, #0]
  400c60:	491d      	ldr	r1, [pc, #116]	; (400cd8 <_can_async_init+0x1c0>)
  400c62:	f101 032c 	add.w	r3, r1, #44	; 0x2c
  400c66:	b29b      	uxth	r3, r3
  400c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_TXEFC = data;
  400c6c:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
  400c70:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  400c72:	242b      	movs	r4, #43	; 0x2b
  400c74:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | (((uint32_t)can1_rx_std_filter) & 0xFFFF));
  400c78:	6804      	ldr	r4, [r0, #0]
  400c7a:	f101 033c 	add.w	r3, r1, #60	; 0x3c
  400c7e:	b29b      	uxth	r3, r3
  400c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_SIDFC = data;
  400c84:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | (((uint32_t)can1_rx_ext_filter) & 0xFFFF));
  400c88:	6804      	ldr	r4, [r0, #0]
  400c8a:	f101 0344 	add.w	r3, r1, #68	; 0x44
  400c8e:	b29b      	uxth	r3, r3
  400c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_XIDFC = data;
  400c94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
  400c98:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  400c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		_can1_dev = dev;
  400c9e:	6548      	str	r0, [r1, #84]	; 0x54
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ca0:	4b0e      	ldr	r3, [pc, #56]	; (400cdc <_can_async_init+0x1c4>)
  400ca2:	2220      	movs	r2, #32
  400ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400ca8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400cac:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400cb0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400cb4:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400cb6:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400cb8:	2201      	movs	r2, #1
  400cba:	65da      	str	r2, [r3, #92]	; 0x5c
  400cbc:	e741      	b.n	400b42 <_can_async_init+0x2a>
  400cbe:	bf00      	nop
  400cc0:	40030000 	.word	0x40030000
  400cc4:	40034000 	.word	0x40034000
  400cc8:	20400000 	.word	0x20400000
  400ccc:	06020a07 	.word	0x06020a07
  400cd0:	204001e0 	.word	0x204001e0
  400cd4:	20400300 	.word	0x20400300
  400cd8:	204000d4 	.word	0x204000d4
  400cdc:	e000e100 	.word	0xe000e100
  400ce0:	20400014 	.word	0x20400014
  400ce4:	204002a0 	.word	0x204002a0
  400ce8:	20400240 	.word	0x20400240

00400cec <_can_async_enable>:
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  400cec:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400cee:	6993      	ldr	r3, [r2, #24]
  400cf0:	f023 0301 	bic.w	r3, r3, #1
  400cf4:	6193      	str	r3, [r2, #24]
}
  400cf6:	2000      	movs	r0, #0
  400cf8:	4770      	bx	lr
	...

00400cfc <_can_async_read>:
	if (!hri_mcan_read_RXF0S_F0FL_bf(dev->hw)) {
  400cfc:	6803      	ldr	r3, [r0, #0]
	return (((Mcan *)hw)->MCAN_RXF0S & MCAN_RXF0S_F0FL_Msk) >> MCAN_RXF0S_F0FL_Pos;
  400cfe:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  400d02:	f012 0f7f 	tst.w	r2, #127	; 0x7f
  400d06:	d04d      	beq.n	400da4 <_can_async_read+0xa8>
{
  400d08:	b5f0      	push	{r4, r5, r6, r7, lr}
  400d0a:	b085      	sub	sp, #20
	return (((Mcan *)hw)->MCAN_RXF0S & MCAN_RXF0S_F0GI_Msk) >> MCAN_RXF0S_F0GI_Pos;
  400d0c:	f8d3 60a4 	ldr.w	r6, [r3, #164]	; 0xa4
  400d10:	f3c6 2605 	ubfx	r6, r6, #8, #6
	if (dev->hw == MCAN0) {
  400d14:	4a26      	ldr	r2, [pc, #152]	; (400db0 <_can_async_read+0xb4>)
  400d16:	4293      	cmp	r3, r2
  400d18:	d032      	beq.n	400d80 <_can_async_read+0x84>
	struct _can_rx_fifo_entry *f = NULL;
  400d1a:	2400      	movs	r4, #0
	if (dev->hw == MCAN1) {
  400d1c:	4a25      	ldr	r2, [pc, #148]	; (400db4 <_can_async_read+0xb8>)
  400d1e:	4293      	cmp	r3, r2
  400d20:	d032      	beq.n	400d88 <_can_async_read+0x8c>
	if (f == NULL) {
  400d22:	2c00      	cmp	r4, #0
  400d24:	d041      	beq.n	400daa <_can_async_read+0xae>
	if (f->R0.bit.XTD == 1) {
  400d26:	6823      	ldr	r3, [r4, #0]
  400d28:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400d2c:	d130      	bne.n	400d90 <_can_async_read+0x94>
		msg->fmt = CAN_FMT_STDID;
  400d2e:	2300      	movs	r3, #0
  400d30:	734b      	strb	r3, [r1, #13]
		msg->id = f->R0.bit.ID >> 18;
  400d32:	6823      	ldr	r3, [r4, #0]
  400d34:	f3c3 438a 	ubfx	r3, r3, #18, #11
  400d38:	600b      	str	r3, [r1, #0]
	if (f->R0.bit.RTR == 1) {
  400d3a:	6823      	ldr	r3, [r4, #0]
  400d3c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400d40:	d12d      	bne.n	400d9e <_can_async_read+0xa2>
  400d42:	460d      	mov	r5, r1
  400d44:	4607      	mov	r7, r0
	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
  400d46:	4b1c      	ldr	r3, [pc, #112]	; (400db8 <_can_async_read+0xbc>)
  400d48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400d4a:	f10d 0e10 	add.w	lr, sp, #16
  400d4e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
  400d52:	6863      	ldr	r3, [r4, #4]
  400d54:	f3c3 4303 	ubfx	r3, r3, #16, #4
  400d58:	4473      	add	r3, lr
  400d5a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
  400d5e:	732a      	strb	r2, [r5, #12]
	memcpy(msg->data, f->data, msg->len);
  400d60:	f104 0108 	add.w	r1, r4, #8
  400d64:	68a8      	ldr	r0, [r5, #8]
  400d66:	4b15      	ldr	r3, [pc, #84]	; (400dbc <_can_async_read+0xc0>)
  400d68:	4798      	blx	r3
	hri_mcan_write_RXF0A_F0AI_bf(dev->hw, get_index);
  400d6a:	683a      	ldr	r2, [r7, #0]
	tmp = ((Mcan *)hw)->MCAN_RXF0A;
  400d6c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	tmp &= ~MCAN_RXF0A_F0AI_Msk;
  400d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	tmp |= MCAN_RXF0A_F0AI(data);
  400d74:	431e      	orrs	r6, r3
	((Mcan *)hw)->MCAN_RXF0A = tmp;
  400d76:	f8c2 60a8 	str.w	r6, [r2, #168]	; 0xa8
	return ERR_NONE;
  400d7a:	2000      	movs	r0, #0
}
  400d7c:	b005      	add	sp, #20
  400d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
  400d80:	4c0f      	ldr	r4, [pc, #60]	; (400dc0 <_can_async_read+0xc4>)
  400d82:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  400d86:	e7c9      	b.n	400d1c <_can_async_read+0x20>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
  400d88:	4c0e      	ldr	r4, [pc, #56]	; (400dc4 <_can_async_read+0xc8>)
  400d8a:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  400d8e:	e7c8      	b.n	400d22 <_can_async_read+0x26>
		msg->fmt = CAN_FMT_EXTID;
  400d90:	2301      	movs	r3, #1
  400d92:	734b      	strb	r3, [r1, #13]
		msg->id  = f->R0.bit.ID;
  400d94:	6823      	ldr	r3, [r4, #0]
  400d96:	f3c3 031c 	ubfx	r3, r3, #0, #29
  400d9a:	600b      	str	r3, [r1, #0]
  400d9c:	e7cd      	b.n	400d3a <_can_async_read+0x3e>
		msg->type = CAN_TYPE_REMOTE;
  400d9e:	2301      	movs	r3, #1
  400da0:	710b      	strb	r3, [r1, #4]
  400da2:	e7ce      	b.n	400d42 <_can_async_read+0x46>
		return ERR_NOT_FOUND;
  400da4:	f06f 0009 	mvn.w	r0, #9
  400da8:	4770      	bx	lr
		return ERR_NO_RESOURCE;
  400daa:	f06f 001b 	mvn.w	r0, #27
  400dae:	e7e5      	b.n	400d7c <_can_async_read+0x80>
  400db0:	40030000 	.word	0x40030000
  400db4:	40034000 	.word	0x40034000
  400db8:	0040299c 	.word	0x0040299c
  400dbc:	00401821 	.word	0x00401821
  400dc0:	204001e0 	.word	0x204001e0
  400dc4:	204002a0 	.word	0x204002a0

00400dc8 <_can_async_write>:
{
  400dc8:	b538      	push	{r3, r4, r5, lr}
	if (hri_mcan_get_TXFQS_TFQF_bit(dev->hw)) {
  400dca:	6802      	ldr	r2, [r0, #0]
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQF) > 0;
  400dcc:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
  400dd0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400dd4:	f040 8082 	bne.w	400edc <_can_async_write+0x114>
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQPI_Msk) >> MCAN_TXFQS_TFQPI_Pos;
  400dd8:	f8d2 50c4 	ldr.w	r5, [r2, #196]	; 0xc4
  400ddc:	f3c5 4504 	ubfx	r5, r5, #16, #5
	if (dev->hw == MCAN0) {
  400de0:	4b41      	ldr	r3, [pc, #260]	; (400ee8 <_can_async_write+0x120>)
  400de2:	429a      	cmp	r2, r3
  400de4:	d034      	beq.n	400e50 <_can_async_write+0x88>
	struct _can_tx_fifo_entry *f = NULL;
  400de6:	2300      	movs	r3, #0
	if (dev->hw == MCAN1) {
  400de8:	4c40      	ldr	r4, [pc, #256]	; (400eec <_can_async_write+0x124>)
  400dea:	42a2      	cmp	r2, r4
  400dec:	d034      	beq.n	400e58 <_can_async_write+0x90>
	if (f == NULL) {
  400dee:	2b00      	cmp	r3, #0
  400df0:	d077      	beq.n	400ee2 <_can_async_write+0x11a>
	if (msg->fmt == CAN_FMT_EXTID) {
  400df2:	7b4a      	ldrb	r2, [r1, #13]
  400df4:	2a01      	cmp	r2, #1
  400df6:	d033      	beq.n	400e60 <_can_async_write+0x98>
		f->T0.val = msg->id << 18;
  400df8:	680a      	ldr	r2, [r1, #0]
  400dfa:	0492      	lsls	r2, r2, #18
  400dfc:	601a      	str	r2, [r3, #0]
	if (msg->len <= 8) {
  400dfe:	7b0a      	ldrb	r2, [r1, #12]
  400e00:	2a08      	cmp	r2, #8
  400e02:	d834      	bhi.n	400e6e <_can_async_write+0xa6>
		f->T1.bit.DLC = msg->len;
  400e04:	685c      	ldr	r4, [r3, #4]
  400e06:	f362 4413 	bfi	r4, r2, #16, #4
  400e0a:	605c      	str	r4, [r3, #4]
  400e0c:	4604      	mov	r4, r0
	f->T1.bit.FDF = hri_mcan_get_CCCR_FDOE_bit(dev->hw);
  400e0e:	6802      	ldr	r2, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400e10:	6992      	ldr	r2, [r2, #24]
	tmp = (tmp & MCAN_CCCR_FDOE) >> MCAN_CCCR_FDOE_Pos;
  400e12:	f3c2 2200 	ubfx	r2, r2, #8, #1
  400e16:	6858      	ldr	r0, [r3, #4]
  400e18:	f362 5055 	bfi	r0, r2, #21, #1
  400e1c:	6058      	str	r0, [r3, #4]
	f->T1.bit.BRS = hri_mcan_get_CCCR_BRSE_bit(dev->hw);
  400e1e:	6822      	ldr	r2, [r4, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400e20:	6992      	ldr	r2, [r2, #24]
	tmp = (tmp & MCAN_CCCR_BRSE) >> MCAN_CCCR_BRSE_Pos;
  400e22:	f3c2 2240 	ubfx	r2, r2, #9, #1
  400e26:	6858      	ldr	r0, [r3, #4]
  400e28:	f362 5014 	bfi	r0, r2, #20, #1
  400e2c:	6058      	str	r0, [r3, #4]
	memcpy(f->data, msg->data, msg->len);
  400e2e:	7b0a      	ldrb	r2, [r1, #12]
  400e30:	6889      	ldr	r1, [r1, #8]
  400e32:	f103 0008 	add.w	r0, r3, #8
  400e36:	4b2e      	ldr	r3, [pc, #184]	; (400ef0 <_can_async_write+0x128>)
  400e38:	4798      	blx	r3
	hri_mcan_write_TXBAR_reg(dev->hw, 1 << hri_mcan_read_TXFQS_TFQPI_bf(dev->hw));
  400e3a:	6821      	ldr	r1, [r4, #0]
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQPI_Msk) >> MCAN_TXFQS_TFQPI_Pos;
  400e3c:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
  400e40:	f3c2 4204 	ubfx	r2, r2, #16, #5
  400e44:	2301      	movs	r3, #1
  400e46:	4093      	lsls	r3, r2
	((Mcan *)hw)->MCAN_TXBAR = data;
  400e48:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
	return ERR_NONE;
  400e4c:	2000      	movs	r0, #0
  400e4e:	bd38      	pop	{r3, r4, r5, pc}
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
  400e50:	4b28      	ldr	r3, [pc, #160]	; (400ef4 <_can_async_write+0x12c>)
  400e52:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400e56:	e7c7      	b.n	400de8 <_can_async_write+0x20>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
  400e58:	4b27      	ldr	r3, [pc, #156]	; (400ef8 <_can_async_write+0x130>)
  400e5a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400e5e:	e7c6      	b.n	400dee <_can_async_write+0x26>
		f->T0.val     = msg->id;
  400e60:	680a      	ldr	r2, [r1, #0]
  400e62:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
  400e64:	681a      	ldr	r2, [r3, #0]
  400e66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400e6a:	601a      	str	r2, [r3, #0]
  400e6c:	e7c7      	b.n	400dfe <_can_async_write+0x36>
	} else if (msg->len <= 12) {
  400e6e:	2a0c      	cmp	r2, #12
  400e70:	d805      	bhi.n	400e7e <_can_async_write+0xb6>
		f->T1.bit.DLC = 0x9;
  400e72:	685a      	ldr	r2, [r3, #4]
  400e74:	2409      	movs	r4, #9
  400e76:	f364 4213 	bfi	r2, r4, #16, #4
  400e7a:	605a      	str	r2, [r3, #4]
  400e7c:	e7c6      	b.n	400e0c <_can_async_write+0x44>
	} else if (msg->len <= 16) {
  400e7e:	2a10      	cmp	r2, #16
  400e80:	d805      	bhi.n	400e8e <_can_async_write+0xc6>
		f->T1.bit.DLC = 0xA;
  400e82:	685a      	ldr	r2, [r3, #4]
  400e84:	240a      	movs	r4, #10
  400e86:	f364 4213 	bfi	r2, r4, #16, #4
  400e8a:	605a      	str	r2, [r3, #4]
  400e8c:	e7be      	b.n	400e0c <_can_async_write+0x44>
	} else if (msg->len <= 20) {
  400e8e:	2a14      	cmp	r2, #20
  400e90:	d805      	bhi.n	400e9e <_can_async_write+0xd6>
		f->T1.bit.DLC = 0xB;
  400e92:	685a      	ldr	r2, [r3, #4]
  400e94:	240b      	movs	r4, #11
  400e96:	f364 4213 	bfi	r2, r4, #16, #4
  400e9a:	605a      	str	r2, [r3, #4]
  400e9c:	e7b6      	b.n	400e0c <_can_async_write+0x44>
	} else if (msg->len <= 24) {
  400e9e:	2a18      	cmp	r2, #24
  400ea0:	d805      	bhi.n	400eae <_can_async_write+0xe6>
		f->T1.bit.DLC = 0xC;
  400ea2:	685a      	ldr	r2, [r3, #4]
  400ea4:	240c      	movs	r4, #12
  400ea6:	f364 4213 	bfi	r2, r4, #16, #4
  400eaa:	605a      	str	r2, [r3, #4]
  400eac:	e7ae      	b.n	400e0c <_can_async_write+0x44>
	} else if (msg->len <= 32) {
  400eae:	2a20      	cmp	r2, #32
  400eb0:	d805      	bhi.n	400ebe <_can_async_write+0xf6>
		f->T1.bit.DLC = 0xD;
  400eb2:	685a      	ldr	r2, [r3, #4]
  400eb4:	240d      	movs	r4, #13
  400eb6:	f364 4213 	bfi	r2, r4, #16, #4
  400eba:	605a      	str	r2, [r3, #4]
  400ebc:	e7a6      	b.n	400e0c <_can_async_write+0x44>
	} else if (msg->len <= 48) {
  400ebe:	2a30      	cmp	r2, #48	; 0x30
  400ec0:	d805      	bhi.n	400ece <_can_async_write+0x106>
		f->T1.bit.DLC = 0xE;
  400ec2:	685a      	ldr	r2, [r3, #4]
  400ec4:	240e      	movs	r4, #14
  400ec6:	f364 4213 	bfi	r2, r4, #16, #4
  400eca:	605a      	str	r2, [r3, #4]
  400ecc:	e79e      	b.n	400e0c <_can_async_write+0x44>
	} else if (msg->len <= 64) {
  400ece:	2a40      	cmp	r2, #64	; 0x40
  400ed0:	d89c      	bhi.n	400e0c <_can_async_write+0x44>
		f->T1.bit.DLC = 0xF;
  400ed2:	685a      	ldr	r2, [r3, #4]
  400ed4:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
  400ed8:	605a      	str	r2, [r3, #4]
  400eda:	e797      	b.n	400e0c <_can_async_write+0x44>
		return ERR_NO_RESOURCE;
  400edc:	f06f 001b 	mvn.w	r0, #27
  400ee0:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NO_RESOURCE;
  400ee2:	f06f 001b 	mvn.w	r0, #27
}
  400ee6:	bd38      	pop	{r3, r4, r5, pc}
  400ee8:	40030000 	.word	0x40030000
  400eec:	40034000 	.word	0x40034000
  400ef0:	00401821 	.word	0x00401821
  400ef4:	20400300 	.word	0x20400300
  400ef8:	20400240 	.word	0x20400240

00400efc <_can_async_set_irq_state>:
	if (type == CAN_ASYNC_RX_CB) {
  400efc:	b121      	cbz	r1, 400f08 <_can_async_set_irq_state+0xc>
	} else if (type == CAN_ASYNC_TX_CB) {
  400efe:	2901      	cmp	r1, #1
  400f00:	d009      	beq.n	400f16 <_can_async_set_irq_state+0x1a>
	} else if (type == CAN_ASYNC_IRQ_CB) {
  400f02:	2902      	cmp	r1, #2
  400f04:	d014      	beq.n	400f30 <_can_async_set_irq_state+0x34>
  400f06:	4770      	bx	lr
		hri_mcan_write_IE_RF0NE_bit(dev->hw, state);
  400f08:	6801      	ldr	r1, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400f0a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~MCAN_IE_RF0NE;
  400f0c:	f023 0301 	bic.w	r3, r3, #1
	tmp |= value << MCAN_IE_RF0NE_Pos;
  400f10:	431a      	orrs	r2, r3
	((Mcan *)hw)->MCAN_IE = tmp;
  400f12:	654a      	str	r2, [r1, #84]	; 0x54
  400f14:	4770      	bx	lr
		hri_mcan_write_IE_TCE_bit(dev->hw, state);
  400f16:	6801      	ldr	r1, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400f18:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~MCAN_IE_TCE;
  400f1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmp |= value << MCAN_IE_TCE_Pos;
  400f1e:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
	((Mcan *)hw)->MCAN_IE = tmp;
  400f22:	654a      	str	r2, [r1, #84]	; 0x54
		hri_mcan_write_TXBTIE_reg(dev->hw, MCAN_TXBTIE_MASK);
  400f24:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TXBTIE = data;
  400f26:	f04f 32ff 	mov.w	r2, #4294967295
  400f2a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  400f2e:	4770      	bx	lr
		ie = hri_mcan_get_IE_reg(dev->hw, MCAN_IE_RF0NE | MCAN_IE_TCE);
  400f30:	6802      	ldr	r2, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400f32:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
  400f34:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
  400f38:	059b      	lsls	r3, r3, #22
  400f3a:	0d9b      	lsrs	r3, r3, #22
	((Mcan *)hw)->MCAN_IE = data;
  400f3c:	6553      	str	r3, [r2, #84]	; 0x54
	return;
  400f3e:	e7e2      	b.n	400f06 <_can_async_set_irq_state+0xa>

00400f40 <_can_async_set_filter>:
{
  400f40:	b470      	push	{r4, r5, r6}
	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
  400f42:	6984      	ldr	r4, [r0, #24]
  400f44:	68e0      	ldr	r0, [r4, #12]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
  400f46:	6924      	ldr	r4, [r4, #16]
  400f48:	eb04 05c1 	add.w	r5, r4, r1, lsl #3
	if (fmt == CAN_FMT_STDID) {
  400f4c:	b9f2      	cbnz	r2, 400f8c <_can_async_set_filter+0x4c>
		if (filter == NULL) {
  400f4e:	b1d3      	cbz	r3, 400f86 <_can_async_set_filter+0x46>
		sf->S0.val       = filter->mask;
  400f50:	685a      	ldr	r2, [r3, #4]
  400f52:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		sf->S0.bit.SFID1 = filter->id;
  400f56:	681a      	ldr	r2, [r3, #0]
  400f58:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400f5c:	f362 431a 	bfi	r3, r2, #16, #11
  400f60:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
  400f64:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400f68:	2202      	movs	r2, #2
  400f6a:	f362 739f 	bfi	r3, r2, #30, #2
  400f6e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
  400f72:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400f76:	2201      	movs	r2, #1
  400f78:	f362 63dd 	bfi	r3, r2, #27, #3
  400f7c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
  400f80:	2000      	movs	r0, #0
  400f82:	bc70      	pop	{r4, r5, r6}
  400f84:	4770      	bx	lr
			sf->S0.val = 0;
  400f86:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
			return ERR_NONE;
  400f8a:	e7f9      	b.n	400f80 <_can_async_set_filter+0x40>
	} else if (fmt == CAN_FMT_EXTID) {
  400f8c:	2a01      	cmp	r2, #1
  400f8e:	d1f7      	bne.n	400f80 <_can_async_set_filter+0x40>
		if (filter == NULL) {
  400f90:	b18b      	cbz	r3, 400fb6 <_can_async_set_filter+0x76>
		ef->F0.val      = filter->id;
  400f92:	681a      	ldr	r2, [r3, #0]
  400f94:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
  400f98:	f854 2031 	ldr.w	r2, [r4, r1, lsl #3]
  400f9c:	2001      	movs	r0, #1
  400f9e:	f360 725f 	bfi	r2, r0, #29, #3
  400fa2:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
		ef->F1.val      = filter->mask;
  400fa6:	685b      	ldr	r3, [r3, #4]
  400fa8:	606b      	str	r3, [r5, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
  400faa:	686b      	ldr	r3, [r5, #4]
  400fac:	2202      	movs	r2, #2
  400fae:	f362 739f 	bfi	r3, r2, #30, #2
  400fb2:	606b      	str	r3, [r5, #4]
  400fb4:	e7e4      	b.n	400f80 <_can_async_set_filter+0x40>
			ef->F0.val = 0;
  400fb6:	f844 3031 	str.w	r3, [r4, r1, lsl #3]
			return ERR_NONE;
  400fba:	e7e1      	b.n	400f80 <_can_async_set_filter+0x40>

00400fbc <MCAN0_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN0_INT0_Handler(void)
{
  400fbc:	b508      	push	{r3, lr}
	_can_irq_handler(_can0_dev);
  400fbe:	4b02      	ldr	r3, [pc, #8]	; (400fc8 <MCAN0_INT0_Handler+0xc>)
  400fc0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  400fc2:	4b02      	ldr	r3, [pc, #8]	; (400fcc <MCAN0_INT0_Handler+0x10>)
  400fc4:	4798      	blx	r3
  400fc6:	bd08      	pop	{r3, pc}
  400fc8:	204000d4 	.word	0x204000d4
  400fcc:	00400aa5 	.word	0x00400aa5

00400fd0 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  400fd0:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  400fd2:	4b02      	ldr	r3, [pc, #8]	; (400fdc <MCAN1_INT0_Handler+0xc>)
  400fd4:	6d58      	ldr	r0, [r3, #84]	; 0x54
  400fd6:	4b02      	ldr	r3, [pc, #8]	; (400fe0 <MCAN1_INT0_Handler+0x10>)
  400fd8:	4798      	blx	r3
  400fda:	bd08      	pop	{r3, pc}
  400fdc:	204000d4 	.word	0x204000d4
  400fe0:	00400aa5 	.word	0x00400aa5

00400fe4 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400fe4:	490e      	ldr	r1, [pc, #56]	; (401020 <_pmc_init_sources+0x3c>)
  400fe6:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400fe8:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400fec:	4b0d      	ldr	r3, [pc, #52]	; (401024 <_pmc_init_sources+0x40>)
  400fee:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400ff0:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400ff2:	4b0b      	ldr	r3, [pc, #44]	; (401020 <_pmc_init_sources+0x3c>)
  400ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400ff6:	f013 0f01 	tst.w	r3, #1
  400ffa:	d0fa      	beq.n	400ff2 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400ffc:	4b08      	ldr	r3, [pc, #32]	; (401020 <_pmc_init_sources+0x3c>)
  400ffe:	6a19      	ldr	r1, [r3, #32]
  401000:	4a09      	ldr	r2, [pc, #36]	; (401028 <_pmc_init_sources+0x44>)
  401002:	430a      	orrs	r2, r1
  401004:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  401006:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401008:	4a08      	ldr	r2, [pc, #32]	; (40102c <_pmc_init_sources+0x48>)
  40100a:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  40100c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40100e:	4a08      	ldr	r2, [pc, #32]	; (401030 <_pmc_init_sources+0x4c>)
  401010:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401012:	4b03      	ldr	r3, [pc, #12]	; (401020 <_pmc_init_sources+0x3c>)
  401014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  401016:	f013 0f02 	tst.w	r3, #2
  40101a:	d0fa      	beq.n	401012 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  40101c:	4770      	bx	lr
  40101e:	bf00      	nop
  401020:	400e0600 	.word	0x400e0600
  401024:	00373e01 	.word	0x00373e01
  401028:	01370000 	.word	0x01370000
  40102c:	f800ffff 	.word	0xf800ffff
  401030:	20183f01 	.word	0x20183f01

00401034 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401034:	4a11      	ldr	r2, [pc, #68]	; (40107c <_pmc_init_master_clock+0x48>)
  401036:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  40103c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40103e:	4b0f      	ldr	r3, [pc, #60]	; (40107c <_pmc_init_master_clock+0x48>)
  401040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401042:	f013 0f08 	tst.w	r3, #8
  401046:	d0fa      	beq.n	40103e <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401048:	4a0c      	ldr	r2, [pc, #48]	; (40107c <_pmc_init_master_clock+0x48>)
  40104a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  40104c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401054:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401056:	4b09      	ldr	r3, [pc, #36]	; (40107c <_pmc_init_master_clock+0x48>)
  401058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40105a:	f013 0f08 	tst.w	r3, #8
  40105e:	d0fa      	beq.n	401056 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401060:	4a06      	ldr	r2, [pc, #24]	; (40107c <_pmc_init_master_clock+0x48>)
  401062:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401064:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401068:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  40106c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40106e:	4b03      	ldr	r3, [pc, #12]	; (40107c <_pmc_init_master_clock+0x48>)
  401070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401072:	f013 0f08 	tst.w	r3, #8
  401076:	d0fa      	beq.n	40106e <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401078:	4770      	bx	lr
  40107a:	bf00      	nop
  40107c:	400e0600 	.word	0x400e0600

00401080 <_pmc_init_program_clock>:
}

static inline void hri_pmc_write_PCK_reg(const void *const hw, uint8_t index, hri_pmc_pck_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->PMC_PCK[index] = data;
  401080:	2201      	movs	r2, #1
  401082:	4b06      	ldr	r3, [pc, #24]	; (40109c <_pmc_init_program_clock+0x1c>)
  401084:	655a      	str	r2, [r3, #84]	; 0x54
	return (((Pmc *)hw)->PMC_SR & PMC_SR_PCKRDY5) > 0;
  401086:	4b05      	ldr	r3, [pc, #20]	; (40109c <_pmc_init_program_clock+0x1c>)
  401088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK4);
#endif

#if (CONF_CLK_PCK5_ENABLE == 1)
	hri_pmc_write_PCK_reg(PMC, 5, PMC_PCK_CSS(CONF_CLK_GEN_PCK5_SRC) | PMC_PCK_PRES(CONF_PCK5_PRESC - 1));
	while (!hri_pmc_get_SR_PCKRDY5_bit(PMC)) {
  40108a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40108e:	d0fa      	beq.n	401086 <_pmc_init_program_clock+0x6>
	((Pmc *)hw)->PMC_SCER = data;
  401090:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401094:	4b01      	ldr	r3, [pc, #4]	; (40109c <_pmc_init_program_clock+0x1c>)
  401096:	601a      	str	r2, [r3, #0]
  401098:	4770      	bx	lr
  40109a:	bf00      	nop
  40109c:	400e0600 	.word	0x400e0600

004010a0 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4010a0:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4010a2:	4b03      	ldr	r3, [pc, #12]	; (4010b0 <_pmc_init+0x10>)
  4010a4:	4798      	blx	r3
	_pmc_init_master_clock();
  4010a6:	4b03      	ldr	r3, [pc, #12]	; (4010b4 <_pmc_init+0x14>)
  4010a8:	4798      	blx	r3
	_pmc_init_program_clock();
  4010aa:	4b03      	ldr	r3, [pc, #12]	; (4010b8 <_pmc_init+0x18>)
  4010ac:	4798      	blx	r3
  4010ae:	bd08      	pop	{r3, pc}
  4010b0:	00400fe5 	.word	0x00400fe5
  4010b4:	00401035 	.word	0x00401035
  4010b8:	00401081 	.word	0x00401081

004010bc <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4010bc:	2300      	movs	r3, #0
  4010be:	b13b      	cbz	r3, 4010d0 <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  4010c0:	2000      	movs	r0, #0
  4010c2:	4770      	bx	lr
			return &(_tcs[i]);
  4010c4:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  4010c8:	00a3      	lsls	r3, r4, #2
  4010ca:	4608      	mov	r0, r1
  4010cc:	4418      	add	r0, r3
  4010ce:	e00c      	b.n	4010ea <get_cfg+0x2e>
{
  4010d0:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  4010d2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4010d6:	008a      	lsls	r2, r1, #2
  4010d8:	4905      	ldr	r1, [pc, #20]	; (4010f0 <get_cfg+0x34>)
  4010da:	588a      	ldr	r2, [r1, r2]
  4010dc:	4282      	cmp	r2, r0
  4010de:	d0f1      	beq.n	4010c4 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4010e0:	3301      	adds	r3, #1
  4010e2:	b2db      	uxtb	r3, r3
  4010e4:	2b00      	cmp	r3, #0
  4010e6:	d0f4      	beq.n	4010d2 <get_cfg+0x16>
	return NULL;
  4010e8:	2000      	movs	r0, #0
}
  4010ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010ee:	4770      	bx	lr
  4010f0:	20400028 	.word	0x20400028

004010f4 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  4010f4:	4b03      	ldr	r3, [pc, #12]	; (401104 <_tc_init_irq_param+0x10>)
  4010f6:	4298      	cmp	r0, r3
  4010f8:	d000      	beq.n	4010fc <_tc_init_irq_param+0x8>
  4010fa:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  4010fc:	4b02      	ldr	r3, [pc, #8]	; (401108 <_tc_init_irq_param+0x14>)
  4010fe:	6019      	str	r1, [r3, #0]
	}
}
  401100:	e7fb      	b.n	4010fa <_tc_init_irq_param+0x6>
  401102:	bf00      	nop
  401104:	4000c000 	.word	0x4000c000
  401108:	2040012c 	.word	0x2040012c

0040110c <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  40110c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  40110e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  401110:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  401112:	f013 0f10 	tst.w	r3, #16
  401116:	d100      	bne.n	40111a <tc_interrupt_handler+0xe>
  401118:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  40111a:	6803      	ldr	r3, [r0, #0]
  40111c:	4798      	blx	r3
	}
}
  40111e:	e7fb      	b.n	401118 <tc_interrupt_handler+0xc>

00401120 <_timer_init>:
{
  401120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401122:	4607      	mov	r7, r0
  401124:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  401126:	4608      	mov	r0, r1
  401128:	4b27      	ldr	r3, [pc, #156]	; (4011c8 <_timer_init+0xa8>)
  40112a:	4798      	blx	r3
  40112c:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  40112e:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  401130:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  401132:	2291      	movs	r2, #145	; 0x91
  401134:	4925      	ldr	r1, [pc, #148]	; (4011cc <_timer_init+0xac>)
  401136:	2001      	movs	r0, #1
  401138:	4b25      	ldr	r3, [pc, #148]	; (4011d0 <_timer_init+0xb0>)
  40113a:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  40113c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  401140:	d001      	beq.n	401146 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  401142:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401146:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  401148:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  40114a:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  40114c:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  40114e:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  401150:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401152:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  401154:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401156:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401158:	2310      	movs	r3, #16
  40115a:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  40115c:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  40115e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  401162:	4639      	mov	r1, r7
  401164:	4620      	mov	r0, r4
  401166:	4b1b      	ldr	r3, [pc, #108]	; (4011d4 <_timer_init+0xb4>)
  401168:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  40116a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40116e:	2b00      	cmp	r3, #0
  401170:	db0d      	blt.n	40118e <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401172:	095a      	lsrs	r2, r3, #5
  401174:	f003 031f 	and.w	r3, r3, #31
  401178:	2101      	movs	r1, #1
  40117a:	fa01 f303 	lsl.w	r3, r1, r3
  40117e:	3220      	adds	r2, #32
  401180:	4915      	ldr	r1, [pc, #84]	; (4011d8 <_timer_init+0xb8>)
  401182:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401186:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40118a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40118e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401192:	2b00      	cmp	r3, #0
  401194:	db09      	blt.n	4011aa <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401196:	095a      	lsrs	r2, r3, #5
  401198:	f003 031f 	and.w	r3, r3, #31
  40119c:	2101      	movs	r1, #1
  40119e:	fa01 f303 	lsl.w	r3, r1, r3
  4011a2:	3260      	adds	r2, #96	; 0x60
  4011a4:	490c      	ldr	r1, [pc, #48]	; (4011d8 <_timer_init+0xb8>)
  4011a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4011aa:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4011ae:	2b00      	cmp	r3, #0
  4011b0:	db08      	blt.n	4011c4 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4011b2:	0959      	lsrs	r1, r3, #5
  4011b4:	f003 031f 	and.w	r3, r3, #31
  4011b8:	2201      	movs	r2, #1
  4011ba:	fa02 f303 	lsl.w	r3, r2, r3
  4011be:	4a06      	ldr	r2, [pc, #24]	; (4011d8 <_timer_init+0xb8>)
  4011c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  4011c4:	2000      	movs	r0, #0
  4011c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011c8:	004010bd 	.word	0x004010bd
  4011cc:	004029ac 	.word	0x004029ac
  4011d0:	0040097d 	.word	0x0040097d
  4011d4:	004010f5 	.word	0x004010f5
  4011d8:	e000e100 	.word	0xe000e100

004011dc <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  4011dc:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  4011de:	2205      	movs	r2, #5
  4011e0:	601a      	str	r2, [r3, #0]
  4011e2:	4770      	bx	lr

004011e4 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  4011e4:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  4011e6:	6a18      	ldr	r0, [r3, #32]
}
  4011e8:	f3c0 4000 	ubfx	r0, r0, #16, #1
  4011ec:	4770      	bx	lr
	...

004011f0 <_timer_set_irq>:
{
  4011f0:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  4011f2:	68c0      	ldr	r0, [r0, #12]
  4011f4:	4b02      	ldr	r3, [pc, #8]	; (401200 <_timer_set_irq+0x10>)
  4011f6:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  4011f8:	7900      	ldrb	r0, [r0, #4]
  4011fa:	4b02      	ldr	r3, [pc, #8]	; (401204 <_timer_set_irq+0x14>)
  4011fc:	4798      	blx	r3
  4011fe:	bd08      	pop	{r3, pc}
  401200:	004010bd 	.word	0x004010bd
  401204:	00400a19 	.word	0x00400a19

00401208 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  401208:	2000      	movs	r0, #0
  40120a:	4770      	bx	lr

0040120c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  40120c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  40120e:	4b02      	ldr	r3, [pc, #8]	; (401218 <TC0_Handler+0xc>)
  401210:	6818      	ldr	r0, [r3, #0]
  401212:	4b02      	ldr	r3, [pc, #8]	; (40121c <TC0_Handler+0x10>)
  401214:	4798      	blx	r3
  401216:	bd08      	pop	{r3, pc}
  401218:	2040012c 	.word	0x2040012c
  40121c:	0040110d 	.word	0x0040110d

00401220 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401220:	b510      	push	{r4, lr}
	ASSERT(hw);
  401222:	4604      	mov	r4, r0
  401224:	f240 222b 	movw	r2, #555	; 0x22b
  401228:	4905      	ldr	r1, [pc, #20]	; (401240 <_usart_get_hardware_index+0x20>)
  40122a:	3000      	adds	r0, #0
  40122c:	bf18      	it	ne
  40122e:	2001      	movne	r0, #1
  401230:	4b04      	ldr	r3, [pc, #16]	; (401244 <_usart_get_hardware_index+0x24>)
  401232:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401234:	4804      	ldr	r0, [pc, #16]	; (401248 <_usart_get_hardware_index+0x28>)
  401236:	4420      	add	r0, r4
}
  401238:	f3c0 3087 	ubfx	r0, r0, #14, #8
  40123c:	bd10      	pop	{r4, pc}
  40123e:	bf00      	nop
  401240:	004029cc 	.word	0x004029cc
  401244:	0040097d 	.word	0x0040097d
  401248:	bffdc000 	.word	0xbffdc000

0040124c <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  40124c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40124e:	4604      	mov	r4, r0
  401250:	f240 2287 	movw	r2, #647	; 0x287
  401254:	490e      	ldr	r1, [pc, #56]	; (401290 <_get_usart_index+0x44>)
  401256:	3000      	adds	r0, #0
  401258:	bf18      	it	ne
  40125a:	2001      	movne	r0, #1
  40125c:	4b0d      	ldr	r3, [pc, #52]	; (401294 <_get_usart_index+0x48>)
  40125e:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401260:	4620      	mov	r0, r4
  401262:	4b0d      	ldr	r3, [pc, #52]	; (401298 <_get_usart_index+0x4c>)
  401264:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401266:	2300      	movs	r3, #0
  401268:	b143      	cbz	r3, 40127c <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  40126a:	f240 2291 	movw	r2, #657	; 0x291
  40126e:	4908      	ldr	r1, [pc, #32]	; (401290 <_get_usart_index+0x44>)
  401270:	2000      	movs	r0, #0
  401272:	4b08      	ldr	r3, [pc, #32]	; (401294 <_get_usart_index+0x48>)
  401274:	4798      	blx	r3
	return 0;
  401276:	2300      	movs	r3, #0
}
  401278:	4618      	mov	r0, r3
  40127a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  40127c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401280:	008a      	lsls	r2, r1, #2
  401282:	4906      	ldr	r1, [pc, #24]	; (40129c <_get_usart_index+0x50>)
  401284:	5c8a      	ldrb	r2, [r1, r2]
  401286:	4290      	cmp	r0, r2
  401288:	d0f6      	beq.n	401278 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40128a:	3301      	adds	r3, #1
  40128c:	b2db      	uxtb	r3, r3
  40128e:	e7eb      	b.n	401268 <_get_usart_index+0x1c>
  401290:	004029cc 	.word	0x004029cc
  401294:	0040097d 	.word	0x0040097d
  401298:	00401221 	.word	0x00401221
  40129c:	004029c0 	.word	0x004029c0

004012a0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  4012a0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4012a2:	4604      	mov	r4, r0
  4012a4:	f240 229e 	movw	r2, #670	; 0x29e
  4012a8:	4911      	ldr	r1, [pc, #68]	; (4012f0 <_usart_init+0x50>)
  4012aa:	3000      	adds	r0, #0
  4012ac:	bf18      	it	ne
  4012ae:	2001      	movne	r0, #1
  4012b0:	4b10      	ldr	r3, [pc, #64]	; (4012f4 <_usart_init+0x54>)
  4012b2:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  4012b4:	4620      	mov	r0, r4
  4012b6:	4b10      	ldr	r3, [pc, #64]	; (4012f8 <_usart_init+0x58>)
  4012b8:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  4012ba:	4b10      	ldr	r3, [pc, #64]	; (4012fc <_usart_init+0x5c>)
  4012bc:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  4012c0:	2300      	movs	r3, #0
  4012c2:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  4012c4:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  4012c6:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  4012c8:	22ac      	movs	r2, #172	; 0xac
  4012ca:	6022      	str	r2, [r4, #0]
  4012cc:	f44f 7280 	mov.w	r2, #256	; 0x100
  4012d0:	6022      	str	r2, [r4, #0]
  4012d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4012d6:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  4012d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4012dc:	0081      	lsls	r1, r0, #2
  4012de:	4a08      	ldr	r2, [pc, #32]	; (401300 <_usart_init+0x60>)
  4012e0:	440a      	add	r2, r1
  4012e2:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  4012e4:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  4012e6:	4a07      	ldr	r2, [pc, #28]	; (401304 <_usart_init+0x64>)
  4012e8:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  4012ea:	4618      	mov	r0, r3
  4012ec:	bd10      	pop	{r4, pc}
  4012ee:	bf00      	nop
  4012f0:	004029cc 	.word	0x004029cc
  4012f4:	0040097d 	.word	0x0040097d
  4012f8:	0040124d 	.word	0x0040124d
  4012fc:	55534100 	.word	0x55534100
  401300:	004029c0 	.word	0x004029c0
  401304:	00030051 	.word	0x00030051

00401308 <_usart_sync_init>:
{
  401308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40130a:	460c      	mov	r4, r1
	ASSERT(device);
  40130c:	4e09      	ldr	r6, [pc, #36]	; (401334 <_usart_sync_init+0x2c>)
  40130e:	4607      	mov	r7, r0
  401310:	22bd      	movs	r2, #189	; 0xbd
  401312:	4631      	mov	r1, r6
  401314:	3000      	adds	r0, #0
  401316:	bf18      	it	ne
  401318:	2001      	movne	r0, #1
  40131a:	4d07      	ldr	r5, [pc, #28]	; (401338 <_usart_sync_init+0x30>)
  40131c:	47a8      	blx	r5
	ASSERT(hw);
  40131e:	22be      	movs	r2, #190	; 0xbe
  401320:	4631      	mov	r1, r6
  401322:	1c20      	adds	r0, r4, #0
  401324:	bf18      	it	ne
  401326:	2001      	movne	r0, #1
  401328:	47a8      	blx	r5
	device->hw = hw;
  40132a:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  40132c:	4620      	mov	r0, r4
  40132e:	4b03      	ldr	r3, [pc, #12]	; (40133c <_usart_sync_init+0x34>)
  401330:	4798      	blx	r3
}
  401332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401334:	004029cc 	.word	0x004029cc
  401338:	0040097d 	.word	0x0040097d
  40133c:	004012a1 	.word	0x004012a1

00401340 <_usart_sync_enable>:
{
  401340:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401342:	4e0a      	ldr	r6, [pc, #40]	; (40136c <_usart_sync_enable+0x2c>)
  401344:	4604      	mov	r4, r0
  401346:	f240 1205 	movw	r2, #261	; 0x105
  40134a:	4631      	mov	r1, r6
  40134c:	3000      	adds	r0, #0
  40134e:	bf18      	it	ne
  401350:	2001      	movne	r0, #1
  401352:	4d07      	ldr	r5, [pc, #28]	; (401370 <_usart_sync_enable+0x30>)
  401354:	47a8      	blx	r5
	_usart_enable(device->hw);
  401356:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401358:	f240 22c7 	movw	r2, #711	; 0x2c7
  40135c:	4631      	mov	r1, r6
  40135e:	1c20      	adds	r0, r4, #0
  401360:	bf18      	it	ne
  401362:	2001      	movne	r0, #1
  401364:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  401366:	2350      	movs	r3, #80	; 0x50
  401368:	6023      	str	r3, [r4, #0]
  40136a:	bd70      	pop	{r4, r5, r6, pc}
  40136c:	004029cc 	.word	0x004029cc
  401370:	0040097d 	.word	0x0040097d

00401374 <_usart_sync_write_byte>:
{
  401374:	b538      	push	{r3, r4, r5, lr}
  401376:	460c      	mov	r4, r1
	ASSERT(device);
  401378:	4605      	mov	r5, r0
  40137a:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  40137e:	4904      	ldr	r1, [pc, #16]	; (401390 <_usart_sync_write_byte+0x1c>)
  401380:	3000      	adds	r0, #0
  401382:	bf18      	it	ne
  401384:	2001      	movne	r0, #1
  401386:	4b03      	ldr	r3, [pc, #12]	; (401394 <_usart_sync_write_byte+0x20>)
  401388:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  40138a:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  40138c:	61dc      	str	r4, [r3, #28]
  40138e:	bd38      	pop	{r3, r4, r5, pc}
  401390:	004029cc 	.word	0x004029cc
  401394:	0040097d 	.word	0x0040097d

00401398 <_usart_sync_read_byte>:
{
  401398:	b510      	push	{r4, lr}
	ASSERT(device);
  40139a:	4604      	mov	r4, r0
  40139c:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  4013a0:	4904      	ldr	r1, [pc, #16]	; (4013b4 <_usart_sync_read_byte+0x1c>)
  4013a2:	3000      	adds	r0, #0
  4013a4:	bf18      	it	ne
  4013a6:	2001      	movne	r0, #1
  4013a8:	4b03      	ldr	r3, [pc, #12]	; (4013b8 <_usart_sync_read_byte+0x20>)
  4013aa:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  4013ac:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  4013ae:	6998      	ldr	r0, [r3, #24]
}
  4013b0:	b2c0      	uxtb	r0, r0
  4013b2:	bd10      	pop	{r4, pc}
  4013b4:	004029cc 	.word	0x004029cc
  4013b8:	0040097d 	.word	0x0040097d

004013bc <_usart_sync_is_ready_to_send>:
{
  4013bc:	b510      	push	{r4, lr}
	ASSERT(device);
  4013be:	4604      	mov	r4, r0
  4013c0:	f240 12c3 	movw	r2, #451	; 0x1c3
  4013c4:	4905      	ldr	r1, [pc, #20]	; (4013dc <_usart_sync_is_ready_to_send+0x20>)
  4013c6:	3000      	adds	r0, #0
  4013c8:	bf18      	it	ne
  4013ca:	2001      	movne	r0, #1
  4013cc:	4b04      	ldr	r3, [pc, #16]	; (4013e0 <_usart_sync_is_ready_to_send+0x24>)
  4013ce:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  4013d0:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  4013d2:	6958      	ldr	r0, [r3, #20]
}
  4013d4:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4013d8:	bd10      	pop	{r4, pc}
  4013da:	bf00      	nop
  4013dc:	004029cc 	.word	0x004029cc
  4013e0:	0040097d 	.word	0x0040097d

004013e4 <_usart_sync_is_transmit_done>:
{
  4013e4:	b510      	push	{r4, lr}
	ASSERT(device);
  4013e6:	4604      	mov	r4, r0
  4013e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  4013ec:	4905      	ldr	r1, [pc, #20]	; (401404 <_usart_sync_is_transmit_done+0x20>)
  4013ee:	3000      	adds	r0, #0
  4013f0:	bf18      	it	ne
  4013f2:	2001      	movne	r0, #1
  4013f4:	4b04      	ldr	r3, [pc, #16]	; (401408 <_usart_sync_is_transmit_done+0x24>)
  4013f6:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  4013f8:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  4013fa:	6958      	ldr	r0, [r3, #20]
}
  4013fc:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401400:	bd10      	pop	{r4, pc}
  401402:	bf00      	nop
  401404:	004029cc 	.word	0x004029cc
  401408:	0040097d 	.word	0x0040097d

0040140c <_usart_sync_is_byte_received>:
{
  40140c:	b510      	push	{r4, lr}
	ASSERT(device);
  40140e:	4604      	mov	r4, r0
  401410:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401414:	4905      	ldr	r1, [pc, #20]	; (40142c <_usart_sync_is_byte_received+0x20>)
  401416:	3000      	adds	r0, #0
  401418:	bf18      	it	ne
  40141a:	2001      	movne	r0, #1
  40141c:	4b04      	ldr	r3, [pc, #16]	; (401430 <_usart_sync_is_byte_received+0x24>)
  40141e:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  401420:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  401422:	6958      	ldr	r0, [r3, #20]
  401424:	f000 0001 	and.w	r0, r0, #1
}
  401428:	bd10      	pop	{r4, pc}
  40142a:	bf00      	nop
  40142c:	004029cc 	.word	0x004029cc
  401430:	0040097d 	.word	0x0040097d

00401434 <_usart_get_usart_sync>:
}
  401434:	2000      	movs	r0, #0
  401436:	4770      	bx	lr

00401438 <TIMER_0_task1_callback>:
	timer_add_task(&TIMER_0, &TIMER_0_task2);
	timer_start(&TIMER_0);
}

static void TIMER_0_task1_callback(const struct timer_task *const timer_task)
{
  401438:	4770      	bx	lr

0040143a <TIMER_0_task2_callback>:
	}
	*/
}

static void TIMER_0_task2_callback(const struct timer_task *const timer_task)
{
  40143a:	4770      	bx	lr

0040143c <init_can_module>:
		connected devices. */
	memcpy(buffer, data_struct, data_size);
}

void init_can_module()
{		
  40143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	can_async_init(&module_0, MCAN0);
  40143e:	4d11      	ldr	r5, [pc, #68]	; (401484 <init_can_module+0x48>)
  401440:	4911      	ldr	r1, [pc, #68]	; (401488 <init_can_module+0x4c>)
  401442:	4628      	mov	r0, r5
  401444:	4e11      	ldr	r6, [pc, #68]	; (40148c <init_can_module+0x50>)
  401446:	47b0      	blx	r6
	can_async_init(&module_1, MCAN1);
  401448:	4c11      	ldr	r4, [pc, #68]	; (401490 <init_can_module+0x54>)
  40144a:	4912      	ldr	r1, [pc, #72]	; (401494 <init_can_module+0x58>)
  40144c:	4620      	mov	r0, r4
  40144e:	47b0      	blx	r6
	/* Configure modules to use UPLL clock with 
	   480MHz, 6 prescaler meaning 80 MHz */
	//configure_upll();
	 	
 	/* Enable interrupts for  MCAN modules */
	can_async_register_callback(&module_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_RX_CALLBACK);
  401450:	4f11      	ldr	r7, [pc, #68]	; (401498 <init_can_module+0x5c>)
  401452:	463a      	mov	r2, r7
  401454:	2100      	movs	r1, #0
  401456:	4628      	mov	r0, r5
  401458:	4e10      	ldr	r6, [pc, #64]	; (40149c <init_can_module+0x60>)
  40145a:	47b0      	blx	r6
	can_async_register_callback(&module_1, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_RX_CALLBACK);
  40145c:	463a      	mov	r2, r7
  40145e:	2100      	movs	r1, #0
  401460:	4620      	mov	r0, r4
  401462:	47b0      	blx	r6
	
	can_async_register_callback(&module_0, CAN_ASYNC_IRQ_CB, (FUNC_PTR)ERROR_CALLBACK);
  401464:	4f0e      	ldr	r7, [pc, #56]	; (4014a0 <init_can_module+0x64>)
  401466:	463a      	mov	r2, r7
  401468:	2102      	movs	r1, #2
  40146a:	4628      	mov	r0, r5
  40146c:	47b0      	blx	r6
	can_async_register_callback(&module_1, CAN_ASYNC_IRQ_CB, (FUNC_PTR)ERROR_CALLBACK);
  40146e:	463a      	mov	r2, r7
  401470:	2102      	movs	r1, #2
  401472:	4620      	mov	r0, r4
  401474:	47b0      	blx	r6
	
	can_async_enable(&module_0);
  401476:	4628      	mov	r0, r5
  401478:	4d0a      	ldr	r5, [pc, #40]	; (4014a4 <init_can_module+0x68>)
  40147a:	47a8      	blx	r5
	can_async_enable(&module_1);
  40147c:	4620      	mov	r0, r4
  40147e:	47a8      	blx	r5
  401480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401482:	bf00      	nop
  401484:	20400168 	.word	0x20400168
  401488:	40030000 	.word	0x40030000
  40148c:	00400485 	.word	0x00400485
  401490:	2040019c 	.word	0x2040019c
  401494:	40034000 	.word	0x40034000
  401498:	004015f5 	.word	0x004015f5
  40149c:	0040055d 	.word	0x0040055d
  4014a0:	004014a9 	.word	0x004014a9
  4014a4:	004004d5 	.word	0x004004d5

004014a8 <ERROR_CALLBACK>:
	message.id = msg.id;
	message_received(message);
}

void ERROR_CALLBACK(struct can_async_descriptor *const descr)
{
  4014a8:	b508      	push	{r3, lr}
	init_can_module();
  4014aa:	4b03      	ldr	r3, [pc, #12]	; (4014b8 <ERROR_CALLBACK+0x10>)
  4014ac:	4798      	blx	r3
	printf("ERROR");
  4014ae:	4803      	ldr	r0, [pc, #12]	; (4014bc <ERROR_CALLBACK+0x14>)
  4014b0:	4b03      	ldr	r3, [pc, #12]	; (4014c0 <ERROR_CALLBACK+0x18>)
  4014b2:	4798      	blx	r3
  4014b4:	bd08      	pop	{r3, pc}
  4014b6:	bf00      	nop
  4014b8:	0040143d 	.word	0x0040143d
  4014bc:	004029e8 	.word	0x004029e8
  4014c0:	00401849 	.word	0x00401849

004014c4 <checkMessage>:
{	
  4014c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t id = message->id;
  4014c6:	6805      	ldr	r5, [r0, #0]
	uint8_t* data = message->data;
  4014c8:	6843      	ldr	r3, [r0, #4]
	uint8_t dataSize = message->dataSize;
  4014ca:	7a04      	ldrb	r4, [r0, #8]
	if(id && data && dataSize && dataSize <= 64 && id < 0x7FF)
  4014cc:	2d00      	cmp	r5, #0
  4014ce:	bf18      	it	ne
  4014d0:	2b00      	cmpne	r3, #0
  4014d2:	d007      	beq.n	4014e4 <checkMessage+0x20>
  4014d4:	1e62      	subs	r2, r4, #1
  4014d6:	b2d2      	uxtb	r2, r2
  4014d8:	2a3f      	cmp	r2, #63	; 0x3f
  4014da:	d803      	bhi.n	4014e4 <checkMessage+0x20>
  4014dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
  4014e0:	4295      	cmp	r5, r2
  4014e2:	d91d      	bls.n	401520 <checkMessage+0x5c>
		if(!data) LOG_ERROR("Struct is missing data!");
  4014e4:	b13b      	cbz	r3, 4014f6 <checkMessage+0x32>
		if(!dataSize) LOG_ERROR("Struct is missing dataSize!");
  4014e6:	b15c      	cbz	r4, 401500 <checkMessage+0x3c>
		if(dataSize > 64) LOG_ERROR("Data size is too large!");
  4014e8:	2c40      	cmp	r4, #64	; 0x40
  4014ea:	d80e      	bhi.n	40150a <checkMessage+0x46>
		if(id > 0x7FF) LOG_ERROR("ID is too large!");
  4014ec:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  4014f0:	d210      	bcs.n	401514 <checkMessage+0x50>
	return 0;
  4014f2:	2000      	movs	r0, #0
}
  4014f4:	bd38      	pop	{r3, r4, r5, pc}
		if(!data) LOG_ERROR("Struct is missing data!");
  4014f6:	490b      	ldr	r1, [pc, #44]	; (401524 <checkMessage+0x60>)
  4014f8:	480b      	ldr	r0, [pc, #44]	; (401528 <checkMessage+0x64>)
  4014fa:	4b0c      	ldr	r3, [pc, #48]	; (40152c <checkMessage+0x68>)
  4014fc:	4798      	blx	r3
  4014fe:	e7f2      	b.n	4014e6 <checkMessage+0x22>
		if(!dataSize) LOG_ERROR("Struct is missing dataSize!");
  401500:	490b      	ldr	r1, [pc, #44]	; (401530 <checkMessage+0x6c>)
  401502:	4809      	ldr	r0, [pc, #36]	; (401528 <checkMessage+0x64>)
  401504:	4b09      	ldr	r3, [pc, #36]	; (40152c <checkMessage+0x68>)
  401506:	4798      	blx	r3
  401508:	e7ee      	b.n	4014e8 <checkMessage+0x24>
		if(dataSize > 64) LOG_ERROR("Data size is too large!");
  40150a:	490a      	ldr	r1, [pc, #40]	; (401534 <checkMessage+0x70>)
  40150c:	4806      	ldr	r0, [pc, #24]	; (401528 <checkMessage+0x64>)
  40150e:	4b07      	ldr	r3, [pc, #28]	; (40152c <checkMessage+0x68>)
  401510:	4798      	blx	r3
  401512:	e7eb      	b.n	4014ec <checkMessage+0x28>
		if(id > 0x7FF) LOG_ERROR("ID is too large!");
  401514:	4908      	ldr	r1, [pc, #32]	; (401538 <checkMessage+0x74>)
  401516:	4804      	ldr	r0, [pc, #16]	; (401528 <checkMessage+0x64>)
  401518:	4b04      	ldr	r3, [pc, #16]	; (40152c <checkMessage+0x68>)
  40151a:	4798      	blx	r3
	return 0;
  40151c:	2000      	movs	r0, #0
  40151e:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
  401520:	2001      	movs	r0, #1
  401522:	bd38      	pop	{r3, r4, r5, pc}
  401524:	004029f0 	.word	0x004029f0
  401528:	00402a08 	.word	0x00402a08
  40152c:	00401849 	.word	0x00401849
  401530:	00402a20 	.word	0x00402a20
  401534:	00402a3c 	.word	0x00402a3c
  401538:	00402a54 	.word	0x00402a54

0040153c <send_message_module_1>:
{	
  40153c:	b510      	push	{r4, lr}
  40153e:	b084      	sub	sp, #16
  401540:	4604      	mov	r4, r0
	if (checkMessage(message))
  401542:	4b0b      	ldr	r3, [pc, #44]	; (401570 <send_message_module_1+0x34>)
  401544:	4798      	blx	r3
  401546:	b908      	cbnz	r0, 40154c <send_message_module_1+0x10>
}
  401548:	b004      	add	sp, #16
  40154a:	bd10      	pop	{r4, pc}
		msg.id = message->id;
  40154c:	6823      	ldr	r3, [r4, #0]
  40154e:	9300      	str	r3, [sp, #0]
		msg.type = CAN_TYPE_DATA;
  401550:	2300      	movs	r3, #0
  401552:	f88d 3004 	strb.w	r3, [sp, #4]
		msg.data = message->data;
  401556:	6862      	ldr	r2, [r4, #4]
  401558:	9202      	str	r2, [sp, #8]
		msg.len = message->dataSize;
  40155a:	7a22      	ldrb	r2, [r4, #8]
  40155c:	f88d 200c 	strb.w	r2, [sp, #12]
		msg.fmt  = CAN_FMT_STDID;
  401560:	f88d 300d 	strb.w	r3, [sp, #13]
		can_async_write(&module_1, &msg);
  401564:	4669      	mov	r1, sp
  401566:	4803      	ldr	r0, [pc, #12]	; (401574 <send_message_module_1+0x38>)
  401568:	4b03      	ldr	r3, [pc, #12]	; (401578 <send_message_module_1+0x3c>)
  40156a:	4798      	blx	r3
}
  40156c:	e7ec      	b.n	401548 <send_message_module_1+0xc>
  40156e:	bf00      	nop
  401570:	004014c5 	.word	0x004014c5
  401574:	2040019c 	.word	0x2040019c
  401578:	0040052d 	.word	0x0040052d

0040157c <checkIndex>:
	if (index < 64)
  40157c:	283f      	cmp	r0, #63	; 0x3f
  40157e:	d801      	bhi.n	401584 <checkIndex+0x8>
		return 1;
  401580:	2001      	movs	r0, #1
  401582:	4770      	bx	lr
{
  401584:	b508      	push	{r3, lr}
		LOG_ERROR("Index needs to be between 0-63!");
  401586:	4903      	ldr	r1, [pc, #12]	; (401594 <checkIndex+0x18>)
  401588:	4803      	ldr	r0, [pc, #12]	; (401598 <checkIndex+0x1c>)
  40158a:	4b04      	ldr	r3, [pc, #16]	; (40159c <checkIndex+0x20>)
  40158c:	4798      	blx	r3
	return 0;
  40158e:	2000      	movs	r0, #0
  401590:	bd08      	pop	{r3, pc}
  401592:	bf00      	nop
  401594:	00402a68 	.word	0x00402a68
  401598:	00402a08 	.word	0x00402a08
  40159c:	00401849 	.word	0x00401849

004015a0 <add_single_filter_module_1>:
{
  4015a0:	b530      	push	{r4, r5, lr}
  4015a2:	b083      	sub	sp, #12
  4015a4:	4605      	mov	r5, r0
  4015a6:	460c      	mov	r4, r1
	if(checkIndex(index))
  4015a8:	4608      	mov	r0, r1
  4015aa:	4b07      	ldr	r3, [pc, #28]	; (4015c8 <add_single_filter_module_1+0x28>)
  4015ac:	4798      	blx	r3
  4015ae:	b908      	cbnz	r0, 4015b4 <add_single_filter_module_1+0x14>
}
  4015b0:	b003      	add	sp, #12
  4015b2:	bd30      	pop	{r4, r5, pc}
		filter.id = id;
  4015b4:	9500      	str	r5, [sp, #0]
		filter.mask = 0;
  4015b6:	2200      	movs	r2, #0
  4015b8:	9201      	str	r2, [sp, #4]
		can_async_set_filter(&module_1, index, CAN_FMT_STDID, &filter);
  4015ba:	466b      	mov	r3, sp
  4015bc:	4621      	mov	r1, r4
  4015be:	4803      	ldr	r0, [pc, #12]	; (4015cc <add_single_filter_module_1+0x2c>)
  4015c0:	4c03      	ldr	r4, [pc, #12]	; (4015d0 <add_single_filter_module_1+0x30>)
  4015c2:	47a0      	blx	r4
}
  4015c4:	e7f4      	b.n	4015b0 <add_single_filter_module_1+0x10>
  4015c6:	bf00      	nop
  4015c8:	0040157d 	.word	0x0040157d
  4015cc:	2040019c 	.word	0x2040019c
  4015d0:	004005ad 	.word	0x004005ad

004015d4 <message_received>:
void message_received(shift_can_message_t message) {
  4015d4:	b500      	push	{lr}
  4015d6:	b085      	sub	sp, #20
  4015d8:	ab04      	add	r3, sp, #16
  4015da:	e903 0007 	stmdb	r3, {r0, r1, r2}
	 printf("Received data: %d \n", data);
  4015de:	9902      	ldr	r1, [sp, #8]
  4015e0:	4802      	ldr	r0, [pc, #8]	; (4015ec <message_received+0x18>)
  4015e2:	4b03      	ldr	r3, [pc, #12]	; (4015f0 <message_received+0x1c>)
  4015e4:	4798      	blx	r3
}
  4015e6:	b005      	add	sp, #20
  4015e8:	f85d fb04 	ldr.w	pc, [sp], #4
  4015ec:	00402a88 	.word	0x00402a88
  4015f0:	00401849 	.word	0x00401849

004015f4 <CAN_RX_CALLBACK>:
{
  4015f4:	b500      	push	{lr}
  4015f6:	b099      	sub	sp, #100	; 0x64
	msg.data = data;
  4015f8:	ab04      	add	r3, sp, #16
  4015fa:	9316      	str	r3, [sp, #88]	; 0x58
	can_async_read(descr, &msg);
  4015fc:	a914      	add	r1, sp, #80	; 0x50
  4015fe:	4b09      	ldr	r3, [pc, #36]	; (401624 <CAN_RX_CALLBACK+0x30>)
  401600:	4798      	blx	r3
	message.data = msg.data;
  401602:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401604:	9302      	str	r3, [sp, #8]
	message.dataSize = msg.len;
  401606:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
  40160a:	f88d 300c 	strb.w	r3, [sp, #12]
	message.id = msg.id;
  40160e:	ab18      	add	r3, sp, #96	; 0x60
  401610:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401612:	f843 2d5c 	str.w	r2, [r3, #-92]!
	message_received(message);
  401616:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40161a:	4b03      	ldr	r3, [pc, #12]	; (401628 <CAN_RX_CALLBACK+0x34>)
  40161c:	4798      	blx	r3
}
  40161e:	b019      	add	sp, #100	; 0x64
  401620:	f85d fb04 	ldr.w	pc, [sp], #4
  401624:	004004fd 	.word	0x004004fd
  401628:	004015d5 	.word	0x004015d5

0040162c <timer_setup>:
void timer_setup() {
  40162c:	b570      	push	{r4, r5, r6, lr}
	TIMER_0_task1.interval = 1000;
  40162e:	4c0d      	ldr	r4, [pc, #52]	; (401664 <timer_setup+0x38>)
  401630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401634:	60a3      	str	r3, [r4, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_callback;
  401636:	4b0c      	ldr	r3, [pc, #48]	; (401668 <timer_setup+0x3c>)
  401638:	60e3      	str	r3, [r4, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
  40163a:	2301      	movs	r3, #1
  40163c:	7423      	strb	r3, [r4, #16]
	TIMER_0_task2.interval = 200;
  40163e:	22c8      	movs	r2, #200	; 0xc8
  401640:	61e2      	str	r2, [r4, #28]
	TIMER_0_task2.cb       = TIMER_0_task2_callback;
  401642:	4a0a      	ldr	r2, [pc, #40]	; (40166c <timer_setup+0x40>)
  401644:	6222      	str	r2, [r4, #32]
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
  401646:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	timer_add_task(&TIMER_0, &TIMER_0_task1);
  40164a:	4d09      	ldr	r5, [pc, #36]	; (401670 <timer_setup+0x44>)
  40164c:	4621      	mov	r1, r4
  40164e:	4628      	mov	r0, r5
  401650:	4e08      	ldr	r6, [pc, #32]	; (401674 <timer_setup+0x48>)
  401652:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
  401654:	f104 0114 	add.w	r1, r4, #20
  401658:	4628      	mov	r0, r5
  40165a:	47b0      	blx	r6
	timer_start(&TIMER_0);
  40165c:	4628      	mov	r0, r5
  40165e:	4b06      	ldr	r3, [pc, #24]	; (401678 <timer_setup+0x4c>)
  401660:	4798      	blx	r3
  401662:	bd70      	pop	{r4, r5, r6, pc}
  401664:	20400130 	.word	0x20400130
  401668:	00401439 	.word	0x00401439
  40166c:	0040143b 	.word	0x0040143b
  401670:	204001c4 	.word	0x204001c4
  401674:	00400791 	.word	0x00400791
  401678:	00400755 	.word	0x00400755

0040167c <main>:
{
  40167c:	b500      	push	{lr}
  40167e:	b085      	sub	sp, #20
	atmel_start_init();
  401680:	4b13      	ldr	r3, [pc, #76]	; (4016d0 <main+0x54>)
  401682:	4798      	blx	r3
	timer_setup();
  401684:	4b13      	ldr	r3, [pc, #76]	; (4016d4 <main+0x58>)
  401686:	4798      	blx	r3
	((Pio *)hw)->PIO_OER = mask;
  401688:	4b13      	ldr	r3, [pc, #76]	; (4016d8 <main+0x5c>)
  40168a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40168e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401690:	601a      	str	r2, [r3, #0]
	msg.id = 0x45A;
  401692:	f240 445a 	movw	r4, #1114	; 0x45a
  401696:	9401      	str	r4, [sp, #4]
	msg.dataSize = 1;
  401698:	2301      	movs	r3, #1
  40169a:	f88d 300c 	strb.w	r3, [sp, #12]
	msg.data = 12345;
  40169e:	f243 0339 	movw	r3, #12345	; 0x3039
  4016a2:	9302      	str	r3, [sp, #8]
	init_can_module();
  4016a4:	4b0d      	ldr	r3, [pc, #52]	; (4016dc <main+0x60>)
  4016a6:	4798      	blx	r3
	add_single_filter_module_1(0x45A, 0);
  4016a8:	2100      	movs	r1, #0
  4016aa:	4620      	mov	r0, r4
  4016ac:	4b0c      	ldr	r3, [pc, #48]	; (4016e0 <main+0x64>)
  4016ae:	4798      	blx	r3
		if(sender) {
  4016b0:	4b0c      	ldr	r3, [pc, #48]	; (4016e4 <main+0x68>)
  4016b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
  4016b6:	2b00      	cmp	r3, #0
  4016b8:	d0fa      	beq.n	4016b0 <main+0x34>
			delay_ms(1000);
  4016ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4016be:	4b0a      	ldr	r3, [pc, #40]	; (4016e8 <main+0x6c>)
  4016c0:	4798      	blx	r3
			send_message_module_1(&msg);
  4016c2:	a801      	add	r0, sp, #4
  4016c4:	4b09      	ldr	r3, [pc, #36]	; (4016ec <main+0x70>)
  4016c6:	4798      	blx	r3
			printf("Message sent \n");
  4016c8:	4809      	ldr	r0, [pc, #36]	; (4016f0 <main+0x74>)
  4016ca:	4b0a      	ldr	r3, [pc, #40]	; (4016f4 <main+0x78>)
  4016cc:	4798      	blx	r3
  4016ce:	e7ef      	b.n	4016b0 <main+0x34>
  4016d0:	004001d5 	.word	0x004001d5
  4016d4:	0040162d 	.word	0x0040162d
  4016d8:	400e1200 	.word	0x400e1200
  4016dc:	0040143d 	.word	0x0040143d
  4016e0:	004015a1 	.word	0x004015a1
  4016e4:	20400130 	.word	0x20400130
  4016e8:	004005e1 	.word	0x004005e1
  4016ec:	0040153d 	.word	0x0040153d
  4016f0:	00402a9c 	.word	0x00402a9c
  4016f4:	00401931 	.word	0x00401931

004016f8 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  4016f8:	b958      	cbnz	r0, 401712 <_read+0x1a>
{
  4016fa:	b508      	push	{r3, lr}
  4016fc:	460b      	mov	r3, r1
  4016fe:	4611      	mov	r1, r2
  401700:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401702:	4b05      	ldr	r3, [pc, #20]	; (401718 <_read+0x20>)
  401704:	4798      	blx	r3
	if (n < 0) {
  401706:	2800      	cmp	r0, #0
  401708:	db00      	blt.n	40170c <_read+0x14>
		return -1;
	}

	return n;
}
  40170a:	bd08      	pop	{r3, pc}
		return -1;
  40170c:	f04f 30ff 	mov.w	r0, #4294967295
  401710:	bd08      	pop	{r3, pc}
		return -1;
  401712:	f04f 30ff 	mov.w	r0, #4294967295
  401716:	4770      	bx	lr
  401718:	00401771 	.word	0x00401771

0040171c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  40171c:	3801      	subs	r0, #1
  40171e:	2802      	cmp	r0, #2
  401720:	d80b      	bhi.n	40173a <_write+0x1e>
{
  401722:	b508      	push	{r3, lr}
  401724:	460b      	mov	r3, r1
  401726:	4611      	mov	r1, r2
  401728:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  40172a:	4b05      	ldr	r3, [pc, #20]	; (401740 <_write+0x24>)
  40172c:	4798      	blx	r3
	if (n < 0) {
  40172e:	2800      	cmp	r0, #0
  401730:	db00      	blt.n	401734 <_write+0x18>
		return -1;
	}

	return n;
}
  401732:	bd08      	pop	{r3, pc}
		return -1;
  401734:	f04f 30ff 	mov.w	r0, #4294967295
  401738:	bd08      	pop	{r3, pc}
		return -1;
  40173a:	f04f 30ff 	mov.w	r0, #4294967295
  40173e:	4770      	bx	lr
  401740:	00401795 	.word	0x00401795

00401744 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  401744:	b570      	push	{r4, r5, r6, lr}
  401746:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  401748:	4d06      	ldr	r5, [pc, #24]	; (401764 <stdio_io_init+0x20>)
  40174a:	682b      	ldr	r3, [r5, #0]
  40174c:	2100      	movs	r1, #0
  40174e:	6898      	ldr	r0, [r3, #8]
  401750:	4c05      	ldr	r4, [pc, #20]	; (401768 <stdio_io_init+0x24>)
  401752:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401754:	682b      	ldr	r3, [r5, #0]
  401756:	2100      	movs	r1, #0
  401758:	6858      	ldr	r0, [r3, #4]
  40175a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  40175c:	4b03      	ldr	r3, [pc, #12]	; (40176c <stdio_io_init+0x28>)
  40175e:	601e      	str	r6, [r3, #0]
  401760:	bd70      	pop	{r4, r5, r6, pc}
  401762:	bf00      	nop
  401764:	2040004c 	.word	0x2040004c
  401768:	00401941 	.word	0x00401941
  40176c:	2040015c 	.word	0x2040015c

00401770 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  401770:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401772:	4b06      	ldr	r3, [pc, #24]	; (40178c <stdio_io_read+0x1c>)
  401774:	681b      	ldr	r3, [r3, #0]
  401776:	b133      	cbz	r3, 401786 <stdio_io_read+0x16>
  401778:	460a      	mov	r2, r1
  40177a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  40177c:	b292      	uxth	r2, r2
  40177e:	4618      	mov	r0, r3
  401780:	4b03      	ldr	r3, [pc, #12]	; (401790 <stdio_io_read+0x20>)
  401782:	4798      	blx	r3
  401784:	bd08      	pop	{r3, pc}
		return 0;
  401786:	2000      	movs	r0, #0
}
  401788:	bd08      	pop	{r3, pc}
  40178a:	bf00      	nop
  40178c:	2040015c 	.word	0x2040015c
  401790:	00400631 	.word	0x00400631

00401794 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401794:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401796:	4b06      	ldr	r3, [pc, #24]	; (4017b0 <stdio_io_write+0x1c>)
  401798:	681b      	ldr	r3, [r3, #0]
  40179a:	b133      	cbz	r3, 4017aa <stdio_io_write+0x16>
  40179c:	460a      	mov	r2, r1
  40179e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  4017a0:	b292      	uxth	r2, r2
  4017a2:	4618      	mov	r0, r3
  4017a4:	4b03      	ldr	r3, [pc, #12]	; (4017b4 <stdio_io_write+0x20>)
  4017a6:	4798      	blx	r3
  4017a8:	bd08      	pop	{r3, pc}
		return 0;
  4017aa:	2000      	movs	r0, #0
}
  4017ac:	bd08      	pop	{r3, pc}
  4017ae:	bf00      	nop
  4017b0:	2040015c 	.word	0x2040015c
  4017b4:	00400601 	.word	0x00400601

004017b8 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  4017b8:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  4017ba:	4c04      	ldr	r4, [pc, #16]	; (4017cc <stdio_redirect_init+0x14>)
  4017bc:	4620      	mov	r0, r4
  4017be:	4b04      	ldr	r3, [pc, #16]	; (4017d0 <stdio_redirect_init+0x18>)
  4017c0:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  4017c2:	4620      	mov	r0, r4
  4017c4:	4b03      	ldr	r3, [pc, #12]	; (4017d4 <stdio_redirect_init+0x1c>)
  4017c6:	4798      	blx	r3
  4017c8:	bd10      	pop	{r4, pc}
  4017ca:	bf00      	nop
  4017cc:	20400190 	.word	0x20400190
  4017d0:	00400951 	.word	0x00400951
  4017d4:	00401745 	.word	0x00401745

004017d8 <__libc_init_array>:
  4017d8:	b570      	push	{r4, r5, r6, lr}
  4017da:	4e0d      	ldr	r6, [pc, #52]	; (401810 <__libc_init_array+0x38>)
  4017dc:	4c0d      	ldr	r4, [pc, #52]	; (401814 <__libc_init_array+0x3c>)
  4017de:	1ba4      	subs	r4, r4, r6
  4017e0:	10a4      	asrs	r4, r4, #2
  4017e2:	2500      	movs	r5, #0
  4017e4:	42a5      	cmp	r5, r4
  4017e6:	d109      	bne.n	4017fc <__libc_init_array+0x24>
  4017e8:	4e0b      	ldr	r6, [pc, #44]	; (401818 <__libc_init_array+0x40>)
  4017ea:	4c0c      	ldr	r4, [pc, #48]	; (40181c <__libc_init_array+0x44>)
  4017ec:	f001 f9aa 	bl	402b44 <_init>
  4017f0:	1ba4      	subs	r4, r4, r6
  4017f2:	10a4      	asrs	r4, r4, #2
  4017f4:	2500      	movs	r5, #0
  4017f6:	42a5      	cmp	r5, r4
  4017f8:	d105      	bne.n	401806 <__libc_init_array+0x2e>
  4017fa:	bd70      	pop	{r4, r5, r6, pc}
  4017fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401800:	4798      	blx	r3
  401802:	3501      	adds	r5, #1
  401804:	e7ee      	b.n	4017e4 <__libc_init_array+0xc>
  401806:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40180a:	4798      	blx	r3
  40180c:	3501      	adds	r5, #1
  40180e:	e7f2      	b.n	4017f6 <__libc_init_array+0x1e>
  401810:	00402b50 	.word	0x00402b50
  401814:	00402b50 	.word	0x00402b50
  401818:	00402b50 	.word	0x00402b50
  40181c:	00402b54 	.word	0x00402b54

00401820 <memcpy>:
  401820:	b510      	push	{r4, lr}
  401822:	1e43      	subs	r3, r0, #1
  401824:	440a      	add	r2, r1
  401826:	4291      	cmp	r1, r2
  401828:	d100      	bne.n	40182c <memcpy+0xc>
  40182a:	bd10      	pop	{r4, pc}
  40182c:	f811 4b01 	ldrb.w	r4, [r1], #1
  401830:	f803 4f01 	strb.w	r4, [r3, #1]!
  401834:	e7f7      	b.n	401826 <memcpy+0x6>

00401836 <memset>:
  401836:	4402      	add	r2, r0
  401838:	4603      	mov	r3, r0
  40183a:	4293      	cmp	r3, r2
  40183c:	d100      	bne.n	401840 <memset+0xa>
  40183e:	4770      	bx	lr
  401840:	f803 1b01 	strb.w	r1, [r3], #1
  401844:	e7f9      	b.n	40183a <memset+0x4>
	...

00401848 <iprintf>:
  401848:	b40f      	push	{r0, r1, r2, r3}
  40184a:	4b0a      	ldr	r3, [pc, #40]	; (401874 <iprintf+0x2c>)
  40184c:	b513      	push	{r0, r1, r4, lr}
  40184e:	681c      	ldr	r4, [r3, #0]
  401850:	b124      	cbz	r4, 40185c <iprintf+0x14>
  401852:	69a3      	ldr	r3, [r4, #24]
  401854:	b913      	cbnz	r3, 40185c <iprintf+0x14>
  401856:	4620      	mov	r0, r4
  401858:	f000 fada 	bl	401e10 <__sinit>
  40185c:	ab05      	add	r3, sp, #20
  40185e:	9a04      	ldr	r2, [sp, #16]
  401860:	68a1      	ldr	r1, [r4, #8]
  401862:	9301      	str	r3, [sp, #4]
  401864:	4620      	mov	r0, r4
  401866:	f000 fc9d 	bl	4021a4 <_vfiprintf_r>
  40186a:	b002      	add	sp, #8
  40186c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401870:	b004      	add	sp, #16
  401872:	4770      	bx	lr
  401874:	2040004c 	.word	0x2040004c

00401878 <_puts_r>:
  401878:	b570      	push	{r4, r5, r6, lr}
  40187a:	460e      	mov	r6, r1
  40187c:	4605      	mov	r5, r0
  40187e:	b118      	cbz	r0, 401888 <_puts_r+0x10>
  401880:	6983      	ldr	r3, [r0, #24]
  401882:	b90b      	cbnz	r3, 401888 <_puts_r+0x10>
  401884:	f000 fac4 	bl	401e10 <__sinit>
  401888:	69ab      	ldr	r3, [r5, #24]
  40188a:	68ac      	ldr	r4, [r5, #8]
  40188c:	b913      	cbnz	r3, 401894 <_puts_r+0x1c>
  40188e:	4628      	mov	r0, r5
  401890:	f000 fabe 	bl	401e10 <__sinit>
  401894:	4b23      	ldr	r3, [pc, #140]	; (401924 <_puts_r+0xac>)
  401896:	429c      	cmp	r4, r3
  401898:	d117      	bne.n	4018ca <_puts_r+0x52>
  40189a:	686c      	ldr	r4, [r5, #4]
  40189c:	89a3      	ldrh	r3, [r4, #12]
  40189e:	071b      	lsls	r3, r3, #28
  4018a0:	d51d      	bpl.n	4018de <_puts_r+0x66>
  4018a2:	6923      	ldr	r3, [r4, #16]
  4018a4:	b1db      	cbz	r3, 4018de <_puts_r+0x66>
  4018a6:	3e01      	subs	r6, #1
  4018a8:	68a3      	ldr	r3, [r4, #8]
  4018aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  4018ae:	3b01      	subs	r3, #1
  4018b0:	60a3      	str	r3, [r4, #8]
  4018b2:	b9e9      	cbnz	r1, 4018f0 <_puts_r+0x78>
  4018b4:	2b00      	cmp	r3, #0
  4018b6:	da2e      	bge.n	401916 <_puts_r+0x9e>
  4018b8:	4622      	mov	r2, r4
  4018ba:	210a      	movs	r1, #10
  4018bc:	4628      	mov	r0, r5
  4018be:	f000 f8f5 	bl	401aac <__swbuf_r>
  4018c2:	3001      	adds	r0, #1
  4018c4:	d011      	beq.n	4018ea <_puts_r+0x72>
  4018c6:	200a      	movs	r0, #10
  4018c8:	bd70      	pop	{r4, r5, r6, pc}
  4018ca:	4b17      	ldr	r3, [pc, #92]	; (401928 <_puts_r+0xb0>)
  4018cc:	429c      	cmp	r4, r3
  4018ce:	d101      	bne.n	4018d4 <_puts_r+0x5c>
  4018d0:	68ac      	ldr	r4, [r5, #8]
  4018d2:	e7e3      	b.n	40189c <_puts_r+0x24>
  4018d4:	4b15      	ldr	r3, [pc, #84]	; (40192c <_puts_r+0xb4>)
  4018d6:	429c      	cmp	r4, r3
  4018d8:	bf08      	it	eq
  4018da:	68ec      	ldreq	r4, [r5, #12]
  4018dc:	e7de      	b.n	40189c <_puts_r+0x24>
  4018de:	4621      	mov	r1, r4
  4018e0:	4628      	mov	r0, r5
  4018e2:	f000 f935 	bl	401b50 <__swsetup_r>
  4018e6:	2800      	cmp	r0, #0
  4018e8:	d0dd      	beq.n	4018a6 <_puts_r+0x2e>
  4018ea:	f04f 30ff 	mov.w	r0, #4294967295
  4018ee:	bd70      	pop	{r4, r5, r6, pc}
  4018f0:	2b00      	cmp	r3, #0
  4018f2:	da04      	bge.n	4018fe <_puts_r+0x86>
  4018f4:	69a2      	ldr	r2, [r4, #24]
  4018f6:	4293      	cmp	r3, r2
  4018f8:	db06      	blt.n	401908 <_puts_r+0x90>
  4018fa:	290a      	cmp	r1, #10
  4018fc:	d004      	beq.n	401908 <_puts_r+0x90>
  4018fe:	6823      	ldr	r3, [r4, #0]
  401900:	1c5a      	adds	r2, r3, #1
  401902:	6022      	str	r2, [r4, #0]
  401904:	7019      	strb	r1, [r3, #0]
  401906:	e7cf      	b.n	4018a8 <_puts_r+0x30>
  401908:	4622      	mov	r2, r4
  40190a:	4628      	mov	r0, r5
  40190c:	f000 f8ce 	bl	401aac <__swbuf_r>
  401910:	3001      	adds	r0, #1
  401912:	d1c9      	bne.n	4018a8 <_puts_r+0x30>
  401914:	e7e9      	b.n	4018ea <_puts_r+0x72>
  401916:	6823      	ldr	r3, [r4, #0]
  401918:	200a      	movs	r0, #10
  40191a:	1c5a      	adds	r2, r3, #1
  40191c:	6022      	str	r2, [r4, #0]
  40191e:	7018      	strb	r0, [r3, #0]
  401920:	bd70      	pop	{r4, r5, r6, pc}
  401922:	bf00      	nop
  401924:	00402ad0 	.word	0x00402ad0
  401928:	00402af0 	.word	0x00402af0
  40192c:	00402ab0 	.word	0x00402ab0

00401930 <puts>:
  401930:	4b02      	ldr	r3, [pc, #8]	; (40193c <puts+0xc>)
  401932:	4601      	mov	r1, r0
  401934:	6818      	ldr	r0, [r3, #0]
  401936:	f7ff bf9f 	b.w	401878 <_puts_r>
  40193a:	bf00      	nop
  40193c:	2040004c 	.word	0x2040004c

00401940 <setbuf>:
  401940:	2900      	cmp	r1, #0
  401942:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401946:	bf0c      	ite	eq
  401948:	2202      	moveq	r2, #2
  40194a:	2200      	movne	r2, #0
  40194c:	f000 b800 	b.w	401950 <setvbuf>

00401950 <setvbuf>:
  401950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  401954:	461d      	mov	r5, r3
  401956:	4b51      	ldr	r3, [pc, #324]	; (401a9c <setvbuf+0x14c>)
  401958:	681e      	ldr	r6, [r3, #0]
  40195a:	4604      	mov	r4, r0
  40195c:	460f      	mov	r7, r1
  40195e:	4690      	mov	r8, r2
  401960:	b126      	cbz	r6, 40196c <setvbuf+0x1c>
  401962:	69b3      	ldr	r3, [r6, #24]
  401964:	b913      	cbnz	r3, 40196c <setvbuf+0x1c>
  401966:	4630      	mov	r0, r6
  401968:	f000 fa52 	bl	401e10 <__sinit>
  40196c:	4b4c      	ldr	r3, [pc, #304]	; (401aa0 <setvbuf+0x150>)
  40196e:	429c      	cmp	r4, r3
  401970:	d152      	bne.n	401a18 <setvbuf+0xc8>
  401972:	6874      	ldr	r4, [r6, #4]
  401974:	f1b8 0f02 	cmp.w	r8, #2
  401978:	d006      	beq.n	401988 <setvbuf+0x38>
  40197a:	f1b8 0f01 	cmp.w	r8, #1
  40197e:	f200 8089 	bhi.w	401a94 <setvbuf+0x144>
  401982:	2d00      	cmp	r5, #0
  401984:	f2c0 8086 	blt.w	401a94 <setvbuf+0x144>
  401988:	4621      	mov	r1, r4
  40198a:	4630      	mov	r0, r6
  40198c:	f000 f9d6 	bl	401d3c <_fflush_r>
  401990:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401992:	b141      	cbz	r1, 4019a6 <setvbuf+0x56>
  401994:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401998:	4299      	cmp	r1, r3
  40199a:	d002      	beq.n	4019a2 <setvbuf+0x52>
  40199c:	4630      	mov	r0, r6
  40199e:	f000 fb2d 	bl	401ffc <_free_r>
  4019a2:	2300      	movs	r3, #0
  4019a4:	6363      	str	r3, [r4, #52]	; 0x34
  4019a6:	2300      	movs	r3, #0
  4019a8:	61a3      	str	r3, [r4, #24]
  4019aa:	6063      	str	r3, [r4, #4]
  4019ac:	89a3      	ldrh	r3, [r4, #12]
  4019ae:	061b      	lsls	r3, r3, #24
  4019b0:	d503      	bpl.n	4019ba <setvbuf+0x6a>
  4019b2:	6921      	ldr	r1, [r4, #16]
  4019b4:	4630      	mov	r0, r6
  4019b6:	f000 fb21 	bl	401ffc <_free_r>
  4019ba:	89a3      	ldrh	r3, [r4, #12]
  4019bc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4019c0:	f023 0303 	bic.w	r3, r3, #3
  4019c4:	f1b8 0f02 	cmp.w	r8, #2
  4019c8:	81a3      	strh	r3, [r4, #12]
  4019ca:	d05d      	beq.n	401a88 <setvbuf+0x138>
  4019cc:	ab01      	add	r3, sp, #4
  4019ce:	466a      	mov	r2, sp
  4019d0:	4621      	mov	r1, r4
  4019d2:	4630      	mov	r0, r6
  4019d4:	f000 faa6 	bl	401f24 <__swhatbuf_r>
  4019d8:	89a3      	ldrh	r3, [r4, #12]
  4019da:	4318      	orrs	r0, r3
  4019dc:	81a0      	strh	r0, [r4, #12]
  4019de:	bb2d      	cbnz	r5, 401a2c <setvbuf+0xdc>
  4019e0:	9d00      	ldr	r5, [sp, #0]
  4019e2:	4628      	mov	r0, r5
  4019e4:	f000 fb02 	bl	401fec <malloc>
  4019e8:	4607      	mov	r7, r0
  4019ea:	2800      	cmp	r0, #0
  4019ec:	d14e      	bne.n	401a8c <setvbuf+0x13c>
  4019ee:	f8dd 9000 	ldr.w	r9, [sp]
  4019f2:	45a9      	cmp	r9, r5
  4019f4:	d13c      	bne.n	401a70 <setvbuf+0x120>
  4019f6:	f04f 30ff 	mov.w	r0, #4294967295
  4019fa:	89a3      	ldrh	r3, [r4, #12]
  4019fc:	f043 0302 	orr.w	r3, r3, #2
  401a00:	81a3      	strh	r3, [r4, #12]
  401a02:	2300      	movs	r3, #0
  401a04:	60a3      	str	r3, [r4, #8]
  401a06:	f104 0347 	add.w	r3, r4, #71	; 0x47
  401a0a:	6023      	str	r3, [r4, #0]
  401a0c:	6123      	str	r3, [r4, #16]
  401a0e:	2301      	movs	r3, #1
  401a10:	6163      	str	r3, [r4, #20]
  401a12:	b003      	add	sp, #12
  401a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a18:	4b22      	ldr	r3, [pc, #136]	; (401aa4 <setvbuf+0x154>)
  401a1a:	429c      	cmp	r4, r3
  401a1c:	d101      	bne.n	401a22 <setvbuf+0xd2>
  401a1e:	68b4      	ldr	r4, [r6, #8]
  401a20:	e7a8      	b.n	401974 <setvbuf+0x24>
  401a22:	4b21      	ldr	r3, [pc, #132]	; (401aa8 <setvbuf+0x158>)
  401a24:	429c      	cmp	r4, r3
  401a26:	bf08      	it	eq
  401a28:	68f4      	ldreq	r4, [r6, #12]
  401a2a:	e7a3      	b.n	401974 <setvbuf+0x24>
  401a2c:	2f00      	cmp	r7, #0
  401a2e:	d0d8      	beq.n	4019e2 <setvbuf+0x92>
  401a30:	69b3      	ldr	r3, [r6, #24]
  401a32:	b913      	cbnz	r3, 401a3a <setvbuf+0xea>
  401a34:	4630      	mov	r0, r6
  401a36:	f000 f9eb 	bl	401e10 <__sinit>
  401a3a:	f1b8 0f01 	cmp.w	r8, #1
  401a3e:	bf08      	it	eq
  401a40:	89a3      	ldrheq	r3, [r4, #12]
  401a42:	6027      	str	r7, [r4, #0]
  401a44:	bf04      	itt	eq
  401a46:	f043 0301 	orreq.w	r3, r3, #1
  401a4a:	81a3      	strheq	r3, [r4, #12]
  401a4c:	89a3      	ldrh	r3, [r4, #12]
  401a4e:	6127      	str	r7, [r4, #16]
  401a50:	f013 0008 	ands.w	r0, r3, #8
  401a54:	6165      	str	r5, [r4, #20]
  401a56:	d01b      	beq.n	401a90 <setvbuf+0x140>
  401a58:	f013 0001 	ands.w	r0, r3, #1
  401a5c:	bf18      	it	ne
  401a5e:	426d      	negne	r5, r5
  401a60:	f04f 0300 	mov.w	r3, #0
  401a64:	bf1d      	ittte	ne
  401a66:	60a3      	strne	r3, [r4, #8]
  401a68:	61a5      	strne	r5, [r4, #24]
  401a6a:	4618      	movne	r0, r3
  401a6c:	60a5      	streq	r5, [r4, #8]
  401a6e:	e7d0      	b.n	401a12 <setvbuf+0xc2>
  401a70:	4648      	mov	r0, r9
  401a72:	f000 fabb 	bl	401fec <malloc>
  401a76:	4607      	mov	r7, r0
  401a78:	2800      	cmp	r0, #0
  401a7a:	d0bc      	beq.n	4019f6 <setvbuf+0xa6>
  401a7c:	89a3      	ldrh	r3, [r4, #12]
  401a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a82:	81a3      	strh	r3, [r4, #12]
  401a84:	464d      	mov	r5, r9
  401a86:	e7d3      	b.n	401a30 <setvbuf+0xe0>
  401a88:	2000      	movs	r0, #0
  401a8a:	e7b6      	b.n	4019fa <setvbuf+0xaa>
  401a8c:	46a9      	mov	r9, r5
  401a8e:	e7f5      	b.n	401a7c <setvbuf+0x12c>
  401a90:	60a0      	str	r0, [r4, #8]
  401a92:	e7be      	b.n	401a12 <setvbuf+0xc2>
  401a94:	f04f 30ff 	mov.w	r0, #4294967295
  401a98:	e7bb      	b.n	401a12 <setvbuf+0xc2>
  401a9a:	bf00      	nop
  401a9c:	2040004c 	.word	0x2040004c
  401aa0:	00402ad0 	.word	0x00402ad0
  401aa4:	00402af0 	.word	0x00402af0
  401aa8:	00402ab0 	.word	0x00402ab0

00401aac <__swbuf_r>:
  401aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401aae:	460e      	mov	r6, r1
  401ab0:	4614      	mov	r4, r2
  401ab2:	4605      	mov	r5, r0
  401ab4:	b118      	cbz	r0, 401abe <__swbuf_r+0x12>
  401ab6:	6983      	ldr	r3, [r0, #24]
  401ab8:	b90b      	cbnz	r3, 401abe <__swbuf_r+0x12>
  401aba:	f000 f9a9 	bl	401e10 <__sinit>
  401abe:	4b21      	ldr	r3, [pc, #132]	; (401b44 <__swbuf_r+0x98>)
  401ac0:	429c      	cmp	r4, r3
  401ac2:	d12a      	bne.n	401b1a <__swbuf_r+0x6e>
  401ac4:	686c      	ldr	r4, [r5, #4]
  401ac6:	69a3      	ldr	r3, [r4, #24]
  401ac8:	60a3      	str	r3, [r4, #8]
  401aca:	89a3      	ldrh	r3, [r4, #12]
  401acc:	071a      	lsls	r2, r3, #28
  401ace:	d52e      	bpl.n	401b2e <__swbuf_r+0x82>
  401ad0:	6923      	ldr	r3, [r4, #16]
  401ad2:	b363      	cbz	r3, 401b2e <__swbuf_r+0x82>
  401ad4:	6923      	ldr	r3, [r4, #16]
  401ad6:	6820      	ldr	r0, [r4, #0]
  401ad8:	1ac0      	subs	r0, r0, r3
  401ada:	6963      	ldr	r3, [r4, #20]
  401adc:	b2f6      	uxtb	r6, r6
  401ade:	4298      	cmp	r0, r3
  401ae0:	4637      	mov	r7, r6
  401ae2:	db04      	blt.n	401aee <__swbuf_r+0x42>
  401ae4:	4621      	mov	r1, r4
  401ae6:	4628      	mov	r0, r5
  401ae8:	f000 f928 	bl	401d3c <_fflush_r>
  401aec:	bb28      	cbnz	r0, 401b3a <__swbuf_r+0x8e>
  401aee:	68a3      	ldr	r3, [r4, #8]
  401af0:	3b01      	subs	r3, #1
  401af2:	60a3      	str	r3, [r4, #8]
  401af4:	6823      	ldr	r3, [r4, #0]
  401af6:	1c5a      	adds	r2, r3, #1
  401af8:	6022      	str	r2, [r4, #0]
  401afa:	701e      	strb	r6, [r3, #0]
  401afc:	6963      	ldr	r3, [r4, #20]
  401afe:	3001      	adds	r0, #1
  401b00:	4298      	cmp	r0, r3
  401b02:	d004      	beq.n	401b0e <__swbuf_r+0x62>
  401b04:	89a3      	ldrh	r3, [r4, #12]
  401b06:	07db      	lsls	r3, r3, #31
  401b08:	d519      	bpl.n	401b3e <__swbuf_r+0x92>
  401b0a:	2e0a      	cmp	r6, #10
  401b0c:	d117      	bne.n	401b3e <__swbuf_r+0x92>
  401b0e:	4621      	mov	r1, r4
  401b10:	4628      	mov	r0, r5
  401b12:	f000 f913 	bl	401d3c <_fflush_r>
  401b16:	b190      	cbz	r0, 401b3e <__swbuf_r+0x92>
  401b18:	e00f      	b.n	401b3a <__swbuf_r+0x8e>
  401b1a:	4b0b      	ldr	r3, [pc, #44]	; (401b48 <__swbuf_r+0x9c>)
  401b1c:	429c      	cmp	r4, r3
  401b1e:	d101      	bne.n	401b24 <__swbuf_r+0x78>
  401b20:	68ac      	ldr	r4, [r5, #8]
  401b22:	e7d0      	b.n	401ac6 <__swbuf_r+0x1a>
  401b24:	4b09      	ldr	r3, [pc, #36]	; (401b4c <__swbuf_r+0xa0>)
  401b26:	429c      	cmp	r4, r3
  401b28:	bf08      	it	eq
  401b2a:	68ec      	ldreq	r4, [r5, #12]
  401b2c:	e7cb      	b.n	401ac6 <__swbuf_r+0x1a>
  401b2e:	4621      	mov	r1, r4
  401b30:	4628      	mov	r0, r5
  401b32:	f000 f80d 	bl	401b50 <__swsetup_r>
  401b36:	2800      	cmp	r0, #0
  401b38:	d0cc      	beq.n	401ad4 <__swbuf_r+0x28>
  401b3a:	f04f 37ff 	mov.w	r7, #4294967295
  401b3e:	4638      	mov	r0, r7
  401b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b42:	bf00      	nop
  401b44:	00402ad0 	.word	0x00402ad0
  401b48:	00402af0 	.word	0x00402af0
  401b4c:	00402ab0 	.word	0x00402ab0

00401b50 <__swsetup_r>:
  401b50:	4b32      	ldr	r3, [pc, #200]	; (401c1c <__swsetup_r+0xcc>)
  401b52:	b570      	push	{r4, r5, r6, lr}
  401b54:	681d      	ldr	r5, [r3, #0]
  401b56:	4606      	mov	r6, r0
  401b58:	460c      	mov	r4, r1
  401b5a:	b125      	cbz	r5, 401b66 <__swsetup_r+0x16>
  401b5c:	69ab      	ldr	r3, [r5, #24]
  401b5e:	b913      	cbnz	r3, 401b66 <__swsetup_r+0x16>
  401b60:	4628      	mov	r0, r5
  401b62:	f000 f955 	bl	401e10 <__sinit>
  401b66:	4b2e      	ldr	r3, [pc, #184]	; (401c20 <__swsetup_r+0xd0>)
  401b68:	429c      	cmp	r4, r3
  401b6a:	d10f      	bne.n	401b8c <__swsetup_r+0x3c>
  401b6c:	686c      	ldr	r4, [r5, #4]
  401b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401b72:	b29a      	uxth	r2, r3
  401b74:	0715      	lsls	r5, r2, #28
  401b76:	d42c      	bmi.n	401bd2 <__swsetup_r+0x82>
  401b78:	06d0      	lsls	r0, r2, #27
  401b7a:	d411      	bmi.n	401ba0 <__swsetup_r+0x50>
  401b7c:	2209      	movs	r2, #9
  401b7e:	6032      	str	r2, [r6, #0]
  401b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401b84:	81a3      	strh	r3, [r4, #12]
  401b86:	f04f 30ff 	mov.w	r0, #4294967295
  401b8a:	bd70      	pop	{r4, r5, r6, pc}
  401b8c:	4b25      	ldr	r3, [pc, #148]	; (401c24 <__swsetup_r+0xd4>)
  401b8e:	429c      	cmp	r4, r3
  401b90:	d101      	bne.n	401b96 <__swsetup_r+0x46>
  401b92:	68ac      	ldr	r4, [r5, #8]
  401b94:	e7eb      	b.n	401b6e <__swsetup_r+0x1e>
  401b96:	4b24      	ldr	r3, [pc, #144]	; (401c28 <__swsetup_r+0xd8>)
  401b98:	429c      	cmp	r4, r3
  401b9a:	bf08      	it	eq
  401b9c:	68ec      	ldreq	r4, [r5, #12]
  401b9e:	e7e6      	b.n	401b6e <__swsetup_r+0x1e>
  401ba0:	0751      	lsls	r1, r2, #29
  401ba2:	d512      	bpl.n	401bca <__swsetup_r+0x7a>
  401ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401ba6:	b141      	cbz	r1, 401bba <__swsetup_r+0x6a>
  401ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401bac:	4299      	cmp	r1, r3
  401bae:	d002      	beq.n	401bb6 <__swsetup_r+0x66>
  401bb0:	4630      	mov	r0, r6
  401bb2:	f000 fa23 	bl	401ffc <_free_r>
  401bb6:	2300      	movs	r3, #0
  401bb8:	6363      	str	r3, [r4, #52]	; 0x34
  401bba:	89a3      	ldrh	r3, [r4, #12]
  401bbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  401bc0:	81a3      	strh	r3, [r4, #12]
  401bc2:	2300      	movs	r3, #0
  401bc4:	6063      	str	r3, [r4, #4]
  401bc6:	6923      	ldr	r3, [r4, #16]
  401bc8:	6023      	str	r3, [r4, #0]
  401bca:	89a3      	ldrh	r3, [r4, #12]
  401bcc:	f043 0308 	orr.w	r3, r3, #8
  401bd0:	81a3      	strh	r3, [r4, #12]
  401bd2:	6923      	ldr	r3, [r4, #16]
  401bd4:	b94b      	cbnz	r3, 401bea <__swsetup_r+0x9a>
  401bd6:	89a3      	ldrh	r3, [r4, #12]
  401bd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  401bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401be0:	d003      	beq.n	401bea <__swsetup_r+0x9a>
  401be2:	4621      	mov	r1, r4
  401be4:	4630      	mov	r0, r6
  401be6:	f000 f9c1 	bl	401f6c <__smakebuf_r>
  401bea:	89a2      	ldrh	r2, [r4, #12]
  401bec:	f012 0301 	ands.w	r3, r2, #1
  401bf0:	d00c      	beq.n	401c0c <__swsetup_r+0xbc>
  401bf2:	2300      	movs	r3, #0
  401bf4:	60a3      	str	r3, [r4, #8]
  401bf6:	6963      	ldr	r3, [r4, #20]
  401bf8:	425b      	negs	r3, r3
  401bfa:	61a3      	str	r3, [r4, #24]
  401bfc:	6923      	ldr	r3, [r4, #16]
  401bfe:	b953      	cbnz	r3, 401c16 <__swsetup_r+0xc6>
  401c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  401c08:	d1ba      	bne.n	401b80 <__swsetup_r+0x30>
  401c0a:	bd70      	pop	{r4, r5, r6, pc}
  401c0c:	0792      	lsls	r2, r2, #30
  401c0e:	bf58      	it	pl
  401c10:	6963      	ldrpl	r3, [r4, #20]
  401c12:	60a3      	str	r3, [r4, #8]
  401c14:	e7f2      	b.n	401bfc <__swsetup_r+0xac>
  401c16:	2000      	movs	r0, #0
  401c18:	e7f7      	b.n	401c0a <__swsetup_r+0xba>
  401c1a:	bf00      	nop
  401c1c:	2040004c 	.word	0x2040004c
  401c20:	00402ad0 	.word	0x00402ad0
  401c24:	00402af0 	.word	0x00402af0
  401c28:	00402ab0 	.word	0x00402ab0

00401c2c <__sflush_r>:
  401c2c:	898a      	ldrh	r2, [r1, #12]
  401c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c32:	4605      	mov	r5, r0
  401c34:	0710      	lsls	r0, r2, #28
  401c36:	460c      	mov	r4, r1
  401c38:	d45a      	bmi.n	401cf0 <__sflush_r+0xc4>
  401c3a:	684b      	ldr	r3, [r1, #4]
  401c3c:	2b00      	cmp	r3, #0
  401c3e:	dc05      	bgt.n	401c4c <__sflush_r+0x20>
  401c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  401c42:	2b00      	cmp	r3, #0
  401c44:	dc02      	bgt.n	401c4c <__sflush_r+0x20>
  401c46:	2000      	movs	r0, #0
  401c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401c4e:	2e00      	cmp	r6, #0
  401c50:	d0f9      	beq.n	401c46 <__sflush_r+0x1a>
  401c52:	2300      	movs	r3, #0
  401c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  401c58:	682f      	ldr	r7, [r5, #0]
  401c5a:	602b      	str	r3, [r5, #0]
  401c5c:	d033      	beq.n	401cc6 <__sflush_r+0x9a>
  401c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  401c60:	89a3      	ldrh	r3, [r4, #12]
  401c62:	075a      	lsls	r2, r3, #29
  401c64:	d505      	bpl.n	401c72 <__sflush_r+0x46>
  401c66:	6863      	ldr	r3, [r4, #4]
  401c68:	1ac0      	subs	r0, r0, r3
  401c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  401c6c:	b10b      	cbz	r3, 401c72 <__sflush_r+0x46>
  401c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401c70:	1ac0      	subs	r0, r0, r3
  401c72:	2300      	movs	r3, #0
  401c74:	4602      	mov	r2, r0
  401c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401c78:	6a21      	ldr	r1, [r4, #32]
  401c7a:	4628      	mov	r0, r5
  401c7c:	47b0      	blx	r6
  401c7e:	1c43      	adds	r3, r0, #1
  401c80:	89a3      	ldrh	r3, [r4, #12]
  401c82:	d106      	bne.n	401c92 <__sflush_r+0x66>
  401c84:	6829      	ldr	r1, [r5, #0]
  401c86:	291d      	cmp	r1, #29
  401c88:	d84b      	bhi.n	401d22 <__sflush_r+0xf6>
  401c8a:	4a2b      	ldr	r2, [pc, #172]	; (401d38 <__sflush_r+0x10c>)
  401c8c:	40ca      	lsrs	r2, r1
  401c8e:	07d6      	lsls	r6, r2, #31
  401c90:	d547      	bpl.n	401d22 <__sflush_r+0xf6>
  401c92:	2200      	movs	r2, #0
  401c94:	6062      	str	r2, [r4, #4]
  401c96:	04d9      	lsls	r1, r3, #19
  401c98:	6922      	ldr	r2, [r4, #16]
  401c9a:	6022      	str	r2, [r4, #0]
  401c9c:	d504      	bpl.n	401ca8 <__sflush_r+0x7c>
  401c9e:	1c42      	adds	r2, r0, #1
  401ca0:	d101      	bne.n	401ca6 <__sflush_r+0x7a>
  401ca2:	682b      	ldr	r3, [r5, #0]
  401ca4:	b903      	cbnz	r3, 401ca8 <__sflush_r+0x7c>
  401ca6:	6560      	str	r0, [r4, #84]	; 0x54
  401ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401caa:	602f      	str	r7, [r5, #0]
  401cac:	2900      	cmp	r1, #0
  401cae:	d0ca      	beq.n	401c46 <__sflush_r+0x1a>
  401cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401cb4:	4299      	cmp	r1, r3
  401cb6:	d002      	beq.n	401cbe <__sflush_r+0x92>
  401cb8:	4628      	mov	r0, r5
  401cba:	f000 f99f 	bl	401ffc <_free_r>
  401cbe:	2000      	movs	r0, #0
  401cc0:	6360      	str	r0, [r4, #52]	; 0x34
  401cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401cc6:	6a21      	ldr	r1, [r4, #32]
  401cc8:	2301      	movs	r3, #1
  401cca:	4628      	mov	r0, r5
  401ccc:	47b0      	blx	r6
  401cce:	1c41      	adds	r1, r0, #1
  401cd0:	d1c6      	bne.n	401c60 <__sflush_r+0x34>
  401cd2:	682b      	ldr	r3, [r5, #0]
  401cd4:	2b00      	cmp	r3, #0
  401cd6:	d0c3      	beq.n	401c60 <__sflush_r+0x34>
  401cd8:	2b1d      	cmp	r3, #29
  401cda:	d001      	beq.n	401ce0 <__sflush_r+0xb4>
  401cdc:	2b16      	cmp	r3, #22
  401cde:	d101      	bne.n	401ce4 <__sflush_r+0xb8>
  401ce0:	602f      	str	r7, [r5, #0]
  401ce2:	e7b0      	b.n	401c46 <__sflush_r+0x1a>
  401ce4:	89a3      	ldrh	r3, [r4, #12]
  401ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401cea:	81a3      	strh	r3, [r4, #12]
  401cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401cf0:	690f      	ldr	r7, [r1, #16]
  401cf2:	2f00      	cmp	r7, #0
  401cf4:	d0a7      	beq.n	401c46 <__sflush_r+0x1a>
  401cf6:	0793      	lsls	r3, r2, #30
  401cf8:	680e      	ldr	r6, [r1, #0]
  401cfa:	bf08      	it	eq
  401cfc:	694b      	ldreq	r3, [r1, #20]
  401cfe:	600f      	str	r7, [r1, #0]
  401d00:	bf18      	it	ne
  401d02:	2300      	movne	r3, #0
  401d04:	eba6 0807 	sub.w	r8, r6, r7
  401d08:	608b      	str	r3, [r1, #8]
  401d0a:	f1b8 0f00 	cmp.w	r8, #0
  401d0e:	dd9a      	ble.n	401c46 <__sflush_r+0x1a>
  401d10:	4643      	mov	r3, r8
  401d12:	463a      	mov	r2, r7
  401d14:	6a21      	ldr	r1, [r4, #32]
  401d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  401d18:	4628      	mov	r0, r5
  401d1a:	47b0      	blx	r6
  401d1c:	2800      	cmp	r0, #0
  401d1e:	dc07      	bgt.n	401d30 <__sflush_r+0x104>
  401d20:	89a3      	ldrh	r3, [r4, #12]
  401d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401d26:	81a3      	strh	r3, [r4, #12]
  401d28:	f04f 30ff 	mov.w	r0, #4294967295
  401d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401d30:	4407      	add	r7, r0
  401d32:	eba8 0800 	sub.w	r8, r8, r0
  401d36:	e7e8      	b.n	401d0a <__sflush_r+0xde>
  401d38:	20400001 	.word	0x20400001

00401d3c <_fflush_r>:
  401d3c:	b538      	push	{r3, r4, r5, lr}
  401d3e:	690b      	ldr	r3, [r1, #16]
  401d40:	4605      	mov	r5, r0
  401d42:	460c      	mov	r4, r1
  401d44:	b1db      	cbz	r3, 401d7e <_fflush_r+0x42>
  401d46:	b118      	cbz	r0, 401d50 <_fflush_r+0x14>
  401d48:	6983      	ldr	r3, [r0, #24]
  401d4a:	b90b      	cbnz	r3, 401d50 <_fflush_r+0x14>
  401d4c:	f000 f860 	bl	401e10 <__sinit>
  401d50:	4b0c      	ldr	r3, [pc, #48]	; (401d84 <_fflush_r+0x48>)
  401d52:	429c      	cmp	r4, r3
  401d54:	d109      	bne.n	401d6a <_fflush_r+0x2e>
  401d56:	686c      	ldr	r4, [r5, #4]
  401d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d5c:	b17b      	cbz	r3, 401d7e <_fflush_r+0x42>
  401d5e:	4621      	mov	r1, r4
  401d60:	4628      	mov	r0, r5
  401d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401d66:	f7ff bf61 	b.w	401c2c <__sflush_r>
  401d6a:	4b07      	ldr	r3, [pc, #28]	; (401d88 <_fflush_r+0x4c>)
  401d6c:	429c      	cmp	r4, r3
  401d6e:	d101      	bne.n	401d74 <_fflush_r+0x38>
  401d70:	68ac      	ldr	r4, [r5, #8]
  401d72:	e7f1      	b.n	401d58 <_fflush_r+0x1c>
  401d74:	4b05      	ldr	r3, [pc, #20]	; (401d8c <_fflush_r+0x50>)
  401d76:	429c      	cmp	r4, r3
  401d78:	bf08      	it	eq
  401d7a:	68ec      	ldreq	r4, [r5, #12]
  401d7c:	e7ec      	b.n	401d58 <_fflush_r+0x1c>
  401d7e:	2000      	movs	r0, #0
  401d80:	bd38      	pop	{r3, r4, r5, pc}
  401d82:	bf00      	nop
  401d84:	00402ad0 	.word	0x00402ad0
  401d88:	00402af0 	.word	0x00402af0
  401d8c:	00402ab0 	.word	0x00402ab0

00401d90 <_cleanup_r>:
  401d90:	4901      	ldr	r1, [pc, #4]	; (401d98 <_cleanup_r+0x8>)
  401d92:	f000 b8a9 	b.w	401ee8 <_fwalk_reent>
  401d96:	bf00      	nop
  401d98:	00401d3d 	.word	0x00401d3d

00401d9c <std.isra.0>:
  401d9c:	2300      	movs	r3, #0
  401d9e:	b510      	push	{r4, lr}
  401da0:	4604      	mov	r4, r0
  401da2:	6003      	str	r3, [r0, #0]
  401da4:	6043      	str	r3, [r0, #4]
  401da6:	6083      	str	r3, [r0, #8]
  401da8:	8181      	strh	r1, [r0, #12]
  401daa:	6643      	str	r3, [r0, #100]	; 0x64
  401dac:	81c2      	strh	r2, [r0, #14]
  401dae:	6103      	str	r3, [r0, #16]
  401db0:	6143      	str	r3, [r0, #20]
  401db2:	6183      	str	r3, [r0, #24]
  401db4:	4619      	mov	r1, r3
  401db6:	2208      	movs	r2, #8
  401db8:	305c      	adds	r0, #92	; 0x5c
  401dba:	f7ff fd3c 	bl	401836 <memset>
  401dbe:	4b05      	ldr	r3, [pc, #20]	; (401dd4 <std.isra.0+0x38>)
  401dc0:	6263      	str	r3, [r4, #36]	; 0x24
  401dc2:	4b05      	ldr	r3, [pc, #20]	; (401dd8 <std.isra.0+0x3c>)
  401dc4:	62a3      	str	r3, [r4, #40]	; 0x28
  401dc6:	4b05      	ldr	r3, [pc, #20]	; (401ddc <std.isra.0+0x40>)
  401dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
  401dca:	4b05      	ldr	r3, [pc, #20]	; (401de0 <std.isra.0+0x44>)
  401dcc:	6224      	str	r4, [r4, #32]
  401dce:	6323      	str	r3, [r4, #48]	; 0x30
  401dd0:	bd10      	pop	{r4, pc}
  401dd2:	bf00      	nop
  401dd4:	0040271d 	.word	0x0040271d
  401dd8:	0040273f 	.word	0x0040273f
  401ddc:	00402777 	.word	0x00402777
  401de0:	0040279b 	.word	0x0040279b

00401de4 <__sfmoreglue>:
  401de4:	b570      	push	{r4, r5, r6, lr}
  401de6:	1e4a      	subs	r2, r1, #1
  401de8:	2568      	movs	r5, #104	; 0x68
  401dea:	4355      	muls	r5, r2
  401dec:	460e      	mov	r6, r1
  401dee:	f105 0174 	add.w	r1, r5, #116	; 0x74
  401df2:	f000 f951 	bl	402098 <_malloc_r>
  401df6:	4604      	mov	r4, r0
  401df8:	b140      	cbz	r0, 401e0c <__sfmoreglue+0x28>
  401dfa:	2100      	movs	r1, #0
  401dfc:	e880 0042 	stmia.w	r0, {r1, r6}
  401e00:	300c      	adds	r0, #12
  401e02:	60a0      	str	r0, [r4, #8]
  401e04:	f105 0268 	add.w	r2, r5, #104	; 0x68
  401e08:	f7ff fd15 	bl	401836 <memset>
  401e0c:	4620      	mov	r0, r4
  401e0e:	bd70      	pop	{r4, r5, r6, pc}

00401e10 <__sinit>:
  401e10:	6983      	ldr	r3, [r0, #24]
  401e12:	b510      	push	{r4, lr}
  401e14:	4604      	mov	r4, r0
  401e16:	bb33      	cbnz	r3, 401e66 <__sinit+0x56>
  401e18:	6483      	str	r3, [r0, #72]	; 0x48
  401e1a:	64c3      	str	r3, [r0, #76]	; 0x4c
  401e1c:	6503      	str	r3, [r0, #80]	; 0x50
  401e1e:	4b12      	ldr	r3, [pc, #72]	; (401e68 <__sinit+0x58>)
  401e20:	4a12      	ldr	r2, [pc, #72]	; (401e6c <__sinit+0x5c>)
  401e22:	681b      	ldr	r3, [r3, #0]
  401e24:	6282      	str	r2, [r0, #40]	; 0x28
  401e26:	4298      	cmp	r0, r3
  401e28:	bf04      	itt	eq
  401e2a:	2301      	moveq	r3, #1
  401e2c:	6183      	streq	r3, [r0, #24]
  401e2e:	f000 f81f 	bl	401e70 <__sfp>
  401e32:	6060      	str	r0, [r4, #4]
  401e34:	4620      	mov	r0, r4
  401e36:	f000 f81b 	bl	401e70 <__sfp>
  401e3a:	60a0      	str	r0, [r4, #8]
  401e3c:	4620      	mov	r0, r4
  401e3e:	f000 f817 	bl	401e70 <__sfp>
  401e42:	2200      	movs	r2, #0
  401e44:	60e0      	str	r0, [r4, #12]
  401e46:	2104      	movs	r1, #4
  401e48:	6860      	ldr	r0, [r4, #4]
  401e4a:	f7ff ffa7 	bl	401d9c <std.isra.0>
  401e4e:	2201      	movs	r2, #1
  401e50:	2109      	movs	r1, #9
  401e52:	68a0      	ldr	r0, [r4, #8]
  401e54:	f7ff ffa2 	bl	401d9c <std.isra.0>
  401e58:	2202      	movs	r2, #2
  401e5a:	2112      	movs	r1, #18
  401e5c:	68e0      	ldr	r0, [r4, #12]
  401e5e:	f7ff ff9d 	bl	401d9c <std.isra.0>
  401e62:	2301      	movs	r3, #1
  401e64:	61a3      	str	r3, [r4, #24]
  401e66:	bd10      	pop	{r4, pc}
  401e68:	00402aac 	.word	0x00402aac
  401e6c:	00401d91 	.word	0x00401d91

00401e70 <__sfp>:
  401e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e72:	4b1c      	ldr	r3, [pc, #112]	; (401ee4 <__sfp+0x74>)
  401e74:	681e      	ldr	r6, [r3, #0]
  401e76:	69b3      	ldr	r3, [r6, #24]
  401e78:	4607      	mov	r7, r0
  401e7a:	b913      	cbnz	r3, 401e82 <__sfp+0x12>
  401e7c:	4630      	mov	r0, r6
  401e7e:	f7ff ffc7 	bl	401e10 <__sinit>
  401e82:	3648      	adds	r6, #72	; 0x48
  401e84:	68b4      	ldr	r4, [r6, #8]
  401e86:	6873      	ldr	r3, [r6, #4]
  401e88:	3b01      	subs	r3, #1
  401e8a:	d503      	bpl.n	401e94 <__sfp+0x24>
  401e8c:	6833      	ldr	r3, [r6, #0]
  401e8e:	b133      	cbz	r3, 401e9e <__sfp+0x2e>
  401e90:	6836      	ldr	r6, [r6, #0]
  401e92:	e7f7      	b.n	401e84 <__sfp+0x14>
  401e94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  401e98:	b16d      	cbz	r5, 401eb6 <__sfp+0x46>
  401e9a:	3468      	adds	r4, #104	; 0x68
  401e9c:	e7f4      	b.n	401e88 <__sfp+0x18>
  401e9e:	2104      	movs	r1, #4
  401ea0:	4638      	mov	r0, r7
  401ea2:	f7ff ff9f 	bl	401de4 <__sfmoreglue>
  401ea6:	6030      	str	r0, [r6, #0]
  401ea8:	2800      	cmp	r0, #0
  401eaa:	d1f1      	bne.n	401e90 <__sfp+0x20>
  401eac:	230c      	movs	r3, #12
  401eae:	603b      	str	r3, [r7, #0]
  401eb0:	4604      	mov	r4, r0
  401eb2:	4620      	mov	r0, r4
  401eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401eba:	81e3      	strh	r3, [r4, #14]
  401ebc:	2301      	movs	r3, #1
  401ebe:	81a3      	strh	r3, [r4, #12]
  401ec0:	6665      	str	r5, [r4, #100]	; 0x64
  401ec2:	6025      	str	r5, [r4, #0]
  401ec4:	60a5      	str	r5, [r4, #8]
  401ec6:	6065      	str	r5, [r4, #4]
  401ec8:	6125      	str	r5, [r4, #16]
  401eca:	6165      	str	r5, [r4, #20]
  401ecc:	61a5      	str	r5, [r4, #24]
  401ece:	2208      	movs	r2, #8
  401ed0:	4629      	mov	r1, r5
  401ed2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  401ed6:	f7ff fcae 	bl	401836 <memset>
  401eda:	6365      	str	r5, [r4, #52]	; 0x34
  401edc:	63a5      	str	r5, [r4, #56]	; 0x38
  401ede:	64a5      	str	r5, [r4, #72]	; 0x48
  401ee0:	64e5      	str	r5, [r4, #76]	; 0x4c
  401ee2:	e7e6      	b.n	401eb2 <__sfp+0x42>
  401ee4:	00402aac 	.word	0x00402aac

00401ee8 <_fwalk_reent>:
  401ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401eec:	4680      	mov	r8, r0
  401eee:	4689      	mov	r9, r1
  401ef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
  401ef4:	2600      	movs	r6, #0
  401ef6:	b914      	cbnz	r4, 401efe <_fwalk_reent+0x16>
  401ef8:	4630      	mov	r0, r6
  401efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401efe:	68a5      	ldr	r5, [r4, #8]
  401f00:	6867      	ldr	r7, [r4, #4]
  401f02:	3f01      	subs	r7, #1
  401f04:	d501      	bpl.n	401f0a <_fwalk_reent+0x22>
  401f06:	6824      	ldr	r4, [r4, #0]
  401f08:	e7f5      	b.n	401ef6 <_fwalk_reent+0xe>
  401f0a:	89ab      	ldrh	r3, [r5, #12]
  401f0c:	2b01      	cmp	r3, #1
  401f0e:	d907      	bls.n	401f20 <_fwalk_reent+0x38>
  401f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  401f14:	3301      	adds	r3, #1
  401f16:	d003      	beq.n	401f20 <_fwalk_reent+0x38>
  401f18:	4629      	mov	r1, r5
  401f1a:	4640      	mov	r0, r8
  401f1c:	47c8      	blx	r9
  401f1e:	4306      	orrs	r6, r0
  401f20:	3568      	adds	r5, #104	; 0x68
  401f22:	e7ee      	b.n	401f02 <_fwalk_reent+0x1a>

00401f24 <__swhatbuf_r>:
  401f24:	b570      	push	{r4, r5, r6, lr}
  401f26:	460e      	mov	r6, r1
  401f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401f2c:	2900      	cmp	r1, #0
  401f2e:	b090      	sub	sp, #64	; 0x40
  401f30:	4614      	mov	r4, r2
  401f32:	461d      	mov	r5, r3
  401f34:	da07      	bge.n	401f46 <__swhatbuf_r+0x22>
  401f36:	2300      	movs	r3, #0
  401f38:	602b      	str	r3, [r5, #0]
  401f3a:	89b3      	ldrh	r3, [r6, #12]
  401f3c:	061a      	lsls	r2, r3, #24
  401f3e:	d410      	bmi.n	401f62 <__swhatbuf_r+0x3e>
  401f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401f44:	e00e      	b.n	401f64 <__swhatbuf_r+0x40>
  401f46:	aa01      	add	r2, sp, #4
  401f48:	f000 fc4e 	bl	4027e8 <_fstat_r>
  401f4c:	2800      	cmp	r0, #0
  401f4e:	dbf2      	blt.n	401f36 <__swhatbuf_r+0x12>
  401f50:	9a02      	ldr	r2, [sp, #8]
  401f52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401f56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  401f5a:	425a      	negs	r2, r3
  401f5c:	415a      	adcs	r2, r3
  401f5e:	602a      	str	r2, [r5, #0]
  401f60:	e7ee      	b.n	401f40 <__swhatbuf_r+0x1c>
  401f62:	2340      	movs	r3, #64	; 0x40
  401f64:	2000      	movs	r0, #0
  401f66:	6023      	str	r3, [r4, #0]
  401f68:	b010      	add	sp, #64	; 0x40
  401f6a:	bd70      	pop	{r4, r5, r6, pc}

00401f6c <__smakebuf_r>:
  401f6c:	898b      	ldrh	r3, [r1, #12]
  401f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  401f70:	079d      	lsls	r5, r3, #30
  401f72:	4606      	mov	r6, r0
  401f74:	460c      	mov	r4, r1
  401f76:	d507      	bpl.n	401f88 <__smakebuf_r+0x1c>
  401f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
  401f7c:	6023      	str	r3, [r4, #0]
  401f7e:	6123      	str	r3, [r4, #16]
  401f80:	2301      	movs	r3, #1
  401f82:	6163      	str	r3, [r4, #20]
  401f84:	b002      	add	sp, #8
  401f86:	bd70      	pop	{r4, r5, r6, pc}
  401f88:	ab01      	add	r3, sp, #4
  401f8a:	466a      	mov	r2, sp
  401f8c:	f7ff ffca 	bl	401f24 <__swhatbuf_r>
  401f90:	9900      	ldr	r1, [sp, #0]
  401f92:	4605      	mov	r5, r0
  401f94:	4630      	mov	r0, r6
  401f96:	f000 f87f 	bl	402098 <_malloc_r>
  401f9a:	b948      	cbnz	r0, 401fb0 <__smakebuf_r+0x44>
  401f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401fa0:	059a      	lsls	r2, r3, #22
  401fa2:	d4ef      	bmi.n	401f84 <__smakebuf_r+0x18>
  401fa4:	f023 0303 	bic.w	r3, r3, #3
  401fa8:	f043 0302 	orr.w	r3, r3, #2
  401fac:	81a3      	strh	r3, [r4, #12]
  401fae:	e7e3      	b.n	401f78 <__smakebuf_r+0xc>
  401fb0:	4b0d      	ldr	r3, [pc, #52]	; (401fe8 <__smakebuf_r+0x7c>)
  401fb2:	62b3      	str	r3, [r6, #40]	; 0x28
  401fb4:	89a3      	ldrh	r3, [r4, #12]
  401fb6:	6020      	str	r0, [r4, #0]
  401fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401fbc:	81a3      	strh	r3, [r4, #12]
  401fbe:	9b00      	ldr	r3, [sp, #0]
  401fc0:	6163      	str	r3, [r4, #20]
  401fc2:	9b01      	ldr	r3, [sp, #4]
  401fc4:	6120      	str	r0, [r4, #16]
  401fc6:	b15b      	cbz	r3, 401fe0 <__smakebuf_r+0x74>
  401fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401fcc:	4630      	mov	r0, r6
  401fce:	f000 fc1d 	bl	40280c <_isatty_r>
  401fd2:	b128      	cbz	r0, 401fe0 <__smakebuf_r+0x74>
  401fd4:	89a3      	ldrh	r3, [r4, #12]
  401fd6:	f023 0303 	bic.w	r3, r3, #3
  401fda:	f043 0301 	orr.w	r3, r3, #1
  401fde:	81a3      	strh	r3, [r4, #12]
  401fe0:	89a3      	ldrh	r3, [r4, #12]
  401fe2:	431d      	orrs	r5, r3
  401fe4:	81a5      	strh	r5, [r4, #12]
  401fe6:	e7cd      	b.n	401f84 <__smakebuf_r+0x18>
  401fe8:	00401d91 	.word	0x00401d91

00401fec <malloc>:
  401fec:	4b02      	ldr	r3, [pc, #8]	; (401ff8 <malloc+0xc>)
  401fee:	4601      	mov	r1, r0
  401ff0:	6818      	ldr	r0, [r3, #0]
  401ff2:	f000 b851 	b.w	402098 <_malloc_r>
  401ff6:	bf00      	nop
  401ff8:	2040004c 	.word	0x2040004c

00401ffc <_free_r>:
  401ffc:	b538      	push	{r3, r4, r5, lr}
  401ffe:	4605      	mov	r5, r0
  402000:	2900      	cmp	r1, #0
  402002:	d045      	beq.n	402090 <_free_r+0x94>
  402004:	f851 3c04 	ldr.w	r3, [r1, #-4]
  402008:	1f0c      	subs	r4, r1, #4
  40200a:	2b00      	cmp	r3, #0
  40200c:	bfb8      	it	lt
  40200e:	18e4      	addlt	r4, r4, r3
  402010:	f000 fc6e 	bl	4028f0 <__malloc_lock>
  402014:	4a1f      	ldr	r2, [pc, #124]	; (402094 <_free_r+0x98>)
  402016:	6813      	ldr	r3, [r2, #0]
  402018:	4610      	mov	r0, r2
  40201a:	b933      	cbnz	r3, 40202a <_free_r+0x2e>
  40201c:	6063      	str	r3, [r4, #4]
  40201e:	6014      	str	r4, [r2, #0]
  402020:	4628      	mov	r0, r5
  402022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402026:	f000 bc64 	b.w	4028f2 <__malloc_unlock>
  40202a:	42a3      	cmp	r3, r4
  40202c:	d90c      	bls.n	402048 <_free_r+0x4c>
  40202e:	6821      	ldr	r1, [r4, #0]
  402030:	1862      	adds	r2, r4, r1
  402032:	4293      	cmp	r3, r2
  402034:	bf04      	itt	eq
  402036:	681a      	ldreq	r2, [r3, #0]
  402038:	685b      	ldreq	r3, [r3, #4]
  40203a:	6063      	str	r3, [r4, #4]
  40203c:	bf04      	itt	eq
  40203e:	1852      	addeq	r2, r2, r1
  402040:	6022      	streq	r2, [r4, #0]
  402042:	6004      	str	r4, [r0, #0]
  402044:	e7ec      	b.n	402020 <_free_r+0x24>
  402046:	4613      	mov	r3, r2
  402048:	685a      	ldr	r2, [r3, #4]
  40204a:	b10a      	cbz	r2, 402050 <_free_r+0x54>
  40204c:	42a2      	cmp	r2, r4
  40204e:	d9fa      	bls.n	402046 <_free_r+0x4a>
  402050:	6819      	ldr	r1, [r3, #0]
  402052:	1858      	adds	r0, r3, r1
  402054:	42a0      	cmp	r0, r4
  402056:	d10b      	bne.n	402070 <_free_r+0x74>
  402058:	6820      	ldr	r0, [r4, #0]
  40205a:	4401      	add	r1, r0
  40205c:	1858      	adds	r0, r3, r1
  40205e:	4282      	cmp	r2, r0
  402060:	6019      	str	r1, [r3, #0]
  402062:	d1dd      	bne.n	402020 <_free_r+0x24>
  402064:	6810      	ldr	r0, [r2, #0]
  402066:	6852      	ldr	r2, [r2, #4]
  402068:	605a      	str	r2, [r3, #4]
  40206a:	4401      	add	r1, r0
  40206c:	6019      	str	r1, [r3, #0]
  40206e:	e7d7      	b.n	402020 <_free_r+0x24>
  402070:	d902      	bls.n	402078 <_free_r+0x7c>
  402072:	230c      	movs	r3, #12
  402074:	602b      	str	r3, [r5, #0]
  402076:	e7d3      	b.n	402020 <_free_r+0x24>
  402078:	6820      	ldr	r0, [r4, #0]
  40207a:	1821      	adds	r1, r4, r0
  40207c:	428a      	cmp	r2, r1
  40207e:	bf04      	itt	eq
  402080:	6811      	ldreq	r1, [r2, #0]
  402082:	6852      	ldreq	r2, [r2, #4]
  402084:	6062      	str	r2, [r4, #4]
  402086:	bf04      	itt	eq
  402088:	1809      	addeq	r1, r1, r0
  40208a:	6021      	streq	r1, [r4, #0]
  40208c:	605c      	str	r4, [r3, #4]
  40208e:	e7c7      	b.n	402020 <_free_r+0x24>
  402090:	bd38      	pop	{r3, r4, r5, pc}
  402092:	bf00      	nop
  402094:	20400160 	.word	0x20400160

00402098 <_malloc_r>:
  402098:	b570      	push	{r4, r5, r6, lr}
  40209a:	1ccd      	adds	r5, r1, #3
  40209c:	f025 0503 	bic.w	r5, r5, #3
  4020a0:	3508      	adds	r5, #8
  4020a2:	2d0c      	cmp	r5, #12
  4020a4:	bf38      	it	cc
  4020a6:	250c      	movcc	r5, #12
  4020a8:	2d00      	cmp	r5, #0
  4020aa:	4606      	mov	r6, r0
  4020ac:	db01      	blt.n	4020b2 <_malloc_r+0x1a>
  4020ae:	42a9      	cmp	r1, r5
  4020b0:	d903      	bls.n	4020ba <_malloc_r+0x22>
  4020b2:	230c      	movs	r3, #12
  4020b4:	6033      	str	r3, [r6, #0]
  4020b6:	2000      	movs	r0, #0
  4020b8:	bd70      	pop	{r4, r5, r6, pc}
  4020ba:	f000 fc19 	bl	4028f0 <__malloc_lock>
  4020be:	4a23      	ldr	r2, [pc, #140]	; (40214c <_malloc_r+0xb4>)
  4020c0:	6814      	ldr	r4, [r2, #0]
  4020c2:	4621      	mov	r1, r4
  4020c4:	b991      	cbnz	r1, 4020ec <_malloc_r+0x54>
  4020c6:	4c22      	ldr	r4, [pc, #136]	; (402150 <_malloc_r+0xb8>)
  4020c8:	6823      	ldr	r3, [r4, #0]
  4020ca:	b91b      	cbnz	r3, 4020d4 <_malloc_r+0x3c>
  4020cc:	4630      	mov	r0, r6
  4020ce:	f000 fb15 	bl	4026fc <_sbrk_r>
  4020d2:	6020      	str	r0, [r4, #0]
  4020d4:	4629      	mov	r1, r5
  4020d6:	4630      	mov	r0, r6
  4020d8:	f000 fb10 	bl	4026fc <_sbrk_r>
  4020dc:	1c43      	adds	r3, r0, #1
  4020de:	d126      	bne.n	40212e <_malloc_r+0x96>
  4020e0:	230c      	movs	r3, #12
  4020e2:	6033      	str	r3, [r6, #0]
  4020e4:	4630      	mov	r0, r6
  4020e6:	f000 fc04 	bl	4028f2 <__malloc_unlock>
  4020ea:	e7e4      	b.n	4020b6 <_malloc_r+0x1e>
  4020ec:	680b      	ldr	r3, [r1, #0]
  4020ee:	1b5b      	subs	r3, r3, r5
  4020f0:	d41a      	bmi.n	402128 <_malloc_r+0x90>
  4020f2:	2b0b      	cmp	r3, #11
  4020f4:	d90f      	bls.n	402116 <_malloc_r+0x7e>
  4020f6:	600b      	str	r3, [r1, #0]
  4020f8:	50cd      	str	r5, [r1, r3]
  4020fa:	18cc      	adds	r4, r1, r3
  4020fc:	4630      	mov	r0, r6
  4020fe:	f000 fbf8 	bl	4028f2 <__malloc_unlock>
  402102:	f104 000b 	add.w	r0, r4, #11
  402106:	1d23      	adds	r3, r4, #4
  402108:	f020 0007 	bic.w	r0, r0, #7
  40210c:	1ac3      	subs	r3, r0, r3
  40210e:	d01b      	beq.n	402148 <_malloc_r+0xb0>
  402110:	425a      	negs	r2, r3
  402112:	50e2      	str	r2, [r4, r3]
  402114:	bd70      	pop	{r4, r5, r6, pc}
  402116:	428c      	cmp	r4, r1
  402118:	bf0d      	iteet	eq
  40211a:	6863      	ldreq	r3, [r4, #4]
  40211c:	684b      	ldrne	r3, [r1, #4]
  40211e:	6063      	strne	r3, [r4, #4]
  402120:	6013      	streq	r3, [r2, #0]
  402122:	bf18      	it	ne
  402124:	460c      	movne	r4, r1
  402126:	e7e9      	b.n	4020fc <_malloc_r+0x64>
  402128:	460c      	mov	r4, r1
  40212a:	6849      	ldr	r1, [r1, #4]
  40212c:	e7ca      	b.n	4020c4 <_malloc_r+0x2c>
  40212e:	1cc4      	adds	r4, r0, #3
  402130:	f024 0403 	bic.w	r4, r4, #3
  402134:	42a0      	cmp	r0, r4
  402136:	d005      	beq.n	402144 <_malloc_r+0xac>
  402138:	1a21      	subs	r1, r4, r0
  40213a:	4630      	mov	r0, r6
  40213c:	f000 fade 	bl	4026fc <_sbrk_r>
  402140:	3001      	adds	r0, #1
  402142:	d0cd      	beq.n	4020e0 <_malloc_r+0x48>
  402144:	6025      	str	r5, [r4, #0]
  402146:	e7d9      	b.n	4020fc <_malloc_r+0x64>
  402148:	bd70      	pop	{r4, r5, r6, pc}
  40214a:	bf00      	nop
  40214c:	20400160 	.word	0x20400160
  402150:	20400164 	.word	0x20400164

00402154 <__sfputc_r>:
  402154:	6893      	ldr	r3, [r2, #8]
  402156:	3b01      	subs	r3, #1
  402158:	2b00      	cmp	r3, #0
  40215a:	b410      	push	{r4}
  40215c:	6093      	str	r3, [r2, #8]
  40215e:	da08      	bge.n	402172 <__sfputc_r+0x1e>
  402160:	6994      	ldr	r4, [r2, #24]
  402162:	42a3      	cmp	r3, r4
  402164:	db02      	blt.n	40216c <__sfputc_r+0x18>
  402166:	b2cb      	uxtb	r3, r1
  402168:	2b0a      	cmp	r3, #10
  40216a:	d102      	bne.n	402172 <__sfputc_r+0x1e>
  40216c:	bc10      	pop	{r4}
  40216e:	f7ff bc9d 	b.w	401aac <__swbuf_r>
  402172:	6813      	ldr	r3, [r2, #0]
  402174:	1c58      	adds	r0, r3, #1
  402176:	6010      	str	r0, [r2, #0]
  402178:	7019      	strb	r1, [r3, #0]
  40217a:	b2c8      	uxtb	r0, r1
  40217c:	bc10      	pop	{r4}
  40217e:	4770      	bx	lr

00402180 <__sfputs_r>:
  402180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402182:	4606      	mov	r6, r0
  402184:	460f      	mov	r7, r1
  402186:	4614      	mov	r4, r2
  402188:	18d5      	adds	r5, r2, r3
  40218a:	42ac      	cmp	r4, r5
  40218c:	d101      	bne.n	402192 <__sfputs_r+0x12>
  40218e:	2000      	movs	r0, #0
  402190:	e007      	b.n	4021a2 <__sfputs_r+0x22>
  402192:	463a      	mov	r2, r7
  402194:	f814 1b01 	ldrb.w	r1, [r4], #1
  402198:	4630      	mov	r0, r6
  40219a:	f7ff ffdb 	bl	402154 <__sfputc_r>
  40219e:	1c43      	adds	r3, r0, #1
  4021a0:	d1f3      	bne.n	40218a <__sfputs_r+0xa>
  4021a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004021a4 <_vfiprintf_r>:
  4021a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021a8:	b09d      	sub	sp, #116	; 0x74
  4021aa:	460c      	mov	r4, r1
  4021ac:	4617      	mov	r7, r2
  4021ae:	9303      	str	r3, [sp, #12]
  4021b0:	4606      	mov	r6, r0
  4021b2:	b118      	cbz	r0, 4021bc <_vfiprintf_r+0x18>
  4021b4:	6983      	ldr	r3, [r0, #24]
  4021b6:	b90b      	cbnz	r3, 4021bc <_vfiprintf_r+0x18>
  4021b8:	f7ff fe2a 	bl	401e10 <__sinit>
  4021bc:	4b7c      	ldr	r3, [pc, #496]	; (4023b0 <_vfiprintf_r+0x20c>)
  4021be:	429c      	cmp	r4, r3
  4021c0:	d157      	bne.n	402272 <_vfiprintf_r+0xce>
  4021c2:	6874      	ldr	r4, [r6, #4]
  4021c4:	89a3      	ldrh	r3, [r4, #12]
  4021c6:	0718      	lsls	r0, r3, #28
  4021c8:	d55d      	bpl.n	402286 <_vfiprintf_r+0xe2>
  4021ca:	6923      	ldr	r3, [r4, #16]
  4021cc:	2b00      	cmp	r3, #0
  4021ce:	d05a      	beq.n	402286 <_vfiprintf_r+0xe2>
  4021d0:	2300      	movs	r3, #0
  4021d2:	9309      	str	r3, [sp, #36]	; 0x24
  4021d4:	2320      	movs	r3, #32
  4021d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4021da:	2330      	movs	r3, #48	; 0x30
  4021dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4021e0:	f04f 0b01 	mov.w	fp, #1
  4021e4:	46b8      	mov	r8, r7
  4021e6:	4645      	mov	r5, r8
  4021e8:	f815 3b01 	ldrb.w	r3, [r5], #1
  4021ec:	2b00      	cmp	r3, #0
  4021ee:	d155      	bne.n	40229c <_vfiprintf_r+0xf8>
  4021f0:	ebb8 0a07 	subs.w	sl, r8, r7
  4021f4:	d00b      	beq.n	40220e <_vfiprintf_r+0x6a>
  4021f6:	4653      	mov	r3, sl
  4021f8:	463a      	mov	r2, r7
  4021fa:	4621      	mov	r1, r4
  4021fc:	4630      	mov	r0, r6
  4021fe:	f7ff ffbf 	bl	402180 <__sfputs_r>
  402202:	3001      	adds	r0, #1
  402204:	f000 80c4 	beq.w	402390 <_vfiprintf_r+0x1ec>
  402208:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40220a:	4453      	add	r3, sl
  40220c:	9309      	str	r3, [sp, #36]	; 0x24
  40220e:	f898 3000 	ldrb.w	r3, [r8]
  402212:	2b00      	cmp	r3, #0
  402214:	f000 80bc 	beq.w	402390 <_vfiprintf_r+0x1ec>
  402218:	2300      	movs	r3, #0
  40221a:	f04f 32ff 	mov.w	r2, #4294967295
  40221e:	9304      	str	r3, [sp, #16]
  402220:	9307      	str	r3, [sp, #28]
  402222:	9205      	str	r2, [sp, #20]
  402224:	9306      	str	r3, [sp, #24]
  402226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40222a:	931a      	str	r3, [sp, #104]	; 0x68
  40222c:	2205      	movs	r2, #5
  40222e:	7829      	ldrb	r1, [r5, #0]
  402230:	4860      	ldr	r0, [pc, #384]	; (4023b4 <_vfiprintf_r+0x210>)
  402232:	f000 fb0d 	bl	402850 <memchr>
  402236:	f105 0801 	add.w	r8, r5, #1
  40223a:	9b04      	ldr	r3, [sp, #16]
  40223c:	2800      	cmp	r0, #0
  40223e:	d131      	bne.n	4022a4 <_vfiprintf_r+0x100>
  402240:	06d9      	lsls	r1, r3, #27
  402242:	bf44      	itt	mi
  402244:	2220      	movmi	r2, #32
  402246:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40224a:	071a      	lsls	r2, r3, #28
  40224c:	bf44      	itt	mi
  40224e:	222b      	movmi	r2, #43	; 0x2b
  402250:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  402254:	782a      	ldrb	r2, [r5, #0]
  402256:	2a2a      	cmp	r2, #42	; 0x2a
  402258:	d02c      	beq.n	4022b4 <_vfiprintf_r+0x110>
  40225a:	9a07      	ldr	r2, [sp, #28]
  40225c:	2100      	movs	r1, #0
  40225e:	200a      	movs	r0, #10
  402260:	46a8      	mov	r8, r5
  402262:	3501      	adds	r5, #1
  402264:	f898 3000 	ldrb.w	r3, [r8]
  402268:	3b30      	subs	r3, #48	; 0x30
  40226a:	2b09      	cmp	r3, #9
  40226c:	d96d      	bls.n	40234a <_vfiprintf_r+0x1a6>
  40226e:	b371      	cbz	r1, 4022ce <_vfiprintf_r+0x12a>
  402270:	e026      	b.n	4022c0 <_vfiprintf_r+0x11c>
  402272:	4b51      	ldr	r3, [pc, #324]	; (4023b8 <_vfiprintf_r+0x214>)
  402274:	429c      	cmp	r4, r3
  402276:	d101      	bne.n	40227c <_vfiprintf_r+0xd8>
  402278:	68b4      	ldr	r4, [r6, #8]
  40227a:	e7a3      	b.n	4021c4 <_vfiprintf_r+0x20>
  40227c:	4b4f      	ldr	r3, [pc, #316]	; (4023bc <_vfiprintf_r+0x218>)
  40227e:	429c      	cmp	r4, r3
  402280:	bf08      	it	eq
  402282:	68f4      	ldreq	r4, [r6, #12]
  402284:	e79e      	b.n	4021c4 <_vfiprintf_r+0x20>
  402286:	4621      	mov	r1, r4
  402288:	4630      	mov	r0, r6
  40228a:	f7ff fc61 	bl	401b50 <__swsetup_r>
  40228e:	2800      	cmp	r0, #0
  402290:	d09e      	beq.n	4021d0 <_vfiprintf_r+0x2c>
  402292:	f04f 30ff 	mov.w	r0, #4294967295
  402296:	b01d      	add	sp, #116	; 0x74
  402298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40229c:	2b25      	cmp	r3, #37	; 0x25
  40229e:	d0a7      	beq.n	4021f0 <_vfiprintf_r+0x4c>
  4022a0:	46a8      	mov	r8, r5
  4022a2:	e7a0      	b.n	4021e6 <_vfiprintf_r+0x42>
  4022a4:	4a43      	ldr	r2, [pc, #268]	; (4023b4 <_vfiprintf_r+0x210>)
  4022a6:	1a80      	subs	r0, r0, r2
  4022a8:	fa0b f000 	lsl.w	r0, fp, r0
  4022ac:	4318      	orrs	r0, r3
  4022ae:	9004      	str	r0, [sp, #16]
  4022b0:	4645      	mov	r5, r8
  4022b2:	e7bb      	b.n	40222c <_vfiprintf_r+0x88>
  4022b4:	9a03      	ldr	r2, [sp, #12]
  4022b6:	1d11      	adds	r1, r2, #4
  4022b8:	6812      	ldr	r2, [r2, #0]
  4022ba:	9103      	str	r1, [sp, #12]
  4022bc:	2a00      	cmp	r2, #0
  4022be:	db01      	blt.n	4022c4 <_vfiprintf_r+0x120>
  4022c0:	9207      	str	r2, [sp, #28]
  4022c2:	e004      	b.n	4022ce <_vfiprintf_r+0x12a>
  4022c4:	4252      	negs	r2, r2
  4022c6:	f043 0302 	orr.w	r3, r3, #2
  4022ca:	9207      	str	r2, [sp, #28]
  4022cc:	9304      	str	r3, [sp, #16]
  4022ce:	f898 3000 	ldrb.w	r3, [r8]
  4022d2:	2b2e      	cmp	r3, #46	; 0x2e
  4022d4:	d110      	bne.n	4022f8 <_vfiprintf_r+0x154>
  4022d6:	f898 3001 	ldrb.w	r3, [r8, #1]
  4022da:	2b2a      	cmp	r3, #42	; 0x2a
  4022dc:	f108 0101 	add.w	r1, r8, #1
  4022e0:	d137      	bne.n	402352 <_vfiprintf_r+0x1ae>
  4022e2:	9b03      	ldr	r3, [sp, #12]
  4022e4:	1d1a      	adds	r2, r3, #4
  4022e6:	681b      	ldr	r3, [r3, #0]
  4022e8:	9203      	str	r2, [sp, #12]
  4022ea:	2b00      	cmp	r3, #0
  4022ec:	bfb8      	it	lt
  4022ee:	f04f 33ff 	movlt.w	r3, #4294967295
  4022f2:	f108 0802 	add.w	r8, r8, #2
  4022f6:	9305      	str	r3, [sp, #20]
  4022f8:	4d31      	ldr	r5, [pc, #196]	; (4023c0 <_vfiprintf_r+0x21c>)
  4022fa:	f898 1000 	ldrb.w	r1, [r8]
  4022fe:	2203      	movs	r2, #3
  402300:	4628      	mov	r0, r5
  402302:	f000 faa5 	bl	402850 <memchr>
  402306:	b140      	cbz	r0, 40231a <_vfiprintf_r+0x176>
  402308:	2340      	movs	r3, #64	; 0x40
  40230a:	1b40      	subs	r0, r0, r5
  40230c:	fa03 f000 	lsl.w	r0, r3, r0
  402310:	9b04      	ldr	r3, [sp, #16]
  402312:	4303      	orrs	r3, r0
  402314:	9304      	str	r3, [sp, #16]
  402316:	f108 0801 	add.w	r8, r8, #1
  40231a:	f898 1000 	ldrb.w	r1, [r8]
  40231e:	4829      	ldr	r0, [pc, #164]	; (4023c4 <_vfiprintf_r+0x220>)
  402320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  402324:	2206      	movs	r2, #6
  402326:	f108 0701 	add.w	r7, r8, #1
  40232a:	f000 fa91 	bl	402850 <memchr>
  40232e:	2800      	cmp	r0, #0
  402330:	d034      	beq.n	40239c <_vfiprintf_r+0x1f8>
  402332:	4b25      	ldr	r3, [pc, #148]	; (4023c8 <_vfiprintf_r+0x224>)
  402334:	bb03      	cbnz	r3, 402378 <_vfiprintf_r+0x1d4>
  402336:	9b03      	ldr	r3, [sp, #12]
  402338:	3307      	adds	r3, #7
  40233a:	f023 0307 	bic.w	r3, r3, #7
  40233e:	3308      	adds	r3, #8
  402340:	9303      	str	r3, [sp, #12]
  402342:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402344:	444b      	add	r3, r9
  402346:	9309      	str	r3, [sp, #36]	; 0x24
  402348:	e74c      	b.n	4021e4 <_vfiprintf_r+0x40>
  40234a:	fb00 3202 	mla	r2, r0, r2, r3
  40234e:	2101      	movs	r1, #1
  402350:	e786      	b.n	402260 <_vfiprintf_r+0xbc>
  402352:	2300      	movs	r3, #0
  402354:	9305      	str	r3, [sp, #20]
  402356:	4618      	mov	r0, r3
  402358:	250a      	movs	r5, #10
  40235a:	4688      	mov	r8, r1
  40235c:	3101      	adds	r1, #1
  40235e:	f898 2000 	ldrb.w	r2, [r8]
  402362:	3a30      	subs	r2, #48	; 0x30
  402364:	2a09      	cmp	r2, #9
  402366:	d903      	bls.n	402370 <_vfiprintf_r+0x1cc>
  402368:	2b00      	cmp	r3, #0
  40236a:	d0c5      	beq.n	4022f8 <_vfiprintf_r+0x154>
  40236c:	9005      	str	r0, [sp, #20]
  40236e:	e7c3      	b.n	4022f8 <_vfiprintf_r+0x154>
  402370:	fb05 2000 	mla	r0, r5, r0, r2
  402374:	2301      	movs	r3, #1
  402376:	e7f0      	b.n	40235a <_vfiprintf_r+0x1b6>
  402378:	ab03      	add	r3, sp, #12
  40237a:	9300      	str	r3, [sp, #0]
  40237c:	4622      	mov	r2, r4
  40237e:	4b13      	ldr	r3, [pc, #76]	; (4023cc <_vfiprintf_r+0x228>)
  402380:	a904      	add	r1, sp, #16
  402382:	4630      	mov	r0, r6
  402384:	f3af 8000 	nop.w
  402388:	f1b0 3fff 	cmp.w	r0, #4294967295
  40238c:	4681      	mov	r9, r0
  40238e:	d1d8      	bne.n	402342 <_vfiprintf_r+0x19e>
  402390:	89a3      	ldrh	r3, [r4, #12]
  402392:	065b      	lsls	r3, r3, #25
  402394:	f53f af7d 	bmi.w	402292 <_vfiprintf_r+0xee>
  402398:	9809      	ldr	r0, [sp, #36]	; 0x24
  40239a:	e77c      	b.n	402296 <_vfiprintf_r+0xf2>
  40239c:	ab03      	add	r3, sp, #12
  40239e:	9300      	str	r3, [sp, #0]
  4023a0:	4622      	mov	r2, r4
  4023a2:	4b0a      	ldr	r3, [pc, #40]	; (4023cc <_vfiprintf_r+0x228>)
  4023a4:	a904      	add	r1, sp, #16
  4023a6:	4630      	mov	r0, r6
  4023a8:	f000 f888 	bl	4024bc <_printf_i>
  4023ac:	e7ec      	b.n	402388 <_vfiprintf_r+0x1e4>
  4023ae:	bf00      	nop
  4023b0:	00402ad0 	.word	0x00402ad0
  4023b4:	00402b10 	.word	0x00402b10
  4023b8:	00402af0 	.word	0x00402af0
  4023bc:	00402ab0 	.word	0x00402ab0
  4023c0:	00402b16 	.word	0x00402b16
  4023c4:	00402b1a 	.word	0x00402b1a
  4023c8:	00000000 	.word	0x00000000
  4023cc:	00402181 	.word	0x00402181

004023d0 <_printf_common>:
  4023d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4023d4:	4691      	mov	r9, r2
  4023d6:	461f      	mov	r7, r3
  4023d8:	688a      	ldr	r2, [r1, #8]
  4023da:	690b      	ldr	r3, [r1, #16]
  4023dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4023e0:	4293      	cmp	r3, r2
  4023e2:	bfb8      	it	lt
  4023e4:	4613      	movlt	r3, r2
  4023e6:	f8c9 3000 	str.w	r3, [r9]
  4023ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4023ee:	4606      	mov	r6, r0
  4023f0:	460c      	mov	r4, r1
  4023f2:	b112      	cbz	r2, 4023fa <_printf_common+0x2a>
  4023f4:	3301      	adds	r3, #1
  4023f6:	f8c9 3000 	str.w	r3, [r9]
  4023fa:	6823      	ldr	r3, [r4, #0]
  4023fc:	0699      	lsls	r1, r3, #26
  4023fe:	bf42      	ittt	mi
  402400:	f8d9 3000 	ldrmi.w	r3, [r9]
  402404:	3302      	addmi	r3, #2
  402406:	f8c9 3000 	strmi.w	r3, [r9]
  40240a:	6825      	ldr	r5, [r4, #0]
  40240c:	f015 0506 	ands.w	r5, r5, #6
  402410:	d107      	bne.n	402422 <_printf_common+0x52>
  402412:	f104 0a19 	add.w	sl, r4, #25
  402416:	68e3      	ldr	r3, [r4, #12]
  402418:	f8d9 2000 	ldr.w	r2, [r9]
  40241c:	1a9b      	subs	r3, r3, r2
  40241e:	429d      	cmp	r5, r3
  402420:	db29      	blt.n	402476 <_printf_common+0xa6>
  402422:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  402426:	6822      	ldr	r2, [r4, #0]
  402428:	3300      	adds	r3, #0
  40242a:	bf18      	it	ne
  40242c:	2301      	movne	r3, #1
  40242e:	0692      	lsls	r2, r2, #26
  402430:	d42e      	bmi.n	402490 <_printf_common+0xc0>
  402432:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402436:	4639      	mov	r1, r7
  402438:	4630      	mov	r0, r6
  40243a:	47c0      	blx	r8
  40243c:	3001      	adds	r0, #1
  40243e:	d021      	beq.n	402484 <_printf_common+0xb4>
  402440:	6823      	ldr	r3, [r4, #0]
  402442:	68e5      	ldr	r5, [r4, #12]
  402444:	f8d9 2000 	ldr.w	r2, [r9]
  402448:	f003 0306 	and.w	r3, r3, #6
  40244c:	2b04      	cmp	r3, #4
  40244e:	bf08      	it	eq
  402450:	1aad      	subeq	r5, r5, r2
  402452:	68a3      	ldr	r3, [r4, #8]
  402454:	6922      	ldr	r2, [r4, #16]
  402456:	bf0c      	ite	eq
  402458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  40245c:	2500      	movne	r5, #0
  40245e:	4293      	cmp	r3, r2
  402460:	bfc4      	itt	gt
  402462:	1a9b      	subgt	r3, r3, r2
  402464:	18ed      	addgt	r5, r5, r3
  402466:	f04f 0900 	mov.w	r9, #0
  40246a:	341a      	adds	r4, #26
  40246c:	454d      	cmp	r5, r9
  40246e:	d11b      	bne.n	4024a8 <_printf_common+0xd8>
  402470:	2000      	movs	r0, #0
  402472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402476:	2301      	movs	r3, #1
  402478:	4652      	mov	r2, sl
  40247a:	4639      	mov	r1, r7
  40247c:	4630      	mov	r0, r6
  40247e:	47c0      	blx	r8
  402480:	3001      	adds	r0, #1
  402482:	d103      	bne.n	40248c <_printf_common+0xbc>
  402484:	f04f 30ff 	mov.w	r0, #4294967295
  402488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40248c:	3501      	adds	r5, #1
  40248e:	e7c2      	b.n	402416 <_printf_common+0x46>
  402490:	18e1      	adds	r1, r4, r3
  402492:	1c5a      	adds	r2, r3, #1
  402494:	2030      	movs	r0, #48	; 0x30
  402496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40249a:	4422      	add	r2, r4
  40249c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4024a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4024a4:	3302      	adds	r3, #2
  4024a6:	e7c4      	b.n	402432 <_printf_common+0x62>
  4024a8:	2301      	movs	r3, #1
  4024aa:	4622      	mov	r2, r4
  4024ac:	4639      	mov	r1, r7
  4024ae:	4630      	mov	r0, r6
  4024b0:	47c0      	blx	r8
  4024b2:	3001      	adds	r0, #1
  4024b4:	d0e6      	beq.n	402484 <_printf_common+0xb4>
  4024b6:	f109 0901 	add.w	r9, r9, #1
  4024ba:	e7d7      	b.n	40246c <_printf_common+0x9c>

004024bc <_printf_i>:
  4024bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4024c0:	4617      	mov	r7, r2
  4024c2:	7e0a      	ldrb	r2, [r1, #24]
  4024c4:	b085      	sub	sp, #20
  4024c6:	2a6e      	cmp	r2, #110	; 0x6e
  4024c8:	4698      	mov	r8, r3
  4024ca:	4606      	mov	r6, r0
  4024cc:	460c      	mov	r4, r1
  4024ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4024d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4024d4:	f000 80bc 	beq.w	402650 <_printf_i+0x194>
  4024d8:	d81a      	bhi.n	402510 <_printf_i+0x54>
  4024da:	2a63      	cmp	r2, #99	; 0x63
  4024dc:	d02e      	beq.n	40253c <_printf_i+0x80>
  4024de:	d80a      	bhi.n	4024f6 <_printf_i+0x3a>
  4024e0:	2a00      	cmp	r2, #0
  4024e2:	f000 80c8 	beq.w	402676 <_printf_i+0x1ba>
  4024e6:	2a58      	cmp	r2, #88	; 0x58
  4024e8:	f000 808a 	beq.w	402600 <_printf_i+0x144>
  4024ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4024f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4024f4:	e02a      	b.n	40254c <_printf_i+0x90>
  4024f6:	2a64      	cmp	r2, #100	; 0x64
  4024f8:	d001      	beq.n	4024fe <_printf_i+0x42>
  4024fa:	2a69      	cmp	r2, #105	; 0x69
  4024fc:	d1f6      	bne.n	4024ec <_printf_i+0x30>
  4024fe:	6821      	ldr	r1, [r4, #0]
  402500:	681a      	ldr	r2, [r3, #0]
  402502:	f011 0f80 	tst.w	r1, #128	; 0x80
  402506:	d023      	beq.n	402550 <_printf_i+0x94>
  402508:	1d11      	adds	r1, r2, #4
  40250a:	6019      	str	r1, [r3, #0]
  40250c:	6813      	ldr	r3, [r2, #0]
  40250e:	e027      	b.n	402560 <_printf_i+0xa4>
  402510:	2a73      	cmp	r2, #115	; 0x73
  402512:	f000 80b4 	beq.w	40267e <_printf_i+0x1c2>
  402516:	d808      	bhi.n	40252a <_printf_i+0x6e>
  402518:	2a6f      	cmp	r2, #111	; 0x6f
  40251a:	d02a      	beq.n	402572 <_printf_i+0xb6>
  40251c:	2a70      	cmp	r2, #112	; 0x70
  40251e:	d1e5      	bne.n	4024ec <_printf_i+0x30>
  402520:	680a      	ldr	r2, [r1, #0]
  402522:	f042 0220 	orr.w	r2, r2, #32
  402526:	600a      	str	r2, [r1, #0]
  402528:	e003      	b.n	402532 <_printf_i+0x76>
  40252a:	2a75      	cmp	r2, #117	; 0x75
  40252c:	d021      	beq.n	402572 <_printf_i+0xb6>
  40252e:	2a78      	cmp	r2, #120	; 0x78
  402530:	d1dc      	bne.n	4024ec <_printf_i+0x30>
  402532:	2278      	movs	r2, #120	; 0x78
  402534:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402538:	496e      	ldr	r1, [pc, #440]	; (4026f4 <_printf_i+0x238>)
  40253a:	e064      	b.n	402606 <_printf_i+0x14a>
  40253c:	681a      	ldr	r2, [r3, #0]
  40253e:	f101 0542 	add.w	r5, r1, #66	; 0x42
  402542:	1d11      	adds	r1, r2, #4
  402544:	6019      	str	r1, [r3, #0]
  402546:	6813      	ldr	r3, [r2, #0]
  402548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  40254c:	2301      	movs	r3, #1
  40254e:	e0a3      	b.n	402698 <_printf_i+0x1dc>
  402550:	f011 0f40 	tst.w	r1, #64	; 0x40
  402554:	f102 0104 	add.w	r1, r2, #4
  402558:	6019      	str	r1, [r3, #0]
  40255a:	d0d7      	beq.n	40250c <_printf_i+0x50>
  40255c:	f9b2 3000 	ldrsh.w	r3, [r2]
  402560:	2b00      	cmp	r3, #0
  402562:	da03      	bge.n	40256c <_printf_i+0xb0>
  402564:	222d      	movs	r2, #45	; 0x2d
  402566:	425b      	negs	r3, r3
  402568:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  40256c:	4962      	ldr	r1, [pc, #392]	; (4026f8 <_printf_i+0x23c>)
  40256e:	220a      	movs	r2, #10
  402570:	e017      	b.n	4025a2 <_printf_i+0xe6>
  402572:	6820      	ldr	r0, [r4, #0]
  402574:	6819      	ldr	r1, [r3, #0]
  402576:	f010 0f80 	tst.w	r0, #128	; 0x80
  40257a:	d003      	beq.n	402584 <_printf_i+0xc8>
  40257c:	1d08      	adds	r0, r1, #4
  40257e:	6018      	str	r0, [r3, #0]
  402580:	680b      	ldr	r3, [r1, #0]
  402582:	e006      	b.n	402592 <_printf_i+0xd6>
  402584:	f010 0f40 	tst.w	r0, #64	; 0x40
  402588:	f101 0004 	add.w	r0, r1, #4
  40258c:	6018      	str	r0, [r3, #0]
  40258e:	d0f7      	beq.n	402580 <_printf_i+0xc4>
  402590:	880b      	ldrh	r3, [r1, #0]
  402592:	4959      	ldr	r1, [pc, #356]	; (4026f8 <_printf_i+0x23c>)
  402594:	2a6f      	cmp	r2, #111	; 0x6f
  402596:	bf14      	ite	ne
  402598:	220a      	movne	r2, #10
  40259a:	2208      	moveq	r2, #8
  40259c:	2000      	movs	r0, #0
  40259e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4025a2:	6865      	ldr	r5, [r4, #4]
  4025a4:	60a5      	str	r5, [r4, #8]
  4025a6:	2d00      	cmp	r5, #0
  4025a8:	f2c0 809c 	blt.w	4026e4 <_printf_i+0x228>
  4025ac:	6820      	ldr	r0, [r4, #0]
  4025ae:	f020 0004 	bic.w	r0, r0, #4
  4025b2:	6020      	str	r0, [r4, #0]
  4025b4:	2b00      	cmp	r3, #0
  4025b6:	d13f      	bne.n	402638 <_printf_i+0x17c>
  4025b8:	2d00      	cmp	r5, #0
  4025ba:	f040 8095 	bne.w	4026e8 <_printf_i+0x22c>
  4025be:	4675      	mov	r5, lr
  4025c0:	2a08      	cmp	r2, #8
  4025c2:	d10b      	bne.n	4025dc <_printf_i+0x120>
  4025c4:	6823      	ldr	r3, [r4, #0]
  4025c6:	07da      	lsls	r2, r3, #31
  4025c8:	d508      	bpl.n	4025dc <_printf_i+0x120>
  4025ca:	6923      	ldr	r3, [r4, #16]
  4025cc:	6862      	ldr	r2, [r4, #4]
  4025ce:	429a      	cmp	r2, r3
  4025d0:	bfde      	ittt	le
  4025d2:	2330      	movle	r3, #48	; 0x30
  4025d4:	f805 3c01 	strble.w	r3, [r5, #-1]
  4025d8:	f105 35ff 	addle.w	r5, r5, #4294967295
  4025dc:	ebae 0305 	sub.w	r3, lr, r5
  4025e0:	6123      	str	r3, [r4, #16]
  4025e2:	f8cd 8000 	str.w	r8, [sp]
  4025e6:	463b      	mov	r3, r7
  4025e8:	aa03      	add	r2, sp, #12
  4025ea:	4621      	mov	r1, r4
  4025ec:	4630      	mov	r0, r6
  4025ee:	f7ff feef 	bl	4023d0 <_printf_common>
  4025f2:	3001      	adds	r0, #1
  4025f4:	d155      	bne.n	4026a2 <_printf_i+0x1e6>
  4025f6:	f04f 30ff 	mov.w	r0, #4294967295
  4025fa:	b005      	add	sp, #20
  4025fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402600:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402604:	493c      	ldr	r1, [pc, #240]	; (4026f8 <_printf_i+0x23c>)
  402606:	6822      	ldr	r2, [r4, #0]
  402608:	6818      	ldr	r0, [r3, #0]
  40260a:	f012 0f80 	tst.w	r2, #128	; 0x80
  40260e:	f100 0504 	add.w	r5, r0, #4
  402612:	601d      	str	r5, [r3, #0]
  402614:	d001      	beq.n	40261a <_printf_i+0x15e>
  402616:	6803      	ldr	r3, [r0, #0]
  402618:	e002      	b.n	402620 <_printf_i+0x164>
  40261a:	0655      	lsls	r5, r2, #25
  40261c:	d5fb      	bpl.n	402616 <_printf_i+0x15a>
  40261e:	8803      	ldrh	r3, [r0, #0]
  402620:	07d0      	lsls	r0, r2, #31
  402622:	bf44      	itt	mi
  402624:	f042 0220 	orrmi.w	r2, r2, #32
  402628:	6022      	strmi	r2, [r4, #0]
  40262a:	b91b      	cbnz	r3, 402634 <_printf_i+0x178>
  40262c:	6822      	ldr	r2, [r4, #0]
  40262e:	f022 0220 	bic.w	r2, r2, #32
  402632:	6022      	str	r2, [r4, #0]
  402634:	2210      	movs	r2, #16
  402636:	e7b1      	b.n	40259c <_printf_i+0xe0>
  402638:	4675      	mov	r5, lr
  40263a:	fbb3 f0f2 	udiv	r0, r3, r2
  40263e:	fb02 3310 	mls	r3, r2, r0, r3
  402642:	5ccb      	ldrb	r3, [r1, r3]
  402644:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402648:	4603      	mov	r3, r0
  40264a:	2800      	cmp	r0, #0
  40264c:	d1f5      	bne.n	40263a <_printf_i+0x17e>
  40264e:	e7b7      	b.n	4025c0 <_printf_i+0x104>
  402650:	6808      	ldr	r0, [r1, #0]
  402652:	681a      	ldr	r2, [r3, #0]
  402654:	6949      	ldr	r1, [r1, #20]
  402656:	f010 0f80 	tst.w	r0, #128	; 0x80
  40265a:	d004      	beq.n	402666 <_printf_i+0x1aa>
  40265c:	1d10      	adds	r0, r2, #4
  40265e:	6018      	str	r0, [r3, #0]
  402660:	6813      	ldr	r3, [r2, #0]
  402662:	6019      	str	r1, [r3, #0]
  402664:	e007      	b.n	402676 <_printf_i+0x1ba>
  402666:	f010 0f40 	tst.w	r0, #64	; 0x40
  40266a:	f102 0004 	add.w	r0, r2, #4
  40266e:	6018      	str	r0, [r3, #0]
  402670:	6813      	ldr	r3, [r2, #0]
  402672:	d0f6      	beq.n	402662 <_printf_i+0x1a6>
  402674:	8019      	strh	r1, [r3, #0]
  402676:	2300      	movs	r3, #0
  402678:	6123      	str	r3, [r4, #16]
  40267a:	4675      	mov	r5, lr
  40267c:	e7b1      	b.n	4025e2 <_printf_i+0x126>
  40267e:	681a      	ldr	r2, [r3, #0]
  402680:	1d11      	adds	r1, r2, #4
  402682:	6019      	str	r1, [r3, #0]
  402684:	6815      	ldr	r5, [r2, #0]
  402686:	6862      	ldr	r2, [r4, #4]
  402688:	2100      	movs	r1, #0
  40268a:	4628      	mov	r0, r5
  40268c:	f000 f8e0 	bl	402850 <memchr>
  402690:	b108      	cbz	r0, 402696 <_printf_i+0x1da>
  402692:	1b40      	subs	r0, r0, r5
  402694:	6060      	str	r0, [r4, #4]
  402696:	6863      	ldr	r3, [r4, #4]
  402698:	6123      	str	r3, [r4, #16]
  40269a:	2300      	movs	r3, #0
  40269c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4026a0:	e79f      	b.n	4025e2 <_printf_i+0x126>
  4026a2:	6923      	ldr	r3, [r4, #16]
  4026a4:	462a      	mov	r2, r5
  4026a6:	4639      	mov	r1, r7
  4026a8:	4630      	mov	r0, r6
  4026aa:	47c0      	blx	r8
  4026ac:	3001      	adds	r0, #1
  4026ae:	d0a2      	beq.n	4025f6 <_printf_i+0x13a>
  4026b0:	6823      	ldr	r3, [r4, #0]
  4026b2:	079b      	lsls	r3, r3, #30
  4026b4:	d507      	bpl.n	4026c6 <_printf_i+0x20a>
  4026b6:	2500      	movs	r5, #0
  4026b8:	f104 0919 	add.w	r9, r4, #25
  4026bc:	68e3      	ldr	r3, [r4, #12]
  4026be:	9a03      	ldr	r2, [sp, #12]
  4026c0:	1a9b      	subs	r3, r3, r2
  4026c2:	429d      	cmp	r5, r3
  4026c4:	db05      	blt.n	4026d2 <_printf_i+0x216>
  4026c6:	68e0      	ldr	r0, [r4, #12]
  4026c8:	9b03      	ldr	r3, [sp, #12]
  4026ca:	4298      	cmp	r0, r3
  4026cc:	bfb8      	it	lt
  4026ce:	4618      	movlt	r0, r3
  4026d0:	e793      	b.n	4025fa <_printf_i+0x13e>
  4026d2:	2301      	movs	r3, #1
  4026d4:	464a      	mov	r2, r9
  4026d6:	4639      	mov	r1, r7
  4026d8:	4630      	mov	r0, r6
  4026da:	47c0      	blx	r8
  4026dc:	3001      	adds	r0, #1
  4026de:	d08a      	beq.n	4025f6 <_printf_i+0x13a>
  4026e0:	3501      	adds	r5, #1
  4026e2:	e7eb      	b.n	4026bc <_printf_i+0x200>
  4026e4:	2b00      	cmp	r3, #0
  4026e6:	d1a7      	bne.n	402638 <_printf_i+0x17c>
  4026e8:	780b      	ldrb	r3, [r1, #0]
  4026ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4026ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4026f2:	e765      	b.n	4025c0 <_printf_i+0x104>
  4026f4:	00402b32 	.word	0x00402b32
  4026f8:	00402b21 	.word	0x00402b21

004026fc <_sbrk_r>:
  4026fc:	b538      	push	{r3, r4, r5, lr}
  4026fe:	4c06      	ldr	r4, [pc, #24]	; (402718 <_sbrk_r+0x1c>)
  402700:	2300      	movs	r3, #0
  402702:	4605      	mov	r5, r0
  402704:	4608      	mov	r0, r1
  402706:	6023      	str	r3, [r4, #0]
  402708:	f7fe f968 	bl	4009dc <_sbrk>
  40270c:	1c43      	adds	r3, r0, #1
  40270e:	d102      	bne.n	402716 <_sbrk_r+0x1a>
  402710:	6823      	ldr	r3, [r4, #0]
  402712:	b103      	cbz	r3, 402716 <_sbrk_r+0x1a>
  402714:	602b      	str	r3, [r5, #0]
  402716:	bd38      	pop	{r3, r4, r5, pc}
  402718:	20400360 	.word	0x20400360

0040271c <__sread>:
  40271c:	b510      	push	{r4, lr}
  40271e:	460c      	mov	r4, r1
  402720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402724:	f000 f8e6 	bl	4028f4 <_read_r>
  402728:	2800      	cmp	r0, #0
  40272a:	bfab      	itete	ge
  40272c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  40272e:	89a3      	ldrhlt	r3, [r4, #12]
  402730:	181b      	addge	r3, r3, r0
  402732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  402736:	bfac      	ite	ge
  402738:	6563      	strge	r3, [r4, #84]	; 0x54
  40273a:	81a3      	strhlt	r3, [r4, #12]
  40273c:	bd10      	pop	{r4, pc}

0040273e <__swrite>:
  40273e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402742:	461f      	mov	r7, r3
  402744:	898b      	ldrh	r3, [r1, #12]
  402746:	05db      	lsls	r3, r3, #23
  402748:	4605      	mov	r5, r0
  40274a:	460c      	mov	r4, r1
  40274c:	4616      	mov	r6, r2
  40274e:	d505      	bpl.n	40275c <__swrite+0x1e>
  402750:	2302      	movs	r3, #2
  402752:	2200      	movs	r2, #0
  402754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402758:	f000 f868 	bl	40282c <_lseek_r>
  40275c:	89a3      	ldrh	r3, [r4, #12]
  40275e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402766:	81a3      	strh	r3, [r4, #12]
  402768:	4632      	mov	r2, r6
  40276a:	463b      	mov	r3, r7
  40276c:	4628      	mov	r0, r5
  40276e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402772:	f000 b817 	b.w	4027a4 <_write_r>

00402776 <__sseek>:
  402776:	b510      	push	{r4, lr}
  402778:	460c      	mov	r4, r1
  40277a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40277e:	f000 f855 	bl	40282c <_lseek_r>
  402782:	1c43      	adds	r3, r0, #1
  402784:	89a3      	ldrh	r3, [r4, #12]
  402786:	bf15      	itete	ne
  402788:	6560      	strne	r0, [r4, #84]	; 0x54
  40278a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40278e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402792:	81a3      	strheq	r3, [r4, #12]
  402794:	bf18      	it	ne
  402796:	81a3      	strhne	r3, [r4, #12]
  402798:	bd10      	pop	{r4, pc}

0040279a <__sclose>:
  40279a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40279e:	f000 b813 	b.w	4027c8 <_close_r>
	...

004027a4 <_write_r>:
  4027a4:	b538      	push	{r3, r4, r5, lr}
  4027a6:	4c07      	ldr	r4, [pc, #28]	; (4027c4 <_write_r+0x20>)
  4027a8:	4605      	mov	r5, r0
  4027aa:	4608      	mov	r0, r1
  4027ac:	4611      	mov	r1, r2
  4027ae:	2200      	movs	r2, #0
  4027b0:	6022      	str	r2, [r4, #0]
  4027b2:	461a      	mov	r2, r3
  4027b4:	f7fe ffb2 	bl	40171c <_write>
  4027b8:	1c43      	adds	r3, r0, #1
  4027ba:	d102      	bne.n	4027c2 <_write_r+0x1e>
  4027bc:	6823      	ldr	r3, [r4, #0]
  4027be:	b103      	cbz	r3, 4027c2 <_write_r+0x1e>
  4027c0:	602b      	str	r3, [r5, #0]
  4027c2:	bd38      	pop	{r3, r4, r5, pc}
  4027c4:	20400360 	.word	0x20400360

004027c8 <_close_r>:
  4027c8:	b538      	push	{r3, r4, r5, lr}
  4027ca:	4c06      	ldr	r4, [pc, #24]	; (4027e4 <_close_r+0x1c>)
  4027cc:	2300      	movs	r3, #0
  4027ce:	4605      	mov	r5, r0
  4027d0:	4608      	mov	r0, r1
  4027d2:	6023      	str	r3, [r4, #0]
  4027d4:	f7fe f914 	bl	400a00 <_close>
  4027d8:	1c43      	adds	r3, r0, #1
  4027da:	d102      	bne.n	4027e2 <_close_r+0x1a>
  4027dc:	6823      	ldr	r3, [r4, #0]
  4027de:	b103      	cbz	r3, 4027e2 <_close_r+0x1a>
  4027e0:	602b      	str	r3, [r5, #0]
  4027e2:	bd38      	pop	{r3, r4, r5, pc}
  4027e4:	20400360 	.word	0x20400360

004027e8 <_fstat_r>:
  4027e8:	b538      	push	{r3, r4, r5, lr}
  4027ea:	4c07      	ldr	r4, [pc, #28]	; (402808 <_fstat_r+0x20>)
  4027ec:	2300      	movs	r3, #0
  4027ee:	4605      	mov	r5, r0
  4027f0:	4608      	mov	r0, r1
  4027f2:	4611      	mov	r1, r2
  4027f4:	6023      	str	r3, [r4, #0]
  4027f6:	f7fe f906 	bl	400a06 <_fstat>
  4027fa:	1c43      	adds	r3, r0, #1
  4027fc:	d102      	bne.n	402804 <_fstat_r+0x1c>
  4027fe:	6823      	ldr	r3, [r4, #0]
  402800:	b103      	cbz	r3, 402804 <_fstat_r+0x1c>
  402802:	602b      	str	r3, [r5, #0]
  402804:	bd38      	pop	{r3, r4, r5, pc}
  402806:	bf00      	nop
  402808:	20400360 	.word	0x20400360

0040280c <_isatty_r>:
  40280c:	b538      	push	{r3, r4, r5, lr}
  40280e:	4c06      	ldr	r4, [pc, #24]	; (402828 <_isatty_r+0x1c>)
  402810:	2300      	movs	r3, #0
  402812:	4605      	mov	r5, r0
  402814:	4608      	mov	r0, r1
  402816:	6023      	str	r3, [r4, #0]
  402818:	f7fe f8fa 	bl	400a10 <_isatty>
  40281c:	1c43      	adds	r3, r0, #1
  40281e:	d102      	bne.n	402826 <_isatty_r+0x1a>
  402820:	6823      	ldr	r3, [r4, #0]
  402822:	b103      	cbz	r3, 402826 <_isatty_r+0x1a>
  402824:	602b      	str	r3, [r5, #0]
  402826:	bd38      	pop	{r3, r4, r5, pc}
  402828:	20400360 	.word	0x20400360

0040282c <_lseek_r>:
  40282c:	b538      	push	{r3, r4, r5, lr}
  40282e:	4c07      	ldr	r4, [pc, #28]	; (40284c <_lseek_r+0x20>)
  402830:	4605      	mov	r5, r0
  402832:	4608      	mov	r0, r1
  402834:	4611      	mov	r1, r2
  402836:	2200      	movs	r2, #0
  402838:	6022      	str	r2, [r4, #0]
  40283a:	461a      	mov	r2, r3
  40283c:	f7fe f8ea 	bl	400a14 <_lseek>
  402840:	1c43      	adds	r3, r0, #1
  402842:	d102      	bne.n	40284a <_lseek_r+0x1e>
  402844:	6823      	ldr	r3, [r4, #0]
  402846:	b103      	cbz	r3, 40284a <_lseek_r+0x1e>
  402848:	602b      	str	r3, [r5, #0]
  40284a:	bd38      	pop	{r3, r4, r5, pc}
  40284c:	20400360 	.word	0x20400360

00402850 <memchr>:
  402850:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402854:	2a10      	cmp	r2, #16
  402856:	db2b      	blt.n	4028b0 <memchr+0x60>
  402858:	f010 0f07 	tst.w	r0, #7
  40285c:	d008      	beq.n	402870 <memchr+0x20>
  40285e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402862:	3a01      	subs	r2, #1
  402864:	428b      	cmp	r3, r1
  402866:	d02d      	beq.n	4028c4 <memchr+0x74>
  402868:	f010 0f07 	tst.w	r0, #7
  40286c:	b342      	cbz	r2, 4028c0 <memchr+0x70>
  40286e:	d1f6      	bne.n	40285e <memchr+0xe>
  402870:	b4f0      	push	{r4, r5, r6, r7}
  402872:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402876:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40287a:	f022 0407 	bic.w	r4, r2, #7
  40287e:	f07f 0700 	mvns.w	r7, #0
  402882:	2300      	movs	r3, #0
  402884:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402888:	3c08      	subs	r4, #8
  40288a:	ea85 0501 	eor.w	r5, r5, r1
  40288e:	ea86 0601 	eor.w	r6, r6, r1
  402892:	fa85 f547 	uadd8	r5, r5, r7
  402896:	faa3 f587 	sel	r5, r3, r7
  40289a:	fa86 f647 	uadd8	r6, r6, r7
  40289e:	faa5 f687 	sel	r6, r5, r7
  4028a2:	b98e      	cbnz	r6, 4028c8 <memchr+0x78>
  4028a4:	d1ee      	bne.n	402884 <memchr+0x34>
  4028a6:	bcf0      	pop	{r4, r5, r6, r7}
  4028a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4028ac:	f002 0207 	and.w	r2, r2, #7
  4028b0:	b132      	cbz	r2, 4028c0 <memchr+0x70>
  4028b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4028b6:	3a01      	subs	r2, #1
  4028b8:	ea83 0301 	eor.w	r3, r3, r1
  4028bc:	b113      	cbz	r3, 4028c4 <memchr+0x74>
  4028be:	d1f8      	bne.n	4028b2 <memchr+0x62>
  4028c0:	2000      	movs	r0, #0
  4028c2:	4770      	bx	lr
  4028c4:	3801      	subs	r0, #1
  4028c6:	4770      	bx	lr
  4028c8:	2d00      	cmp	r5, #0
  4028ca:	bf06      	itte	eq
  4028cc:	4635      	moveq	r5, r6
  4028ce:	3803      	subeq	r0, #3
  4028d0:	3807      	subne	r0, #7
  4028d2:	f015 0f01 	tst.w	r5, #1
  4028d6:	d107      	bne.n	4028e8 <memchr+0x98>
  4028d8:	3001      	adds	r0, #1
  4028da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4028de:	bf02      	ittt	eq
  4028e0:	3001      	addeq	r0, #1
  4028e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4028e6:	3001      	addeq	r0, #1
  4028e8:	bcf0      	pop	{r4, r5, r6, r7}
  4028ea:	3801      	subs	r0, #1
  4028ec:	4770      	bx	lr
  4028ee:	bf00      	nop

004028f0 <__malloc_lock>:
  4028f0:	4770      	bx	lr

004028f2 <__malloc_unlock>:
  4028f2:	4770      	bx	lr

004028f4 <_read_r>:
  4028f4:	b538      	push	{r3, r4, r5, lr}
  4028f6:	4c07      	ldr	r4, [pc, #28]	; (402914 <_read_r+0x20>)
  4028f8:	4605      	mov	r5, r0
  4028fa:	4608      	mov	r0, r1
  4028fc:	4611      	mov	r1, r2
  4028fe:	2200      	movs	r2, #0
  402900:	6022      	str	r2, [r4, #0]
  402902:	461a      	mov	r2, r3
  402904:	f7fe fef8 	bl	4016f8 <_read>
  402908:	1c43      	adds	r3, r0, #1
  40290a:	d102      	bne.n	402912 <_read_r+0x1e>
  40290c:	6823      	ldr	r3, [r4, #0]
  40290e:	b103      	cbz	r3, 402912 <_read_r+0x1e>
  402910:	602b      	str	r3, [r5, #0]
  402912:	bd38      	pop	{r3, r4, r5, pc}
  402914:	20400360 	.word	0x20400360
  402918:	682f2e2e 	.word	0x682f2e2e
  40291c:	732f6c61 	.word	0x732f6c61
  402920:	682f6372 	.word	0x682f6372
  402924:	635f6c61 	.word	0x635f6c61
  402928:	615f6e61 	.word	0x615f6e61
  40292c:	636e7973 	.word	0x636e7973
  402930:	0000632e 	.word	0x0000632e
  402934:	682f2e2e 	.word	0x682f2e2e
  402938:	732f6c61 	.word	0x732f6c61
  40293c:	682f6372 	.word	0x682f6372
  402940:	695f6c61 	.word	0x695f6c61
  402944:	00632e6f 	.word	0x00632e6f
  402948:	682f2e2e 	.word	0x682f2e2e
  40294c:	732f6c61 	.word	0x732f6c61
  402950:	682f6372 	.word	0x682f6372
  402954:	745f6c61 	.word	0x745f6c61
  402958:	72656d69 	.word	0x72656d69
  40295c:	0000632e 	.word	0x0000632e
  402960:	682f2e2e 	.word	0x682f2e2e
  402964:	732f6c61 	.word	0x732f6c61
  402968:	682f6372 	.word	0x682f6372
  40296c:	755f6c61 	.word	0x755f6c61
  402970:	74726173 	.word	0x74726173
  402974:	6e79735f 	.word	0x6e79735f
  402978:	00632e63 	.word	0x00632e63
  40297c:	682f2e2e 	.word	0x682f2e2e
  402980:	752f6c61 	.word	0x752f6c61
  402984:	736c6974 	.word	0x736c6974
  402988:	6372732f 	.word	0x6372732f
  40298c:	6974752f 	.word	0x6974752f
  402990:	6c5f736c 	.word	0x6c5f736c
  402994:	2e747369 	.word	0x2e747369
  402998:	00000063 	.word	0x00000063
  40299c:	03020100 	.word	0x03020100
  4029a0:	07060504 	.word	0x07060504
  4029a4:	14100c08 	.word	0x14100c08
  4029a8:	40302018 	.word	0x40302018
  4029ac:	682f2e2e 	.word	0x682f2e2e
  4029b0:	742f6c70 	.word	0x742f6c70
  4029b4:	70682f63 	.word	0x70682f63
  4029b8:	63745f6c 	.word	0x63745f6c
  4029bc:	0000632e 	.word	0x0000632e

004029c0 <_usarts>:
  4029c0:	00000001 001008c0 00030051 682f2e2e     ........Q...../h
  4029d0:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  4029e0:	632e7472 00000000 4f525245 00000052     rt.c....ERROR...
  4029f0:	75727453 69207463 696d2073 6e697373     Struct is missin
  402a00:	61642067 00216174 46494853 41435f54     g data!.SHIFT_CA
  402a10:	52455f4e 3a524f52 0a732520 00000000     N_ERROR: %s.....
  402a20:	75727453 69207463 696d2073 6e697373     Struct is missin
  402a30:	61642067 69536174 0021657a 61746144     g dataSize!.Data
  402a40:	7a697320 73692065 6f6f7420 72616c20      size is too lar
  402a50:	00216567 69204449 6f742073 616c206f     ge!.ID is too la
  402a60:	21656772 00000000 65646e49 656e2078     rge!....Index ne
  402a70:	20736465 62206f74 65622065 65657774     eds to be betwee
  402a80:	2d30206e 00213336 65636552 64657669     n 0-63!.Received
  402a90:	74616420 25203a61 000a2064 7373654d      data: %d ..Mess
  402aa0:	20656761 746e6573 00000020              age sent ...

00402aac <_global_impure_ptr>:
  402aac:	20400050                                P.@ 

00402ab0 <__sf_fake_stderr>:
	...

00402ad0 <__sf_fake_stdin>:
	...

00402af0 <__sf_fake_stdout>:
	...
  402b10:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
  402b20:	32313000 36353433 41393837 45444342     .0123456789ABCDE
  402b30:	31300046 35343332 39383736 64636261     F.0123456789abcd
  402b40:	00006665                                ef..

00402b44 <_init>:
  402b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b46:	bf00      	nop
  402b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402b4a:	bc08      	pop	{r3}
  402b4c:	469e      	mov	lr, r3
  402b4e:	4770      	bx	lr

00402b50 <__init_array_start>:
  402b50:	0040018d 	.word	0x0040018d

00402b54 <_fini>:
  402b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b56:	bf00      	nop
  402b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402b5a:	bc08      	pop	{r3}
  402b5c:	469e      	mov	lr, r3
  402b5e:	4770      	bx	lr

00402b60 <__fini_array_start>:
  402b60:	00400169 	.word	0x00400169
