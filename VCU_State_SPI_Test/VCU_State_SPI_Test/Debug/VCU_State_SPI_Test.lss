
VCU_State_SPI_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020a0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20400000  004020a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d0  20400088  00402128  00020088  2**2
                  ALLOC
  3 .heap         00000200  20400158  004021f8  00020088  2**0
                  ALLOC
  4 .stack        00000400  20400358  004023f8  00020088  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY
  7 .debug_info   000159b8  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003291  00000000  00000000  00035ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007447  00000000  00000000  00038d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009f0  00000000  00000000  0004019f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000920  00000000  00000000  00040b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000401b4  00000000  00000000  000414af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013153  00000000  00000000  00081663  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00146e64  00000000  00000000  000947b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001e60  00000000  00000000  001db61c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 07 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     X.@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40006c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 fd 0d 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	d1 12 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400088 	.word	0x20400088
  400184:	00000000 	.word	0x00000000
  400188:	004020a0 	.word	0x004020a0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004020a0 	.word	0x004020a0
  4001c8:	2040008c 	.word	0x2040008c
  4001cc:	004020a0 	.word	0x004020a0
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004003ad 	.word	0x004003ad
  4001e4:	00401749 	.word	0x00401749

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	004020a0 	.word	0x004020a0
  400238:	20400088 	.word	0x20400088
  40023c:	20400088 	.word	0x20400088
  400240:	20400158 	.word	0x20400158
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	00401769 	.word	0x00401769
  400250:	0040164d 	.word	0x0040164d

00400254 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  400254:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400256:	4b08      	ldr	r3, [pc, #32]	; (400278 <TIMER_0_init+0x24>)
  400258:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40025a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40025e:	d103      	bne.n	400268 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400260:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400264:	4b04      	ldr	r3, [pc, #16]	; (400278 <TIMER_0_init+0x24>)
  400266:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400268:	4b04      	ldr	r3, [pc, #16]	; (40027c <TIMER_0_init+0x28>)
  40026a:	4798      	blx	r3
  40026c:	4602      	mov	r2, r0
  40026e:	4904      	ldr	r1, [pc, #16]	; (400280 <TIMER_0_init+0x2c>)
  400270:	4804      	ldr	r0, [pc, #16]	; (400284 <TIMER_0_init+0x30>)
  400272:	4b05      	ldr	r3, [pc, #20]	; (400288 <TIMER_0_init+0x34>)
  400274:	4798      	blx	r3
  400276:	bd08      	pop	{r3, pc}
  400278:	400e0600 	.word	0x400e0600
  40027c:	004012cd 	.word	0x004012cd
  400280:	4000c000 	.word	0x4000c000
  400284:	20400138 	.word	0x20400138
  400288:	004008e1 	.word	0x004008e1

0040028c <SPI_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40028c:	4b11      	ldr	r3, [pc, #68]	; (4002d4 <SPI_0_PORT_init+0x48>)
  40028e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400290:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400294:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400296:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400298:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40029c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40029e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4002a2:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002a6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4002aa:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002ae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4002b2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002b8:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002bc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  4002c0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002c4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4002c8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4002ce:	605a      	str	r2, [r3, #4]
  4002d0:	4770      	bx	lr
  4002d2:	bf00      	nop
  4002d4:	400e1400 	.word	0x400e1400

004002d8 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002d8:	4b04      	ldr	r3, [pc, #16]	; (4002ec <SPI_0_CLOCK_init+0x14>)
  4002da:	699b      	ldr	r3, [r3, #24]
  4002dc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4002e0:	d103      	bne.n	4002ea <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002e6:	4b01      	ldr	r3, [pc, #4]	; (4002ec <SPI_0_CLOCK_init+0x14>)
  4002e8:	611a      	str	r2, [r3, #16]
  4002ea:	4770      	bx	lr
  4002ec:	400e0600 	.word	0x400e0600

004002f0 <SPI_0_init>:
{
  4002f0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <SPI_0_init+0x24>)
  4002f4:	4798      	blx	r3
	spi_m_async_set_func_ptr(&SPI_0, _spi_get_spi_m_async());
  4002f6:	4b08      	ldr	r3, [pc, #32]	; (400318 <SPI_0_init+0x28>)
  4002f8:	4798      	blx	r3
  4002fa:	4c08      	ldr	r4, [pc, #32]	; (40031c <SPI_0_init+0x2c>)
  4002fc:	4601      	mov	r1, r0
  4002fe:	4620      	mov	r0, r4
  400300:	4b07      	ldr	r3, [pc, #28]	; (400320 <SPI_0_init+0x30>)
  400302:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SPI0);
  400304:	4907      	ldr	r1, [pc, #28]	; (400324 <SPI_0_init+0x34>)
  400306:	4620      	mov	r0, r4
  400308:	4b07      	ldr	r3, [pc, #28]	; (400328 <SPI_0_init+0x38>)
  40030a:	4798      	blx	r3
	SPI_0_PORT_init();
  40030c:	4b07      	ldr	r3, [pc, #28]	; (40032c <SPI_0_init+0x3c>)
  40030e:	4798      	blx	r3
  400310:	bd10      	pop	{r4, pc}
  400312:	bf00      	nop
  400314:	004002d9 	.word	0x004002d9
  400318:	0040117d 	.word	0x0040117d
  40031c:	204000f0 	.word	0x204000f0
  400320:	00400639 	.word	0x00400639
  400324:	40008000 	.word	0x40008000
  400328:	00400659 	.word	0x00400659
  40032c:	0040028d 	.word	0x0040028d

00400330 <TARGET_IO_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400330:	4b0a      	ldr	r3, [pc, #40]	; (40035c <TARGET_IO_PORT_init+0x2c>)
  400332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400334:	f022 0220 	bic.w	r2, r2, #32
  400338:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40033a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40033c:	f042 0220 	orr.w	r2, r2, #32
  400340:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400342:	2220      	movs	r2, #32
  400344:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  40034c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40034e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  400354:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400356:	2240      	movs	r2, #64	; 0x40
  400358:	605a      	str	r2, [r3, #4]
  40035a:	4770      	bx	lr
  40035c:	400e0e00 	.word	0x400e0e00

00400360 <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400360:	4b04      	ldr	r3, [pc, #16]	; (400374 <TARGET_IO_CLOCK_init+0x14>)
  400362:	699b      	ldr	r3, [r3, #24]
  400364:	f413 7f80 	tst.w	r3, #256	; 0x100
  400368:	d103      	bne.n	400372 <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40036a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40036e:	4b01      	ldr	r3, [pc, #4]	; (400374 <TARGET_IO_CLOCK_init+0x14>)
  400370:	611a      	str	r2, [r3, #16]
  400372:	4770      	bx	lr
  400374:	400e0600 	.word	0x400e0600

00400378 <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_UART1);
}

void TARGET_IO_init(void)
{
  400378:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  40037a:	4b06      	ldr	r3, [pc, #24]	; (400394 <TARGET_IO_init+0x1c>)
  40037c:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, UART1, _uart_get_usart_sync());
  40037e:	4b06      	ldr	r3, [pc, #24]	; (400398 <TARGET_IO_init+0x20>)
  400380:	4798      	blx	r3
  400382:	4602      	mov	r2, r0
  400384:	4905      	ldr	r1, [pc, #20]	; (40039c <TARGET_IO_init+0x24>)
  400386:	4806      	ldr	r0, [pc, #24]	; (4003a0 <TARGET_IO_init+0x28>)
  400388:	4b06      	ldr	r3, [pc, #24]	; (4003a4 <TARGET_IO_init+0x2c>)
  40038a:	4798      	blx	r3
	TARGET_IO_PORT_init();
  40038c:	4b06      	ldr	r3, [pc, #24]	; (4003a8 <TARGET_IO_init+0x30>)
  40038e:	4798      	blx	r3
  400390:	bd08      	pop	{r3, pc}
  400392:	bf00      	nop
  400394:	00400361 	.word	0x00400361
  400398:	00401519 	.word	0x00401519
  40039c:	400e0a00 	.word	0x400e0a00
  4003a0:	204000e4 	.word	0x204000e4
  4003a4:	00400ad1 	.word	0x00400ad1
  4003a8:	00400331 	.word	0x00400331

004003ac <system_init>:
}

void system_init(void)
{
  4003ac:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4003ae:	4b07      	ldr	r3, [pc, #28]	; (4003cc <system_init+0x20>)
  4003b0:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4003b2:	4a07      	ldr	r2, [pc, #28]	; (4003d0 <system_init+0x24>)
  4003b4:	6853      	ldr	r3, [r2, #4]
  4003b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4003ba:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_0_init();
  4003bc:	4b05      	ldr	r3, [pc, #20]	; (4003d4 <system_init+0x28>)
  4003be:	4798      	blx	r3
	TIMER_0_init();
  4003c0:	4b05      	ldr	r3, [pc, #20]	; (4003d8 <system_init+0x2c>)
  4003c2:	4798      	blx	r3

	TARGET_IO_init();
  4003c4:	4b05      	ldr	r3, [pc, #20]	; (4003dc <system_init+0x30>)
  4003c6:	4798      	blx	r3
  4003c8:	bd08      	pop	{r3, pc}
  4003ca:	bf00      	nop
  4003cc:	00400bfd 	.word	0x00400bfd
  4003d0:	400e1850 	.word	0x400e1850
  4003d4:	004002f1 	.word	0x004002f1
  4003d8:	00400255 	.word	0x00400255
  4003dc:	00400379 	.word	0x00400379

004003e0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003e0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4003e4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4003e6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4003e8:	f3bf 8f5f 	dmb	sy
  4003ec:	4770      	bx	lr

004003ee <atomic_leave_critical>:
  4003ee:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4003f2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4003f4:	f383 8810 	msr	PRIMASK, r3
  4003f8:	4770      	bx	lr
	...

004003fc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4003fc:	b570      	push	{r4, r5, r6, lr}
  4003fe:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400400:	4604      	mov	r4, r0
  400402:	460d      	mov	r5, r1
  400404:	2800      	cmp	r0, #0
  400406:	bf18      	it	ne
  400408:	2900      	cmpne	r1, #0
  40040a:	bf14      	ite	ne
  40040c:	2001      	movne	r0, #1
  40040e:	2000      	moveq	r0, #0
  400410:	2234      	movs	r2, #52	; 0x34
  400412:	4904      	ldr	r1, [pc, #16]	; (400424 <io_write+0x28>)
  400414:	4b04      	ldr	r3, [pc, #16]	; (400428 <io_write+0x2c>)
  400416:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400418:	6823      	ldr	r3, [r4, #0]
  40041a:	4632      	mov	r2, r6
  40041c:	4629      	mov	r1, r5
  40041e:	4620      	mov	r0, r4
  400420:	4798      	blx	r3
}
  400422:	bd70      	pop	{r4, r5, r6, pc}
  400424:	00401f30 	.word	0x00401f30
  400428:	00400b45 	.word	0x00400b45

0040042c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40042c:	b570      	push	{r4, r5, r6, lr}
  40042e:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400430:	4604      	mov	r4, r0
  400432:	460d      	mov	r5, r1
  400434:	2800      	cmp	r0, #0
  400436:	bf18      	it	ne
  400438:	2900      	cmpne	r1, #0
  40043a:	bf14      	ite	ne
  40043c:	2001      	movne	r0, #1
  40043e:	2000      	moveq	r0, #0
  400440:	223d      	movs	r2, #61	; 0x3d
  400442:	4904      	ldr	r1, [pc, #16]	; (400454 <io_read+0x28>)
  400444:	4b04      	ldr	r3, [pc, #16]	; (400458 <io_read+0x2c>)
  400446:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400448:	6863      	ldr	r3, [r4, #4]
  40044a:	4632      	mov	r2, r6
  40044c:	4629      	mov	r1, r5
  40044e:	4620      	mov	r0, r4
  400450:	4798      	blx	r3
}
  400452:	bd70      	pop	{r4, r5, r6, pc}
  400454:	00401f30 	.word	0x00401f30
  400458:	00400b45 	.word	0x00400b45

0040045c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
  40045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40045e:	460f      	mov	r7, r1
  400460:	4616      	mov	r6, r2
	ASSERT(io);
  400462:	4604      	mov	r4, r0
  400464:	f240 1227 	movw	r2, #295	; 0x127
  400468:	4909      	ldr	r1, [pc, #36]	; (400490 <_spi_m_async_io_write+0x34>)
  40046a:	3000      	adds	r0, #0
  40046c:	bf18      	it	ne
  40046e:	2001      	movne	r0, #1
  400470:	4b08      	ldr	r3, [pc, #32]	; (400494 <_spi_m_async_io_write+0x38>)
  400472:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
  400474:	2500      	movs	r5, #0
  400476:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
  400478:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
  40047a:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
  40047c:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
  40047e:	2310      	movs	r3, #16
  400480:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
  400482:	2101      	movs	r1, #1
  400484:	f1a4 0020 	sub.w	r0, r4, #32
  400488:	4b03      	ldr	r3, [pc, #12]	; (400498 <_spi_m_async_io_write+0x3c>)
  40048a:	4798      	blx	r3

	return ERR_NONE;
}
  40048c:	4628      	mov	r0, r5
  40048e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400490:	00401f44 	.word	0x00401f44
  400494:	00400b45 	.word	0x00400b45
  400498:	00400ffd 	.word	0x00400ffd

0040049c <_spi_m_async_io_read>:
{
  40049c:	b570      	push	{r4, r5, r6, lr}
  40049e:	460d      	mov	r5, r1
  4004a0:	4616      	mov	r6, r2
	ASSERT(io);
  4004a2:	4604      	mov	r4, r0
  4004a4:	f240 1205 	movw	r2, #261	; 0x105
  4004a8:	490c      	ldr	r1, [pc, #48]	; (4004dc <_spi_m_async_io_read+0x40>)
  4004aa:	3000      	adds	r0, #0
  4004ac:	bf18      	it	ne
  4004ae:	2001      	movne	r0, #1
  4004b0:	4b0b      	ldr	r3, [pc, #44]	; (4004e0 <_spi_m_async_io_read+0x44>)
  4004b2:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
  4004b4:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
  4004b6:	2500      	movs	r5, #0
  4004b8:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
  4004ba:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
  4004bc:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
  4004be:	2310      	movs	r3, #16
  4004c0:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
  4004c2:	3c20      	subs	r4, #32
  4004c4:	2101      	movs	r1, #1
  4004c6:	4620      	mov	r0, r4
  4004c8:	4b06      	ldr	r3, [pc, #24]	; (4004e4 <_spi_m_async_io_read+0x48>)
  4004ca:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
  4004cc:	f240 11ff 	movw	r1, #511	; 0x1ff
  4004d0:	4620      	mov	r0, r4
  4004d2:	4b05      	ldr	r3, [pc, #20]	; (4004e8 <_spi_m_async_io_read+0x4c>)
  4004d4:	4798      	blx	r3
}
  4004d6:	4628      	mov	r0, r5
  4004d8:	bd70      	pop	{r4, r5, r6, pc}
  4004da:	bf00      	nop
  4004dc:	00401f44 	.word	0x00401f44
  4004e0:	00400b45 	.word	0x00400b45
  4004e4:	00401031 	.word	0x00401031
  4004e8:	004010b5 	.word	0x004010b5

004004ec <_spi_dev_error>:
{
  4004ec:	b570      	push	{r4, r5, r6, lr}
  4004ee:	4604      	mov	r4, r0
  4004f0:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
  4004f2:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
  4004f4:	2100      	movs	r1, #0
  4004f6:	4b09      	ldr	r3, [pc, #36]	; (40051c <_spi_dev_error+0x30>)
  4004f8:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
  4004fa:	2100      	movs	r1, #0
  4004fc:	4620      	mov	r0, r4
  4004fe:	4b08      	ldr	r3, [pc, #32]	; (400520 <_spi_dev_error+0x34>)
  400500:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
  400502:	2100      	movs	r1, #0
  400504:	4620      	mov	r0, r4
  400506:	4b07      	ldr	r3, [pc, #28]	; (400524 <_spi_dev_error+0x38>)
  400508:	4798      	blx	r3
	spi->stat = 0;
  40050a:	2300      	movs	r3, #0
  40050c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
  400510:	6b23      	ldr	r3, [r4, #48]	; 0x30
  400512:	b113      	cbz	r3, 40051a <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
  400514:	4631      	mov	r1, r6
  400516:	4628      	mov	r0, r5
  400518:	4798      	blx	r3
  40051a:	bd70      	pop	{r4, r5, r6, pc}
  40051c:	00400ffd 	.word	0x00400ffd
  400520:	00401031 	.word	0x00401031
  400524:	00401071 	.word	0x00401071

00400528 <_spi_dev_complete>:
{
  400528:	b538      	push	{r3, r4, r5, lr}
	if (spi->xfercnt >= spi->xfer.size) {
  40052a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40052c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  40052e:	429a      	cmp	r2, r3
  400530:	d200      	bcs.n	400534 <_spi_dev_complete+0xc>
  400532:	bd38      	pop	{r3, r4, r5, pc}
  400534:	1f05      	subs	r5, r0, #4
  400536:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
  400538:	2100      	movs	r1, #0
  40053a:	4b05      	ldr	r3, [pc, #20]	; (400550 <_spi_dev_complete+0x28>)
  40053c:	4798      	blx	r3
		spi->stat = 0;
  40053e:	2300      	movs	r3, #0
  400540:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
  400544:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  400546:	2b00      	cmp	r3, #0
  400548:	d0f3      	beq.n	400532 <_spi_dev_complete+0xa>
			spi->callbacks.cb_xfer(spi);
  40054a:	4628      	mov	r0, r5
  40054c:	4798      	blx	r3
}
  40054e:	e7f0      	b.n	400532 <_spi_dev_complete+0xa>
  400550:	00401071 	.word	0x00401071

00400554 <_spi_dev_tx>:
{
  400554:	b510      	push	{r4, lr}
  400556:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
  400558:	7903      	ldrb	r3, [r0, #4]
  40055a:	2b01      	cmp	r3, #1
  40055c:	d90c      	bls.n	400578 <_spi_dev_tx+0x24>
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
  40055e:	6b42      	ldr	r2, [r0, #52]	; 0x34
  400560:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400562:	1c59      	adds	r1, r3, #1
  400564:	6401      	str	r1, [r0, #64]	; 0x40
  400566:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  40056a:	4b0c      	ldr	r3, [pc, #48]	; (40059c <_spi_dev_tx+0x48>)
  40056c:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
  40056e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400572:	429a      	cmp	r2, r3
  400574:	d008      	beq.n	400588 <_spi_dev_tx+0x34>
  400576:	bd10      	pop	{r4, pc}
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
  400578:	6b42      	ldr	r2, [r0, #52]	; 0x34
  40057a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40057c:	1c59      	adds	r1, r3, #1
  40057e:	6401      	str	r1, [r0, #64]	; 0x40
  400580:	5cd1      	ldrb	r1, [r2, r3]
  400582:	4b06      	ldr	r3, [pc, #24]	; (40059c <_spi_dev_tx+0x48>)
  400584:	4798      	blx	r3
  400586:	e7f2      	b.n	40056e <_spi_dev_tx+0x1a>
		_spi_m_async_enable_tx(dev, false);
  400588:	2100      	movs	r1, #0
  40058a:	4620      	mov	r0, r4
  40058c:	4b04      	ldr	r3, [pc, #16]	; (4005a0 <_spi_dev_tx+0x4c>)
  40058e:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
  400590:	2101      	movs	r1, #1
  400592:	4620      	mov	r0, r4
  400594:	4b03      	ldr	r3, [pc, #12]	; (4005a4 <_spi_dev_tx+0x50>)
  400596:	4798      	blx	r3
}
  400598:	e7ed      	b.n	400576 <_spi_dev_tx+0x22>
  40059a:	bf00      	nop
  40059c:	004010b5 	.word	0x004010b5
  4005a0:	00400ffd 	.word	0x00400ffd
  4005a4:	00401071 	.word	0x00401071

004005a8 <_spi_dev_rx>:
{
  4005a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005aa:	4604      	mov	r4, r0
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
  4005ac:	1f07      	subs	r7, r0, #4
	if (spi->xfer.rxbuf) {
  4005ae:	6b85      	ldr	r5, [r0, #56]	; 0x38
  4005b0:	b1fd      	cbz	r5, 4005f2 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
  4005b2:	7903      	ldrb	r3, [r0, #4]
  4005b4:	2b01      	cmp	r3, #1
  4005b6:	d915      	bls.n	4005e4 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
  4005b8:	6c06      	ldr	r6, [r0, #64]	; 0x40
  4005ba:	1c73      	adds	r3, r6, #1
  4005bc:	6403      	str	r3, [r0, #64]	; 0x40
  4005be:	4b1b      	ldr	r3, [pc, #108]	; (40062c <_spi_dev_rx+0x84>)
  4005c0:	4798      	blx	r3
  4005c2:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
  4005c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4005c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4005ca:	4293      	cmp	r3, r2
  4005cc:	d221      	bcs.n	400612 <_spi_dev_rx+0x6a>
		if (spi->xfer.txbuf) {
  4005ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
  4005d0:	b1d2      	cbz	r2, 400608 <_spi_dev_rx+0x60>
			if (!(dev->char_size > 1)) {
  4005d2:	7921      	ldrb	r1, [r4, #4]
  4005d4:	2901      	cmp	r1, #1
  4005d6:	d912      	bls.n	4005fe <_spi_dev_rx+0x56>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
  4005d8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  4005dc:	4620      	mov	r0, r4
  4005de:	4b14      	ldr	r3, [pc, #80]	; (400630 <_spi_dev_rx+0x88>)
  4005e0:	4798      	blx	r3
  4005e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
  4005e4:	6c06      	ldr	r6, [r0, #64]	; 0x40
  4005e6:	1c73      	adds	r3, r6, #1
  4005e8:	6403      	str	r3, [r0, #64]	; 0x40
  4005ea:	4b10      	ldr	r3, [pc, #64]	; (40062c <_spi_dev_rx+0x84>)
  4005ec:	4798      	blx	r3
  4005ee:	55a8      	strb	r0, [r5, r6]
  4005f0:	e7e9      	b.n	4005c6 <_spi_dev_rx+0x1e>
		_spi_m_async_read_one(dev);
  4005f2:	4b0e      	ldr	r3, [pc, #56]	; (40062c <_spi_dev_rx+0x84>)
  4005f4:	4798      	blx	r3
		spi->xfercnt++;
  4005f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4005f8:	3301      	adds	r3, #1
  4005fa:	6423      	str	r3, [r4, #64]	; 0x40
  4005fc:	e7e3      	b.n	4005c6 <_spi_dev_rx+0x1e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
  4005fe:	5cd1      	ldrb	r1, [r2, r3]
  400600:	4620      	mov	r0, r4
  400602:	4b0b      	ldr	r3, [pc, #44]	; (400630 <_spi_dev_rx+0x88>)
  400604:	4798      	blx	r3
  400606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_spi_m_async_write_one(dev, dev->dummy_byte);
  400608:	88e1      	ldrh	r1, [r4, #6]
  40060a:	4620      	mov	r0, r4
  40060c:	4b08      	ldr	r3, [pc, #32]	; (400630 <_spi_dev_rx+0x88>)
  40060e:	4798      	blx	r3
  400610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_enable_rx(dev, false);
  400612:	2100      	movs	r1, #0
  400614:	4620      	mov	r0, r4
  400616:	4b07      	ldr	r3, [pc, #28]	; (400634 <_spi_dev_rx+0x8c>)
  400618:	4798      	blx	r3
		spi->stat = 0;
  40061a:	2300      	movs	r3, #0
  40061c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
  400620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  400622:	b10b      	cbz	r3, 400628 <_spi_dev_rx+0x80>
			spi->callbacks.cb_xfer(spi);
  400624:	4638      	mov	r0, r7
  400626:	4798      	blx	r3
  400628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40062a:	bf00      	nop
  40062c:	004010e5 	.word	0x004010e5
  400630:	004010b5 	.word	0x004010b5
  400634:	00401031 	.word	0x00401031

00400638 <spi_m_async_set_func_ptr>:
{
  400638:	b538      	push	{r3, r4, r5, lr}
  40063a:	460d      	mov	r5, r1
	ASSERT(spi);
  40063c:	4604      	mov	r4, r0
  40063e:	229e      	movs	r2, #158	; 0x9e
  400640:	4903      	ldr	r1, [pc, #12]	; (400650 <spi_m_async_set_func_ptr+0x18>)
  400642:	3000      	adds	r0, #0
  400644:	bf18      	it	ne
  400646:	2001      	movne	r0, #1
  400648:	4b02      	ldr	r3, [pc, #8]	; (400654 <spi_m_async_set_func_ptr+0x1c>)
  40064a:	4798      	blx	r3
	spi->func = (struct _spi_m_async_hpl_interface *)func;
  40064c:	6025      	str	r5, [r4, #0]
  40064e:	bd38      	pop	{r3, r4, r5, pc}
  400650:	00401f44 	.word	0x00401f44
  400654:	00400b45 	.word	0x00400b45

00400658 <spi_m_async_init>:
{
  400658:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi && hw);
  40065a:	4605      	mov	r5, r0
  40065c:	460e      	mov	r6, r1
  40065e:	2800      	cmp	r0, #0
  400660:	bf18      	it	ne
  400662:	2900      	cmpne	r1, #0
  400664:	bf14      	ite	ne
  400666:	2001      	movne	r0, #1
  400668:	2000      	moveq	r0, #0
  40066a:	22a5      	movs	r2, #165	; 0xa5
  40066c:	4911      	ldr	r1, [pc, #68]	; (4006b4 <spi_m_async_init+0x5c>)
  40066e:	4b12      	ldr	r3, [pc, #72]	; (4006b8 <spi_m_async_init+0x60>)
  400670:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400672:	462c      	mov	r4, r5
  400674:	f844 6f04 	str.w	r6, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
  400678:	4631      	mov	r1, r6
  40067a:	4620      	mov	r0, r4
  40067c:	4b0f      	ldr	r3, [pc, #60]	; (4006bc <spi_m_async_init+0x64>)
  40067e:	4798      	blx	r3
	if (rc >= 0) {
  400680:	2800      	cmp	r0, #0
  400682:	db15      	blt.n	4006b0 <spi_m_async_init+0x58>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
  400684:	4a0e      	ldr	r2, [pc, #56]	; (4006c0 <spi_m_async_init+0x68>)
  400686:	2100      	movs	r1, #0
  400688:	4620      	mov	r0, r4
  40068a:	4e0e      	ldr	r6, [pc, #56]	; (4006c4 <spi_m_async_init+0x6c>)
  40068c:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
  40068e:	4a0e      	ldr	r2, [pc, #56]	; (4006c8 <spi_m_async_init+0x70>)
  400690:	2101      	movs	r1, #1
  400692:	4620      	mov	r0, r4
  400694:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
  400696:	4a0d      	ldr	r2, [pc, #52]	; (4006cc <spi_m_async_init+0x74>)
  400698:	2102      	movs	r1, #2
  40069a:	4620      	mov	r0, r4
  40069c:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
  40069e:	4a0c      	ldr	r2, [pc, #48]	; (4006d0 <spi_m_async_init+0x78>)
  4006a0:	2103      	movs	r1, #3
  4006a2:	4620      	mov	r0, r4
  4006a4:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
  4006a6:	4b0b      	ldr	r3, [pc, #44]	; (4006d4 <spi_m_async_init+0x7c>)
  4006a8:	62ab      	str	r3, [r5, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
  4006aa:	4b0b      	ldr	r3, [pc, #44]	; (4006d8 <spi_m_async_init+0x80>)
  4006ac:	626b      	str	r3, [r5, #36]	; 0x24
	return ERR_NONE;
  4006ae:	2000      	movs	r0, #0
}
  4006b0:	bd70      	pop	{r4, r5, r6, pc}
  4006b2:	bf00      	nop
  4006b4:	00401f44 	.word	0x00401f44
  4006b8:	00400b45 	.word	0x00400b45
  4006bc:	00400eb9 	.word	0x00400eb9
  4006c0:	00400555 	.word	0x00400555
  4006c4:	00401115 	.word	0x00401115
  4006c8:	004005a9 	.word	0x004005a9
  4006cc:	00400529 	.word	0x00400529
  4006d0:	004004ed 	.word	0x004004ed
  4006d4:	0040049d 	.word	0x0040049d
  4006d8:	0040045d 	.word	0x0040045d

004006dc <spi_m_async_enable>:
{
  4006dc:	b510      	push	{r4, lr}
	ASSERT(spi);
  4006de:	4604      	mov	r4, r0
  4006e0:	22c1      	movs	r2, #193	; 0xc1
  4006e2:	4905      	ldr	r1, [pc, #20]	; (4006f8 <spi_m_async_enable+0x1c>)
  4006e4:	3000      	adds	r0, #0
  4006e6:	bf18      	it	ne
  4006e8:	2001      	movne	r0, #1
  4006ea:	4b04      	ldr	r3, [pc, #16]	; (4006fc <spi_m_async_enable+0x20>)
  4006ec:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
  4006ee:	1d20      	adds	r0, r4, #4
  4006f0:	4b03      	ldr	r3, [pc, #12]	; (400700 <spi_m_async_enable+0x24>)
  4006f2:	4798      	blx	r3
  4006f4:	bd10      	pop	{r4, pc}
  4006f6:	bf00      	nop
  4006f8:	00401f44 	.word	0x00401f44
  4006fc:	00400b45 	.word	0x00400b45
  400700:	00400f2d 	.word	0x00400f2d

00400704 <spi_m_async_set_baudrate>:
{
  400704:	b538      	push	{r3, r4, r5, lr}
  400706:	460d      	mov	r5, r1
	ASSERT(spi);
  400708:	4604      	mov	r4, r0
  40070a:	22cf      	movs	r2, #207	; 0xcf
  40070c:	4909      	ldr	r1, [pc, #36]	; (400734 <spi_m_async_set_baudrate+0x30>)
  40070e:	3000      	adds	r0, #0
  400710:	bf18      	it	ne
  400712:	2001      	movne	r0, #1
  400714:	4b08      	ldr	r3, [pc, #32]	; (400738 <spi_m_async_set_baudrate+0x34>)
  400716:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
  400718:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  40071c:	f013 0f10 	tst.w	r3, #16
  400720:	d104      	bne.n	40072c <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
  400722:	4629      	mov	r1, r5
  400724:	1d20      	adds	r0, r4, #4
  400726:	4b05      	ldr	r3, [pc, #20]	; (40073c <spi_m_async_set_baudrate+0x38>)
  400728:	4798      	blx	r3
  40072a:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
  40072c:	f06f 0003 	mvn.w	r0, #3
}
  400730:	bd38      	pop	{r3, r4, r5, pc}
  400732:	bf00      	nop
  400734:	00401f44 	.word	0x00401f44
  400738:	00400b45 	.word	0x00400b45
  40073c:	00400f61 	.word	0x00400f61

00400740 <spi_m_async_set_char_size>:
{
  400740:	b538      	push	{r3, r4, r5, lr}
  400742:	460d      	mov	r5, r1
	ASSERT(spi);
  400744:	4604      	mov	r4, r0
  400746:	22e3      	movs	r2, #227	; 0xe3
  400748:	4909      	ldr	r1, [pc, #36]	; (400770 <spi_m_async_set_char_size+0x30>)
  40074a:	3000      	adds	r0, #0
  40074c:	bf18      	it	ne
  40074e:	2001      	movne	r0, #1
  400750:	4b08      	ldr	r3, [pc, #32]	; (400774 <spi_m_async_set_char_size+0x34>)
  400752:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
  400754:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  400758:	f013 0f10 	tst.w	r3, #16
  40075c:	d104      	bne.n	400768 <spi_m_async_set_char_size+0x28>
	return _spi_m_async_set_char_size(&spi->dev, char_size);
  40075e:	4629      	mov	r1, r5
  400760:	1d20      	adds	r0, r4, #4
  400762:	4b05      	ldr	r3, [pc, #20]	; (400778 <spi_m_async_set_char_size+0x38>)
  400764:	4798      	blx	r3
  400766:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
  400768:	f06f 0003 	mvn.w	r0, #3
}
  40076c:	bd38      	pop	{r3, r4, r5, pc}
  40076e:	bf00      	nop
  400770:	00401f44 	.word	0x00401f44
  400774:	00400b45 	.word	0x00400b45
  400778:	00400fc5 	.word	0x00400fc5

0040077c <spi_m_async_set_data_order>:
{
  40077c:	b538      	push	{r3, r4, r5, lr}
  40077e:	460d      	mov	r5, r1
	ASSERT(spi);
  400780:	4604      	mov	r4, r0
  400782:	22ed      	movs	r2, #237	; 0xed
  400784:	4909      	ldr	r1, [pc, #36]	; (4007ac <spi_m_async_set_data_order+0x30>)
  400786:	3000      	adds	r0, #0
  400788:	bf18      	it	ne
  40078a:	2001      	movne	r0, #1
  40078c:	4b08      	ldr	r3, [pc, #32]	; (4007b0 <spi_m_async_set_data_order+0x34>)
  40078e:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
  400790:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  400794:	f013 0f10 	tst.w	r3, #16
  400798:	d104      	bne.n	4007a4 <spi_m_async_set_data_order+0x28>
	return _spi_m_async_set_data_order(&spi->dev, dord);
  40079a:	4629      	mov	r1, r5
  40079c:	1d20      	adds	r0, r4, #4
  40079e:	4b05      	ldr	r3, [pc, #20]	; (4007b4 <spi_m_async_set_data_order+0x38>)
  4007a0:	4798      	blx	r3
  4007a2:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
  4007a4:	f06f 0003 	mvn.w	r0, #3
}
  4007a8:	bd38      	pop	{r3, r4, r5, pc}
  4007aa:	bf00      	nop
  4007ac:	00401f44 	.word	0x00401f44
  4007b0:	00400b45 	.word	0x00400b45
  4007b4:	00400f99 	.word	0x00400f99

004007b8 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
  4007b8:	b570      	push	{r4, r5, r6, lr}
  4007ba:	460c      	mov	r4, r1
  4007bc:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
  4007be:	4605      	mov	r5, r0
  4007c0:	f240 1263 	movw	r2, #355	; 0x163
  4007c4:	490a      	ldr	r1, [pc, #40]	; (4007f0 <spi_m_async_register_callback+0x38>)
  4007c6:	3000      	adds	r0, #0
  4007c8:	bf18      	it	ne
  4007ca:	2001      	movne	r0, #1
  4007cc:	2c01      	cmp	r4, #1
  4007ce:	bf88      	it	hi
  4007d0:	2000      	movhi	r0, #0
  4007d2:	4b08      	ldr	r3, [pc, #32]	; (4007f4 <spi_m_async_register_callback+0x3c>)
  4007d4:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
  4007d6:	b90c      	cbnz	r4, 4007dc <spi_m_async_register_callback+0x24>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
  4007d8:	632e      	str	r6, [r5, #48]	; 0x30
  4007da:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
  4007dc:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
  4007de:	1c32      	adds	r2, r6, #0
  4007e0:	bf18      	it	ne
  4007e2:	2201      	movne	r2, #1
  4007e4:	2103      	movs	r1, #3
  4007e6:	1d28      	adds	r0, r5, #4
  4007e8:	4b03      	ldr	r3, [pc, #12]	; (4007f8 <spi_m_async_register_callback+0x40>)
  4007ea:	4798      	blx	r3
  4007ec:	bd70      	pop	{r4, r5, r6, pc}
  4007ee:	bf00      	nop
  4007f0:	00401f44 	.word	0x00401f44
  4007f4:	00400b45 	.word	0x00400b45
  4007f8:	00401145 	.word	0x00401145

004007fc <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
  4007fc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  4007fe:	4604      	mov	r4, r0
  400800:	460d      	mov	r5, r1
  400802:	2800      	cmp	r0, #0
  400804:	bf18      	it	ne
  400806:	2900      	cmpne	r1, #0
  400808:	bf14      	ite	ne
  40080a:	2001      	movne	r0, #1
  40080c:	2000      	moveq	r0, #0
  40080e:	f240 126f 	movw	r2, #367	; 0x16f
  400812:	4903      	ldr	r1, [pc, #12]	; (400820 <spi_m_async_get_io_descriptor+0x24>)
  400814:	4b03      	ldr	r3, [pc, #12]	; (400824 <spi_m_async_get_io_descriptor+0x28>)
  400816:	4798      	blx	r3
	*io = &spi->io;
  400818:	3424      	adds	r4, #36	; 0x24
  40081a:	602c      	str	r4, [r5, #0]
	return 0;
}
  40081c:	2000      	movs	r0, #0
  40081e:	bd38      	pop	{r3, r4, r5, pc}
  400820:	00401f44 	.word	0x00401f44
  400824:	00400b45 	.word	0x00400b45

00400828 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  40082a:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  40082c:	b117      	cbz	r7, 400834 <timer_add_timer_task+0xc>
  40082e:	463c      	mov	r4, r7
  400830:	2600      	movs	r6, #0
  400832:	e00b      	b.n	40084c <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400834:	4b0e      	ldr	r3, [pc, #56]	; (400870 <timer_add_timer_task+0x48>)
  400836:	4798      	blx	r3
		return;
  400838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  40083a:	68a5      	ldr	r5, [r4, #8]
  40083c:	442b      	add	r3, r5
  40083e:	1a9b      	subs	r3, r3, r2
  400840:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400842:	688d      	ldr	r5, [r1, #8]
  400844:	42ab      	cmp	r3, r5
  400846:	d209      	bcs.n	40085c <timer_add_timer_task+0x34>
			break;
		prev = it;
  400848:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  40084a:	6824      	ldr	r4, [r4, #0]
  40084c:	b134      	cbz	r4, 40085c <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  40084e:	6863      	ldr	r3, [r4, #4]
  400850:	4293      	cmp	r3, r2
  400852:	d8f2      	bhi.n	40083a <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400854:	68a5      	ldr	r5, [r4, #8]
  400856:	1a9b      	subs	r3, r3, r2
  400858:	442b      	add	r3, r5
  40085a:	e7f2      	b.n	400842 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  40085c:	42bc      	cmp	r4, r7
  40085e:	d003      	beq.n	400868 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400860:	4630      	mov	r0, r6
  400862:	4b04      	ldr	r3, [pc, #16]	; (400874 <timer_add_timer_task+0x4c>)
  400864:	4798      	blx	r3
  400866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400868:	4b01      	ldr	r3, [pc, #4]	; (400870 <timer_add_timer_task+0x48>)
  40086a:	4798      	blx	r3
  40086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40086e:	bf00      	nop
  400870:	00400b61 	.word	0x00400b61
  400874:	00400b8d 	.word	0x00400b8d

00400878 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40087a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  40087c:	6906      	ldr	r6, [r0, #16]
  40087e:	3601      	adds	r6, #1
  400880:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400882:	7e03      	ldrb	r3, [r0, #24]
  400884:	f013 0f01 	tst.w	r3, #1
  400888:	d105      	bne.n	400896 <timer_process_counted+0x1e>
  40088a:	7e03      	ldrb	r3, [r0, #24]
  40088c:	f013 0f02 	tst.w	r3, #2
  400890:	d101      	bne.n	400896 <timer_process_counted+0x1e>
  400892:	4605      	mov	r5, r0
  400894:	e009      	b.n	4008aa <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400896:	7e03      	ldrb	r3, [r0, #24]
  400898:	f043 0302 	orr.w	r3, r3, #2
  40089c:	7603      	strb	r3, [r0, #24]
		return;
  40089e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4008a0:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4008a2:	68e3      	ldr	r3, [r4, #12]
  4008a4:	4620      	mov	r0, r4
  4008a6:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4008a8:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4008aa:	b19c      	cbz	r4, 4008d4 <timer_process_counted+0x5c>
  4008ac:	6863      	ldr	r3, [r4, #4]
  4008ae:	1af3      	subs	r3, r6, r3
  4008b0:	68a2      	ldr	r2, [r4, #8]
  4008b2:	4293      	cmp	r3, r2
  4008b4:	d30e      	bcc.n	4008d4 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4008b6:	f105 0714 	add.w	r7, r5, #20
  4008ba:	4638      	mov	r0, r7
  4008bc:	4b06      	ldr	r3, [pc, #24]	; (4008d8 <timer_process_counted+0x60>)
  4008be:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4008c0:	7c23      	ldrb	r3, [r4, #16]
  4008c2:	2b01      	cmp	r3, #1
  4008c4:	d1ec      	bne.n	4008a0 <timer_process_counted+0x28>
			tmp->time_label = time;
  4008c6:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  4008c8:	4632      	mov	r2, r6
  4008ca:	4621      	mov	r1, r4
  4008cc:	4638      	mov	r0, r7
  4008ce:	4b03      	ldr	r3, [pc, #12]	; (4008dc <timer_process_counted+0x64>)
  4008d0:	4798      	blx	r3
  4008d2:	e7e5      	b.n	4008a0 <timer_process_counted+0x28>
  4008d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4008d6:	bf00      	nop
  4008d8:	00400b95 	.word	0x00400b95
  4008dc:	00400829 	.word	0x00400829

004008e0 <timer_init>:
{
  4008e0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4008e2:	4604      	mov	r4, r0
  4008e4:	460d      	mov	r5, r1
  4008e6:	2800      	cmp	r0, #0
  4008e8:	bf18      	it	ne
  4008ea:	2900      	cmpne	r1, #0
  4008ec:	bf14      	ite	ne
  4008ee:	2001      	movne	r0, #1
  4008f0:	2000      	moveq	r0, #0
  4008f2:	223b      	movs	r2, #59	; 0x3b
  4008f4:	4905      	ldr	r1, [pc, #20]	; (40090c <timer_init+0x2c>)
  4008f6:	4b06      	ldr	r3, [pc, #24]	; (400910 <timer_init+0x30>)
  4008f8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  4008fa:	4629      	mov	r1, r5
  4008fc:	4620      	mov	r0, r4
  4008fe:	4b05      	ldr	r3, [pc, #20]	; (400914 <timer_init+0x34>)
  400900:	4798      	blx	r3
	descr->time                           = 0;
  400902:	2000      	movs	r0, #0
  400904:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400906:	4b04      	ldr	r3, [pc, #16]	; (400918 <timer_init+0x38>)
  400908:	6023      	str	r3, [r4, #0]
}
  40090a:	bd38      	pop	{r3, r4, r5, pc}
  40090c:	00401f64 	.word	0x00401f64
  400910:	00400b45 	.word	0x00400b45
  400914:	004011e5 	.word	0x004011e5
  400918:	00400879 	.word	0x00400879

0040091c <timer_start>:
{
  40091c:	b510      	push	{r4, lr}
	ASSERT(descr);
  40091e:	4604      	mov	r4, r0
  400920:	2253      	movs	r2, #83	; 0x53
  400922:	4909      	ldr	r1, [pc, #36]	; (400948 <timer_start+0x2c>)
  400924:	3000      	adds	r0, #0
  400926:	bf18      	it	ne
  400928:	2001      	movne	r0, #1
  40092a:	4b08      	ldr	r3, [pc, #32]	; (40094c <timer_start+0x30>)
  40092c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  40092e:	4620      	mov	r0, r4
  400930:	4b07      	ldr	r3, [pc, #28]	; (400950 <timer_start+0x34>)
  400932:	4798      	blx	r3
  400934:	b920      	cbnz	r0, 400940 <timer_start+0x24>
	_timer_start(&descr->device);
  400936:	4620      	mov	r0, r4
  400938:	4b06      	ldr	r3, [pc, #24]	; (400954 <timer_start+0x38>)
  40093a:	4798      	blx	r3
	return ERR_NONE;
  40093c:	2000      	movs	r0, #0
  40093e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400940:	f06f 0010 	mvn.w	r0, #16
}
  400944:	bd10      	pop	{r4, pc}
  400946:	bf00      	nop
  400948:	00401f64 	.word	0x00401f64
  40094c:	00400b45 	.word	0x00400b45
  400950:	004012a9 	.word	0x004012a9
  400954:	004012a1 	.word	0x004012a1

00400958 <timer_add_task>:
{
  400958:	b570      	push	{r4, r5, r6, lr}
  40095a:	b082      	sub	sp, #8
	ASSERT(descr && task);
  40095c:	4604      	mov	r4, r0
  40095e:	460d      	mov	r5, r1
  400960:	2800      	cmp	r0, #0
  400962:	bf18      	it	ne
  400964:	2900      	cmpne	r1, #0
  400966:	bf14      	ite	ne
  400968:	2001      	movne	r0, #1
  40096a:	2000      	moveq	r0, #0
  40096c:	227a      	movs	r2, #122	; 0x7a
  40096e:	491d      	ldr	r1, [pc, #116]	; (4009e4 <timer_add_task+0x8c>)
  400970:	4b1d      	ldr	r3, [pc, #116]	; (4009e8 <timer_add_task+0x90>)
  400972:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  400974:	7e23      	ldrb	r3, [r4, #24]
  400976:	f043 0301 	orr.w	r3, r3, #1
  40097a:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  40097c:	f104 0614 	add.w	r6, r4, #20
  400980:	4629      	mov	r1, r5
  400982:	4630      	mov	r0, r6
  400984:	4b19      	ldr	r3, [pc, #100]	; (4009ec <timer_add_task+0x94>)
  400986:	4798      	blx	r3
  400988:	b988      	cbnz	r0, 4009ae <timer_add_task+0x56>
	task->time_label = descr->time;
  40098a:	6923      	ldr	r3, [r4, #16]
  40098c:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  40098e:	6922      	ldr	r2, [r4, #16]
  400990:	4629      	mov	r1, r5
  400992:	4630      	mov	r0, r6
  400994:	4b16      	ldr	r3, [pc, #88]	; (4009f0 <timer_add_task+0x98>)
  400996:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400998:	7e23      	ldrb	r3, [r4, #24]
  40099a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  40099e:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  4009a0:	7e23      	ldrb	r3, [r4, #24]
  4009a2:	f013 0f02 	tst.w	r3, #2
  4009a6:	d10e      	bne.n	4009c6 <timer_add_task+0x6e>
	return ERR_NONE;
  4009a8:	2000      	movs	r0, #0
}
  4009aa:	b002      	add	sp, #8
  4009ac:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4009ae:	7e23      	ldrb	r3, [r4, #24]
  4009b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4009b4:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  4009b6:	227f      	movs	r2, #127	; 0x7f
  4009b8:	490a      	ldr	r1, [pc, #40]	; (4009e4 <timer_add_task+0x8c>)
  4009ba:	2000      	movs	r0, #0
  4009bc:	4b0a      	ldr	r3, [pc, #40]	; (4009e8 <timer_add_task+0x90>)
  4009be:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  4009c0:	f06f 0011 	mvn.w	r0, #17
  4009c4:	e7f1      	b.n	4009aa <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  4009c6:	a801      	add	r0, sp, #4
  4009c8:	4b0a      	ldr	r3, [pc, #40]	; (4009f4 <timer_add_task+0x9c>)
  4009ca:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  4009cc:	7e23      	ldrb	r3, [r4, #24]
  4009ce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  4009d2:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  4009d4:	4620      	mov	r0, r4
  4009d6:	4b08      	ldr	r3, [pc, #32]	; (4009f8 <timer_add_task+0xa0>)
  4009d8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  4009da:	a801      	add	r0, sp, #4
  4009dc:	4b07      	ldr	r3, [pc, #28]	; (4009fc <timer_add_task+0xa4>)
  4009de:	4798      	blx	r3
	return ERR_NONE;
  4009e0:	2000      	movs	r0, #0
  4009e2:	e7e2      	b.n	4009aa <timer_add_task+0x52>
  4009e4:	00401f64 	.word	0x00401f64
  4009e8:	00400b45 	.word	0x00400b45
  4009ec:	00400b4b 	.word	0x00400b4b
  4009f0:	00400829 	.word	0x00400829
  4009f4:	004003e1 	.word	0x004003e1
  4009f8:	004012b5 	.word	0x004012b5
  4009fc:	004003ef 	.word	0x004003ef

00400a00 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a02:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400a04:	4605      	mov	r5, r0
  400a06:	460f      	mov	r7, r1
  400a08:	2800      	cmp	r0, #0
  400a0a:	bf18      	it	ne
  400a0c:	2900      	cmpne	r1, #0
  400a0e:	d002      	beq.n	400a16 <usart_sync_write+0x16>
  400a10:	bb0a      	cbnz	r2, 400a56 <usart_sync_write+0x56>
  400a12:	2000      	movs	r0, #0
  400a14:	e000      	b.n	400a18 <usart_sync_write+0x18>
  400a16:	2000      	movs	r0, #0
  400a18:	22f1      	movs	r2, #241	; 0xf1
  400a1a:	4910      	ldr	r1, [pc, #64]	; (400a5c <usart_sync_write+0x5c>)
  400a1c:	4b10      	ldr	r3, [pc, #64]	; (400a60 <usart_sync_write+0x60>)
  400a1e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400a20:	f105 0408 	add.w	r4, r5, #8
  400a24:	4620      	mov	r0, r4
  400a26:	4b0f      	ldr	r3, [pc, #60]	; (400a64 <usart_sync_write+0x64>)
  400a28:	4798      	blx	r3
  400a2a:	2800      	cmp	r0, #0
  400a2c:	d0f8      	beq.n	400a20 <usart_sync_write+0x20>
  400a2e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400a30:	5d79      	ldrb	r1, [r7, r5]
  400a32:	4620      	mov	r0, r4
  400a34:	4b0c      	ldr	r3, [pc, #48]	; (400a68 <usart_sync_write+0x68>)
  400a36:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400a38:	4620      	mov	r0, r4
  400a3a:	4b0a      	ldr	r3, [pc, #40]	; (400a64 <usart_sync_write+0x64>)
  400a3c:	4798      	blx	r3
  400a3e:	2800      	cmp	r0, #0
  400a40:	d0fa      	beq.n	400a38 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400a42:	3501      	adds	r5, #1
  400a44:	42b5      	cmp	r5, r6
  400a46:	d3f3      	bcc.n	400a30 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400a48:	4620      	mov	r0, r4
  400a4a:	4b08      	ldr	r3, [pc, #32]	; (400a6c <usart_sync_write+0x6c>)
  400a4c:	4798      	blx	r3
  400a4e:	2800      	cmp	r0, #0
  400a50:	d0fa      	beq.n	400a48 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400a52:	4628      	mov	r0, r5
  400a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400a56:	2001      	movs	r0, #1
  400a58:	e7de      	b.n	400a18 <usart_sync_write+0x18>
  400a5a:	bf00      	nop
  400a5c:	00401f7c 	.word	0x00401f7c
  400a60:	00400b45 	.word	0x00400b45
  400a64:	004014a1 	.word	0x004014a1
  400a68:	00401459 	.word	0x00401459
  400a6c:	004014c9 	.word	0x004014c9

00400a70 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a74:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400a76:	4605      	mov	r5, r0
  400a78:	4688      	mov	r8, r1
  400a7a:	2800      	cmp	r0, #0
  400a7c:	bf18      	it	ne
  400a7e:	2900      	cmpne	r1, #0
  400a80:	d002      	beq.n	400a88 <usart_sync_read+0x18>
  400a82:	b9d2      	cbnz	r2, 400aba <usart_sync_read+0x4a>
  400a84:	2000      	movs	r0, #0
  400a86:	e000      	b.n	400a8a <usart_sync_read+0x1a>
  400a88:	2000      	movs	r0, #0
  400a8a:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400a8e:	490c      	ldr	r1, [pc, #48]	; (400ac0 <usart_sync_read+0x50>)
  400a90:	4b0c      	ldr	r3, [pc, #48]	; (400ac4 <usart_sync_read+0x54>)
  400a92:	4798      	blx	r3
	uint32_t                      offset = 0;
  400a94:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400a96:	f105 0408 	add.w	r4, r5, #8
  400a9a:	4620      	mov	r0, r4
  400a9c:	4b0a      	ldr	r3, [pc, #40]	; (400ac8 <usart_sync_read+0x58>)
  400a9e:	4798      	blx	r3
  400aa0:	2800      	cmp	r0, #0
  400aa2:	d0f8      	beq.n	400a96 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400aa4:	4620      	mov	r0, r4
  400aa6:	4b09      	ldr	r3, [pc, #36]	; (400acc <usart_sync_read+0x5c>)
  400aa8:	4798      	blx	r3
  400aaa:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400aae:	3601      	adds	r6, #1
  400ab0:	42be      	cmp	r6, r7
  400ab2:	d3f0      	bcc.n	400a96 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400ab4:	4630      	mov	r0, r6
  400ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400aba:	2001      	movs	r0, #1
  400abc:	e7e5      	b.n	400a8a <usart_sync_read+0x1a>
  400abe:	bf00      	nop
  400ac0:	00401f7c 	.word	0x00401f7c
  400ac4:	00400b45 	.word	0x00400b45
  400ac8:	004014f1 	.word	0x004014f1
  400acc:	0040147d 	.word	0x0040147d

00400ad0 <usart_sync_init>:
{
  400ad0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400ad2:	4604      	mov	r4, r0
  400ad4:	460d      	mov	r5, r1
  400ad6:	2800      	cmp	r0, #0
  400ad8:	bf18      	it	ne
  400ada:	2900      	cmpne	r1, #0
  400adc:	bf14      	ite	ne
  400ade:	2001      	movne	r0, #1
  400ae0:	2000      	moveq	r0, #0
  400ae2:	2234      	movs	r2, #52	; 0x34
  400ae4:	4907      	ldr	r1, [pc, #28]	; (400b04 <usart_sync_init+0x34>)
  400ae6:	4b08      	ldr	r3, [pc, #32]	; (400b08 <usart_sync_init+0x38>)
  400ae8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400aea:	4629      	mov	r1, r5
  400aec:	f104 0008 	add.w	r0, r4, #8
  400af0:	4b06      	ldr	r3, [pc, #24]	; (400b0c <usart_sync_init+0x3c>)
  400af2:	4798      	blx	r3
	if (init_status) {
  400af4:	4603      	mov	r3, r0
  400af6:	b918      	cbnz	r0, 400b00 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400af8:	4a05      	ldr	r2, [pc, #20]	; (400b10 <usart_sync_init+0x40>)
  400afa:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400afc:	4a05      	ldr	r2, [pc, #20]	; (400b14 <usart_sync_init+0x44>)
  400afe:	6022      	str	r2, [r4, #0]
}
  400b00:	4618      	mov	r0, r3
  400b02:	bd38      	pop	{r3, r4, r5, pc}
  400b04:	00401f7c 	.word	0x00401f7c
  400b08:	00400b45 	.word	0x00400b45
  400b0c:	004013ed 	.word	0x004013ed
  400b10:	00400a71 	.word	0x00400a71
  400b14:	00400a01 	.word	0x00400a01

00400b18 <usart_sync_enable>:
{
  400b18:	b510      	push	{r4, lr}
	ASSERT(descr);
  400b1a:	4604      	mov	r4, r0
  400b1c:	2253      	movs	r2, #83	; 0x53
  400b1e:	4906      	ldr	r1, [pc, #24]	; (400b38 <usart_sync_enable+0x20>)
  400b20:	3000      	adds	r0, #0
  400b22:	bf18      	it	ne
  400b24:	2001      	movne	r0, #1
  400b26:	4b05      	ldr	r3, [pc, #20]	; (400b3c <usart_sync_enable+0x24>)
  400b28:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400b2a:	f104 0008 	add.w	r0, r4, #8
  400b2e:	4b04      	ldr	r3, [pc, #16]	; (400b40 <usart_sync_enable+0x28>)
  400b30:	4798      	blx	r3
}
  400b32:	2000      	movs	r0, #0
  400b34:	bd10      	pop	{r4, pc}
  400b36:	bf00      	nop
  400b38:	00401f7c 	.word	0x00401f7c
  400b3c:	00400b45 	.word	0x00400b45
  400b40:	00401425 	.word	0x00401425

00400b44 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400b44:	b900      	cbnz	r0, 400b48 <assert+0x4>
		__asm("BKPT #0");
  400b46:	be00      	bkpt	0x0000
  400b48:	4770      	bx	lr

00400b4a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400b4a:	6803      	ldr	r3, [r0, #0]
  400b4c:	b11b      	cbz	r3, 400b56 <is_list_element+0xc>
		if (it == element) {
  400b4e:	428b      	cmp	r3, r1
  400b50:	d003      	beq.n	400b5a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  400b52:	681b      	ldr	r3, [r3, #0]
  400b54:	e7fa      	b.n	400b4c <is_list_element+0x2>
			return true;
		}
	}

	return false;
  400b56:	2000      	movs	r0, #0
  400b58:	4770      	bx	lr
			return true;
  400b5a:	2001      	movs	r0, #1
}
  400b5c:	4770      	bx	lr
	...

00400b60 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400b60:	b538      	push	{r3, r4, r5, lr}
  400b62:	4604      	mov	r4, r0
  400b64:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  400b66:	4b06      	ldr	r3, [pc, #24]	; (400b80 <list_insert_as_head+0x20>)
  400b68:	4798      	blx	r3
  400b6a:	f080 0001 	eor.w	r0, r0, #1
  400b6e:	2239      	movs	r2, #57	; 0x39
  400b70:	4904      	ldr	r1, [pc, #16]	; (400b84 <list_insert_as_head+0x24>)
  400b72:	b2c0      	uxtb	r0, r0
  400b74:	4b04      	ldr	r3, [pc, #16]	; (400b88 <list_insert_as_head+0x28>)
  400b76:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400b78:	6823      	ldr	r3, [r4, #0]
  400b7a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400b7c:	6025      	str	r5, [r4, #0]
  400b7e:	bd38      	pop	{r3, r4, r5, pc}
  400b80:	00400b4b 	.word	0x00400b4b
  400b84:	00401f98 	.word	0x00401f98
  400b88:	00400b45 	.word	0x00400b45

00400b8c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400b8c:	6803      	ldr	r3, [r0, #0]
  400b8e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400b90:	6001      	str	r1, [r0, #0]
  400b92:	4770      	bx	lr

00400b94 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400b94:	6803      	ldr	r3, [r0, #0]
  400b96:	b11b      	cbz	r3, 400ba0 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400b98:	681a      	ldr	r2, [r3, #0]
  400b9a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400b9c:	4618      	mov	r0, r3
  400b9e:	4770      	bx	lr
	}

	return NULL;
  400ba0:	2000      	movs	r0, #0
}
  400ba2:	4770      	bx	lr

00400ba4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400ba4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400ba6:	4a06      	ldr	r2, [pc, #24]	; (400bc0 <_sbrk+0x1c>)
  400ba8:	6812      	ldr	r2, [r2, #0]
  400baa:	b122      	cbz	r2, 400bb6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400bac:	4a04      	ldr	r2, [pc, #16]	; (400bc0 <_sbrk+0x1c>)
  400bae:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400bb0:	4403      	add	r3, r0
  400bb2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400bb4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400bb6:	4903      	ldr	r1, [pc, #12]	; (400bc4 <_sbrk+0x20>)
  400bb8:	4a01      	ldr	r2, [pc, #4]	; (400bc0 <_sbrk+0x1c>)
  400bba:	6011      	str	r1, [r2, #0]
  400bbc:	e7f6      	b.n	400bac <_sbrk+0x8>
  400bbe:	bf00      	nop
  400bc0:	204000a4 	.word	0x204000a4
  400bc4:	20400758 	.word	0x20400758

00400bc8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400bc8:	f04f 30ff 	mov.w	r0, #4294967295
  400bcc:	4770      	bx	lr

00400bce <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400bd2:	604b      	str	r3, [r1, #4]

	return 0;
}
  400bd4:	2000      	movs	r0, #0
  400bd6:	4770      	bx	lr

00400bd8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400bd8:	2000      	movs	r0, #0
  400bda:	4770      	bx	lr

00400bdc <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  400bdc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400bde:	2b00      	cmp	r3, #0
  400be0:	db09      	blt.n	400bf6 <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400be2:	095b      	lsrs	r3, r3, #5
  400be4:	f000 001f 	and.w	r0, r0, #31
  400be8:	2201      	movs	r2, #1
  400bea:	fa02 f000 	lsl.w	r0, r2, r0
  400bee:	3340      	adds	r3, #64	; 0x40
  400bf0:	4a01      	ldr	r2, [pc, #4]	; (400bf8 <_irq_set+0x1c>)
  400bf2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  400bf6:	4770      	bx	lr
  400bf8:	e000e100 	.word	0xe000e100

00400bfc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400bfc:	b500      	push	{lr}
  400bfe:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400c00:	a801      	add	r0, sp, #4
  400c02:	4b0e      	ldr	r3, [pc, #56]	; (400c3c <_init_chip+0x40>)
  400c04:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400c06:	4a0e      	ldr	r2, [pc, #56]	; (400c40 <_init_chip+0x44>)
  400c08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400c14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c18:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400c1c:	a801      	add	r0, sp, #4
  400c1e:	4b09      	ldr	r3, [pc, #36]	; (400c44 <_init_chip+0x48>)
  400c20:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400c22:	4a09      	ldr	r2, [pc, #36]	; (400c48 <_init_chip+0x4c>)
  400c24:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400c26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400c2a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400c2e:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400c30:	4b06      	ldr	r3, [pc, #24]	; (400c4c <_init_chip+0x50>)
  400c32:	4798      	blx	r3
}
  400c34:	b003      	add	sp, #12
  400c36:	f85d fb04 	ldr.w	pc, [sp], #4
  400c3a:	bf00      	nop
  400c3c:	004003e1 	.word	0x004003e1
  400c40:	e000ed00 	.word	0xe000ed00
  400c44:	004003ef 	.word	0x004003ef
  400c48:	400e0c00 	.word	0x400e0c00
  400c4c:	00400ced 	.word	0x00400ced

00400c50 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400c50:	490e      	ldr	r1, [pc, #56]	; (400c8c <_pmc_init_sources+0x3c>)
  400c52:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400c54:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400c58:	4b0d      	ldr	r3, [pc, #52]	; (400c90 <_pmc_init_sources+0x40>)
  400c5a:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400c5c:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400c5e:	4b0b      	ldr	r3, [pc, #44]	; (400c8c <_pmc_init_sources+0x3c>)
  400c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400c62:	f013 0f01 	tst.w	r3, #1
  400c66:	d0fa      	beq.n	400c5e <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400c68:	4b08      	ldr	r3, [pc, #32]	; (400c8c <_pmc_init_sources+0x3c>)
  400c6a:	6a19      	ldr	r1, [r3, #32]
  400c6c:	4a09      	ldr	r2, [pc, #36]	; (400c94 <_pmc_init_sources+0x44>)
  400c6e:	430a      	orrs	r2, r1
  400c70:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400c72:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400c74:	4a08      	ldr	r2, [pc, #32]	; (400c98 <_pmc_init_sources+0x48>)
  400c76:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400c78:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400c7a:	4a08      	ldr	r2, [pc, #32]	; (400c9c <_pmc_init_sources+0x4c>)
  400c7c:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400c7e:	4b03      	ldr	r3, [pc, #12]	; (400c8c <_pmc_init_sources+0x3c>)
  400c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400c82:	f013 0f02 	tst.w	r3, #2
  400c86:	d0fa      	beq.n	400c7e <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400c88:	4770      	bx	lr
  400c8a:	bf00      	nop
  400c8c:	400e0600 	.word	0x400e0600
  400c90:	00373e01 	.word	0x00373e01
  400c94:	01370000 	.word	0x01370000
  400c98:	f800ffff 	.word	0xf800ffff
  400c9c:	20183f01 	.word	0x20183f01

00400ca0 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400ca0:	4a11      	ldr	r2, [pc, #68]	; (400ce8 <_pmc_init_master_clock+0x48>)
  400ca2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400ca8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400caa:	4b0f      	ldr	r3, [pc, #60]	; (400ce8 <_pmc_init_master_clock+0x48>)
  400cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400cae:	f013 0f08 	tst.w	r3, #8
  400cb2:	d0fa      	beq.n	400caa <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400cb4:	4a0c      	ldr	r2, [pc, #48]	; (400ce8 <_pmc_init_master_clock+0x48>)
  400cb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400cc0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400cc2:	4b09      	ldr	r3, [pc, #36]	; (400ce8 <_pmc_init_master_clock+0x48>)
  400cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400cc6:	f013 0f08 	tst.w	r3, #8
  400cca:	d0fa      	beq.n	400cc2 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400ccc:	4a06      	ldr	r2, [pc, #24]	; (400ce8 <_pmc_init_master_clock+0x48>)
  400cce:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400cd0:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400cd4:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400cd8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400cda:	4b03      	ldr	r3, [pc, #12]	; (400ce8 <_pmc_init_master_clock+0x48>)
  400cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400cde:	f013 0f08 	tst.w	r3, #8
  400ce2:	d0fa      	beq.n	400cda <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400ce4:	4770      	bx	lr
  400ce6:	bf00      	nop
  400ce8:	400e0600 	.word	0x400e0600

00400cec <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400cec:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400cee:	4b02      	ldr	r3, [pc, #8]	; (400cf8 <_pmc_init+0xc>)
  400cf0:	4798      	blx	r3
	_pmc_init_master_clock();
  400cf2:	4b02      	ldr	r3, [pc, #8]	; (400cfc <_pmc_init+0x10>)
  400cf4:	4798      	blx	r3
  400cf6:	bd08      	pop	{r3, pc}
  400cf8:	00400c51 	.word	0x00400c51
  400cfc:	00400ca1 	.word	0x00400ca1

00400d00 <_spi_get_irq_num>:
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _spi_get_irq_num(const void *const hw)
{

	if (hw == SPI0) {
  400d00:	4b03      	ldr	r3, [pc, #12]	; (400d10 <_spi_get_irq_num+0x10>)
  400d02:	4298      	cmp	r0, r3
  400d04:	d001      	beq.n	400d0a <_spi_get_irq_num+0xa>
		return SPI0_IRQn;
	} else {
		return SPI1_IRQn;
  400d06:	202a      	movs	r0, #42	; 0x2a
	}
}
  400d08:	4770      	bx	lr
		return SPI0_IRQn;
  400d0a:	2015      	movs	r0, #21
  400d0c:	4770      	bx	lr
  400d0e:	bf00      	nop
  400d10:	40008000 	.word	0x40008000

00400d14 <_spi_init_irq_param>:
/**
 * \brief Init irq param with the given spi hardware instance
 */
static void _spi_init_irq_param(const void *const hw, struct _spi_async_dev *dev)
{
	if (hw == SPI0) {
  400d14:	4b03      	ldr	r3, [pc, #12]	; (400d24 <_spi_init_irq_param+0x10>)
  400d16:	4298      	cmp	r0, r3
  400d18:	d000      	beq.n	400d1c <_spi_init_irq_param+0x8>
  400d1a:	4770      	bx	lr
		_spi0_dev = dev;
  400d1c:	4b02      	ldr	r3, [pc, #8]	; (400d28 <_spi_init_irq_param+0x14>)
  400d1e:	6019      	str	r1, [r3, #0]
	}
}
  400d20:	e7fb      	b.n	400d1a <_spi_init_irq_param+0x6>
  400d22:	bf00      	nop
  400d24:	40008000 	.word	0x40008000
  400d28:	204000a8 	.word	0x204000a8

00400d2c <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  400d2c:	2301      	movs	r3, #1
  400d2e:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  400d30:	2000      	movs	r0, #0
  400d32:	4770      	bx	lr

00400d34 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
  400d34:	b510      	push	{r4, lr}
  400d36:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
  400d38:	4b08      	ldr	r3, [pc, #32]	; (400d5c <_spi_async_enable+0x28>)
  400d3a:	4798      	blx	r3
	NVIC_EnableIRQ(_spi_get_irq_num(hw));
  400d3c:	4620      	mov	r0, r4
  400d3e:	4b08      	ldr	r3, [pc, #32]	; (400d60 <_spi_async_enable+0x2c>)
  400d40:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  400d42:	2800      	cmp	r0, #0
  400d44:	db08      	blt.n	400d58 <_spi_async_enable+0x24>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d46:	0942      	lsrs	r2, r0, #5
  400d48:	f000 001f 	and.w	r0, r0, #31
  400d4c:	2301      	movs	r3, #1
  400d4e:	fa03 f000 	lsl.w	r0, r3, r0
  400d52:	4b04      	ldr	r3, [pc, #16]	; (400d64 <_spi_async_enable+0x30>)
  400d54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

	return ERR_NONE;
}
  400d58:	2000      	movs	r0, #0
  400d5a:	bd10      	pop	{r4, pc}
  400d5c:	00400d2d 	.word	0x00400d2d
  400d60:	00400d01 	.word	0x00400d01
  400d64:	e000e100 	.word	0xe000e100

00400d68 <_spi_set_baudrate>:
	tmp = ((Spi *)hw)->SPI_CSR[index];
  400d68:	6b03      	ldr	r3, [r0, #48]	; 0x30
	tmp &= ~SPI_CSR_SCBR_Msk;
  400d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	tmp |= SPI_CSR_SCBR(data);
  400d6e:	0209      	lsls	r1, r1, #8
  400d70:	b289      	uxth	r1, r1
  400d72:	430b      	orrs	r3, r1
	((Spi *)hw)->SPI_CSR[index] = tmp;
  400d74:	6303      	str	r3, [r0, #48]	; 0x30
static int32_t _spi_set_baudrate(void *const hw, const uint32_t baud_val)
{
	hri_spi_write_CSR_SCBR_bf(hw, 0, (uint8_t)baud_val);

	return ERR_NONE;
}
  400d76:	2000      	movs	r0, #0
  400d78:	4770      	bx	lr

00400d7a <_spi_set_char_size>:
 * \param[out] size    Stored char size
 *
 * \return Setting char size status
 */
static int32_t _spi_set_char_size(void *const hw, const enum spi_char_size char_size, uint8_t *const size)
{
  400d7a:	b410      	push	{r4}
	tmp = ((Spi *)hw)->SPI_CSR[index];
  400d7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
	tmp &= ~SPI_CSR_BITS_Msk;
  400d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
	tmp |= SPI_CSR_BITS(data);
  400d82:	010c      	lsls	r4, r1, #4
  400d84:	b2e4      	uxtb	r4, r4
  400d86:	4323      	orrs	r3, r4
	((Spi *)hw)->SPI_CSR[index] = tmp;
  400d88:	6303      	str	r3, [r0, #48]	; 0x30
	hri_spi_write_CSR_BITS_bf(hw, 0, char_size);
	if (char_size == SPI_CHAR_SIZE_8) {
  400d8a:	b129      	cbz	r1, 400d98 <_spi_set_char_size+0x1e>
		*size = 1;
	} else {
		*size = 2;
  400d8c:	2302      	movs	r3, #2
  400d8e:	7013      	strb	r3, [r2, #0]
	}

	return ERR_NONE;
}
  400d90:	2000      	movs	r0, #0
  400d92:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d96:	4770      	bx	lr
		*size = 1;
  400d98:	2301      	movs	r3, #1
  400d9a:	7013      	strb	r3, [r2, #0]
  400d9c:	e7f8      	b.n	400d90 <_spi_set_char_size+0x16>
	...

00400da0 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  400da0:	4b04      	ldr	r3, [pc, #16]	; (400db4 <_spi_get_hardware_index+0x14>)
  400da2:	4403      	add	r3, r0
  400da4:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  400da8:	2b05      	cmp	r3, #5
  400daa:	d001      	beq.n	400db0 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  400dac:	2000      	movs	r0, #0
	}
}
  400dae:	4770      	bx	lr
		return 1;
  400db0:	2001      	movs	r0, #1
  400db2:	4770      	bx	lr
  400db4:	bfff8000 	.word	0xbfff8000

00400db8 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
  400db8:	b508      	push	{r3, lr}
	void *            hw = dev->prvt;
  400dba:	6802      	ldr	r2, [r0, #0]
	return ((Spi *)hw)->SPI_IMR;
  400dbc:	69d1      	ldr	r1, [r2, #28]
	return ((Spi *)hw)->SPI_SR;
  400dbe:	6913      	ldr	r3, [r2, #16]
	hri_spi_imr_reg_t st;

	st = hri_spi_read_IMR_reg(hw);
	st &= hri_spi_read_SR_reg(hw);
  400dc0:	400b      	ands	r3, r1

	if (st & SPI_SR_RDRF) {
  400dc2:	f013 0f01 	tst.w	r3, #1
  400dc6:	d10a      	bne.n	400dde <_spi_handler+0x26>
		dev->callbacks.rx(dev);
	} else if (st & SPI_SR_TDRE) {
  400dc8:	f013 0f02 	tst.w	r3, #2
  400dcc:	d10a      	bne.n	400de4 <_spi_handler+0x2c>
		dev->callbacks.tx(dev);
	} else if (st & SPI_SR_TXEMPTY) {
  400dce:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dd2:	d10a      	bne.n	400dea <_spi_handler+0x32>
		dev->callbacks.complete(dev);
	} else if (st & (SPI_SR_OVRES | SPI_SR_NSSR | SPI_SR_MODF | SPI_SR_UNDES)) {
  400dd4:	f240 520c 	movw	r2, #1292	; 0x50c
  400dd8:	4213      	tst	r3, r2
  400dda:	d109      	bne.n	400df0 <_spi_handler+0x38>
  400ddc:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
  400dde:	68c3      	ldr	r3, [r0, #12]
  400de0:	4798      	blx	r3
  400de2:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
  400de4:	6883      	ldr	r3, [r0, #8]
  400de6:	4798      	blx	r3
  400de8:	bd08      	pop	{r3, pc}
		dev->callbacks.complete(dev);
  400dea:	6903      	ldr	r3, [r0, #16]
  400dec:	4798      	blx	r3
  400dee:	bd08      	pop	{r3, pc}
		dev->callbacks.err(dev, ERR_OVERFLOW);
  400df0:	6943      	ldr	r3, [r0, #20]
  400df2:	f06f 0112 	mvn.w	r1, #18
  400df6:	4798      	blx	r3
	}
}
  400df8:	e7f0      	b.n	400ddc <_spi_handler+0x24>
	...

00400dfc <SPI0_Handler>:

/**
 * \internal SPI interrupt handler
 */
void SPI0_Handler(void)
{
  400dfc:	b508      	push	{r3, lr}
	_spi_handler(_spi0_dev);
  400dfe:	4b02      	ldr	r3, [pc, #8]	; (400e08 <SPI0_Handler+0xc>)
  400e00:	6818      	ldr	r0, [r3, #0]
  400e02:	4b02      	ldr	r3, [pc, #8]	; (400e0c <SPI0_Handler+0x10>)
  400e04:	4798      	blx	r3
  400e06:	bd08      	pop	{r3, pc}
  400e08:	204000a8 	.word	0x204000a8
  400e0c:	00400db9 	.word	0x00400db9

00400e10 <_spi_spi_m_sync_init>:
}

int32_t _spi_spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  400e10:	b570      	push	{r4, r5, r6, lr}
  400e12:	4606      	mov	r6, r0
  400e14:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  400e16:	4608      	mov	r0, r1
  400e18:	4b20      	ldr	r3, [pc, #128]	; (400e9c <_spi_spi_m_sync_init+0x8c>)
  400e1a:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400e1c:	2300      	movs	r3, #0
  400e1e:	b33b      	cbz	r3, 400e70 <_spi_spi_m_sync_init+0x60>
	return NULL;
  400e20:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  400e22:	f44f 72ac 	mov.w	r2, #344	; 0x158
  400e26:	491e      	ldr	r1, [pc, #120]	; (400ea0 <_spi_spi_m_sync_init+0x90>)
  400e28:	2e00      	cmp	r6, #0
  400e2a:	bf18      	it	ne
  400e2c:	2c00      	cmpne	r4, #0
  400e2e:	bf14      	ite	ne
  400e30:	2001      	movne	r0, #1
  400e32:	2000      	moveq	r0, #0
  400e34:	4b1b      	ldr	r3, [pc, #108]	; (400ea4 <_spi_spi_m_sync_init+0x94>)
  400e36:	4798      	blx	r3

	if (regs == NULL) {
  400e38:	b355      	cbz	r5, 400e90 <_spi_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400e3a:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  400e3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400e40:	d129      	bne.n	400e96 <_spi_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  400e42:	2380      	movs	r3, #128	; 0x80
  400e44:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  400e46:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  400e48:	686a      	ldr	r2, [r5, #4]
  400e4a:	4b17      	ldr	r3, [pc, #92]	; (400ea8 <_spi_spi_m_sync_init+0x98>)
  400e4c:	4013      	ands	r3, r2
  400e4e:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  400e50:	68ab      	ldr	r3, [r5, #8]
  400e52:	4a16      	ldr	r2, [pc, #88]	; (400eac <_spi_spi_m_sync_init+0x9c>)
  400e54:	401a      	ands	r2, r3
  400e56:	4b16      	ldr	r3, [pc, #88]	; (400eb0 <_spi_spi_m_sync_init+0xa0>)
  400e58:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  400e5a:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  400e5c:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  400e5e:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  400e60:	8a2b      	ldrh	r3, [r5, #16]
  400e62:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  400e64:	68eb      	ldr	r3, [r5, #12]
  400e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  400e6a:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  400e6c:	2000      	movs	r0, #0
  400e6e:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  400e70:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  400e74:	008a      	lsls	r2, r1, #2
  400e76:	490f      	ldr	r1, [pc, #60]	; (400eb4 <_spi_spi_m_sync_init+0xa4>)
  400e78:	5c8a      	ldrb	r2, [r1, r2]
  400e7a:	4290      	cmp	r0, r2
  400e7c:	d002      	beq.n	400e84 <_spi_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400e7e:	3301      	adds	r3, #1
  400e80:	b2db      	uxtb	r3, r3
  400e82:	e7cc      	b.n	400e1e <_spi_spi_m_sync_init+0xe>
			return &spi_regs[i];
  400e84:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  400e88:	00ab      	lsls	r3, r5, #2
  400e8a:	460d      	mov	r5, r1
  400e8c:	441d      	add	r5, r3
  400e8e:	e7c8      	b.n	400e22 <_spi_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  400e90:	f06f 000c 	mvn.w	r0, #12
  400e94:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  400e96:	f06f 0010 	mvn.w	r0, #16
}
  400e9a:	bd70      	pop	{r4, r5, r6, pc}
  400e9c:	00400da1 	.word	0x00400da1
  400ea0:	00401fcc 	.word	0x00401fcc
  400ea4:	00400b45 	.word	0x00400b45
  400ea8:	feffff7c 	.word	0xfeffff7c
  400eac:	fff1ff6f 	.word	0xfff1ff6f
  400eb0:	000e0010 	.word	0x000e0010
  400eb4:	00401fb8 	.word	0x00401fb8

00400eb8 <_spi_m_async_init>:

int32_t _spi_m_async_init(struct _spi_m_async_dev *dev, void *const hw)
{
  400eb8:	b538      	push	{r3, r4, r5, lr}
  400eba:	4604      	mov	r4, r0
  400ebc:	460d      	mov	r5, r1
	struct _spi_m_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
  400ebe:	4b17      	ldr	r3, [pc, #92]	; (400f1c <_spi_m_async_init+0x64>)
  400ec0:	4798      	blx	r3

	if (rc < 0) {
  400ec2:	2800      	cmp	r0, #0
  400ec4:	db28      	blt.n	400f18 <_spi_m_async_init+0x60>
		return rc;
	}

	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
  400ec6:	2300      	movs	r3, #0
  400ec8:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
  400eca:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
  400ecc:	60a3      	str	r3, [r4, #8]

	_spi_init_irq_param(hw, dev);
  400ece:	4621      	mov	r1, r4
  400ed0:	4628      	mov	r0, r5
  400ed2:	4b13      	ldr	r3, [pc, #76]	; (400f20 <_spi_m_async_init+0x68>)
  400ed4:	4798      	blx	r3
	NVIC_DisableIRQ(_spi_get_irq_num(hw));
  400ed6:	4628      	mov	r0, r5
  400ed8:	4b12      	ldr	r3, [pc, #72]	; (400f24 <_spi_m_async_init+0x6c>)
  400eda:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  400edc:	2800      	cmp	r0, #0
  400ede:	db0c      	blt.n	400efa <_spi_m_async_init+0x42>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ee0:	0943      	lsrs	r3, r0, #5
  400ee2:	f000 011f 	and.w	r1, r0, #31
  400ee6:	2201      	movs	r2, #1
  400ee8:	408a      	lsls	r2, r1
  400eea:	3320      	adds	r3, #32
  400eec:	490e      	ldr	r1, [pc, #56]	; (400f28 <_spi_m_async_init+0x70>)
  400eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400ef2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ef6:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400efa:	2800      	cmp	r0, #0
  400efc:	db0b      	blt.n	400f16 <_spi_m_async_init+0x5e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400efe:	0943      	lsrs	r3, r0, #5
  400f00:	f000 001f 	and.w	r0, r0, #31
  400f04:	2201      	movs	r2, #1
  400f06:	fa02 f000 	lsl.w	r0, r2, r0
  400f0a:	3360      	adds	r3, #96	; 0x60
  400f0c:	4a06      	ldr	r2, [pc, #24]	; (400f28 <_spi_m_async_init+0x70>)
  400f0e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_ClearPendingIRQ(_spi_get_irq_num(hw));

	return ERR_NONE;
  400f12:	2000      	movs	r0, #0
  400f14:	bd38      	pop	{r3, r4, r5, pc}
  400f16:	2000      	movs	r0, #0
}
  400f18:	bd38      	pop	{r3, r4, r5, pc}
  400f1a:	bf00      	nop
  400f1c:	00400e11 	.word	0x00400e11
  400f20:	00400d15 	.word	0x00400d15
  400f24:	00400d01 	.word	0x00400d01
  400f28:	e000e100 	.word	0xe000e100

00400f2c <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_m_async_dev *dev)
{
  400f2c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  400f2e:	4604      	mov	r4, r0
  400f30:	b168      	cbz	r0, 400f4e <_spi_m_async_enable+0x22>
  400f32:	6803      	ldr	r3, [r0, #0]
  400f34:	b14b      	cbz	r3, 400f4a <_spi_m_async_enable+0x1e>
  400f36:	2001      	movs	r0, #1
  400f38:	f240 129d 	movw	r2, #413	; 0x19d
  400f3c:	4905      	ldr	r1, [pc, #20]	; (400f54 <_spi_m_async_enable+0x28>)
  400f3e:	4b06      	ldr	r3, [pc, #24]	; (400f58 <_spi_m_async_enable+0x2c>)
  400f40:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
  400f42:	6820      	ldr	r0, [r4, #0]
  400f44:	4b05      	ldr	r3, [pc, #20]	; (400f5c <_spi_m_async_enable+0x30>)
  400f46:	4798      	blx	r3
}
  400f48:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  400f4a:	2000      	movs	r0, #0
  400f4c:	e7f4      	b.n	400f38 <_spi_m_async_enable+0xc>
  400f4e:	2000      	movs	r0, #0
  400f50:	e7f2      	b.n	400f38 <_spi_m_async_enable+0xc>
  400f52:	bf00      	nop
  400f54:	00401fcc 	.word	0x00401fcc
  400f58:	00400b45 	.word	0x00400b45
  400f5c:	00400d35 	.word	0x00400d35

00400f60 <_spi_m_async_set_baudrate>:

	return _spi_set_baudrate(dev->prvt, baud_val);
}

int32_t _spi_m_async_set_baudrate(struct _spi_m_async_dev *dev, const uint32_t baud_val)
{
  400f60:	b538      	push	{r3, r4, r5, lr}
  400f62:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
  400f64:	4604      	mov	r4, r0
  400f66:	b170      	cbz	r0, 400f86 <_spi_m_async_set_baudrate+0x26>
  400f68:	6803      	ldr	r3, [r0, #0]
  400f6a:	b153      	cbz	r3, 400f82 <_spi_m_async_set_baudrate+0x22>
  400f6c:	2001      	movs	r0, #1
  400f6e:	f44f 72ed 	mov.w	r2, #474	; 0x1da
  400f72:	4906      	ldr	r1, [pc, #24]	; (400f8c <_spi_m_async_set_baudrate+0x2c>)
  400f74:	4b06      	ldr	r3, [pc, #24]	; (400f90 <_spi_m_async_set_baudrate+0x30>)
  400f76:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
  400f78:	4629      	mov	r1, r5
  400f7a:	6820      	ldr	r0, [r4, #0]
  400f7c:	4b05      	ldr	r3, [pc, #20]	; (400f94 <_spi_m_async_set_baudrate+0x34>)
  400f7e:	4798      	blx	r3
}
  400f80:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && dev->prvt);
  400f82:	2000      	movs	r0, #0
  400f84:	e7f3      	b.n	400f6e <_spi_m_async_set_baudrate+0xe>
  400f86:	2000      	movs	r0, #0
  400f88:	e7f1      	b.n	400f6e <_spi_m_async_set_baudrate+0xe>
  400f8a:	bf00      	nop
  400f8c:	00401fcc 	.word	0x00401fcc
  400f90:	00400b45 	.word	0x00400b45
  400f94:	00400d69 	.word	0x00400d69

00400f98 <_spi_m_async_set_data_order>:

	return ERR_UNSUPPORTED_OP;
}

int32_t _spi_m_async_set_data_order(struct _spi_m_async_dev *dev, const enum spi_data_order dord)
{
  400f98:	b508      	push	{r3, lr}
	ASSERT(dev && dev->prvt);
  400f9a:	b160      	cbz	r0, 400fb6 <_spi_m_async_set_data_order+0x1e>
  400f9c:	6803      	ldr	r3, [r0, #0]
  400f9e:	b143      	cbz	r3, 400fb2 <_spi_m_async_set_data_order+0x1a>
  400fa0:	2001      	movs	r0, #1
  400fa2:	f240 12e9 	movw	r2, #489	; 0x1e9
  400fa6:	4905      	ldr	r1, [pc, #20]	; (400fbc <_spi_m_async_set_data_order+0x24>)
  400fa8:	4b05      	ldr	r3, [pc, #20]	; (400fc0 <_spi_m_async_set_data_order+0x28>)
  400faa:	4798      	blx	r3
	(void)dord;

	return ERR_UNSUPPORTED_OP;
}
  400fac:	f06f 001a 	mvn.w	r0, #26
  400fb0:	bd08      	pop	{r3, pc}
	ASSERT(dev && dev->prvt);
  400fb2:	2000      	movs	r0, #0
  400fb4:	e7f5      	b.n	400fa2 <_spi_m_async_set_data_order+0xa>
  400fb6:	2000      	movs	r0, #0
  400fb8:	e7f3      	b.n	400fa2 <_spi_m_async_set_data_order+0xa>
  400fba:	bf00      	nop
  400fbc:	00401fcc 	.word	0x00401fcc
  400fc0:	00400b45 	.word	0x00400b45

00400fc4 <_spi_m_async_set_char_size>:

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
}

int32_t _spi_m_async_set_char_size(struct _spi_m_async_dev *dev, const enum spi_char_size char_size)
{
  400fc4:	b538      	push	{r3, r4, r5, lr}
  400fc6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
  400fc8:	4604      	mov	r4, r0
  400fca:	b178      	cbz	r0, 400fec <_spi_m_async_set_char_size+0x28>
  400fcc:	6803      	ldr	r3, [r0, #0]
  400fce:	b15b      	cbz	r3, 400fe8 <_spi_m_async_set_char_size+0x24>
  400fd0:	2001      	movs	r0, #1
  400fd2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
  400fd6:	4906      	ldr	r1, [pc, #24]	; (400ff0 <_spi_m_async_set_char_size+0x2c>)
  400fd8:	4b06      	ldr	r3, [pc, #24]	; (400ff4 <_spi_m_async_set_char_size+0x30>)
  400fda:	4798      	blx	r3

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
  400fdc:	1d22      	adds	r2, r4, #4
  400fde:	4629      	mov	r1, r5
  400fe0:	6820      	ldr	r0, [r4, #0]
  400fe2:	4b05      	ldr	r3, [pc, #20]	; (400ff8 <_spi_m_async_set_char_size+0x34>)
  400fe4:	4798      	blx	r3
}
  400fe6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && dev->prvt);
  400fe8:	2000      	movs	r0, #0
  400fea:	e7f2      	b.n	400fd2 <_spi_m_async_set_char_size+0xe>
  400fec:	2000      	movs	r0, #0
  400fee:	e7f0      	b.n	400fd2 <_spi_m_async_set_char_size+0xe>
  400ff0:	00401fcc 	.word	0x00401fcc
  400ff4:	00400b45 	.word	0x00400b45
  400ff8:	00400d7b 	.word	0x00400d7b

00400ffc <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_m_async_dev *dev, bool state)
{
  400ffc:	b538      	push	{r3, r4, r5, lr}
  400ffe:	460d      	mov	r5, r1
	void *hw = dev->prvt;
  401000:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
  401002:	f44f 721e 	mov.w	r2, #632	; 0x278
  401006:	4908      	ldr	r1, [pc, #32]	; (401028 <_spi_m_async_enable_tx+0x2c>)
  401008:	2800      	cmp	r0, #0
  40100a:	bf18      	it	ne
  40100c:	2c00      	cmpne	r4, #0
  40100e:	bf14      	ite	ne
  401010:	2001      	movne	r0, #1
  401012:	2000      	moveq	r0, #0
  401014:	4b05      	ldr	r3, [pc, #20]	; (40102c <_spi_m_async_enable_tx+0x30>)
  401016:	4798      	blx	r3

	if (state) {
  401018:	b91d      	cbnz	r5, 401022 <_spi_m_async_enable_tx+0x26>
	((Spi *)hw)->SPI_IDR = SPI_IMR_TDRE;
  40101a:	2302      	movs	r3, #2
  40101c:	61a3      	str	r3, [r4, #24]
	} else {
		hri_spi_clear_IMR_TDRE_bit(hw);
	}

	return ERR_NONE;
}
  40101e:	2000      	movs	r0, #0
  401020:	bd38      	pop	{r3, r4, r5, pc}
	((Spi *)hw)->SPI_IER = SPI_IMR_TDRE;
  401022:	2302      	movs	r3, #2
  401024:	6163      	str	r3, [r4, #20]
  401026:	e7fa      	b.n	40101e <_spi_m_async_enable_tx+0x22>
  401028:	00401fcc 	.word	0x00401fcc
  40102c:	00400b45 	.word	0x00400b45

00401030 <_spi_m_async_enable_rx>:

int32_t _spi_m_async_enable_rx(struct _spi_m_async_dev *dev, bool state)
{
  401030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401032:	460f      	mov	r7, r1
	void *hw = dev->prvt;
  401034:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
  401036:	4e0c      	ldr	r6, [pc, #48]	; (401068 <_spi_m_async_enable_rx+0x38>)
  401038:	f240 2287 	movw	r2, #647	; 0x287
  40103c:	4631      	mov	r1, r6
  40103e:	3000      	adds	r0, #0
  401040:	bf18      	it	ne
  401042:	2001      	movne	r0, #1
  401044:	4d09      	ldr	r5, [pc, #36]	; (40106c <_spi_m_async_enable_rx+0x3c>)
  401046:	47a8      	blx	r5
	ASSERT(hw);
  401048:	f44f 7222 	mov.w	r2, #648	; 0x288
  40104c:	4631      	mov	r1, r6
  40104e:	1c20      	adds	r0, r4, #0
  401050:	bf18      	it	ne
  401052:	2001      	movne	r0, #1
  401054:	47a8      	blx	r5

	if (state) {
  401056:	b91f      	cbnz	r7, 401060 <_spi_m_async_enable_rx+0x30>
	((Spi *)hw)->SPI_IDR = SPI_IMR_RDRF;
  401058:	2301      	movs	r3, #1
  40105a:	61a3      	str	r3, [r4, #24]
	} else {
		hri_spi_clear_IMR_RDRF_bit(hw);
	}

	return ERR_NONE;
}
  40105c:	2000      	movs	r0, #0
  40105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Spi *)hw)->SPI_IER = SPI_IMR_RDRF;
  401060:	2301      	movs	r3, #1
  401062:	6163      	str	r3, [r4, #20]
  401064:	e7fa      	b.n	40105c <_spi_m_async_enable_rx+0x2c>
  401066:	bf00      	nop
  401068:	00401fcc 	.word	0x00401fcc
  40106c:	00400b45 	.word	0x00400b45

00401070 <_spi_m_async_enable_tx_complete>:

int32_t _spi_m_async_enable_tx_complete(struct _spi_m_async_dev *dev, bool state)
{
  401070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401072:	460f      	mov	r7, r1
	void *hw = dev->prvt;
  401074:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
  401076:	4e0d      	ldr	r6, [pc, #52]	; (4010ac <_spi_m_async_enable_tx_complete+0x3c>)
  401078:	f240 2297 	movw	r2, #663	; 0x297
  40107c:	4631      	mov	r1, r6
  40107e:	3000      	adds	r0, #0
  401080:	bf18      	it	ne
  401082:	2001      	movne	r0, #1
  401084:	4d0a      	ldr	r5, [pc, #40]	; (4010b0 <_spi_m_async_enable_tx_complete+0x40>)
  401086:	47a8      	blx	r5
	ASSERT(hw);
  401088:	f44f 7226 	mov.w	r2, #664	; 0x298
  40108c:	4631      	mov	r1, r6
  40108e:	1c20      	adds	r0, r4, #0
  401090:	bf18      	it	ne
  401092:	2001      	movne	r0, #1
  401094:	47a8      	blx	r5

	if (state) {
  401096:	b927      	cbnz	r7, 4010a2 <_spi_m_async_enable_tx_complete+0x32>
	((Spi *)hw)->SPI_IDR = SPI_IMR_TXEMPTY;
  401098:	f44f 7300 	mov.w	r3, #512	; 0x200
  40109c:	61a3      	str	r3, [r4, #24]
	} else {
		hri_spi_clear_IMR_TXEMPTY_bit(hw);
	}

	return ERR_NONE;
}
  40109e:	2000      	movs	r0, #0
  4010a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Spi *)hw)->SPI_IER = SPI_IMR_TXEMPTY;
  4010a2:	f44f 7300 	mov.w	r3, #512	; 0x200
  4010a6:	6163      	str	r3, [r4, #20]
  4010a8:	e7f9      	b.n	40109e <_spi_m_async_enable_tx_complete+0x2e>
  4010aa:	bf00      	nop
  4010ac:	00401fcc 	.word	0x00401fcc
  4010b0:	00400b45 	.word	0x00400b45

004010b4 <_spi_m_async_write_one>:

int32_t _spi_m_async_write_one(struct _spi_m_async_dev *dev, uint16_t data)
{
  4010b4:	b538      	push	{r3, r4, r5, lr}
  4010b6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
  4010b8:	4604      	mov	r4, r0
  4010ba:	b168      	cbz	r0, 4010d8 <_spi_m_async_write_one+0x24>
  4010bc:	6803      	ldr	r3, [r0, #0]
  4010be:	b14b      	cbz	r3, 4010d4 <_spi_m_async_write_one+0x20>
  4010c0:	2001      	movs	r0, #1
  4010c2:	f240 22a5 	movw	r2, #677	; 0x2a5
  4010c6:	4905      	ldr	r1, [pc, #20]	; (4010dc <_spi_m_async_write_one+0x28>)
  4010c8:	4b05      	ldr	r3, [pc, #20]	; (4010e0 <_spi_m_async_write_one+0x2c>)
  4010ca:	4798      	blx	r3

	hri_spi_write_TDR_reg(dev->prvt, data);
  4010cc:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  4010ce:	60dd      	str	r5, [r3, #12]

	return ERR_NONE;
}
  4010d0:	2000      	movs	r0, #0
  4010d2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && dev->prvt);
  4010d4:	2000      	movs	r0, #0
  4010d6:	e7f4      	b.n	4010c2 <_spi_m_async_write_one+0xe>
  4010d8:	2000      	movs	r0, #0
  4010da:	e7f2      	b.n	4010c2 <_spi_m_async_write_one+0xe>
  4010dc:	00401fcc 	.word	0x00401fcc
  4010e0:	00400b45 	.word	0x00400b45

004010e4 <_spi_m_async_read_one>:

uint16_t _spi_m_async_read_one(struct _spi_m_async_dev *dev)
{
  4010e4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  4010e6:	4604      	mov	r4, r0
  4010e8:	b168      	cbz	r0, 401106 <_spi_m_async_read_one+0x22>
  4010ea:	6803      	ldr	r3, [r0, #0]
  4010ec:	b14b      	cbz	r3, 401102 <_spi_m_async_read_one+0x1e>
  4010ee:	2001      	movs	r0, #1
  4010f0:	f240 22ae 	movw	r2, #686	; 0x2ae
  4010f4:	4905      	ldr	r1, [pc, #20]	; (40110c <_spi_m_async_read_one+0x28>)
  4010f6:	4b06      	ldr	r3, [pc, #24]	; (401110 <_spi_m_async_read_one+0x2c>)
  4010f8:	4798      	blx	r3

	return hri_spi_read_RDR_reg(dev->prvt);
  4010fa:	6823      	ldr	r3, [r4, #0]
	return ((Spi *)hw)->SPI_RDR;
  4010fc:	6898      	ldr	r0, [r3, #8]
}
  4010fe:	b280      	uxth	r0, r0
  401100:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  401102:	2000      	movs	r0, #0
  401104:	e7f4      	b.n	4010f0 <_spi_m_async_read_one+0xc>
  401106:	2000      	movs	r0, #0
  401108:	e7f2      	b.n	4010f0 <_spi_m_async_read_one+0xc>
  40110a:	bf00      	nop
  40110c:	00401fcc 	.word	0x00401fcc
  401110:	00400b45 	.word	0x00400b45

00401114 <_spi_m_async_register_callback>:

int32_t _spi_m_async_register_callback(struct _spi_m_async_dev *dev, const enum _spi_m_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
  401114:	b570      	push	{r4, r5, r6, lr}
  401116:	460d      	mov	r5, r1
  401118:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_m_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
  40111a:	4604      	mov	r4, r0
  40111c:	f240 22b9 	movw	r2, #697	; 0x2b9
  401120:	4906      	ldr	r1, [pc, #24]	; (40113c <_spi_m_async_register_callback+0x28>)
  401122:	3000      	adds	r0, #0
  401124:	bf18      	it	ne
  401126:	2001      	movne	r0, #1
  401128:	2d03      	cmp	r5, #3
  40112a:	bf88      	it	hi
  40112c:	2000      	movhi	r0, #0
  40112e:	4b04      	ldr	r3, [pc, #16]	; (401140 <_spi_m_async_register_callback+0x2c>)
  401130:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
  401132:	3408      	adds	r4, #8
	p_ls[cb_type] = (func_t)func;
  401134:	f844 6025 	str.w	r6, [r4, r5, lsl #2]

	return ERR_NONE;
}
  401138:	2000      	movs	r0, #0
  40113a:	bd70      	pop	{r4, r5, r6, pc}
  40113c:	00401fcc 	.word	0x00401fcc
  401140:	00400b45 	.word	0x00400b45

00401144 <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_m_async_dev *const device, const enum _spi_m_async_dev_cb_type type,
                                const bool state)
{
  401144:	b570      	push	{r4, r5, r6, lr}
  401146:	460c      	mov	r4, r1
  401148:	4615      	mov	r5, r2
	ASSERT(device);
  40114a:	4606      	mov	r6, r0
  40114c:	f240 22cb 	movw	r2, #715	; 0x2cb
  401150:	4908      	ldr	r1, [pc, #32]	; (401174 <_spi_m_async_set_irq_state+0x30>)
  401152:	3000      	adds	r0, #0
  401154:	bf18      	it	ne
  401156:	2001      	movne	r0, #1
  401158:	4b07      	ldr	r3, [pc, #28]	; (401178 <_spi_m_async_set_irq_state+0x34>)
  40115a:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
  40115c:	2c03      	cmp	r4, #3
  40115e:	d000      	beq.n	401162 <_spi_m_async_set_irq_state+0x1e>
  401160:	bd70      	pop	{r4, r5, r6, pc}
		if (state) {
  401162:	b91d      	cbnz	r5, 40116c <_spi_m_async_set_irq_state+0x28>
			hri_spi_set_IMR_OVRES_bit(device->prvt);
		} else {
			hri_spi_clear_IMR_OVRES_bit(device->prvt);
  401164:	6833      	ldr	r3, [r6, #0]
	((Spi *)hw)->SPI_IDR = SPI_IMR_OVRES;
  401166:	2208      	movs	r2, #8
  401168:	619a      	str	r2, [r3, #24]
		}
	}
}
  40116a:	e7f9      	b.n	401160 <_spi_m_async_set_irq_state+0x1c>
			hri_spi_set_IMR_OVRES_bit(device->prvt);
  40116c:	6833      	ldr	r3, [r6, #0]
	((Spi *)hw)->SPI_IER = SPI_IMR_OVRES;
  40116e:	2208      	movs	r2, #8
  401170:	615a      	str	r2, [r3, #20]
  401172:	bd70      	pop	{r4, r5, r6, pc}
  401174:	00401fcc 	.word	0x00401fcc
  401178:	00400b45 	.word	0x00400b45

0040117c <_spi_get_spi_m_async>:
 * \brief Retrieve usart async helper functions
 */
void *_spi_get_spi_m_async(void)
{
	return (void *)NULL;
}
  40117c:	2000      	movs	r0, #0
  40117e:	4770      	bx	lr

00401180 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401180:	2300      	movs	r3, #0
  401182:	b13b      	cbz	r3, 401194 <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  401184:	2000      	movs	r0, #0
  401186:	4770      	bx	lr
			return &(_tcs[i]);
  401188:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  40118c:	00a3      	lsls	r3, r4, #2
  40118e:	4608      	mov	r0, r1
  401190:	4418      	add	r0, r3
  401192:	e00c      	b.n	4011ae <get_cfg+0x2e>
{
  401194:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401196:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  40119a:	008a      	lsls	r2, r1, #2
  40119c:	4905      	ldr	r1, [pc, #20]	; (4011b4 <get_cfg+0x34>)
  40119e:	588a      	ldr	r2, [r1, r2]
  4011a0:	4282      	cmp	r2, r0
  4011a2:	d0f1      	beq.n	401188 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4011a4:	3301      	adds	r3, #1
  4011a6:	b2db      	uxtb	r3, r3
  4011a8:	2b00      	cmp	r3, #0
  4011aa:	d0f4      	beq.n	401196 <get_cfg+0x16>
	return NULL;
  4011ac:	2000      	movs	r0, #0
}
  4011ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011b2:	4770      	bx	lr
  4011b4:	20400000 	.word	0x20400000

004011b8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  4011b8:	4b03      	ldr	r3, [pc, #12]	; (4011c8 <_tc_init_irq_param+0x10>)
  4011ba:	4298      	cmp	r0, r3
  4011bc:	d000      	beq.n	4011c0 <_tc_init_irq_param+0x8>
  4011be:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  4011c0:	4b02      	ldr	r3, [pc, #8]	; (4011cc <_tc_init_irq_param+0x14>)
  4011c2:	6019      	str	r1, [r3, #0]
	}
}
  4011c4:	e7fb      	b.n	4011be <_tc_init_irq_param+0x6>
  4011c6:	bf00      	nop
  4011c8:	4000c000 	.word	0x4000c000
  4011cc:	204000ac 	.word	0x204000ac

004011d0 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  4011d0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  4011d2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  4011d4:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  4011d6:	f013 0f10 	tst.w	r3, #16
  4011da:	d100      	bne.n	4011de <tc_interrupt_handler+0xe>
  4011dc:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  4011de:	6803      	ldr	r3, [r0, #0]
  4011e0:	4798      	blx	r3
	}
}
  4011e2:	e7fb      	b.n	4011dc <tc_interrupt_handler+0xc>

004011e4 <_timer_init>:
{
  4011e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011e6:	4607      	mov	r7, r0
  4011e8:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  4011ea:	4608      	mov	r0, r1
  4011ec:	4b27      	ldr	r3, [pc, #156]	; (40128c <_timer_init+0xa8>)
  4011ee:	4798      	blx	r3
  4011f0:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  4011f2:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  4011f4:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  4011f6:	2291      	movs	r2, #145	; 0x91
  4011f8:	4925      	ldr	r1, [pc, #148]	; (401290 <_timer_init+0xac>)
  4011fa:	2001      	movs	r0, #1
  4011fc:	4b25      	ldr	r3, [pc, #148]	; (401294 <_timer_init+0xb0>)
  4011fe:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  401200:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  401204:	d001      	beq.n	40120a <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  401206:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40120a:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  40120c:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  40120e:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  401210:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401212:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  401214:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401216:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  401218:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  40121a:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  40121c:	2310      	movs	r3, #16
  40121e:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  401220:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  401222:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  401226:	4639      	mov	r1, r7
  401228:	4620      	mov	r0, r4
  40122a:	4b1b      	ldr	r3, [pc, #108]	; (401298 <_timer_init+0xb4>)
  40122c:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  40122e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401232:	2b00      	cmp	r3, #0
  401234:	db0d      	blt.n	401252 <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401236:	095a      	lsrs	r2, r3, #5
  401238:	f003 031f 	and.w	r3, r3, #31
  40123c:	2101      	movs	r1, #1
  40123e:	fa01 f303 	lsl.w	r3, r1, r3
  401242:	3220      	adds	r2, #32
  401244:	4915      	ldr	r1, [pc, #84]	; (40129c <_timer_init+0xb8>)
  401246:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40124a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40124e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401252:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401256:	2b00      	cmp	r3, #0
  401258:	db09      	blt.n	40126e <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40125a:	095a      	lsrs	r2, r3, #5
  40125c:	f003 031f 	and.w	r3, r3, #31
  401260:	2101      	movs	r1, #1
  401262:	fa01 f303 	lsl.w	r3, r1, r3
  401266:	3260      	adds	r2, #96	; 0x60
  401268:	490c      	ldr	r1, [pc, #48]	; (40129c <_timer_init+0xb8>)
  40126a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  40126e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401272:	2b00      	cmp	r3, #0
  401274:	db08      	blt.n	401288 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401276:	0959      	lsrs	r1, r3, #5
  401278:	f003 031f 	and.w	r3, r3, #31
  40127c:	2201      	movs	r2, #1
  40127e:	fa02 f303 	lsl.w	r3, r2, r3
  401282:	4a06      	ldr	r2, [pc, #24]	; (40129c <_timer_init+0xb8>)
  401284:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401288:	2000      	movs	r0, #0
  40128a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40128c:	00401181 	.word	0x00401181
  401290:	00401fe4 	.word	0x00401fe4
  401294:	00400b45 	.word	0x00400b45
  401298:	004011b9 	.word	0x004011b9
  40129c:	e000e100 	.word	0xe000e100

004012a0 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  4012a0:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  4012a2:	2205      	movs	r2, #5
  4012a4:	601a      	str	r2, [r3, #0]
  4012a6:	4770      	bx	lr

004012a8 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  4012a8:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  4012aa:	6a18      	ldr	r0, [r3, #32]
}
  4012ac:	f3c0 4000 	ubfx	r0, r0, #16, #1
  4012b0:	4770      	bx	lr
	...

004012b4 <_timer_set_irq>:
{
  4012b4:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  4012b6:	68c0      	ldr	r0, [r0, #12]
  4012b8:	4b02      	ldr	r3, [pc, #8]	; (4012c4 <_timer_set_irq+0x10>)
  4012ba:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  4012bc:	7900      	ldrb	r0, [r0, #4]
  4012be:	4b02      	ldr	r3, [pc, #8]	; (4012c8 <_timer_set_irq+0x14>)
  4012c0:	4798      	blx	r3
  4012c2:	bd08      	pop	{r3, pc}
  4012c4:	00401181 	.word	0x00401181
  4012c8:	00400bdd 	.word	0x00400bdd

004012cc <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  4012cc:	2000      	movs	r0, #0
  4012ce:	4770      	bx	lr

004012d0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  4012d0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  4012d2:	4b02      	ldr	r3, [pc, #8]	; (4012dc <TC0_Handler+0xc>)
  4012d4:	6818      	ldr	r0, [r3, #0]
  4012d6:	4b02      	ldr	r3, [pc, #8]	; (4012e0 <TC0_Handler+0x10>)
  4012d8:	4798      	blx	r3
  4012da:	bd08      	pop	{r3, pc}
  4012dc:	204000ac 	.word	0x204000ac
  4012e0:	004011d1 	.word	0x004011d1

004012e4 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  4012e4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4012e6:	4604      	mov	r4, r0
  4012e8:	f240 2219 	movw	r2, #537	; 0x219
  4012ec:	4912      	ldr	r1, [pc, #72]	; (401338 <_uart_get_hardware_index+0x54>)
  4012ee:	3000      	adds	r0, #0
  4012f0:	bf18      	it	ne
  4012f2:	2001      	movne	r0, #1
  4012f4:	4b11      	ldr	r3, [pc, #68]	; (40133c <_uart_get_hardware_index+0x58>)
  4012f6:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  4012f8:	4b11      	ldr	r3, [pc, #68]	; (401340 <_uart_get_hardware_index+0x5c>)
  4012fa:	429c      	cmp	r4, r3
  4012fc:	d013      	beq.n	401326 <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  4012fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401302:	429c      	cmp	r4, r3
  401304:	d011      	beq.n	40132a <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  401306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40130a:	429c      	cmp	r4, r3
  40130c:	d00f      	beq.n	40132e <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  40130e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401312:	429c      	cmp	r4, r3
  401314:	d00d      	beq.n	401332 <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  401316:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40131a:	429c      	cmp	r4, r3
  40131c:	d001      	beq.n	401322 <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  40131e:	20ff      	movs	r0, #255	; 0xff
	}
}
  401320:	bd10      	pop	{r4, pc}
		return 4;
  401322:	2004      	movs	r0, #4
  401324:	bd10      	pop	{r4, pc}
		return 0;
  401326:	2000      	movs	r0, #0
  401328:	bd10      	pop	{r4, pc}
		return 1;
  40132a:	2001      	movs	r0, #1
  40132c:	bd10      	pop	{r4, pc}
		return 2;
  40132e:	2002      	movs	r0, #2
  401330:	bd10      	pop	{r4, pc}
		return 3;
  401332:	2003      	movs	r0, #3
  401334:	bd10      	pop	{r4, pc}
  401336:	bf00      	nop
  401338:	00402004 	.word	0x00402004
  40133c:	00400b45 	.word	0x00400b45
  401340:	400e0800 	.word	0x400e0800

00401344 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  401344:	b510      	push	{r4, lr}
	ASSERT(hw);
  401346:	4604      	mov	r4, r0
  401348:	f44f 7227 	mov.w	r2, #668	; 0x29c
  40134c:	490e      	ldr	r1, [pc, #56]	; (401388 <_get_uart_index+0x44>)
  40134e:	3000      	adds	r0, #0
  401350:	bf18      	it	ne
  401352:	2001      	movne	r0, #1
  401354:	4b0d      	ldr	r3, [pc, #52]	; (40138c <_get_uart_index+0x48>)
  401356:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  401358:	4620      	mov	r0, r4
  40135a:	4b0d      	ldr	r3, [pc, #52]	; (401390 <_get_uart_index+0x4c>)
  40135c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  40135e:	2300      	movs	r3, #0
  401360:	b143      	cbz	r3, 401374 <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401362:	f240 22a6 	movw	r2, #678	; 0x2a6
  401366:	4908      	ldr	r1, [pc, #32]	; (401388 <_get_uart_index+0x44>)
  401368:	2000      	movs	r0, #0
  40136a:	4b08      	ldr	r3, [pc, #32]	; (40138c <_get_uart_index+0x48>)
  40136c:	4798      	blx	r3
	return 0;
  40136e:	2300      	movs	r3, #0
}
  401370:	4618      	mov	r0, r3
  401372:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  401374:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401378:	008a      	lsls	r2, r1, #2
  40137a:	4906      	ldr	r1, [pc, #24]	; (401394 <_get_uart_index+0x50>)
  40137c:	5c8a      	ldrb	r2, [r1, r2]
  40137e:	4290      	cmp	r0, r2
  401380:	d0f6      	beq.n	401370 <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  401382:	3301      	adds	r3, #1
  401384:	b2db      	uxtb	r3, r3
  401386:	e7eb      	b.n	401360 <_get_uart_index+0x1c>
  401388:	00402004 	.word	0x00402004
  40138c:	00400b45 	.word	0x00400b45
  401390:	004012e5 	.word	0x004012e5
  401394:	00401ff8 	.word	0x00401ff8

00401398 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  401398:	b510      	push	{r4, lr}
	ASSERT(hw);
  40139a:	4604      	mov	r4, r0
  40139c:	f240 22b3 	movw	r2, #691	; 0x2b3
  4013a0:	490d      	ldr	r1, [pc, #52]	; (4013d8 <_uart_init+0x40>)
  4013a2:	3000      	adds	r0, #0
  4013a4:	bf18      	it	ne
  4013a6:	2001      	movne	r0, #1
  4013a8:	4b0c      	ldr	r3, [pc, #48]	; (4013dc <_uart_init+0x44>)
  4013aa:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  4013ac:	4620      	mov	r0, r4
  4013ae:	4b0c      	ldr	r3, [pc, #48]	; (4013e0 <_uart_init+0x48>)
  4013b0:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  4013b2:	4b0c      	ldr	r3, [pc, #48]	; (4013e4 <_uart_init+0x4c>)
  4013b4:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  4013b8:	23ac      	movs	r3, #172	; 0xac
  4013ba:	6023      	str	r3, [r4, #0]
  4013bc:	f44f 7380 	mov.w	r3, #256	; 0x100
  4013c0:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  4013c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4013c6:	0082      	lsls	r2, r0, #2
  4013c8:	4b07      	ldr	r3, [pc, #28]	; (4013e8 <_uart_init+0x50>)
  4013ca:	4413      	add	r3, r2
  4013cc:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  4013ce:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  4013d0:	2351      	movs	r3, #81	; 0x51
  4013d2:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  4013d4:	2000      	movs	r0, #0
  4013d6:	bd10      	pop	{r4, pc}
  4013d8:	00402004 	.word	0x00402004
  4013dc:	00400b45 	.word	0x00400b45
  4013e0:	00401345 	.word	0x00401345
  4013e4:	55415200 	.word	0x55415200
  4013e8:	00401ff8 	.word	0x00401ff8

004013ec <_usart_sync_init>:
{
  4013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4013ee:	460c      	mov	r4, r1
	ASSERT(device);
  4013f0:	4e09      	ldr	r6, [pc, #36]	; (401418 <_usart_sync_init+0x2c>)
  4013f2:	4607      	mov	r7, r0
  4013f4:	22a9      	movs	r2, #169	; 0xa9
  4013f6:	4631      	mov	r1, r6
  4013f8:	3000      	adds	r0, #0
  4013fa:	bf18      	it	ne
  4013fc:	2001      	movne	r0, #1
  4013fe:	4d07      	ldr	r5, [pc, #28]	; (40141c <_usart_sync_init+0x30>)
  401400:	47a8      	blx	r5
	ASSERT(hw);
  401402:	22aa      	movs	r2, #170	; 0xaa
  401404:	4631      	mov	r1, r6
  401406:	1c20      	adds	r0, r4, #0
  401408:	bf18      	it	ne
  40140a:	2001      	movne	r0, #1
  40140c:	47a8      	blx	r5
	device->hw = hw;
  40140e:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  401410:	4620      	mov	r0, r4
  401412:	4b03      	ldr	r3, [pc, #12]	; (401420 <_usart_sync_init+0x34>)
  401414:	4798      	blx	r3
}
  401416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401418:	00402004 	.word	0x00402004
  40141c:	00400b45 	.word	0x00400b45
  401420:	00401399 	.word	0x00401399

00401424 <_usart_sync_enable>:
{
  401424:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401426:	4e0a      	ldr	r6, [pc, #40]	; (401450 <_usart_sync_enable+0x2c>)
  401428:	4604      	mov	r4, r0
  40142a:	22f2      	movs	r2, #242	; 0xf2
  40142c:	4631      	mov	r1, r6
  40142e:	3000      	adds	r0, #0
  401430:	bf18      	it	ne
  401432:	2001      	movne	r0, #1
  401434:	4d07      	ldr	r5, [pc, #28]	; (401454 <_usart_sync_enable+0x30>)
  401436:	47a8      	blx	r5
	_uart_enable(device->hw);
  401438:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _uart_enable(void *const hw)
{
	ASSERT(hw);
  40143a:	f240 22d7 	movw	r2, #727	; 0x2d7
  40143e:	4631      	mov	r1, r6
  401440:	1c20      	adds	r0, r4, #0
  401442:	bf18      	it	ne
  401444:	2001      	movne	r0, #1
  401446:	47a8      	blx	r5
	((Uart *)hw)->UART_CR = data;
  401448:	2350      	movs	r3, #80	; 0x50
  40144a:	6023      	str	r3, [r4, #0]
  40144c:	bd70      	pop	{r4, r5, r6, pc}
  40144e:	bf00      	nop
  401450:	00402004 	.word	0x00402004
  401454:	00400b45 	.word	0x00400b45

00401458 <_usart_sync_write_byte>:
{
  401458:	b538      	push	{r3, r4, r5, lr}
  40145a:	460c      	mov	r4, r1
	ASSERT(device);
  40145c:	4605      	mov	r5, r0
  40145e:	f240 1295 	movw	r2, #405	; 0x195
  401462:	4904      	ldr	r1, [pc, #16]	; (401474 <_usart_sync_write_byte+0x1c>)
  401464:	3000      	adds	r0, #0
  401466:	bf18      	it	ne
  401468:	2001      	movne	r0, #1
  40146a:	4b03      	ldr	r3, [pc, #12]	; (401478 <_usart_sync_write_byte+0x20>)
  40146c:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  40146e:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  401470:	61dc      	str	r4, [r3, #28]
  401472:	bd38      	pop	{r3, r4, r5, pc}
  401474:	00402004 	.word	0x00402004
  401478:	00400b45 	.word	0x00400b45

0040147c <_usart_sync_read_byte>:
{
  40147c:	b510      	push	{r4, lr}
	ASSERT(device);
  40147e:	4604      	mov	r4, r0
  401480:	f240 12a7 	movw	r2, #423	; 0x1a7
  401484:	4904      	ldr	r1, [pc, #16]	; (401498 <_usart_sync_read_byte+0x1c>)
  401486:	3000      	adds	r0, #0
  401488:	bf18      	it	ne
  40148a:	2001      	movne	r0, #1
  40148c:	4b03      	ldr	r3, [pc, #12]	; (40149c <_usart_sync_read_byte+0x20>)
  40148e:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  401490:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  401492:	6998      	ldr	r0, [r3, #24]
}
  401494:	b2c0      	uxtb	r0, r0
  401496:	bd10      	pop	{r4, pc}
  401498:	00402004 	.word	0x00402004
  40149c:	00400b45 	.word	0x00400b45

004014a0 <_usart_sync_is_ready_to_send>:
{
  4014a0:	b510      	push	{r4, lr}
	ASSERT(device);
  4014a2:	4604      	mov	r4, r0
  4014a4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  4014a8:	4905      	ldr	r1, [pc, #20]	; (4014c0 <_usart_sync_is_ready_to_send+0x20>)
  4014aa:	3000      	adds	r0, #0
  4014ac:	bf18      	it	ne
  4014ae:	2001      	movne	r0, #1
  4014b0:	4b04      	ldr	r3, [pc, #16]	; (4014c4 <_usart_sync_is_ready_to_send+0x24>)
  4014b2:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  4014b4:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  4014b6:	6958      	ldr	r0, [r3, #20]
}
  4014b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4014bc:	bd10      	pop	{r4, pc}
  4014be:	bf00      	nop
  4014c0:	00402004 	.word	0x00402004
  4014c4:	00400b45 	.word	0x00400b45

004014c8 <_usart_sync_is_transmit_done>:
{
  4014c8:	b510      	push	{r4, lr}
	ASSERT(device);
  4014ca:	4604      	mov	r4, r0
  4014cc:	f240 12b9 	movw	r2, #441	; 0x1b9
  4014d0:	4905      	ldr	r1, [pc, #20]	; (4014e8 <_usart_sync_is_transmit_done+0x20>)
  4014d2:	3000      	adds	r0, #0
  4014d4:	bf18      	it	ne
  4014d6:	2001      	movne	r0, #1
  4014d8:	4b04      	ldr	r3, [pc, #16]	; (4014ec <_usart_sync_is_transmit_done+0x24>)
  4014da:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  4014dc:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  4014de:	6958      	ldr	r0, [r3, #20]
}
  4014e0:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4014e4:	bd10      	pop	{r4, pc}
  4014e6:	bf00      	nop
  4014e8:	00402004 	.word	0x00402004
  4014ec:	00400b45 	.word	0x00400b45

004014f0 <_usart_sync_is_byte_received>:
{
  4014f0:	b510      	push	{r4, lr}
	ASSERT(device);
  4014f2:	4604      	mov	r4, r0
  4014f4:	f240 12cb 	movw	r2, #459	; 0x1cb
  4014f8:	4905      	ldr	r1, [pc, #20]	; (401510 <_usart_sync_is_byte_received+0x20>)
  4014fa:	3000      	adds	r0, #0
  4014fc:	bf18      	it	ne
  4014fe:	2001      	movne	r0, #1
  401500:	4b04      	ldr	r3, [pc, #16]	; (401514 <_usart_sync_is_byte_received+0x24>)
  401502:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  401504:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  401506:	6958      	ldr	r0, [r3, #20]
  401508:	f000 0001 	and.w	r0, r0, #1
}
  40150c:	bd10      	pop	{r4, pc}
  40150e:	bf00      	nop
  401510:	00402004 	.word	0x00402004
  401514:	00400b45 	.word	0x00400b45

00401518 <_uart_get_usart_sync>:
}
  401518:	2000      	movs	r0, #0
  40151a:	4770      	bx	lr

0040151c <SPI_callback_test>:
	((Pio *)hw)->PIO_SODR = mask;
  40151c:	4b0e      	ldr	r3, [pc, #56]	; (401558 <SPI_callback_test+0x3c>)
  40151e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401522:	631a      	str	r2, [r3, #48]	; 0x30
  401524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401528:	631a      	str	r2, [r3, #48]	; 0x30
	tmp = ((Pio *)hw)->PIO_ODSR;
  40152a:	4a0c      	ldr	r2, [pc, #48]	; (40155c <SPI_callback_test+0x40>)
  40152c:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  40152e:	f003 0301 	and.w	r3, r3, #1
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  401532:	f083 0101 	eor.w	r1, r3, #1
	((Pio *)hw)->PIO_SODR = mask;
  401536:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  401538:	6353      	str	r3, [r2, #52]	; 0x34
	gpio_set_pin_level(PD12, true); //set cs on spi header high

	
	gpio_toggle_pin_level(PC0);
	
	uint8_t receive = SPI0->SPI_RDR;
  40153a:	4b09      	ldr	r3, [pc, #36]	; (401560 <SPI_callback_test+0x44>)
  40153c:	689b      	ldr	r3, [r3, #8]
  40153e:	b2db      	uxtb	r3, r3
	if(receive == 42) {
  401540:	2b2a      	cmp	r3, #42	; 0x2a
  401542:	d000      	beq.n	401546 <SPI_callback_test+0x2a>
  401544:	4770      	bx	lr
	tmp = ((Pio *)hw)->PIO_ODSR;
  401546:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  401548:	f003 0302 	and.w	r3, r3, #2
  40154c:	43d9      	mvns	r1, r3
  40154e:	f001 0102 	and.w	r1, r1, #2
	((Pio *)hw)->PIO_SODR = mask;
  401552:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  401554:	6353      	str	r3, [r2, #52]	; 0x34
		gpio_toggle_pin_level(PC1);
	}
}
  401556:	e7f5      	b.n	401544 <SPI_callback_test+0x28>
  401558:	400e1400 	.word	0x400e1400
  40155c:	400e1200 	.word	0x400e1200
  401560:	40008000 	.word	0x40008000

00401564 <TIMER_0_task2_cb>:
{
	SPI_Test();	
}

static void TIMER_0_task2_cb(const struct timer_task *const timer_task)
{
  401564:	4770      	bx	lr
	...

00401568 <SPI_Test>:
void SPI_Test() {
  401568:	b530      	push	{r4, r5, lr}
  40156a:	b083      	sub	sp, #12
	spi_m_async_get_io_descriptor(&SPI_0, &io);
  40156c:	4c15      	ldr	r4, [pc, #84]	; (4015c4 <SPI_Test+0x5c>)
  40156e:	a901      	add	r1, sp, #4
  401570:	4620      	mov	r0, r4
  401572:	4b15      	ldr	r3, [pc, #84]	; (4015c8 <SPI_Test+0x60>)
  401574:	4798      	blx	r3
	spi_m_async_set_data_order(&SPI_0, SPI_DATA_ORDER_MSB_1ST);
  401576:	2100      	movs	r1, #0
  401578:	4620      	mov	r0, r4
  40157a:	4b14      	ldr	r3, [pc, #80]	; (4015cc <SPI_Test+0x64>)
  40157c:	4798      	blx	r3
	spi_m_async_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
  40157e:	2100      	movs	r1, #0
  401580:	4620      	mov	r0, r4
  401582:	4b13      	ldr	r3, [pc, #76]	; (4015d0 <SPI_Test+0x68>)
  401584:	4798      	blx	r3
	spi_m_async_set_baudrate(&SPI_0, 589000);
  401586:	4913      	ldr	r1, [pc, #76]	; (4015d4 <SPI_Test+0x6c>)
  401588:	4620      	mov	r0, r4
  40158a:	4b13      	ldr	r3, [pc, #76]	; (4015d8 <SPI_Test+0x70>)
  40158c:	4798      	blx	r3
	uint8_t message = 42;
  40158e:	ad02      	add	r5, sp, #8
  401590:	232a      	movs	r3, #42	; 0x2a
  401592:	f805 3d05 	strb.w	r3, [r5, #-5]!
	spi_m_async_register_callback(&SPI_0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)SPI_callback_test);
  401596:	4a11      	ldr	r2, [pc, #68]	; (4015dc <SPI_Test+0x74>)
  401598:	2100      	movs	r1, #0
  40159a:	4620      	mov	r0, r4
  40159c:	4b10      	ldr	r3, [pc, #64]	; (4015e0 <SPI_Test+0x78>)
  40159e:	4798      	blx	r3
	spi_m_async_enable(&SPI_0);
  4015a0:	4620      	mov	r0, r4
  4015a2:	4b10      	ldr	r3, [pc, #64]	; (4015e4 <SPI_Test+0x7c>)
  4015a4:	4798      	blx	r3
  4015a6:	4b10      	ldr	r3, [pc, #64]	; (4015e8 <SPI_Test+0x80>)
  4015a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4015ac:	635a      	str	r2, [r3, #52]	; 0x34
  4015ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4015b2:	635a      	str	r2, [r3, #52]	; 0x34
	io_write(io, &message, 1);
  4015b4:	2201      	movs	r2, #1
  4015b6:	4629      	mov	r1, r5
  4015b8:	9801      	ldr	r0, [sp, #4]
  4015ba:	4b0c      	ldr	r3, [pc, #48]	; (4015ec <SPI_Test+0x84>)
  4015bc:	4798      	blx	r3
}
  4015be:	b003      	add	sp, #12
  4015c0:	bd30      	pop	{r4, r5, pc}
  4015c2:	bf00      	nop
  4015c4:	204000f0 	.word	0x204000f0
  4015c8:	004007fd 	.word	0x004007fd
  4015cc:	0040077d 	.word	0x0040077d
  4015d0:	00400741 	.word	0x00400741
  4015d4:	0008fcc8 	.word	0x0008fcc8
  4015d8:	00400705 	.word	0x00400705
  4015dc:	0040151d 	.word	0x0040151d
  4015e0:	004007b9 	.word	0x004007b9
  4015e4:	004006dd 	.word	0x004006dd
  4015e8:	400e1400 	.word	0x400e1400
  4015ec:	004003fd 	.word	0x004003fd

004015f0 <TIMER_0_task1_cb>:
{
  4015f0:	b508      	push	{r3, lr}
	SPI_Test();	
  4015f2:	4b01      	ldr	r3, [pc, #4]	; (4015f8 <TIMER_0_task1_cb+0x8>)
  4015f4:	4798      	blx	r3
  4015f6:	bd08      	pop	{r3, pc}
  4015f8:	00401569 	.word	0x00401569

004015fc <TIMER_0_Test>:
}

void TIMER_0_Test(void)
{
  4015fc:	b570      	push	{r4, r5, r6, lr}
	TIMER_0_task1.interval = 100;
  4015fe:	4c0d      	ldr	r4, [pc, #52]	; (401634 <TIMER_0_Test+0x38>)
  401600:	2364      	movs	r3, #100	; 0x64
  401602:	60a3      	str	r3, [r4, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
  401604:	4b0c      	ldr	r3, [pc, #48]	; (401638 <TIMER_0_Test+0x3c>)
  401606:	60e3      	str	r3, [r4, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
  401608:	2301      	movs	r3, #1
  40160a:	7423      	strb	r3, [r4, #16]
	TIMER_0_task2.interval = 2000;
  40160c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  401610:	61e2      	str	r2, [r4, #28]
	TIMER_0_task2.cb       = TIMER_0_task2_cb;
  401612:	4a0a      	ldr	r2, [pc, #40]	; (40163c <TIMER_0_Test+0x40>)
  401614:	6222      	str	r2, [r4, #32]
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
  401616:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	timer_add_task(&TIMER_0, &TIMER_0_task1);
  40161a:	4d09      	ldr	r5, [pc, #36]	; (401640 <TIMER_0_Test+0x44>)
  40161c:	4621      	mov	r1, r4
  40161e:	4628      	mov	r0, r5
  401620:	4e08      	ldr	r6, [pc, #32]	; (401644 <TIMER_0_Test+0x48>)
  401622:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
  401624:	f104 0114 	add.w	r1, r4, #20
  401628:	4628      	mov	r0, r5
  40162a:	47b0      	blx	r6
	timer_start(&TIMER_0);
  40162c:	4628      	mov	r0, r5
  40162e:	4b06      	ldr	r3, [pc, #24]	; (401648 <TIMER_0_Test+0x4c>)
  401630:	4798      	blx	r3
  401632:	bd70      	pop	{r4, r5, r6, pc}
  401634:	204000b0 	.word	0x204000b0
  401638:	004015f1 	.word	0x004015f1
  40163c:	00401565 	.word	0x00401565
  401640:	20400138 	.word	0x20400138
  401644:	00400959 	.word	0x00400959
  401648:	0040091d 	.word	0x0040091d

0040164c <main>:
{
  40164c:	b508      	push	{r3, lr}
	atmel_start_init();	
  40164e:	4b0a      	ldr	r3, [pc, #40]	; (401678 <main+0x2c>)
  401650:	4798      	blx	r3
	TIMER_0_Test();
  401652:	4b0a      	ldr	r3, [pc, #40]	; (40167c <main+0x30>)
  401654:	4798      	blx	r3
	((Pio *)hw)->PIO_OER = mask;
  401656:	4b0a      	ldr	r3, [pc, #40]	; (401680 <main+0x34>)
  401658:	2001      	movs	r0, #1
  40165a:	6118      	str	r0, [r3, #16]
  40165c:	2102      	movs	r1, #2
  40165e:	6119      	str	r1, [r3, #16]
  401660:	4a08      	ldr	r2, [pc, #32]	; (401684 <main+0x38>)
  401662:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  401666:	6115      	str	r5, [r2, #16]
  401668:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  40166c:	6114      	str	r4, [r2, #16]
	((Pio *)hw)->PIO_SODR = mask;
  40166e:	6315      	str	r5, [r2, #48]	; 0x30
  401670:	6314      	str	r4, [r2, #48]	; 0x30
  401672:	6318      	str	r0, [r3, #48]	; 0x30
  401674:	6319      	str	r1, [r3, #48]	; 0x30
  401676:	e7fe      	b.n	401676 <main+0x2a>
  401678:	004001d5 	.word	0x004001d5
  40167c:	004015fd 	.word	0x004015fd
  401680:	400e1200 	.word	0x400e1200
  401684:	400e1400 	.word	0x400e1400

00401688 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401688:	b958      	cbnz	r0, 4016a2 <_read+0x1a>
{
  40168a:	b508      	push	{r3, lr}
  40168c:	460b      	mov	r3, r1
  40168e:	4611      	mov	r1, r2
  401690:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401692:	4b05      	ldr	r3, [pc, #20]	; (4016a8 <_read+0x20>)
  401694:	4798      	blx	r3
	if (n < 0) {
  401696:	2800      	cmp	r0, #0
  401698:	db00      	blt.n	40169c <_read+0x14>
		return -1;
	}

	return n;
}
  40169a:	bd08      	pop	{r3, pc}
		return -1;
  40169c:	f04f 30ff 	mov.w	r0, #4294967295
  4016a0:	bd08      	pop	{r3, pc}
		return -1;
  4016a2:	f04f 30ff 	mov.w	r0, #4294967295
  4016a6:	4770      	bx	lr
  4016a8:	00401701 	.word	0x00401701

004016ac <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  4016ac:	3801      	subs	r0, #1
  4016ae:	2802      	cmp	r0, #2
  4016b0:	d80b      	bhi.n	4016ca <_write+0x1e>
{
  4016b2:	b508      	push	{r3, lr}
  4016b4:	460b      	mov	r3, r1
  4016b6:	4611      	mov	r1, r2
  4016b8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  4016ba:	4b05      	ldr	r3, [pc, #20]	; (4016d0 <_write+0x24>)
  4016bc:	4798      	blx	r3
	if (n < 0) {
  4016be:	2800      	cmp	r0, #0
  4016c0:	db00      	blt.n	4016c4 <_write+0x18>
		return -1;
	}

	return n;
}
  4016c2:	bd08      	pop	{r3, pc}
		return -1;
  4016c4:	f04f 30ff 	mov.w	r0, #4294967295
  4016c8:	bd08      	pop	{r3, pc}
		return -1;
  4016ca:	f04f 30ff 	mov.w	r0, #4294967295
  4016ce:	4770      	bx	lr
  4016d0:	00401725 	.word	0x00401725

004016d4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  4016d4:	b570      	push	{r4, r5, r6, lr}
  4016d6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  4016d8:	4d06      	ldr	r5, [pc, #24]	; (4016f4 <stdio_io_init+0x20>)
  4016da:	682b      	ldr	r3, [r5, #0]
  4016dc:	2100      	movs	r1, #0
  4016de:	6898      	ldr	r0, [r3, #8]
  4016e0:	4c05      	ldr	r4, [pc, #20]	; (4016f8 <stdio_io_init+0x24>)
  4016e2:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4016e4:	682b      	ldr	r3, [r5, #0]
  4016e6:	2100      	movs	r1, #0
  4016e8:	6858      	ldr	r0, [r3, #4]
  4016ea:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  4016ec:	4b03      	ldr	r3, [pc, #12]	; (4016fc <stdio_io_init+0x28>)
  4016ee:	601e      	str	r6, [r3, #0]
  4016f0:	bd70      	pop	{r4, r5, r6, pc}
  4016f2:	bf00      	nop
  4016f4:	20400024 	.word	0x20400024
  4016f8:	004017c1 	.word	0x004017c1
  4016fc:	204000d8 	.word	0x204000d8

00401700 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  401700:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401702:	4b06      	ldr	r3, [pc, #24]	; (40171c <stdio_io_read+0x1c>)
  401704:	681b      	ldr	r3, [r3, #0]
  401706:	b133      	cbz	r3, 401716 <stdio_io_read+0x16>
  401708:	460a      	mov	r2, r1
  40170a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  40170c:	b292      	uxth	r2, r2
  40170e:	4618      	mov	r0, r3
  401710:	4b03      	ldr	r3, [pc, #12]	; (401720 <stdio_io_read+0x20>)
  401712:	4798      	blx	r3
  401714:	bd08      	pop	{r3, pc}
		return 0;
  401716:	2000      	movs	r0, #0
}
  401718:	bd08      	pop	{r3, pc}
  40171a:	bf00      	nop
  40171c:	204000d8 	.word	0x204000d8
  401720:	0040042d 	.word	0x0040042d

00401724 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401724:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401726:	4b06      	ldr	r3, [pc, #24]	; (401740 <stdio_io_write+0x1c>)
  401728:	681b      	ldr	r3, [r3, #0]
  40172a:	b133      	cbz	r3, 40173a <stdio_io_write+0x16>
  40172c:	460a      	mov	r2, r1
  40172e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  401730:	b292      	uxth	r2, r2
  401732:	4618      	mov	r0, r3
  401734:	4b03      	ldr	r3, [pc, #12]	; (401744 <stdio_io_write+0x20>)
  401736:	4798      	blx	r3
  401738:	bd08      	pop	{r3, pc}
		return 0;
  40173a:	2000      	movs	r0, #0
}
  40173c:	bd08      	pop	{r3, pc}
  40173e:	bf00      	nop
  401740:	204000d8 	.word	0x204000d8
  401744:	004003fd 	.word	0x004003fd

00401748 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401748:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  40174a:	4c04      	ldr	r4, [pc, #16]	; (40175c <stdio_redirect_init+0x14>)
  40174c:	4620      	mov	r0, r4
  40174e:	4b04      	ldr	r3, [pc, #16]	; (401760 <stdio_redirect_init+0x18>)
  401750:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  401752:	4620      	mov	r0, r4
  401754:	4b03      	ldr	r3, [pc, #12]	; (401764 <stdio_redirect_init+0x1c>)
  401756:	4798      	blx	r3
  401758:	bd10      	pop	{r4, pc}
  40175a:	bf00      	nop
  40175c:	204000e4 	.word	0x204000e4
  401760:	00400b19 	.word	0x00400b19
  401764:	004016d5 	.word	0x004016d5

00401768 <__libc_init_array>:
  401768:	b570      	push	{r4, r5, r6, lr}
  40176a:	4e0d      	ldr	r6, [pc, #52]	; (4017a0 <__libc_init_array+0x38>)
  40176c:	4c0d      	ldr	r4, [pc, #52]	; (4017a4 <__libc_init_array+0x3c>)
  40176e:	1ba4      	subs	r4, r4, r6
  401770:	10a4      	asrs	r4, r4, #2
  401772:	2500      	movs	r5, #0
  401774:	42a5      	cmp	r5, r4
  401776:	d109      	bne.n	40178c <__libc_init_array+0x24>
  401778:	4e0b      	ldr	r6, [pc, #44]	; (4017a8 <__libc_init_array+0x40>)
  40177a:	4c0c      	ldr	r4, [pc, #48]	; (4017ac <__libc_init_array+0x44>)
  40177c:	f000 fc80 	bl	402080 <_init>
  401780:	1ba4      	subs	r4, r4, r6
  401782:	10a4      	asrs	r4, r4, #2
  401784:	2500      	movs	r5, #0
  401786:	42a5      	cmp	r5, r4
  401788:	d105      	bne.n	401796 <__libc_init_array+0x2e>
  40178a:	bd70      	pop	{r4, r5, r6, pc}
  40178c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401790:	4798      	blx	r3
  401792:	3501      	adds	r5, #1
  401794:	e7ee      	b.n	401774 <__libc_init_array+0xc>
  401796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40179a:	4798      	blx	r3
  40179c:	3501      	adds	r5, #1
  40179e:	e7f2      	b.n	401786 <__libc_init_array+0x1e>
  4017a0:	0040208c 	.word	0x0040208c
  4017a4:	0040208c 	.word	0x0040208c
  4017a8:	0040208c 	.word	0x0040208c
  4017ac:	00402090 	.word	0x00402090

004017b0 <memset>:
  4017b0:	4402      	add	r2, r0
  4017b2:	4603      	mov	r3, r0
  4017b4:	4293      	cmp	r3, r2
  4017b6:	d100      	bne.n	4017ba <memset+0xa>
  4017b8:	4770      	bx	lr
  4017ba:	f803 1b01 	strb.w	r1, [r3], #1
  4017be:	e7f9      	b.n	4017b4 <memset+0x4>

004017c0 <setbuf>:
  4017c0:	2900      	cmp	r1, #0
  4017c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4017c6:	bf0c      	ite	eq
  4017c8:	2202      	moveq	r2, #2
  4017ca:	2200      	movne	r2, #0
  4017cc:	f000 b800 	b.w	4017d0 <setvbuf>

004017d0 <setvbuf>:
  4017d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4017d4:	461d      	mov	r5, r3
  4017d6:	4b51      	ldr	r3, [pc, #324]	; (40191c <setvbuf+0x14c>)
  4017d8:	681e      	ldr	r6, [r3, #0]
  4017da:	4604      	mov	r4, r0
  4017dc:	460f      	mov	r7, r1
  4017de:	4690      	mov	r8, r2
  4017e0:	b126      	cbz	r6, 4017ec <setvbuf+0x1c>
  4017e2:	69b3      	ldr	r3, [r6, #24]
  4017e4:	b913      	cbnz	r3, 4017ec <setvbuf+0x1c>
  4017e6:	4630      	mov	r0, r6
  4017e8:	f000 f992 	bl	401b10 <__sinit>
  4017ec:	4b4c      	ldr	r3, [pc, #304]	; (401920 <setvbuf+0x150>)
  4017ee:	429c      	cmp	r4, r3
  4017f0:	d152      	bne.n	401898 <setvbuf+0xc8>
  4017f2:	6874      	ldr	r4, [r6, #4]
  4017f4:	f1b8 0f02 	cmp.w	r8, #2
  4017f8:	d006      	beq.n	401808 <setvbuf+0x38>
  4017fa:	f1b8 0f01 	cmp.w	r8, #1
  4017fe:	f200 8089 	bhi.w	401914 <setvbuf+0x144>
  401802:	2d00      	cmp	r5, #0
  401804:	f2c0 8086 	blt.w	401914 <setvbuf+0x144>
  401808:	4621      	mov	r1, r4
  40180a:	4630      	mov	r0, r6
  40180c:	f000 f916 	bl	401a3c <_fflush_r>
  401810:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401812:	b141      	cbz	r1, 401826 <setvbuf+0x56>
  401814:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401818:	4299      	cmp	r1, r3
  40181a:	d002      	beq.n	401822 <setvbuf+0x52>
  40181c:	4630      	mov	r0, r6
  40181e:	f000 fa2d 	bl	401c7c <_free_r>
  401822:	2300      	movs	r3, #0
  401824:	6363      	str	r3, [r4, #52]	; 0x34
  401826:	2300      	movs	r3, #0
  401828:	61a3      	str	r3, [r4, #24]
  40182a:	6063      	str	r3, [r4, #4]
  40182c:	89a3      	ldrh	r3, [r4, #12]
  40182e:	061b      	lsls	r3, r3, #24
  401830:	d503      	bpl.n	40183a <setvbuf+0x6a>
  401832:	6921      	ldr	r1, [r4, #16]
  401834:	4630      	mov	r0, r6
  401836:	f000 fa21 	bl	401c7c <_free_r>
  40183a:	89a3      	ldrh	r3, [r4, #12]
  40183c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401840:	f023 0303 	bic.w	r3, r3, #3
  401844:	f1b8 0f02 	cmp.w	r8, #2
  401848:	81a3      	strh	r3, [r4, #12]
  40184a:	d05d      	beq.n	401908 <setvbuf+0x138>
  40184c:	ab01      	add	r3, sp, #4
  40184e:	466a      	mov	r2, sp
  401850:	4621      	mov	r1, r4
  401852:	4630      	mov	r0, r6
  401854:	f000 f9e6 	bl	401c24 <__swhatbuf_r>
  401858:	89a3      	ldrh	r3, [r4, #12]
  40185a:	4318      	orrs	r0, r3
  40185c:	81a0      	strh	r0, [r4, #12]
  40185e:	bb2d      	cbnz	r5, 4018ac <setvbuf+0xdc>
  401860:	9d00      	ldr	r5, [sp, #0]
  401862:	4628      	mov	r0, r5
  401864:	f000 fa02 	bl	401c6c <malloc>
  401868:	4607      	mov	r7, r0
  40186a:	2800      	cmp	r0, #0
  40186c:	d14e      	bne.n	40190c <setvbuf+0x13c>
  40186e:	f8dd 9000 	ldr.w	r9, [sp]
  401872:	45a9      	cmp	r9, r5
  401874:	d13c      	bne.n	4018f0 <setvbuf+0x120>
  401876:	f04f 30ff 	mov.w	r0, #4294967295
  40187a:	89a3      	ldrh	r3, [r4, #12]
  40187c:	f043 0302 	orr.w	r3, r3, #2
  401880:	81a3      	strh	r3, [r4, #12]
  401882:	2300      	movs	r3, #0
  401884:	60a3      	str	r3, [r4, #8]
  401886:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40188a:	6023      	str	r3, [r4, #0]
  40188c:	6123      	str	r3, [r4, #16]
  40188e:	2301      	movs	r3, #1
  401890:	6163      	str	r3, [r4, #20]
  401892:	b003      	add	sp, #12
  401894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401898:	4b22      	ldr	r3, [pc, #136]	; (401924 <setvbuf+0x154>)
  40189a:	429c      	cmp	r4, r3
  40189c:	d101      	bne.n	4018a2 <setvbuf+0xd2>
  40189e:	68b4      	ldr	r4, [r6, #8]
  4018a0:	e7a8      	b.n	4017f4 <setvbuf+0x24>
  4018a2:	4b21      	ldr	r3, [pc, #132]	; (401928 <setvbuf+0x158>)
  4018a4:	429c      	cmp	r4, r3
  4018a6:	bf08      	it	eq
  4018a8:	68f4      	ldreq	r4, [r6, #12]
  4018aa:	e7a3      	b.n	4017f4 <setvbuf+0x24>
  4018ac:	2f00      	cmp	r7, #0
  4018ae:	d0d8      	beq.n	401862 <setvbuf+0x92>
  4018b0:	69b3      	ldr	r3, [r6, #24]
  4018b2:	b913      	cbnz	r3, 4018ba <setvbuf+0xea>
  4018b4:	4630      	mov	r0, r6
  4018b6:	f000 f92b 	bl	401b10 <__sinit>
  4018ba:	f1b8 0f01 	cmp.w	r8, #1
  4018be:	bf08      	it	eq
  4018c0:	89a3      	ldrheq	r3, [r4, #12]
  4018c2:	6027      	str	r7, [r4, #0]
  4018c4:	bf04      	itt	eq
  4018c6:	f043 0301 	orreq.w	r3, r3, #1
  4018ca:	81a3      	strheq	r3, [r4, #12]
  4018cc:	89a3      	ldrh	r3, [r4, #12]
  4018ce:	6127      	str	r7, [r4, #16]
  4018d0:	f013 0008 	ands.w	r0, r3, #8
  4018d4:	6165      	str	r5, [r4, #20]
  4018d6:	d01b      	beq.n	401910 <setvbuf+0x140>
  4018d8:	f013 0001 	ands.w	r0, r3, #1
  4018dc:	bf18      	it	ne
  4018de:	426d      	negne	r5, r5
  4018e0:	f04f 0300 	mov.w	r3, #0
  4018e4:	bf1d      	ittte	ne
  4018e6:	60a3      	strne	r3, [r4, #8]
  4018e8:	61a5      	strne	r5, [r4, #24]
  4018ea:	4618      	movne	r0, r3
  4018ec:	60a5      	streq	r5, [r4, #8]
  4018ee:	e7d0      	b.n	401892 <setvbuf+0xc2>
  4018f0:	4648      	mov	r0, r9
  4018f2:	f000 f9bb 	bl	401c6c <malloc>
  4018f6:	4607      	mov	r7, r0
  4018f8:	2800      	cmp	r0, #0
  4018fa:	d0bc      	beq.n	401876 <setvbuf+0xa6>
  4018fc:	89a3      	ldrh	r3, [r4, #12]
  4018fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401902:	81a3      	strh	r3, [r4, #12]
  401904:	464d      	mov	r5, r9
  401906:	e7d3      	b.n	4018b0 <setvbuf+0xe0>
  401908:	2000      	movs	r0, #0
  40190a:	e7b6      	b.n	40187a <setvbuf+0xaa>
  40190c:	46a9      	mov	r9, r5
  40190e:	e7f5      	b.n	4018fc <setvbuf+0x12c>
  401910:	60a0      	str	r0, [r4, #8]
  401912:	e7be      	b.n	401892 <setvbuf+0xc2>
  401914:	f04f 30ff 	mov.w	r0, #4294967295
  401918:	e7bb      	b.n	401892 <setvbuf+0xc2>
  40191a:	bf00      	nop
  40191c:	20400024 	.word	0x20400024
  401920:	00402040 	.word	0x00402040
  401924:	00402060 	.word	0x00402060
  401928:	00402020 	.word	0x00402020

0040192c <__sflush_r>:
  40192c:	898a      	ldrh	r2, [r1, #12]
  40192e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401932:	4605      	mov	r5, r0
  401934:	0710      	lsls	r0, r2, #28
  401936:	460c      	mov	r4, r1
  401938:	d45a      	bmi.n	4019f0 <__sflush_r+0xc4>
  40193a:	684b      	ldr	r3, [r1, #4]
  40193c:	2b00      	cmp	r3, #0
  40193e:	dc05      	bgt.n	40194c <__sflush_r+0x20>
  401940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  401942:	2b00      	cmp	r3, #0
  401944:	dc02      	bgt.n	40194c <__sflush_r+0x20>
  401946:	2000      	movs	r0, #0
  401948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40194c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40194e:	2e00      	cmp	r6, #0
  401950:	d0f9      	beq.n	401946 <__sflush_r+0x1a>
  401952:	2300      	movs	r3, #0
  401954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  401958:	682f      	ldr	r7, [r5, #0]
  40195a:	602b      	str	r3, [r5, #0]
  40195c:	d033      	beq.n	4019c6 <__sflush_r+0x9a>
  40195e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  401960:	89a3      	ldrh	r3, [r4, #12]
  401962:	075a      	lsls	r2, r3, #29
  401964:	d505      	bpl.n	401972 <__sflush_r+0x46>
  401966:	6863      	ldr	r3, [r4, #4]
  401968:	1ac0      	subs	r0, r0, r3
  40196a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40196c:	b10b      	cbz	r3, 401972 <__sflush_r+0x46>
  40196e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401970:	1ac0      	subs	r0, r0, r3
  401972:	2300      	movs	r3, #0
  401974:	4602      	mov	r2, r0
  401976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401978:	6a21      	ldr	r1, [r4, #32]
  40197a:	4628      	mov	r0, r5
  40197c:	47b0      	blx	r6
  40197e:	1c43      	adds	r3, r0, #1
  401980:	89a3      	ldrh	r3, [r4, #12]
  401982:	d106      	bne.n	401992 <__sflush_r+0x66>
  401984:	6829      	ldr	r1, [r5, #0]
  401986:	291d      	cmp	r1, #29
  401988:	d84b      	bhi.n	401a22 <__sflush_r+0xf6>
  40198a:	4a2b      	ldr	r2, [pc, #172]	; (401a38 <__sflush_r+0x10c>)
  40198c:	40ca      	lsrs	r2, r1
  40198e:	07d6      	lsls	r6, r2, #31
  401990:	d547      	bpl.n	401a22 <__sflush_r+0xf6>
  401992:	2200      	movs	r2, #0
  401994:	6062      	str	r2, [r4, #4]
  401996:	04d9      	lsls	r1, r3, #19
  401998:	6922      	ldr	r2, [r4, #16]
  40199a:	6022      	str	r2, [r4, #0]
  40199c:	d504      	bpl.n	4019a8 <__sflush_r+0x7c>
  40199e:	1c42      	adds	r2, r0, #1
  4019a0:	d101      	bne.n	4019a6 <__sflush_r+0x7a>
  4019a2:	682b      	ldr	r3, [r5, #0]
  4019a4:	b903      	cbnz	r3, 4019a8 <__sflush_r+0x7c>
  4019a6:	6560      	str	r0, [r4, #84]	; 0x54
  4019a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4019aa:	602f      	str	r7, [r5, #0]
  4019ac:	2900      	cmp	r1, #0
  4019ae:	d0ca      	beq.n	401946 <__sflush_r+0x1a>
  4019b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4019b4:	4299      	cmp	r1, r3
  4019b6:	d002      	beq.n	4019be <__sflush_r+0x92>
  4019b8:	4628      	mov	r0, r5
  4019ba:	f000 f95f 	bl	401c7c <_free_r>
  4019be:	2000      	movs	r0, #0
  4019c0:	6360      	str	r0, [r4, #52]	; 0x34
  4019c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019c6:	6a21      	ldr	r1, [r4, #32]
  4019c8:	2301      	movs	r3, #1
  4019ca:	4628      	mov	r0, r5
  4019cc:	47b0      	blx	r6
  4019ce:	1c41      	adds	r1, r0, #1
  4019d0:	d1c6      	bne.n	401960 <__sflush_r+0x34>
  4019d2:	682b      	ldr	r3, [r5, #0]
  4019d4:	2b00      	cmp	r3, #0
  4019d6:	d0c3      	beq.n	401960 <__sflush_r+0x34>
  4019d8:	2b1d      	cmp	r3, #29
  4019da:	d001      	beq.n	4019e0 <__sflush_r+0xb4>
  4019dc:	2b16      	cmp	r3, #22
  4019de:	d101      	bne.n	4019e4 <__sflush_r+0xb8>
  4019e0:	602f      	str	r7, [r5, #0]
  4019e2:	e7b0      	b.n	401946 <__sflush_r+0x1a>
  4019e4:	89a3      	ldrh	r3, [r4, #12]
  4019e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4019ea:	81a3      	strh	r3, [r4, #12]
  4019ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019f0:	690f      	ldr	r7, [r1, #16]
  4019f2:	2f00      	cmp	r7, #0
  4019f4:	d0a7      	beq.n	401946 <__sflush_r+0x1a>
  4019f6:	0793      	lsls	r3, r2, #30
  4019f8:	680e      	ldr	r6, [r1, #0]
  4019fa:	bf08      	it	eq
  4019fc:	694b      	ldreq	r3, [r1, #20]
  4019fe:	600f      	str	r7, [r1, #0]
  401a00:	bf18      	it	ne
  401a02:	2300      	movne	r3, #0
  401a04:	eba6 0807 	sub.w	r8, r6, r7
  401a08:	608b      	str	r3, [r1, #8]
  401a0a:	f1b8 0f00 	cmp.w	r8, #0
  401a0e:	dd9a      	ble.n	401946 <__sflush_r+0x1a>
  401a10:	4643      	mov	r3, r8
  401a12:	463a      	mov	r2, r7
  401a14:	6a21      	ldr	r1, [r4, #32]
  401a16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  401a18:	4628      	mov	r0, r5
  401a1a:	47b0      	blx	r6
  401a1c:	2800      	cmp	r0, #0
  401a1e:	dc07      	bgt.n	401a30 <__sflush_r+0x104>
  401a20:	89a3      	ldrh	r3, [r4, #12]
  401a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401a26:	81a3      	strh	r3, [r4, #12]
  401a28:	f04f 30ff 	mov.w	r0, #4294967295
  401a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401a30:	4407      	add	r7, r0
  401a32:	eba8 0800 	sub.w	r8, r8, r0
  401a36:	e7e8      	b.n	401a0a <__sflush_r+0xde>
  401a38:	20400001 	.word	0x20400001

00401a3c <_fflush_r>:
  401a3c:	b538      	push	{r3, r4, r5, lr}
  401a3e:	690b      	ldr	r3, [r1, #16]
  401a40:	4605      	mov	r5, r0
  401a42:	460c      	mov	r4, r1
  401a44:	b1db      	cbz	r3, 401a7e <_fflush_r+0x42>
  401a46:	b118      	cbz	r0, 401a50 <_fflush_r+0x14>
  401a48:	6983      	ldr	r3, [r0, #24]
  401a4a:	b90b      	cbnz	r3, 401a50 <_fflush_r+0x14>
  401a4c:	f000 f860 	bl	401b10 <__sinit>
  401a50:	4b0c      	ldr	r3, [pc, #48]	; (401a84 <_fflush_r+0x48>)
  401a52:	429c      	cmp	r4, r3
  401a54:	d109      	bne.n	401a6a <_fflush_r+0x2e>
  401a56:	686c      	ldr	r4, [r5, #4]
  401a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a5c:	b17b      	cbz	r3, 401a7e <_fflush_r+0x42>
  401a5e:	4621      	mov	r1, r4
  401a60:	4628      	mov	r0, r5
  401a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401a66:	f7ff bf61 	b.w	40192c <__sflush_r>
  401a6a:	4b07      	ldr	r3, [pc, #28]	; (401a88 <_fflush_r+0x4c>)
  401a6c:	429c      	cmp	r4, r3
  401a6e:	d101      	bne.n	401a74 <_fflush_r+0x38>
  401a70:	68ac      	ldr	r4, [r5, #8]
  401a72:	e7f1      	b.n	401a58 <_fflush_r+0x1c>
  401a74:	4b05      	ldr	r3, [pc, #20]	; (401a8c <_fflush_r+0x50>)
  401a76:	429c      	cmp	r4, r3
  401a78:	bf08      	it	eq
  401a7a:	68ec      	ldreq	r4, [r5, #12]
  401a7c:	e7ec      	b.n	401a58 <_fflush_r+0x1c>
  401a7e:	2000      	movs	r0, #0
  401a80:	bd38      	pop	{r3, r4, r5, pc}
  401a82:	bf00      	nop
  401a84:	00402040 	.word	0x00402040
  401a88:	00402060 	.word	0x00402060
  401a8c:	00402020 	.word	0x00402020

00401a90 <_cleanup_r>:
  401a90:	4901      	ldr	r1, [pc, #4]	; (401a98 <_cleanup_r+0x8>)
  401a92:	f000 b8a9 	b.w	401be8 <_fwalk_reent>
  401a96:	bf00      	nop
  401a98:	00401a3d 	.word	0x00401a3d

00401a9c <std.isra.0>:
  401a9c:	2300      	movs	r3, #0
  401a9e:	b510      	push	{r4, lr}
  401aa0:	4604      	mov	r4, r0
  401aa2:	6003      	str	r3, [r0, #0]
  401aa4:	6043      	str	r3, [r0, #4]
  401aa6:	6083      	str	r3, [r0, #8]
  401aa8:	8181      	strh	r1, [r0, #12]
  401aaa:	6643      	str	r3, [r0, #100]	; 0x64
  401aac:	81c2      	strh	r2, [r0, #14]
  401aae:	6103      	str	r3, [r0, #16]
  401ab0:	6143      	str	r3, [r0, #20]
  401ab2:	6183      	str	r3, [r0, #24]
  401ab4:	4619      	mov	r1, r3
  401ab6:	2208      	movs	r2, #8
  401ab8:	305c      	adds	r0, #92	; 0x5c
  401aba:	f7ff fe79 	bl	4017b0 <memset>
  401abe:	4b05      	ldr	r3, [pc, #20]	; (401ad4 <std.isra.0+0x38>)
  401ac0:	6263      	str	r3, [r4, #36]	; 0x24
  401ac2:	4b05      	ldr	r3, [pc, #20]	; (401ad8 <std.isra.0+0x3c>)
  401ac4:	62a3      	str	r3, [r4, #40]	; 0x28
  401ac6:	4b05      	ldr	r3, [pc, #20]	; (401adc <std.isra.0+0x40>)
  401ac8:	62e3      	str	r3, [r4, #44]	; 0x2c
  401aca:	4b05      	ldr	r3, [pc, #20]	; (401ae0 <std.isra.0+0x44>)
  401acc:	6224      	str	r4, [r4, #32]
  401ace:	6323      	str	r3, [r4, #48]	; 0x30
  401ad0:	bd10      	pop	{r4, pc}
  401ad2:	bf00      	nop
  401ad4:	00401df5 	.word	0x00401df5
  401ad8:	00401e17 	.word	0x00401e17
  401adc:	00401e4f 	.word	0x00401e4f
  401ae0:	00401e73 	.word	0x00401e73

00401ae4 <__sfmoreglue>:
  401ae4:	b570      	push	{r4, r5, r6, lr}
  401ae6:	1e4a      	subs	r2, r1, #1
  401ae8:	2568      	movs	r5, #104	; 0x68
  401aea:	4355      	muls	r5, r2
  401aec:	460e      	mov	r6, r1
  401aee:	f105 0174 	add.w	r1, r5, #116	; 0x74
  401af2:	f000 f911 	bl	401d18 <_malloc_r>
  401af6:	4604      	mov	r4, r0
  401af8:	b140      	cbz	r0, 401b0c <__sfmoreglue+0x28>
  401afa:	2100      	movs	r1, #0
  401afc:	e880 0042 	stmia.w	r0, {r1, r6}
  401b00:	300c      	adds	r0, #12
  401b02:	60a0      	str	r0, [r4, #8]
  401b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
  401b08:	f7ff fe52 	bl	4017b0 <memset>
  401b0c:	4620      	mov	r0, r4
  401b0e:	bd70      	pop	{r4, r5, r6, pc}

00401b10 <__sinit>:
  401b10:	6983      	ldr	r3, [r0, #24]
  401b12:	b510      	push	{r4, lr}
  401b14:	4604      	mov	r4, r0
  401b16:	bb33      	cbnz	r3, 401b66 <__sinit+0x56>
  401b18:	6483      	str	r3, [r0, #72]	; 0x48
  401b1a:	64c3      	str	r3, [r0, #76]	; 0x4c
  401b1c:	6503      	str	r3, [r0, #80]	; 0x50
  401b1e:	4b12      	ldr	r3, [pc, #72]	; (401b68 <__sinit+0x58>)
  401b20:	4a12      	ldr	r2, [pc, #72]	; (401b6c <__sinit+0x5c>)
  401b22:	681b      	ldr	r3, [r3, #0]
  401b24:	6282      	str	r2, [r0, #40]	; 0x28
  401b26:	4298      	cmp	r0, r3
  401b28:	bf04      	itt	eq
  401b2a:	2301      	moveq	r3, #1
  401b2c:	6183      	streq	r3, [r0, #24]
  401b2e:	f000 f81f 	bl	401b70 <__sfp>
  401b32:	6060      	str	r0, [r4, #4]
  401b34:	4620      	mov	r0, r4
  401b36:	f000 f81b 	bl	401b70 <__sfp>
  401b3a:	60a0      	str	r0, [r4, #8]
  401b3c:	4620      	mov	r0, r4
  401b3e:	f000 f817 	bl	401b70 <__sfp>
  401b42:	2200      	movs	r2, #0
  401b44:	60e0      	str	r0, [r4, #12]
  401b46:	2104      	movs	r1, #4
  401b48:	6860      	ldr	r0, [r4, #4]
  401b4a:	f7ff ffa7 	bl	401a9c <std.isra.0>
  401b4e:	2201      	movs	r2, #1
  401b50:	2109      	movs	r1, #9
  401b52:	68a0      	ldr	r0, [r4, #8]
  401b54:	f7ff ffa2 	bl	401a9c <std.isra.0>
  401b58:	2202      	movs	r2, #2
  401b5a:	2112      	movs	r1, #18
  401b5c:	68e0      	ldr	r0, [r4, #12]
  401b5e:	f7ff ff9d 	bl	401a9c <std.isra.0>
  401b62:	2301      	movs	r3, #1
  401b64:	61a3      	str	r3, [r4, #24]
  401b66:	bd10      	pop	{r4, pc}
  401b68:	0040201c 	.word	0x0040201c
  401b6c:	00401a91 	.word	0x00401a91

00401b70 <__sfp>:
  401b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401b72:	4b1c      	ldr	r3, [pc, #112]	; (401be4 <__sfp+0x74>)
  401b74:	681e      	ldr	r6, [r3, #0]
  401b76:	69b3      	ldr	r3, [r6, #24]
  401b78:	4607      	mov	r7, r0
  401b7a:	b913      	cbnz	r3, 401b82 <__sfp+0x12>
  401b7c:	4630      	mov	r0, r6
  401b7e:	f7ff ffc7 	bl	401b10 <__sinit>
  401b82:	3648      	adds	r6, #72	; 0x48
  401b84:	68b4      	ldr	r4, [r6, #8]
  401b86:	6873      	ldr	r3, [r6, #4]
  401b88:	3b01      	subs	r3, #1
  401b8a:	d503      	bpl.n	401b94 <__sfp+0x24>
  401b8c:	6833      	ldr	r3, [r6, #0]
  401b8e:	b133      	cbz	r3, 401b9e <__sfp+0x2e>
  401b90:	6836      	ldr	r6, [r6, #0]
  401b92:	e7f7      	b.n	401b84 <__sfp+0x14>
  401b94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  401b98:	b16d      	cbz	r5, 401bb6 <__sfp+0x46>
  401b9a:	3468      	adds	r4, #104	; 0x68
  401b9c:	e7f4      	b.n	401b88 <__sfp+0x18>
  401b9e:	2104      	movs	r1, #4
  401ba0:	4638      	mov	r0, r7
  401ba2:	f7ff ff9f 	bl	401ae4 <__sfmoreglue>
  401ba6:	6030      	str	r0, [r6, #0]
  401ba8:	2800      	cmp	r0, #0
  401baa:	d1f1      	bne.n	401b90 <__sfp+0x20>
  401bac:	230c      	movs	r3, #12
  401bae:	603b      	str	r3, [r7, #0]
  401bb0:	4604      	mov	r4, r0
  401bb2:	4620      	mov	r0, r4
  401bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401bba:	81e3      	strh	r3, [r4, #14]
  401bbc:	2301      	movs	r3, #1
  401bbe:	81a3      	strh	r3, [r4, #12]
  401bc0:	6665      	str	r5, [r4, #100]	; 0x64
  401bc2:	6025      	str	r5, [r4, #0]
  401bc4:	60a5      	str	r5, [r4, #8]
  401bc6:	6065      	str	r5, [r4, #4]
  401bc8:	6125      	str	r5, [r4, #16]
  401bca:	6165      	str	r5, [r4, #20]
  401bcc:	61a5      	str	r5, [r4, #24]
  401bce:	2208      	movs	r2, #8
  401bd0:	4629      	mov	r1, r5
  401bd2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  401bd6:	f7ff fdeb 	bl	4017b0 <memset>
  401bda:	6365      	str	r5, [r4, #52]	; 0x34
  401bdc:	63a5      	str	r5, [r4, #56]	; 0x38
  401bde:	64a5      	str	r5, [r4, #72]	; 0x48
  401be0:	64e5      	str	r5, [r4, #76]	; 0x4c
  401be2:	e7e6      	b.n	401bb2 <__sfp+0x42>
  401be4:	0040201c 	.word	0x0040201c

00401be8 <_fwalk_reent>:
  401be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401bec:	4680      	mov	r8, r0
  401bee:	4689      	mov	r9, r1
  401bf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
  401bf4:	2600      	movs	r6, #0
  401bf6:	b914      	cbnz	r4, 401bfe <_fwalk_reent+0x16>
  401bf8:	4630      	mov	r0, r6
  401bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401bfe:	68a5      	ldr	r5, [r4, #8]
  401c00:	6867      	ldr	r7, [r4, #4]
  401c02:	3f01      	subs	r7, #1
  401c04:	d501      	bpl.n	401c0a <_fwalk_reent+0x22>
  401c06:	6824      	ldr	r4, [r4, #0]
  401c08:	e7f5      	b.n	401bf6 <_fwalk_reent+0xe>
  401c0a:	89ab      	ldrh	r3, [r5, #12]
  401c0c:	2b01      	cmp	r3, #1
  401c0e:	d907      	bls.n	401c20 <_fwalk_reent+0x38>
  401c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  401c14:	3301      	adds	r3, #1
  401c16:	d003      	beq.n	401c20 <_fwalk_reent+0x38>
  401c18:	4629      	mov	r1, r5
  401c1a:	4640      	mov	r0, r8
  401c1c:	47c8      	blx	r9
  401c1e:	4306      	orrs	r6, r0
  401c20:	3568      	adds	r5, #104	; 0x68
  401c22:	e7ee      	b.n	401c02 <_fwalk_reent+0x1a>

00401c24 <__swhatbuf_r>:
  401c24:	b570      	push	{r4, r5, r6, lr}
  401c26:	460e      	mov	r6, r1
  401c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401c2c:	2900      	cmp	r1, #0
  401c2e:	b090      	sub	sp, #64	; 0x40
  401c30:	4614      	mov	r4, r2
  401c32:	461d      	mov	r5, r3
  401c34:	da07      	bge.n	401c46 <__swhatbuf_r+0x22>
  401c36:	2300      	movs	r3, #0
  401c38:	602b      	str	r3, [r5, #0]
  401c3a:	89b3      	ldrh	r3, [r6, #12]
  401c3c:	061a      	lsls	r2, r3, #24
  401c3e:	d410      	bmi.n	401c62 <__swhatbuf_r+0x3e>
  401c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401c44:	e00e      	b.n	401c64 <__swhatbuf_r+0x40>
  401c46:	aa01      	add	r2, sp, #4
  401c48:	f000 f93a 	bl	401ec0 <_fstat_r>
  401c4c:	2800      	cmp	r0, #0
  401c4e:	dbf2      	blt.n	401c36 <__swhatbuf_r+0x12>
  401c50:	9a02      	ldr	r2, [sp, #8]
  401c52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401c56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  401c5a:	425a      	negs	r2, r3
  401c5c:	415a      	adcs	r2, r3
  401c5e:	602a      	str	r2, [r5, #0]
  401c60:	e7ee      	b.n	401c40 <__swhatbuf_r+0x1c>
  401c62:	2340      	movs	r3, #64	; 0x40
  401c64:	2000      	movs	r0, #0
  401c66:	6023      	str	r3, [r4, #0]
  401c68:	b010      	add	sp, #64	; 0x40
  401c6a:	bd70      	pop	{r4, r5, r6, pc}

00401c6c <malloc>:
  401c6c:	4b02      	ldr	r3, [pc, #8]	; (401c78 <malloc+0xc>)
  401c6e:	4601      	mov	r1, r0
  401c70:	6818      	ldr	r0, [r3, #0]
  401c72:	f000 b851 	b.w	401d18 <_malloc_r>
  401c76:	bf00      	nop
  401c78:	20400024 	.word	0x20400024

00401c7c <_free_r>:
  401c7c:	b538      	push	{r3, r4, r5, lr}
  401c7e:	4605      	mov	r5, r0
  401c80:	2900      	cmp	r1, #0
  401c82:	d045      	beq.n	401d10 <_free_r+0x94>
  401c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
  401c88:	1f0c      	subs	r4, r1, #4
  401c8a:	2b00      	cmp	r3, #0
  401c8c:	bfb8      	it	lt
  401c8e:	18e4      	addlt	r4, r4, r3
  401c90:	f000 f93a 	bl	401f08 <__malloc_lock>
  401c94:	4a1f      	ldr	r2, [pc, #124]	; (401d14 <_free_r+0x98>)
  401c96:	6813      	ldr	r3, [r2, #0]
  401c98:	4610      	mov	r0, r2
  401c9a:	b933      	cbnz	r3, 401caa <_free_r+0x2e>
  401c9c:	6063      	str	r3, [r4, #4]
  401c9e:	6014      	str	r4, [r2, #0]
  401ca0:	4628      	mov	r0, r5
  401ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401ca6:	f000 b930 	b.w	401f0a <__malloc_unlock>
  401caa:	42a3      	cmp	r3, r4
  401cac:	d90c      	bls.n	401cc8 <_free_r+0x4c>
  401cae:	6821      	ldr	r1, [r4, #0]
  401cb0:	1862      	adds	r2, r4, r1
  401cb2:	4293      	cmp	r3, r2
  401cb4:	bf04      	itt	eq
  401cb6:	681a      	ldreq	r2, [r3, #0]
  401cb8:	685b      	ldreq	r3, [r3, #4]
  401cba:	6063      	str	r3, [r4, #4]
  401cbc:	bf04      	itt	eq
  401cbe:	1852      	addeq	r2, r2, r1
  401cc0:	6022      	streq	r2, [r4, #0]
  401cc2:	6004      	str	r4, [r0, #0]
  401cc4:	e7ec      	b.n	401ca0 <_free_r+0x24>
  401cc6:	4613      	mov	r3, r2
  401cc8:	685a      	ldr	r2, [r3, #4]
  401cca:	b10a      	cbz	r2, 401cd0 <_free_r+0x54>
  401ccc:	42a2      	cmp	r2, r4
  401cce:	d9fa      	bls.n	401cc6 <_free_r+0x4a>
  401cd0:	6819      	ldr	r1, [r3, #0]
  401cd2:	1858      	adds	r0, r3, r1
  401cd4:	42a0      	cmp	r0, r4
  401cd6:	d10b      	bne.n	401cf0 <_free_r+0x74>
  401cd8:	6820      	ldr	r0, [r4, #0]
  401cda:	4401      	add	r1, r0
  401cdc:	1858      	adds	r0, r3, r1
  401cde:	4282      	cmp	r2, r0
  401ce0:	6019      	str	r1, [r3, #0]
  401ce2:	d1dd      	bne.n	401ca0 <_free_r+0x24>
  401ce4:	6810      	ldr	r0, [r2, #0]
  401ce6:	6852      	ldr	r2, [r2, #4]
  401ce8:	605a      	str	r2, [r3, #4]
  401cea:	4401      	add	r1, r0
  401cec:	6019      	str	r1, [r3, #0]
  401cee:	e7d7      	b.n	401ca0 <_free_r+0x24>
  401cf0:	d902      	bls.n	401cf8 <_free_r+0x7c>
  401cf2:	230c      	movs	r3, #12
  401cf4:	602b      	str	r3, [r5, #0]
  401cf6:	e7d3      	b.n	401ca0 <_free_r+0x24>
  401cf8:	6820      	ldr	r0, [r4, #0]
  401cfa:	1821      	adds	r1, r4, r0
  401cfc:	428a      	cmp	r2, r1
  401cfe:	bf04      	itt	eq
  401d00:	6811      	ldreq	r1, [r2, #0]
  401d02:	6852      	ldreq	r2, [r2, #4]
  401d04:	6062      	str	r2, [r4, #4]
  401d06:	bf04      	itt	eq
  401d08:	1809      	addeq	r1, r1, r0
  401d0a:	6021      	streq	r1, [r4, #0]
  401d0c:	605c      	str	r4, [r3, #4]
  401d0e:	e7c7      	b.n	401ca0 <_free_r+0x24>
  401d10:	bd38      	pop	{r3, r4, r5, pc}
  401d12:	bf00      	nop
  401d14:	204000dc 	.word	0x204000dc

00401d18 <_malloc_r>:
  401d18:	b570      	push	{r4, r5, r6, lr}
  401d1a:	1ccd      	adds	r5, r1, #3
  401d1c:	f025 0503 	bic.w	r5, r5, #3
  401d20:	3508      	adds	r5, #8
  401d22:	2d0c      	cmp	r5, #12
  401d24:	bf38      	it	cc
  401d26:	250c      	movcc	r5, #12
  401d28:	2d00      	cmp	r5, #0
  401d2a:	4606      	mov	r6, r0
  401d2c:	db01      	blt.n	401d32 <_malloc_r+0x1a>
  401d2e:	42a9      	cmp	r1, r5
  401d30:	d903      	bls.n	401d3a <_malloc_r+0x22>
  401d32:	230c      	movs	r3, #12
  401d34:	6033      	str	r3, [r6, #0]
  401d36:	2000      	movs	r0, #0
  401d38:	bd70      	pop	{r4, r5, r6, pc}
  401d3a:	f000 f8e5 	bl	401f08 <__malloc_lock>
  401d3e:	4a23      	ldr	r2, [pc, #140]	; (401dcc <_malloc_r+0xb4>)
  401d40:	6814      	ldr	r4, [r2, #0]
  401d42:	4621      	mov	r1, r4
  401d44:	b991      	cbnz	r1, 401d6c <_malloc_r+0x54>
  401d46:	4c22      	ldr	r4, [pc, #136]	; (401dd0 <_malloc_r+0xb8>)
  401d48:	6823      	ldr	r3, [r4, #0]
  401d4a:	b91b      	cbnz	r3, 401d54 <_malloc_r+0x3c>
  401d4c:	4630      	mov	r0, r6
  401d4e:	f000 f841 	bl	401dd4 <_sbrk_r>
  401d52:	6020      	str	r0, [r4, #0]
  401d54:	4629      	mov	r1, r5
  401d56:	4630      	mov	r0, r6
  401d58:	f000 f83c 	bl	401dd4 <_sbrk_r>
  401d5c:	1c43      	adds	r3, r0, #1
  401d5e:	d126      	bne.n	401dae <_malloc_r+0x96>
  401d60:	230c      	movs	r3, #12
  401d62:	6033      	str	r3, [r6, #0]
  401d64:	4630      	mov	r0, r6
  401d66:	f000 f8d0 	bl	401f0a <__malloc_unlock>
  401d6a:	e7e4      	b.n	401d36 <_malloc_r+0x1e>
  401d6c:	680b      	ldr	r3, [r1, #0]
  401d6e:	1b5b      	subs	r3, r3, r5
  401d70:	d41a      	bmi.n	401da8 <_malloc_r+0x90>
  401d72:	2b0b      	cmp	r3, #11
  401d74:	d90f      	bls.n	401d96 <_malloc_r+0x7e>
  401d76:	600b      	str	r3, [r1, #0]
  401d78:	50cd      	str	r5, [r1, r3]
  401d7a:	18cc      	adds	r4, r1, r3
  401d7c:	4630      	mov	r0, r6
  401d7e:	f000 f8c4 	bl	401f0a <__malloc_unlock>
  401d82:	f104 000b 	add.w	r0, r4, #11
  401d86:	1d23      	adds	r3, r4, #4
  401d88:	f020 0007 	bic.w	r0, r0, #7
  401d8c:	1ac3      	subs	r3, r0, r3
  401d8e:	d01b      	beq.n	401dc8 <_malloc_r+0xb0>
  401d90:	425a      	negs	r2, r3
  401d92:	50e2      	str	r2, [r4, r3]
  401d94:	bd70      	pop	{r4, r5, r6, pc}
  401d96:	428c      	cmp	r4, r1
  401d98:	bf0d      	iteet	eq
  401d9a:	6863      	ldreq	r3, [r4, #4]
  401d9c:	684b      	ldrne	r3, [r1, #4]
  401d9e:	6063      	strne	r3, [r4, #4]
  401da0:	6013      	streq	r3, [r2, #0]
  401da2:	bf18      	it	ne
  401da4:	460c      	movne	r4, r1
  401da6:	e7e9      	b.n	401d7c <_malloc_r+0x64>
  401da8:	460c      	mov	r4, r1
  401daa:	6849      	ldr	r1, [r1, #4]
  401dac:	e7ca      	b.n	401d44 <_malloc_r+0x2c>
  401dae:	1cc4      	adds	r4, r0, #3
  401db0:	f024 0403 	bic.w	r4, r4, #3
  401db4:	42a0      	cmp	r0, r4
  401db6:	d005      	beq.n	401dc4 <_malloc_r+0xac>
  401db8:	1a21      	subs	r1, r4, r0
  401dba:	4630      	mov	r0, r6
  401dbc:	f000 f80a 	bl	401dd4 <_sbrk_r>
  401dc0:	3001      	adds	r0, #1
  401dc2:	d0cd      	beq.n	401d60 <_malloc_r+0x48>
  401dc4:	6025      	str	r5, [r4, #0]
  401dc6:	e7d9      	b.n	401d7c <_malloc_r+0x64>
  401dc8:	bd70      	pop	{r4, r5, r6, pc}
  401dca:	bf00      	nop
  401dcc:	204000dc 	.word	0x204000dc
  401dd0:	204000e0 	.word	0x204000e0

00401dd4 <_sbrk_r>:
  401dd4:	b538      	push	{r3, r4, r5, lr}
  401dd6:	4c06      	ldr	r4, [pc, #24]	; (401df0 <_sbrk_r+0x1c>)
  401dd8:	2300      	movs	r3, #0
  401dda:	4605      	mov	r5, r0
  401ddc:	4608      	mov	r0, r1
  401dde:	6023      	str	r3, [r4, #0]
  401de0:	f7fe fee0 	bl	400ba4 <_sbrk>
  401de4:	1c43      	adds	r3, r0, #1
  401de6:	d102      	bne.n	401dee <_sbrk_r+0x1a>
  401de8:	6823      	ldr	r3, [r4, #0]
  401dea:	b103      	cbz	r3, 401dee <_sbrk_r+0x1a>
  401dec:	602b      	str	r3, [r5, #0]
  401dee:	bd38      	pop	{r3, r4, r5, pc}
  401df0:	20400154 	.word	0x20400154

00401df4 <__sread>:
  401df4:	b510      	push	{r4, lr}
  401df6:	460c      	mov	r4, r1
  401df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401dfc:	f000 f886 	bl	401f0c <_read_r>
  401e00:	2800      	cmp	r0, #0
  401e02:	bfab      	itete	ge
  401e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  401e06:	89a3      	ldrhlt	r3, [r4, #12]
  401e08:	181b      	addge	r3, r3, r0
  401e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  401e0e:	bfac      	ite	ge
  401e10:	6563      	strge	r3, [r4, #84]	; 0x54
  401e12:	81a3      	strhlt	r3, [r4, #12]
  401e14:	bd10      	pop	{r4, pc}

00401e16 <__swrite>:
  401e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e1a:	461f      	mov	r7, r3
  401e1c:	898b      	ldrh	r3, [r1, #12]
  401e1e:	05db      	lsls	r3, r3, #23
  401e20:	4605      	mov	r5, r0
  401e22:	460c      	mov	r4, r1
  401e24:	4616      	mov	r6, r2
  401e26:	d505      	bpl.n	401e34 <__swrite+0x1e>
  401e28:	2302      	movs	r3, #2
  401e2a:	2200      	movs	r2, #0
  401e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401e30:	f000 f858 	bl	401ee4 <_lseek_r>
  401e34:	89a3      	ldrh	r3, [r4, #12]
  401e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  401e3e:	81a3      	strh	r3, [r4, #12]
  401e40:	4632      	mov	r2, r6
  401e42:	463b      	mov	r3, r7
  401e44:	4628      	mov	r0, r5
  401e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401e4a:	f000 b817 	b.w	401e7c <_write_r>

00401e4e <__sseek>:
  401e4e:	b510      	push	{r4, lr}
  401e50:	460c      	mov	r4, r1
  401e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401e56:	f000 f845 	bl	401ee4 <_lseek_r>
  401e5a:	1c43      	adds	r3, r0, #1
  401e5c:	89a3      	ldrh	r3, [r4, #12]
  401e5e:	bf15      	itete	ne
  401e60:	6560      	strne	r0, [r4, #84]	; 0x54
  401e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  401e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  401e6a:	81a3      	strheq	r3, [r4, #12]
  401e6c:	bf18      	it	ne
  401e6e:	81a3      	strhne	r3, [r4, #12]
  401e70:	bd10      	pop	{r4, pc}

00401e72 <__sclose>:
  401e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401e76:	f000 b813 	b.w	401ea0 <_close_r>
	...

00401e7c <_write_r>:
  401e7c:	b538      	push	{r3, r4, r5, lr}
  401e7e:	4c07      	ldr	r4, [pc, #28]	; (401e9c <_write_r+0x20>)
  401e80:	4605      	mov	r5, r0
  401e82:	4608      	mov	r0, r1
  401e84:	4611      	mov	r1, r2
  401e86:	2200      	movs	r2, #0
  401e88:	6022      	str	r2, [r4, #0]
  401e8a:	461a      	mov	r2, r3
  401e8c:	f7ff fc0e 	bl	4016ac <_write>
  401e90:	1c43      	adds	r3, r0, #1
  401e92:	d102      	bne.n	401e9a <_write_r+0x1e>
  401e94:	6823      	ldr	r3, [r4, #0]
  401e96:	b103      	cbz	r3, 401e9a <_write_r+0x1e>
  401e98:	602b      	str	r3, [r5, #0]
  401e9a:	bd38      	pop	{r3, r4, r5, pc}
  401e9c:	20400154 	.word	0x20400154

00401ea0 <_close_r>:
  401ea0:	b538      	push	{r3, r4, r5, lr}
  401ea2:	4c06      	ldr	r4, [pc, #24]	; (401ebc <_close_r+0x1c>)
  401ea4:	2300      	movs	r3, #0
  401ea6:	4605      	mov	r5, r0
  401ea8:	4608      	mov	r0, r1
  401eaa:	6023      	str	r3, [r4, #0]
  401eac:	f7fe fe8c 	bl	400bc8 <_close>
  401eb0:	1c43      	adds	r3, r0, #1
  401eb2:	d102      	bne.n	401eba <_close_r+0x1a>
  401eb4:	6823      	ldr	r3, [r4, #0]
  401eb6:	b103      	cbz	r3, 401eba <_close_r+0x1a>
  401eb8:	602b      	str	r3, [r5, #0]
  401eba:	bd38      	pop	{r3, r4, r5, pc}
  401ebc:	20400154 	.word	0x20400154

00401ec0 <_fstat_r>:
  401ec0:	b538      	push	{r3, r4, r5, lr}
  401ec2:	4c07      	ldr	r4, [pc, #28]	; (401ee0 <_fstat_r+0x20>)
  401ec4:	2300      	movs	r3, #0
  401ec6:	4605      	mov	r5, r0
  401ec8:	4608      	mov	r0, r1
  401eca:	4611      	mov	r1, r2
  401ecc:	6023      	str	r3, [r4, #0]
  401ece:	f7fe fe7e 	bl	400bce <_fstat>
  401ed2:	1c43      	adds	r3, r0, #1
  401ed4:	d102      	bne.n	401edc <_fstat_r+0x1c>
  401ed6:	6823      	ldr	r3, [r4, #0]
  401ed8:	b103      	cbz	r3, 401edc <_fstat_r+0x1c>
  401eda:	602b      	str	r3, [r5, #0]
  401edc:	bd38      	pop	{r3, r4, r5, pc}
  401ede:	bf00      	nop
  401ee0:	20400154 	.word	0x20400154

00401ee4 <_lseek_r>:
  401ee4:	b538      	push	{r3, r4, r5, lr}
  401ee6:	4c07      	ldr	r4, [pc, #28]	; (401f04 <_lseek_r+0x20>)
  401ee8:	4605      	mov	r5, r0
  401eea:	4608      	mov	r0, r1
  401eec:	4611      	mov	r1, r2
  401eee:	2200      	movs	r2, #0
  401ef0:	6022      	str	r2, [r4, #0]
  401ef2:	461a      	mov	r2, r3
  401ef4:	f7fe fe70 	bl	400bd8 <_lseek>
  401ef8:	1c43      	adds	r3, r0, #1
  401efa:	d102      	bne.n	401f02 <_lseek_r+0x1e>
  401efc:	6823      	ldr	r3, [r4, #0]
  401efe:	b103      	cbz	r3, 401f02 <_lseek_r+0x1e>
  401f00:	602b      	str	r3, [r5, #0]
  401f02:	bd38      	pop	{r3, r4, r5, pc}
  401f04:	20400154 	.word	0x20400154

00401f08 <__malloc_lock>:
  401f08:	4770      	bx	lr

00401f0a <__malloc_unlock>:
  401f0a:	4770      	bx	lr

00401f0c <_read_r>:
  401f0c:	b538      	push	{r3, r4, r5, lr}
  401f0e:	4c07      	ldr	r4, [pc, #28]	; (401f2c <_read_r+0x20>)
  401f10:	4605      	mov	r5, r0
  401f12:	4608      	mov	r0, r1
  401f14:	4611      	mov	r1, r2
  401f16:	2200      	movs	r2, #0
  401f18:	6022      	str	r2, [r4, #0]
  401f1a:	461a      	mov	r2, r3
  401f1c:	f7ff fbb4 	bl	401688 <_read>
  401f20:	1c43      	adds	r3, r0, #1
  401f22:	d102      	bne.n	401f2a <_read_r+0x1e>
  401f24:	6823      	ldr	r3, [r4, #0]
  401f26:	b103      	cbz	r3, 401f2a <_read_r+0x1e>
  401f28:	602b      	str	r3, [r5, #0]
  401f2a:	bd38      	pop	{r3, r4, r5, pc}
  401f2c:	20400154 	.word	0x20400154
  401f30:	682f2e2e 	.word	0x682f2e2e
  401f34:	732f6c61 	.word	0x732f6c61
  401f38:	682f6372 	.word	0x682f6372
  401f3c:	695f6c61 	.word	0x695f6c61
  401f40:	00632e6f 	.word	0x00632e6f
  401f44:	682f2e2e 	.word	0x682f2e2e
  401f48:	732f6c61 	.word	0x732f6c61
  401f4c:	682f6372 	.word	0x682f6372
  401f50:	735f6c61 	.word	0x735f6c61
  401f54:	6d5f6970 	.word	0x6d5f6970
  401f58:	7973615f 	.word	0x7973615f
  401f5c:	632e636e 	.word	0x632e636e
  401f60:	00000000 	.word	0x00000000
  401f64:	682f2e2e 	.word	0x682f2e2e
  401f68:	732f6c61 	.word	0x732f6c61
  401f6c:	682f6372 	.word	0x682f6372
  401f70:	745f6c61 	.word	0x745f6c61
  401f74:	72656d69 	.word	0x72656d69
  401f78:	0000632e 	.word	0x0000632e
  401f7c:	682f2e2e 	.word	0x682f2e2e
  401f80:	732f6c61 	.word	0x732f6c61
  401f84:	682f6372 	.word	0x682f6372
  401f88:	755f6c61 	.word	0x755f6c61
  401f8c:	74726173 	.word	0x74726173
  401f90:	6e79735f 	.word	0x6e79735f
  401f94:	00632e63 	.word	0x00632e63
  401f98:	682f2e2e 	.word	0x682f2e2e
  401f9c:	752f6c61 	.word	0x752f6c61
  401fa0:	736c6974 	.word	0x736c6974
  401fa4:	6372732f 	.word	0x6372732f
  401fa8:	6974752f 	.word	0x6974752f
  401fac:	6c5f736c 	.word	0x6c5f736c
  401fb0:	2e747369 	.word	0x2e747369
  401fb4:	00000063 	.word	0x00000063

00401fb8 <spi_regs>:
  401fb8:	00000000 80000000 00000001 04961602     ................
  401fc8:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  401fd8:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  401fe8:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..

00401ff8 <_uarts>:
  401ff8:	00000001 00000800 00000051 682f2e2e     ........Q...../h
  402008:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  402018:	0000632e                                .c..

0040201c <_global_impure_ptr>:
  40201c:	20400028                                (.@ 

00402020 <__sf_fake_stderr>:
	...

00402040 <__sf_fake_stdin>:
	...

00402060 <__sf_fake_stdout>:
	...

00402080 <_init>:
  402080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402082:	bf00      	nop
  402084:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402086:	bc08      	pop	{r3}
  402088:	469e      	mov	lr, r3
  40208a:	4770      	bx	lr

0040208c <__init_array_start>:
  40208c:	0040018d 	.word	0x0040018d

00402090 <_fini>:
  402090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402092:	bf00      	nop
  402094:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402096:	bc08      	pop	{r3}
  402098:	469e      	mov	lr, r3
  40209a:	4770      	bx	lr

0040209c <__fini_array_start>:
  40209c:	00400169 	.word	0x00400169
