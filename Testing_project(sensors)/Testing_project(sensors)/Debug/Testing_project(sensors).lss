
Testing_project(sensors).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001388  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000004c  20400000  00401388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000bcc  2040004c  004013d4  0002004c  2**2
                  ALLOC
  3 .heap         00000200  20400c18  00401fa0  0002004c  2**0
                  ALLOC
  4 .stack        00000400  20400e18  004021a0  0002004c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002007a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e6c3  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000224f  00000000  00000000  0002e796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003904  00000000  00000000  000309e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000518  00000000  00000000  000342e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000458  00000000  00000000  00034801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003c0f6  00000000  00000000  00034c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000cf1e  00000000  00000000  00070d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00145db8  00000000  00000000  0007dc6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000bd4  00000000  00000000  001c3a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 12 40 20 e5 01 40 00 e1 01 40 00 e1 01 40 00     ..@ ..@...@...@.
  400010:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40003c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40004c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40005c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40006c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40007c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40008c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40009c:	85 0f 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ac:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000bc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000cc:	2d 0d 40 00 e1 01 40 00 45 0d 40 00 e1 01 40 00     -.@...@.E.@...@.
  4000dc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ec:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000fc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40010c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ......@...@...@.
  40012c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40013c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40014c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40015c:	e1 01 40 00 e1 01 40 00 e1 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	2040004c 	.word	0x2040004c
  400184:	00000000 	.word	0x00000000
  400188:	00401388 	.word	0x00401388

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00401388 	.word	0x00401388
  4001c8:	20400050 	.word	0x20400050
  4001cc:	00401388 	.word	0x00401388
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	00400371 	.word	0x00400371

004001e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e0:	e7fe      	b.n	4001e0 <Dummy_Handler>
	...

004001e4 <Reset_Handler>:
{
  4001e4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001e6:	4b10      	ldr	r3, [pc, #64]	; (400228 <Reset_Handler+0x44>)
  4001e8:	4a10      	ldr	r2, [pc, #64]	; (40022c <Reset_Handler+0x48>)
  4001ea:	429a      	cmp	r2, r3
  4001ec:	d009      	beq.n	400202 <Reset_Handler+0x1e>
  4001ee:	4b0e      	ldr	r3, [pc, #56]	; (400228 <Reset_Handler+0x44>)
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <Reset_Handler+0x48>)
  4001f2:	e003      	b.n	4001fc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001f4:	6811      	ldr	r1, [r2, #0]
  4001f6:	6019      	str	r1, [r3, #0]
  4001f8:	3304      	adds	r3, #4
  4001fa:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001fc:	490c      	ldr	r1, [pc, #48]	; (400230 <Reset_Handler+0x4c>)
  4001fe:	428b      	cmp	r3, r1
  400200:	d3f8      	bcc.n	4001f4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400202:	4b0c      	ldr	r3, [pc, #48]	; (400234 <Reset_Handler+0x50>)
  400204:	e002      	b.n	40020c <Reset_Handler+0x28>
                *pDest++ = 0;
  400206:	2200      	movs	r2, #0
  400208:	601a      	str	r2, [r3, #0]
  40020a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40020c:	4a0a      	ldr	r2, [pc, #40]	; (400238 <Reset_Handler+0x54>)
  40020e:	4293      	cmp	r3, r2
  400210:	d3f9      	bcc.n	400206 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400212:	4a0a      	ldr	r2, [pc, #40]	; (40023c <Reset_Handler+0x58>)
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <Reset_Handler+0x5c>)
  400216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40021a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40021c:	4b09      	ldr	r3, [pc, #36]	; (400244 <Reset_Handler+0x60>)
  40021e:	4798      	blx	r3
        main();
  400220:	4b09      	ldr	r3, [pc, #36]	; (400248 <Reset_Handler+0x64>)
  400222:	4798      	blx	r3
  400224:	e7fe      	b.n	400224 <Reset_Handler+0x40>
  400226:	bf00      	nop
  400228:	20400000 	.word	0x20400000
  40022c:	00401388 	.word	0x00401388
  400230:	2040004c 	.word	0x2040004c
  400234:	2040004c 	.word	0x2040004c
  400238:	20400c18 	.word	0x20400c18
  40023c:	e000ed00 	.word	0xe000ed00
  400240:	00400000 	.word	0x00400000
  400244:	00401291 	.word	0x00401291
  400248:	00401055 	.word	0x00401055

0040024c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  40024c:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40024e:	4b08      	ldr	r3, [pc, #32]	; (400270 <TIMER_0_init+0x24>)
  400250:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400252:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400256:	d103      	bne.n	400260 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400258:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40025c:	4b04      	ldr	r3, [pc, #16]	; (400270 <TIMER_0_init+0x24>)
  40025e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400260:	4b04      	ldr	r3, [pc, #16]	; (400274 <TIMER_0_init+0x28>)
  400262:	4798      	blx	r3
  400264:	4602      	mov	r2, r0
  400266:	4904      	ldr	r1, [pc, #16]	; (400278 <TIMER_0_init+0x2c>)
  400268:	4804      	ldr	r0, [pc, #16]	; (40027c <TIMER_0_init+0x30>)
  40026a:	4b05      	ldr	r3, [pc, #20]	; (400280 <TIMER_0_init+0x34>)
  40026c:	4798      	blx	r3
  40026e:	bd08      	pop	{r3, pc}
  400270:	400e0600 	.word	0x400e0600
  400274:	00400f81 	.word	0x00400f81
  400278:	4000c000 	.word	0x4000c000
  40027c:	204003e4 	.word	0x204003e4
  400280:	0040061d 	.word	0x0040061d

00400284 <CAN_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <CAN_0_CLOCK_init+0x18>)
  400286:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40028a:	f013 0f08 	tst.w	r3, #8
  40028e:	d103      	bne.n	400298 <CAN_0_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400290:	2208      	movs	r2, #8
  400292:	4b02      	ldr	r3, [pc, #8]	; (40029c <CAN_0_CLOCK_init+0x18>)
  400294:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400298:	4770      	bx	lr
  40029a:	bf00      	nop
  40029c:	400e0600 	.word	0x400e0600

004002a0 <CAN_0_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002a0:	4b0a      	ldr	r3, [pc, #40]	; (4002cc <CAN_0_PORT_init+0x2c>)
  4002a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002a4:	f022 0208 	bic.w	r2, r2, #8
  4002a8:	671a      	str	r2, [r3, #112]	; 0x70
  4002aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002ac:	f022 0208 	bic.w	r2, r2, #8
  4002b0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002b2:	2208      	movs	r2, #8
  4002b4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002b8:	f022 0204 	bic.w	r2, r2, #4
  4002bc:	671a      	str	r2, [r3, #112]	; 0x70
  4002be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002c0:	f022 0204 	bic.w	r2, r2, #4
  4002c4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002c6:	2204      	movs	r2, #4
  4002c8:	605a      	str	r2, [r3, #4]
  4002ca:	4770      	bx	lr
  4002cc:	400e1000 	.word	0x400e1000

004002d0 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
  4002d0:	b508      	push	{r3, lr}
	CAN_0_CLOCK_init();
  4002d2:	4b04      	ldr	r3, [pc, #16]	; (4002e4 <CAN_0_init+0x14>)
  4002d4:	4798      	blx	r3
	CAN_0_PORT_init();
  4002d6:	4b04      	ldr	r3, [pc, #16]	; (4002e8 <CAN_0_init+0x18>)
  4002d8:	4798      	blx	r3
	can_async_init(&CAN_0, MCAN0);
  4002da:	4904      	ldr	r1, [pc, #16]	; (4002ec <CAN_0_init+0x1c>)
  4002dc:	4804      	ldr	r0, [pc, #16]	; (4002f0 <CAN_0_init+0x20>)
  4002de:	4b05      	ldr	r3, [pc, #20]	; (4002f4 <CAN_0_init+0x24>)
  4002e0:	4798      	blx	r3
  4002e2:	bd08      	pop	{r3, pc}
  4002e4:	00400285 	.word	0x00400285
  4002e8:	004002a1 	.word	0x004002a1
  4002ec:	40030000 	.word	0x40030000
  4002f0:	20400394 	.word	0x20400394
  4002f4:	00400409 	.word	0x00400409

004002f8 <CAN_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4002f8:	4b05      	ldr	r3, [pc, #20]	; (400310 <CAN_1_CLOCK_init+0x18>)
  4002fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  4002fe:	f013 0f20 	tst.w	r3, #32
  400302:	d103      	bne.n	40030c <CAN_1_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400304:	2220      	movs	r2, #32
  400306:	4b02      	ldr	r3, [pc, #8]	; (400310 <CAN_1_CLOCK_init+0x18>)
  400308:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40030c:	4770      	bx	lr
  40030e:	bf00      	nop
  400310:	400e0600 	.word	0x400e0600

00400314 <CAN_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400314:	4b0b      	ldr	r3, [pc, #44]	; (400344 <CAN_1_PORT_init+0x30>)
  400316:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400318:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40031c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40031e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400320:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400324:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40032a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40032c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40032e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  400332:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400334:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40033a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40033c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400340:	605a      	str	r2, [r3, #4]
  400342:	4770      	bx	lr
  400344:	400e1200 	.word	0x400e1200

00400348 <CAN_1_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_1_init(void)
{
  400348:	b508      	push	{r3, lr}
	CAN_1_CLOCK_init();
  40034a:	4b04      	ldr	r3, [pc, #16]	; (40035c <CAN_1_init+0x14>)
  40034c:	4798      	blx	r3
	CAN_1_PORT_init();
  40034e:	4b04      	ldr	r3, [pc, #16]	; (400360 <CAN_1_init+0x18>)
  400350:	4798      	blx	r3
	can_async_init(&CAN_1, MCAN1);
  400352:	4904      	ldr	r1, [pc, #16]	; (400364 <CAN_1_init+0x1c>)
  400354:	4804      	ldr	r0, [pc, #16]	; (400368 <CAN_1_init+0x20>)
  400356:	4b05      	ldr	r3, [pc, #20]	; (40036c <CAN_1_init+0x24>)
  400358:	4798      	blx	r3
  40035a:	bd08      	pop	{r3, pc}
  40035c:	004002f9 	.word	0x004002f9
  400360:	00400315 	.word	0x00400315
  400364:	40034000 	.word	0x40034000
  400368:	204003bc 	.word	0x204003bc
  40036c:	00400409 	.word	0x00400409

00400370 <system_init>:
}

void system_init(void)
{
  400370:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400372:	4b10      	ldr	r3, [pc, #64]	; (4003b4 <system_init+0x44>)
  400374:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400376:	4b10      	ldr	r3, [pc, #64]	; (4003b8 <system_init+0x48>)
  400378:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40037a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40037e:	d103      	bne.n	400388 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400380:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400384:	4b0c      	ldr	r3, [pc, #48]	; (4003b8 <system_init+0x48>)
  400386:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400388:	4a0c      	ldr	r2, [pc, #48]	; (4003bc <system_init+0x4c>)
  40038a:	6853      	ldr	r3, [r2, #4]
  40038c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400390:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_CODR = mask;
  400392:	4b0b      	ldr	r3, [pc, #44]	; (4003c0 <system_init+0x50>)
  400394:	2202      	movs	r2, #2
  400396:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400398:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40039a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40039c:	2204      	movs	r2, #4
  40039e:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4003a0:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4003a2:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(SILENT1, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SILENT1, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();
  4003a4:	4b07      	ldr	r3, [pc, #28]	; (4003c4 <system_init+0x54>)
  4003a6:	4798      	blx	r3

	CAN_0_init();
  4003a8:	4b07      	ldr	r3, [pc, #28]	; (4003c8 <system_init+0x58>)
  4003aa:	4798      	blx	r3
	CAN_1_init();
  4003ac:	4b07      	ldr	r3, [pc, #28]	; (4003cc <system_init+0x5c>)
  4003ae:	4798      	blx	r3
  4003b0:	bd08      	pop	{r3, pc}
  4003b2:	bf00      	nop
  4003b4:	004007bd 	.word	0x004007bd
  4003b8:	400e0600 	.word	0x400e0600
  4003bc:	400e1850 	.word	0x400e1850
  4003c0:	400e1600 	.word	0x400e1600
  4003c4:	0040024d 	.word	0x0040024d
  4003c8:	004002d1 	.word	0x004002d1
  4003cc:	00400349 	.word	0x00400349

004003d0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003d0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4003d4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4003d6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4003d8:	f3bf 8f5f 	dmb	sy
  4003dc:	4770      	bx	lr

004003de <atomic_leave_critical>:
  4003de:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4003e2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4003e4:	f383 8810 	msr	PRIMASK, r3
  4003e8:	4770      	bx	lr

004003ea <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
  4003ea:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
  4003ec:	69c3      	ldr	r3, [r0, #28]
  4003ee:	b103      	cbz	r3, 4003f2 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
  4003f0:	4798      	blx	r3
  4003f2:	bd08      	pop	{r3, pc}

004003f4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
  4003f4:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
  4003f6:	6a03      	ldr	r3, [r0, #32]
  4003f8:	b103      	cbz	r3, 4003fc <can_rx_done+0x8>
		descr->cb.rx_done(descr);
  4003fa:	4798      	blx	r3
  4003fc:	bd08      	pop	{r3, pc}

004003fe <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
  4003fe:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
  400400:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400402:	b103      	cbz	r3, 400406 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
  400404:	4798      	blx	r3
  400406:	bd08      	pop	{r3, pc}

00400408 <can_async_init>:
{
  400408:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40040a:	4604      	mov	r4, r0
  40040c:	460d      	mov	r5, r1
  40040e:	2800      	cmp	r0, #0
  400410:	bf18      	it	ne
  400412:	2900      	cmpne	r1, #0
  400414:	bf14      	ite	ne
  400416:	2001      	movne	r0, #1
  400418:	2000      	moveq	r0, #0
  40041a:	2241      	movs	r2, #65	; 0x41
  40041c:	4908      	ldr	r1, [pc, #32]	; (400440 <can_async_init+0x38>)
  40041e:	4b09      	ldr	r3, [pc, #36]	; (400444 <can_async_init+0x3c>)
  400420:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
  400422:	4629      	mov	r1, r5
  400424:	4620      	mov	r0, r4
  400426:	4b08      	ldr	r3, [pc, #32]	; (400448 <can_async_init+0x40>)
  400428:	4798      	blx	r3
	if (rc) {
  40042a:	4603      	mov	r3, r0
  40042c:	b928      	cbnz	r0, 40043a <can_async_init+0x32>
	descr->dev.cb.tx_done     = can_tx_done;
  40042e:	4a07      	ldr	r2, [pc, #28]	; (40044c <can_async_init+0x44>)
  400430:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
  400432:	4a07      	ldr	r2, [pc, #28]	; (400450 <can_async_init+0x48>)
  400434:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
  400436:	4a07      	ldr	r2, [pc, #28]	; (400454 <can_async_init+0x4c>)
  400438:	60e2      	str	r2, [r4, #12]
}
  40043a:	4618      	mov	r0, r3
  40043c:	bd38      	pop	{r3, r4, r5, pc}
  40043e:	bf00      	nop
  400440:	004012f0 	.word	0x004012f0
  400444:	0040073d 	.word	0x0040073d
  400448:	00400885 	.word	0x00400885
  40044c:	004003eb 	.word	0x004003eb
  400450:	004003f5 	.word	0x004003f5
  400454:	004003ff 	.word	0x004003ff

00400458 <can_async_enable>:
{
  400458:	b510      	push	{r4, lr}
	ASSERT(descr);
  40045a:	4604      	mov	r4, r0
  40045c:	225c      	movs	r2, #92	; 0x5c
  40045e:	4905      	ldr	r1, [pc, #20]	; (400474 <can_async_enable+0x1c>)
  400460:	3000      	adds	r0, #0
  400462:	bf18      	it	ne
  400464:	2001      	movne	r0, #1
  400466:	4b04      	ldr	r3, [pc, #16]	; (400478 <can_async_enable+0x20>)
  400468:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
  40046a:	4620      	mov	r0, r4
  40046c:	4b03      	ldr	r3, [pc, #12]	; (40047c <can_async_enable+0x24>)
  40046e:	4798      	blx	r3
}
  400470:	bd10      	pop	{r4, pc}
  400472:	bf00      	nop
  400474:	004012f0 	.word	0x004012f0
  400478:	0040073d 	.word	0x0040073d
  40047c:	00400a5d 	.word	0x00400a5d

00400480 <can_async_read>:
{
  400480:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && msg);
  400482:	4604      	mov	r4, r0
  400484:	460d      	mov	r5, r1
  400486:	2800      	cmp	r0, #0
  400488:	bf18      	it	ne
  40048a:	2900      	cmpne	r1, #0
  40048c:	bf14      	ite	ne
  40048e:	2001      	movne	r0, #1
  400490:	2000      	moveq	r0, #0
  400492:	226e      	movs	r2, #110	; 0x6e
  400494:	4903      	ldr	r1, [pc, #12]	; (4004a4 <can_async_read+0x24>)
  400496:	4b04      	ldr	r3, [pc, #16]	; (4004a8 <can_async_read+0x28>)
  400498:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
  40049a:	4629      	mov	r1, r5
  40049c:	4620      	mov	r0, r4
  40049e:	4b03      	ldr	r3, [pc, #12]	; (4004ac <can_async_read+0x2c>)
  4004a0:	4798      	blx	r3
}
  4004a2:	bd38      	pop	{r3, r4, r5, pc}
  4004a4:	004012f0 	.word	0x004012f0
  4004a8:	0040073d 	.word	0x0040073d
  4004ac:	00400a6d 	.word	0x00400a6d

004004b0 <can_async_write>:
{
  4004b0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && msg);
  4004b2:	4604      	mov	r4, r0
  4004b4:	460d      	mov	r5, r1
  4004b6:	2800      	cmp	r0, #0
  4004b8:	bf18      	it	ne
  4004ba:	2900      	cmpne	r1, #0
  4004bc:	bf14      	ite	ne
  4004be:	2001      	movne	r0, #1
  4004c0:	2000      	moveq	r0, #0
  4004c2:	2277      	movs	r2, #119	; 0x77
  4004c4:	4903      	ldr	r1, [pc, #12]	; (4004d4 <can_async_write+0x24>)
  4004c6:	4b04      	ldr	r3, [pc, #16]	; (4004d8 <can_async_write+0x28>)
  4004c8:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
  4004ca:	4629      	mov	r1, r5
  4004cc:	4620      	mov	r0, r4
  4004ce:	4b03      	ldr	r3, [pc, #12]	; (4004dc <can_async_write+0x2c>)
  4004d0:	4798      	blx	r3
}
  4004d2:	bd38      	pop	{r3, r4, r5, pc}
  4004d4:	004012f0 	.word	0x004012f0
  4004d8:	0040073d 	.word	0x0040073d
  4004dc:	00400b39 	.word	0x00400b39

004004e0 <can_async_register_callback>:
{
  4004e0:	b570      	push	{r4, r5, r6, lr}
  4004e2:	460c      	mov	r4, r1
  4004e4:	4616      	mov	r6, r2
	ASSERT(descr);
  4004e6:	4605      	mov	r5, r0
  4004e8:	2281      	movs	r2, #129	; 0x81
  4004ea:	490e      	ldr	r1, [pc, #56]	; (400524 <can_async_register_callback+0x44>)
  4004ec:	3000      	adds	r0, #0
  4004ee:	bf18      	it	ne
  4004f0:	2001      	movne	r0, #1
  4004f2:	4b0d      	ldr	r3, [pc, #52]	; (400528 <can_async_register_callback+0x48>)
  4004f4:	4798      	blx	r3
	switch (type) {
  4004f6:	2c01      	cmp	r4, #1
  4004f8:	d00f      	beq.n	40051a <can_async_register_callback+0x3a>
  4004fa:	b124      	cbz	r4, 400506 <can_async_register_callback+0x26>
  4004fc:	2c02      	cmp	r4, #2
  4004fe:	d00e      	beq.n	40051e <can_async_register_callback+0x3e>
		return ERR_INVALID_ARG;
  400500:	f06f 000c 	mvn.w	r0, #12
}
  400504:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
  400506:	622e      	str	r6, [r5, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
  400508:	1c32      	adds	r2, r6, #0
  40050a:	bf18      	it	ne
  40050c:	2201      	movne	r2, #1
  40050e:	4621      	mov	r1, r4
  400510:	4628      	mov	r0, r5
  400512:	4b06      	ldr	r3, [pc, #24]	; (40052c <can_async_register_callback+0x4c>)
  400514:	4798      	blx	r3
	return ERR_NONE;
  400516:	2000      	movs	r0, #0
  400518:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
  40051a:	61ee      	str	r6, [r5, #28]
		break;
  40051c:	e7f4      	b.n	400508 <can_async_register_callback+0x28>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
  40051e:	626e      	str	r6, [r5, #36]	; 0x24
		break;
  400520:	e7f2      	b.n	400508 <can_async_register_callback+0x28>
  400522:	bf00      	nop
  400524:	004012f0 	.word	0x004012f0
  400528:	0040073d 	.word	0x0040073d
  40052c:	00400c6d 	.word	0x00400c6d

00400530 <can_async_set_filter>:
{
  400530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400532:	460d      	mov	r5, r1
  400534:	4616      	mov	r6, r2
  400536:	461f      	mov	r7, r3
	ASSERT(descr);
  400538:	4604      	mov	r4, r0
  40053a:	22b8      	movs	r2, #184	; 0xb8
  40053c:	4906      	ldr	r1, [pc, #24]	; (400558 <can_async_set_filter+0x28>)
  40053e:	3000      	adds	r0, #0
  400540:	bf18      	it	ne
  400542:	2001      	movne	r0, #1
  400544:	4b05      	ldr	r3, [pc, #20]	; (40055c <can_async_set_filter+0x2c>)
  400546:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
  400548:	463b      	mov	r3, r7
  40054a:	4632      	mov	r2, r6
  40054c:	4629      	mov	r1, r5
  40054e:	4620      	mov	r0, r4
  400550:	4c03      	ldr	r4, [pc, #12]	; (400560 <can_async_set_filter+0x30>)
  400552:	47a0      	blx	r4
}
  400554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400556:	bf00      	nop
  400558:	004012f0 	.word	0x004012f0
  40055c:	0040073d 	.word	0x0040073d
  400560:	00400cb1 	.word	0x00400cb1

00400564 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400566:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400568:	b117      	cbz	r7, 400570 <timer_add_timer_task+0xc>
  40056a:	463c      	mov	r4, r7
  40056c:	2600      	movs	r6, #0
  40056e:	e00b      	b.n	400588 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400570:	4b0e      	ldr	r3, [pc, #56]	; (4005ac <timer_add_timer_task+0x48>)
  400572:	4798      	blx	r3
		return;
  400574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400576:	68a5      	ldr	r5, [r4, #8]
  400578:	442b      	add	r3, r5
  40057a:	1a9b      	subs	r3, r3, r2
  40057c:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  40057e:	688d      	ldr	r5, [r1, #8]
  400580:	42ab      	cmp	r3, r5
  400582:	d209      	bcs.n	400598 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400584:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400586:	6824      	ldr	r4, [r4, #0]
  400588:	b134      	cbz	r4, 400598 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  40058a:	6863      	ldr	r3, [r4, #4]
  40058c:	4293      	cmp	r3, r2
  40058e:	d8f2      	bhi.n	400576 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400590:	68a5      	ldr	r5, [r4, #8]
  400592:	1a9b      	subs	r3, r3, r2
  400594:	442b      	add	r3, r5
  400596:	e7f2      	b.n	40057e <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400598:	42bc      	cmp	r4, r7
  40059a:	d003      	beq.n	4005a4 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  40059c:	4630      	mov	r0, r6
  40059e:	4b04      	ldr	r3, [pc, #16]	; (4005b0 <timer_add_timer_task+0x4c>)
  4005a0:	4798      	blx	r3
  4005a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  4005a4:	4b01      	ldr	r3, [pc, #4]	; (4005ac <timer_add_timer_task+0x48>)
  4005a6:	4798      	blx	r3
  4005a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4005aa:	bf00      	nop
  4005ac:	00400759 	.word	0x00400759
  4005b0:	00400785 	.word	0x00400785

004005b4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  4005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005b6:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  4005b8:	6906      	ldr	r6, [r0, #16]
  4005ba:	3601      	adds	r6, #1
  4005bc:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  4005be:	7e03      	ldrb	r3, [r0, #24]
  4005c0:	f013 0f01 	tst.w	r3, #1
  4005c4:	d105      	bne.n	4005d2 <timer_process_counted+0x1e>
  4005c6:	7e03      	ldrb	r3, [r0, #24]
  4005c8:	f013 0f02 	tst.w	r3, #2
  4005cc:	d101      	bne.n	4005d2 <timer_process_counted+0x1e>
  4005ce:	4605      	mov	r5, r0
  4005d0:	e009      	b.n	4005e6 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  4005d2:	7e03      	ldrb	r3, [r0, #24]
  4005d4:	f043 0302 	orr.w	r3, r3, #2
  4005d8:	7603      	strb	r3, [r0, #24]
		return;
  4005da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4005dc:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4005de:	68e3      	ldr	r3, [r4, #12]
  4005e0:	4620      	mov	r0, r4
  4005e2:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4005e4:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4005e6:	b19c      	cbz	r4, 400610 <timer_process_counted+0x5c>
  4005e8:	6863      	ldr	r3, [r4, #4]
  4005ea:	1af3      	subs	r3, r6, r3
  4005ec:	68a2      	ldr	r2, [r4, #8]
  4005ee:	4293      	cmp	r3, r2
  4005f0:	d30e      	bcc.n	400610 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4005f2:	f105 0714 	add.w	r7, r5, #20
  4005f6:	4638      	mov	r0, r7
  4005f8:	4b06      	ldr	r3, [pc, #24]	; (400614 <timer_process_counted+0x60>)
  4005fa:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4005fc:	7c23      	ldrb	r3, [r4, #16]
  4005fe:	2b01      	cmp	r3, #1
  400600:	d1ec      	bne.n	4005dc <timer_process_counted+0x28>
			tmp->time_label = time;
  400602:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400604:	4632      	mov	r2, r6
  400606:	4621      	mov	r1, r4
  400608:	4638      	mov	r0, r7
  40060a:	4b03      	ldr	r3, [pc, #12]	; (400618 <timer_process_counted+0x64>)
  40060c:	4798      	blx	r3
  40060e:	e7e5      	b.n	4005dc <timer_process_counted+0x28>
  400610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400612:	bf00      	nop
  400614:	0040078d 	.word	0x0040078d
  400618:	00400565 	.word	0x00400565

0040061c <timer_init>:
{
  40061c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40061e:	4604      	mov	r4, r0
  400620:	460d      	mov	r5, r1
  400622:	2800      	cmp	r0, #0
  400624:	bf18      	it	ne
  400626:	2900      	cmpne	r1, #0
  400628:	bf14      	ite	ne
  40062a:	2001      	movne	r0, #1
  40062c:	2000      	moveq	r0, #0
  40062e:	223b      	movs	r2, #59	; 0x3b
  400630:	4905      	ldr	r1, [pc, #20]	; (400648 <timer_init+0x2c>)
  400632:	4b06      	ldr	r3, [pc, #24]	; (40064c <timer_init+0x30>)
  400634:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400636:	4629      	mov	r1, r5
  400638:	4620      	mov	r0, r4
  40063a:	4b05      	ldr	r3, [pc, #20]	; (400650 <timer_init+0x34>)
  40063c:	4798      	blx	r3
	descr->time                           = 0;
  40063e:	2000      	movs	r0, #0
  400640:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400642:	4b04      	ldr	r3, [pc, #16]	; (400654 <timer_init+0x38>)
  400644:	6023      	str	r3, [r4, #0]
}
  400646:	bd38      	pop	{r3, r4, r5, pc}
  400648:	0040130c 	.word	0x0040130c
  40064c:	0040073d 	.word	0x0040073d
  400650:	00400e99 	.word	0x00400e99
  400654:	004005b5 	.word	0x004005b5

00400658 <timer_start>:
{
  400658:	b510      	push	{r4, lr}
	ASSERT(descr);
  40065a:	4604      	mov	r4, r0
  40065c:	2253      	movs	r2, #83	; 0x53
  40065e:	4909      	ldr	r1, [pc, #36]	; (400684 <timer_start+0x2c>)
  400660:	3000      	adds	r0, #0
  400662:	bf18      	it	ne
  400664:	2001      	movne	r0, #1
  400666:	4b08      	ldr	r3, [pc, #32]	; (400688 <timer_start+0x30>)
  400668:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  40066a:	4620      	mov	r0, r4
  40066c:	4b07      	ldr	r3, [pc, #28]	; (40068c <timer_start+0x34>)
  40066e:	4798      	blx	r3
  400670:	b920      	cbnz	r0, 40067c <timer_start+0x24>
	_timer_start(&descr->device);
  400672:	4620      	mov	r0, r4
  400674:	4b06      	ldr	r3, [pc, #24]	; (400690 <timer_start+0x38>)
  400676:	4798      	blx	r3
	return ERR_NONE;
  400678:	2000      	movs	r0, #0
  40067a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  40067c:	f06f 0010 	mvn.w	r0, #16
}
  400680:	bd10      	pop	{r4, pc}
  400682:	bf00      	nop
  400684:	0040130c 	.word	0x0040130c
  400688:	0040073d 	.word	0x0040073d
  40068c:	00400f5d 	.word	0x00400f5d
  400690:	00400f55 	.word	0x00400f55

00400694 <timer_add_task>:
{
  400694:	b570      	push	{r4, r5, r6, lr}
  400696:	b082      	sub	sp, #8
	ASSERT(descr && task);
  400698:	4604      	mov	r4, r0
  40069a:	460d      	mov	r5, r1
  40069c:	2800      	cmp	r0, #0
  40069e:	bf18      	it	ne
  4006a0:	2900      	cmpne	r1, #0
  4006a2:	bf14      	ite	ne
  4006a4:	2001      	movne	r0, #1
  4006a6:	2000      	moveq	r0, #0
  4006a8:	227a      	movs	r2, #122	; 0x7a
  4006aa:	491d      	ldr	r1, [pc, #116]	; (400720 <timer_add_task+0x8c>)
  4006ac:	4b1d      	ldr	r3, [pc, #116]	; (400724 <timer_add_task+0x90>)
  4006ae:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  4006b0:	7e23      	ldrb	r3, [r4, #24]
  4006b2:	f043 0301 	orr.w	r3, r3, #1
  4006b6:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  4006b8:	f104 0614 	add.w	r6, r4, #20
  4006bc:	4629      	mov	r1, r5
  4006be:	4630      	mov	r0, r6
  4006c0:	4b19      	ldr	r3, [pc, #100]	; (400728 <timer_add_task+0x94>)
  4006c2:	4798      	blx	r3
  4006c4:	b988      	cbnz	r0, 4006ea <timer_add_task+0x56>
	task->time_label = descr->time;
  4006c6:	6923      	ldr	r3, [r4, #16]
  4006c8:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  4006ca:	6922      	ldr	r2, [r4, #16]
  4006cc:	4629      	mov	r1, r5
  4006ce:	4630      	mov	r0, r6
  4006d0:	4b16      	ldr	r3, [pc, #88]	; (40072c <timer_add_task+0x98>)
  4006d2:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4006d4:	7e23      	ldrb	r3, [r4, #24]
  4006d6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4006da:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  4006dc:	7e23      	ldrb	r3, [r4, #24]
  4006de:	f013 0f02 	tst.w	r3, #2
  4006e2:	d10e      	bne.n	400702 <timer_add_task+0x6e>
	return ERR_NONE;
  4006e4:	2000      	movs	r0, #0
}
  4006e6:	b002      	add	sp, #8
  4006e8:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4006ea:	7e23      	ldrb	r3, [r4, #24]
  4006ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4006f0:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  4006f2:	227f      	movs	r2, #127	; 0x7f
  4006f4:	490a      	ldr	r1, [pc, #40]	; (400720 <timer_add_task+0x8c>)
  4006f6:	2000      	movs	r0, #0
  4006f8:	4b0a      	ldr	r3, [pc, #40]	; (400724 <timer_add_task+0x90>)
  4006fa:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  4006fc:	f06f 0011 	mvn.w	r0, #17
  400700:	e7f1      	b.n	4006e6 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  400702:	a801      	add	r0, sp, #4
  400704:	4b0a      	ldr	r3, [pc, #40]	; (400730 <timer_add_task+0x9c>)
  400706:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  400708:	7e23      	ldrb	r3, [r4, #24]
  40070a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  40070e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  400710:	4620      	mov	r0, r4
  400712:	4b08      	ldr	r3, [pc, #32]	; (400734 <timer_add_task+0xa0>)
  400714:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  400716:	a801      	add	r0, sp, #4
  400718:	4b07      	ldr	r3, [pc, #28]	; (400738 <timer_add_task+0xa4>)
  40071a:	4798      	blx	r3
	return ERR_NONE;
  40071c:	2000      	movs	r0, #0
  40071e:	e7e2      	b.n	4006e6 <timer_add_task+0x52>
  400720:	0040130c 	.word	0x0040130c
  400724:	0040073d 	.word	0x0040073d
  400728:	00400743 	.word	0x00400743
  40072c:	00400565 	.word	0x00400565
  400730:	004003d1 	.word	0x004003d1
  400734:	00400f69 	.word	0x00400f69
  400738:	004003df 	.word	0x004003df

0040073c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  40073c:	b900      	cbnz	r0, 400740 <assert+0x4>
		__asm("BKPT #0");
  40073e:	be00      	bkpt	0x0000
  400740:	4770      	bx	lr

00400742 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400742:	6803      	ldr	r3, [r0, #0]
  400744:	b11b      	cbz	r3, 40074e <is_list_element+0xc>
		if (it == element) {
  400746:	428b      	cmp	r3, r1
  400748:	d003      	beq.n	400752 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  40074a:	681b      	ldr	r3, [r3, #0]
  40074c:	e7fa      	b.n	400744 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  40074e:	2000      	movs	r0, #0
  400750:	4770      	bx	lr
			return true;
  400752:	2001      	movs	r0, #1
}
  400754:	4770      	bx	lr
	...

00400758 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400758:	b538      	push	{r3, r4, r5, lr}
  40075a:	4604      	mov	r4, r0
  40075c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  40075e:	4b06      	ldr	r3, [pc, #24]	; (400778 <list_insert_as_head+0x20>)
  400760:	4798      	blx	r3
  400762:	f080 0001 	eor.w	r0, r0, #1
  400766:	2239      	movs	r2, #57	; 0x39
  400768:	4904      	ldr	r1, [pc, #16]	; (40077c <list_insert_as_head+0x24>)
  40076a:	b2c0      	uxtb	r0, r0
  40076c:	4b04      	ldr	r3, [pc, #16]	; (400780 <list_insert_as_head+0x28>)
  40076e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400770:	6823      	ldr	r3, [r4, #0]
  400772:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400774:	6025      	str	r5, [r4, #0]
  400776:	bd38      	pop	{r3, r4, r5, pc}
  400778:	00400743 	.word	0x00400743
  40077c:	00401324 	.word	0x00401324
  400780:	0040073d 	.word	0x0040073d

00400784 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400784:	6803      	ldr	r3, [r0, #0]
  400786:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400788:	6001      	str	r1, [r0, #0]
  40078a:	4770      	bx	lr

0040078c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  40078c:	6803      	ldr	r3, [r0, #0]
  40078e:	b11b      	cbz	r3, 400798 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400790:	681a      	ldr	r2, [r3, #0]
  400792:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400794:	4618      	mov	r0, r3
  400796:	4770      	bx	lr
	}

	return NULL;
  400798:	2000      	movs	r0, #0
}
  40079a:	4770      	bx	lr

0040079c <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  40079c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40079e:	2b00      	cmp	r3, #0
  4007a0:	db09      	blt.n	4007b6 <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007a2:	095b      	lsrs	r3, r3, #5
  4007a4:	f000 001f 	and.w	r0, r0, #31
  4007a8:	2201      	movs	r2, #1
  4007aa:	fa02 f000 	lsl.w	r0, r2, r0
  4007ae:	3340      	adds	r3, #64	; 0x40
  4007b0:	4a01      	ldr	r2, [pc, #4]	; (4007b8 <_irq_set+0x1c>)
  4007b2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  4007b6:	4770      	bx	lr
  4007b8:	e000e100 	.word	0xe000e100

004007bc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4007bc:	b500      	push	{lr}
  4007be:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4007c0:	a801      	add	r0, sp, #4
  4007c2:	4b0e      	ldr	r3, [pc, #56]	; (4007fc <_init_chip+0x40>)
  4007c4:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4007c6:	4a0e      	ldr	r2, [pc, #56]	; (400800 <_init_chip+0x44>)
  4007c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4007cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4007d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4007d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007d8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4007dc:	a801      	add	r0, sp, #4
  4007de:	4b09      	ldr	r3, [pc, #36]	; (400804 <_init_chip+0x48>)
  4007e0:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4007e2:	4a09      	ldr	r2, [pc, #36]	; (400808 <_init_chip+0x4c>)
  4007e4:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4007e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4007ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  4007ee:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  4007f0:	4b06      	ldr	r3, [pc, #24]	; (40080c <_init_chip+0x50>)
  4007f2:	4798      	blx	r3
}
  4007f4:	b003      	add	sp, #12
  4007f6:	f85d fb04 	ldr.w	pc, [sp], #4
  4007fa:	bf00      	nop
  4007fc:	004003d1 	.word	0x004003d1
  400800:	e000ed00 	.word	0xe000ed00
  400804:	004003df 	.word	0x004003df
  400808:	400e0c00 	.word	0x400e0c00
  40080c:	00400e19 	.word	0x00400e19

00400810 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  400810:	b538      	push	{r3, r4, r5, lr}
  400812:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  400814:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  400816:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  400818:	f014 0f01 	tst.w	r4, #1
  40081c:	d11a      	bne.n	400854 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  40081e:	f414 7f00 	tst.w	r4, #512	; 0x200
  400822:	d11a      	bne.n	40085a <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  400824:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  400828:	d11b      	bne.n	400862 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  40082a:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  40082e:	d11d      	bne.n	40086c <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  400830:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  400834:	d008      	beq.n	400848 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400836:	68eb      	ldr	r3, [r5, #12]
  400838:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  40083a:	6c52      	ldr	r2, [r2, #68]	; 0x44
  40083c:	f012 0f20 	tst.w	r2, #32
  400840:	d019      	beq.n	400876 <_can_irq_handler+0x66>
  400842:	2102      	movs	r1, #2
  400844:	4628      	mov	r0, r5
  400846:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  400848:	f014 0f08 	tst.w	r4, #8
  40084c:	d115      	bne.n	40087a <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  40084e:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  400850:	651c      	str	r4, [r3, #80]	; 0x50
  400852:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  400854:	6883      	ldr	r3, [r0, #8]
  400856:	4798      	blx	r3
  400858:	e7e1      	b.n	40081e <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  40085a:	686b      	ldr	r3, [r5, #4]
  40085c:	4628      	mov	r0, r5
  40085e:	4798      	blx	r3
  400860:	e7e0      	b.n	400824 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  400862:	68eb      	ldr	r3, [r5, #12]
  400864:	2103      	movs	r1, #3
  400866:	4628      	mov	r0, r5
  400868:	4798      	blx	r3
  40086a:	e7de      	b.n	40082a <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  40086c:	68eb      	ldr	r3, [r5, #12]
  40086e:	2100      	movs	r1, #0
  400870:	4628      	mov	r0, r5
  400872:	4798      	blx	r3
  400874:	e7dc      	b.n	400830 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400876:	2101      	movs	r1, #1
  400878:	e7e4      	b.n	400844 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  40087a:	68eb      	ldr	r3, [r5, #12]
  40087c:	2104      	movs	r1, #4
  40087e:	4628      	mov	r0, r5
  400880:	4798      	blx	r3
  400882:	e7e4      	b.n	40084e <_can_irq_handler+0x3e>

00400884 <_can_async_init>:
{
  400884:	b430      	push	{r4, r5}
	dev->hw = hw;
  400886:	6001      	str	r1, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_INIT;
  400888:	698b      	ldr	r3, [r1, #24]
  40088a:	f043 0301 	orr.w	r3, r3, #1
  40088e:	618b      	str	r3, [r1, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw) == 0)
  400890:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400892:	699a      	ldr	r2, [r3, #24]
  400894:	f012 0f01 	tst.w	r2, #1
  400898:	d0fa      	beq.n	400890 <_can_async_init+0xc>
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_CCE;
  40089a:	699a      	ldr	r2, [r3, #24]
  40089c:	f042 0202 	orr.w	r2, r2, #2
  4008a0:	619a      	str	r2, [r3, #24]
	if (hw == MCAN0) {
  4008a2:	4b63      	ldr	r3, [pc, #396]	; (400a30 <_can_async_init+0x1ac>)
  4008a4:	4299      	cmp	r1, r3
  4008a6:	d014      	beq.n	4008d2 <_can_async_init+0x4e>
	if (hw == MCAN1) {
  4008a8:	4b62      	ldr	r3, [pc, #392]	; (400a34 <_can_async_init+0x1b0>)
  4008aa:	4299      	cmp	r1, r3
  4008ac:	d067      	beq.n	40097e <_can_async_init+0xfa>
	hri_mcan_clear_CCCR_CCE_bit(dev->hw);
  4008ae:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_CCE;
  4008b0:	6993      	ldr	r3, [r2, #24]
  4008b2:	f023 0302 	bic.w	r3, r3, #2
  4008b6:	6193      	str	r3, [r2, #24]
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  4008b8:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  4008ba:	6993      	ldr	r3, [r2, #24]
  4008bc:	f023 0301 	bic.w	r3, r3, #1
  4008c0:	6193      	str	r3, [r2, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw)) {
  4008c2:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  4008c4:	699b      	ldr	r3, [r3, #24]
  4008c6:	f013 0f01 	tst.w	r3, #1
  4008ca:	d1fa      	bne.n	4008c2 <_can_async_init+0x3e>
}
  4008cc:	2000      	movs	r0, #0
  4008ce:	bc30      	pop	{r4, r5}
  4008d0:	4770      	bx	lr
		dev->context = (void *)&_can0_context;
  4008d2:	4b59      	ldr	r3, [pc, #356]	; (400a38 <_can_async_init+0x1b4>)
  4008d4:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
  4008d6:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  4008d8:	6993      	ldr	r3, [r2, #24]
  4008da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4008de:	6193      	str	r3, [r2, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN0_NBTP_REG);
  4008e0:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  4008e2:	4a56      	ldr	r2, [pc, #344]	; (400a3c <_can_async_init+0x1b8>)
  4008e4:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
  4008e6:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  4008e8:	f640 1233 	movw	r2, #2355	; 0x933
  4008ec:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN0_TDCR_REG);
  4008ee:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  4008f0:	f640 320b 	movw	r2, #2827	; 0xb0b
  4008f4:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | (((uint32_t)can0_rx_fifo) & 0xFFFF));
  4008f6:	6802      	ldr	r2, [r0, #0]
  4008f8:	4b51      	ldr	r3, [pc, #324]	; (400a40 <_can_async_init+0x1bc>)
  4008fa:	b29b      	uxth	r3, r3
  4008fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
}

static inline void hri_mcan_write_RXF0C_reg(const void *const hw, hri_mcan_rxf0c_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXF0C = data;
  400900:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN0_RXESC_REG);
  400904:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_RXESC_reg(const void *const hw, hri_mcan_rxesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXESC = data;
  400906:	2400      	movs	r4, #0
  400908:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN0_TXESC_REG);
  40090c:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_TXESC_reg(const void *const hw, hri_mcan_txesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXESC = data;
  40090e:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | (((uint32_t)can0_tx_fifo) & 0xFFFF));
  400912:	6802      	ldr	r2, [r0, #0]
  400914:	4b4b      	ldr	r3, [pc, #300]	; (400a44 <_can_async_init+0x1c0>)
  400916:	b29b      	uxth	r3, r3
  400918:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	((Mcan *)hw)->MCAN_TXBC = data;
  40091c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | (((uint32_t)can0_tx_event_fifo) & 0xFFFF));
  400920:	6805      	ldr	r5, [r0, #0]
  400922:	4a49      	ldr	r2, [pc, #292]	; (400a48 <_can_async_init+0x1c4>)
  400924:	b293      	uxth	r3, r2
  400926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
}

static inline void hri_mcan_write_TXEFC_reg(const void *const hw, hri_mcan_txefc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXEFC = data;
  40092a:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN0_GFC_REG);
  40092e:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  400930:	252b      	movs	r5, #43	; 0x2b
  400932:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | (((uint32_t)can0_rx_std_filter) & 0xFFFF));
  400936:	6805      	ldr	r5, [r0, #0]
  400938:	f102 0310 	add.w	r3, r2, #16
  40093c:	b29b      	uxth	r3, r3
  40093e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	((Mcan *)hw)->MCAN_SIDFC = data;
  400942:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | (((uint32_t)can0_rx_ext_filter) & 0xFFFF));
  400946:	6805      	ldr	r5, [r0, #0]
  400948:	f102 0390 	add.w	r3, r2, #144	; 0x90
  40094c:	b29b      	uxth	r3, r3
  40094e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	((Mcan *)hw)->MCAN_XIDFC = data;
  400952:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN0_XIDAM_REG);
  400956:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  400958:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		_can0_dev = dev;
  40095c:	f8c2 0190 	str.w	r0, [r2, #400]	; 0x190
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400960:	4b3a      	ldr	r3, [pc, #232]	; (400a4c <_can_async_init+0x1c8>)
  400962:	2208      	movs	r2, #8
  400964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400968:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40096c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400970:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400974:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400976:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400978:	2201      	movs	r2, #1
  40097a:	65da      	str	r2, [r3, #92]	; 0x5c
  40097c:	e794      	b.n	4008a8 <_can_async_init+0x24>
		dev->context = (void *)&_can1_context;
  40097e:	4b34      	ldr	r3, [pc, #208]	; (400a50 <_can_async_init+0x1cc>)
  400980:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
  400982:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  400984:	6993      	ldr	r3, [r2, #24]
  400986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40098a:	6193      	str	r3, [r2, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN1_NBTP_REG);
  40098c:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  40098e:	4a2b      	ldr	r2, [pc, #172]	; (400a3c <_can_async_init+0x1b8>)
  400990:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
  400992:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  400994:	f640 1233 	movw	r2, #2355	; 0x933
  400998:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN1_TDCR_REG);
  40099a:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  40099c:	f640 320b 	movw	r2, #2827	; 0xb0b
  4009a0:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | (((uint32_t)can1_rx_fifo) & 0xFFFF));
  4009a2:	6802      	ldr	r2, [r0, #0]
  4009a4:	4b2b      	ldr	r3, [pc, #172]	; (400a54 <_can_async_init+0x1d0>)
  4009a6:	b29b      	uxth	r3, r3
  4009a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	((Mcan *)hw)->MCAN_RXF0C = data;
  4009ac:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
  4009b0:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_RXESC = data;
  4009b2:	2200      	movs	r2, #0
  4009b4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
  4009b8:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TXESC = data;
  4009ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | (((uint32_t)can1_tx_fifo) & 0xFFFF));
  4009be:	6801      	ldr	r1, [r0, #0]
  4009c0:	4b25      	ldr	r3, [pc, #148]	; (400a58 <_can_async_init+0x1d4>)
  4009c2:	b29b      	uxth	r3, r3
  4009c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	((Mcan *)hw)->MCAN_TXBC = data;
  4009c8:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | (((uint32_t)can1_tx_event_fifo) & 0xFFFF));
  4009cc:	6804      	ldr	r4, [r0, #0]
  4009ce:	491e      	ldr	r1, [pc, #120]	; (400a48 <_can_async_init+0x1c4>)
  4009d0:	f501 73ca 	add.w	r3, r1, #404	; 0x194
  4009d4:	b29b      	uxth	r3, r3
  4009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_TXEFC = data;
  4009da:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
  4009de:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  4009e0:	242b      	movs	r4, #43	; 0x2b
  4009e2:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | (((uint32_t)can1_rx_std_filter) & 0xFFFF));
  4009e6:	6804      	ldr	r4, [r0, #0]
  4009e8:	f501 73d2 	add.w	r3, r1, #420	; 0x1a4
  4009ec:	b29b      	uxth	r3, r3
  4009ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	((Mcan *)hw)->MCAN_SIDFC = data;
  4009f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | (((uint32_t)can1_rx_ext_filter) & 0xFFFF));
  4009f6:	6804      	ldr	r4, [r0, #0]
  4009f8:	f501 7309 	add.w	r3, r1, #548	; 0x224
  4009fc:	b29b      	uxth	r3, r3
  4009fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	((Mcan *)hw)->MCAN_XIDFC = data;
  400a02:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
  400a06:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  400a08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		_can1_dev = dev;
  400a0c:	f8c1 0324 	str.w	r0, [r1, #804]	; 0x324
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a10:	4b0e      	ldr	r3, [pc, #56]	; (400a4c <_can_async_init+0x1c8>)
  400a12:	2220      	movs	r2, #32
  400a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400a18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a1c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a20:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a24:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400a26:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400a28:	2201      	movs	r2, #1
  400a2a:	65da      	str	r2, [r3, #92]	; 0x5c
  400a2c:	e73f      	b.n	4008ae <_can_async_init+0x2a>
  400a2e:	bf00      	nop
  400a30:	40030000 	.word	0x40030000
  400a34:	40034000 	.word	0x40034000
  400a38:	20400000 	.word	0x20400000
  400a3c:	06020a07 	.word	0x06020a07
  400a40:	20400400 	.word	0x20400400
  400a44:	20400a00 	.word	0x20400a00
  400a48:	20400068 	.word	0x20400068
  400a4c:	e000e100 	.word	0xe000e100
  400a50:	20400014 	.word	0x20400014
  400a54:	20400800 	.word	0x20400800
  400a58:	20400600 	.word	0x20400600

00400a5c <_can_async_enable>:
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  400a5c:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400a5e:	6993      	ldr	r3, [r2, #24]
  400a60:	f023 0301 	bic.w	r3, r3, #1
  400a64:	6193      	str	r3, [r2, #24]
}
  400a66:	2000      	movs	r0, #0
  400a68:	4770      	bx	lr
	...

00400a6c <_can_async_read>:
	if (!hri_mcan_read_RXF0S_F0FL_bf(dev->hw)) {
  400a6c:	6803      	ldr	r3, [r0, #0]
	return (((Mcan *)hw)->MCAN_RXF0S & MCAN_RXF0S_F0FL_Msk) >> MCAN_RXF0S_F0FL_Pos;
  400a6e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  400a72:	f012 0f7f 	tst.w	r2, #127	; 0x7f
  400a76:	d04d      	beq.n	400b14 <_can_async_read+0xa8>
{
  400a78:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a7a:	b085      	sub	sp, #20
	return (((Mcan *)hw)->MCAN_RXF0S & MCAN_RXF0S_F0GI_Msk) >> MCAN_RXF0S_F0GI_Pos;
  400a7c:	f8d3 60a4 	ldr.w	r6, [r3, #164]	; 0xa4
  400a80:	f3c6 2605 	ubfx	r6, r6, #8, #6
	if (dev->hw == MCAN0) {
  400a84:	4a26      	ldr	r2, [pc, #152]	; (400b20 <_can_async_read+0xb4>)
  400a86:	4293      	cmp	r3, r2
  400a88:	d032      	beq.n	400af0 <_can_async_read+0x84>
	struct _can_rx_fifo_entry *f = NULL;
  400a8a:	2400      	movs	r4, #0
	if (dev->hw == MCAN1) {
  400a8c:	4a25      	ldr	r2, [pc, #148]	; (400b24 <_can_async_read+0xb8>)
  400a8e:	4293      	cmp	r3, r2
  400a90:	d032      	beq.n	400af8 <_can_async_read+0x8c>
	if (f == NULL) {
  400a92:	2c00      	cmp	r4, #0
  400a94:	d041      	beq.n	400b1a <_can_async_read+0xae>
	if (f->R0.bit.XTD == 1) {
  400a96:	6823      	ldr	r3, [r4, #0]
  400a98:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400a9c:	d130      	bne.n	400b00 <_can_async_read+0x94>
		msg->fmt = CAN_FMT_STDID;
  400a9e:	2300      	movs	r3, #0
  400aa0:	734b      	strb	r3, [r1, #13]
		msg->id = f->R0.bit.ID >> 18;
  400aa2:	6823      	ldr	r3, [r4, #0]
  400aa4:	f3c3 438a 	ubfx	r3, r3, #18, #11
  400aa8:	600b      	str	r3, [r1, #0]
	if (f->R0.bit.RTR == 1) {
  400aaa:	6823      	ldr	r3, [r4, #0]
  400aac:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400ab0:	d12d      	bne.n	400b0e <_can_async_read+0xa2>
  400ab2:	460d      	mov	r5, r1
  400ab4:	4607      	mov	r7, r0
	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
  400ab6:	4b1c      	ldr	r3, [pc, #112]	; (400b28 <_can_async_read+0xbc>)
  400ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400aba:	f10d 0e10 	add.w	lr, sp, #16
  400abe:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
  400ac2:	6863      	ldr	r3, [r4, #4]
  400ac4:	f3c3 4303 	ubfx	r3, r3, #16, #4
  400ac8:	4473      	add	r3, lr
  400aca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
  400ace:	732a      	strb	r2, [r5, #12]
	memcpy(msg->data, f->data, msg->len);
  400ad0:	f104 0108 	add.w	r1, r4, #8
  400ad4:	68a8      	ldr	r0, [r5, #8]
  400ad6:	4b15      	ldr	r3, [pc, #84]	; (400b2c <_can_async_read+0xc0>)
  400ad8:	4798      	blx	r3
	hri_mcan_write_RXF0A_F0AI_bf(dev->hw, get_index);
  400ada:	683a      	ldr	r2, [r7, #0]
	tmp = ((Mcan *)hw)->MCAN_RXF0A;
  400adc:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	tmp &= ~MCAN_RXF0A_F0AI_Msk;
  400ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	tmp |= MCAN_RXF0A_F0AI(data);
  400ae4:	431e      	orrs	r6, r3
	((Mcan *)hw)->MCAN_RXF0A = tmp;
  400ae6:	f8c2 60a8 	str.w	r6, [r2, #168]	; 0xa8
	return ERR_NONE;
  400aea:	2000      	movs	r0, #0
}
  400aec:	b005      	add	sp, #20
  400aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
  400af0:	4c0f      	ldr	r4, [pc, #60]	; (400b30 <_can_async_read+0xc4>)
  400af2:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  400af6:	e7c9      	b.n	400a8c <_can_async_read+0x20>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
  400af8:	4c0e      	ldr	r4, [pc, #56]	; (400b34 <_can_async_read+0xc8>)
  400afa:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  400afe:	e7c8      	b.n	400a92 <_can_async_read+0x26>
		msg->fmt = CAN_FMT_EXTID;
  400b00:	2301      	movs	r3, #1
  400b02:	734b      	strb	r3, [r1, #13]
		msg->id  = f->R0.bit.ID;
  400b04:	6823      	ldr	r3, [r4, #0]
  400b06:	f3c3 031c 	ubfx	r3, r3, #0, #29
  400b0a:	600b      	str	r3, [r1, #0]
  400b0c:	e7cd      	b.n	400aaa <_can_async_read+0x3e>
		msg->type = CAN_TYPE_REMOTE;
  400b0e:	2301      	movs	r3, #1
  400b10:	710b      	strb	r3, [r1, #4]
  400b12:	e7ce      	b.n	400ab2 <_can_async_read+0x46>
		return ERR_NOT_FOUND;
  400b14:	f06f 0009 	mvn.w	r0, #9
  400b18:	4770      	bx	lr
		return ERR_NO_RESOURCE;
  400b1a:	f06f 001b 	mvn.w	r0, #27
  400b1e:	e7e5      	b.n	400aec <_can_async_read+0x80>
  400b20:	40030000 	.word	0x40030000
  400b24:	40034000 	.word	0x40034000
  400b28:	00401344 	.word	0x00401344
  400b2c:	004012d9 	.word	0x004012d9
  400b30:	20400400 	.word	0x20400400
  400b34:	20400800 	.word	0x20400800

00400b38 <_can_async_write>:
{
  400b38:	b538      	push	{r3, r4, r5, lr}
	if (hri_mcan_get_TXFQS_TFQF_bit(dev->hw)) {
  400b3a:	6802      	ldr	r2, [r0, #0]
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQF) > 0;
  400b3c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
  400b40:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400b44:	f040 8082 	bne.w	400c4c <_can_async_write+0x114>
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQPI_Msk) >> MCAN_TXFQS_TFQPI_Pos;
  400b48:	f8d2 50c4 	ldr.w	r5, [r2, #196]	; 0xc4
  400b4c:	f3c5 4504 	ubfx	r5, r5, #16, #5
	if (dev->hw == MCAN0) {
  400b50:	4b41      	ldr	r3, [pc, #260]	; (400c58 <_can_async_write+0x120>)
  400b52:	429a      	cmp	r2, r3
  400b54:	d034      	beq.n	400bc0 <_can_async_write+0x88>
	struct _can_tx_fifo_entry *f = NULL;
  400b56:	2300      	movs	r3, #0
	if (dev->hw == MCAN1) {
  400b58:	4c40      	ldr	r4, [pc, #256]	; (400c5c <_can_async_write+0x124>)
  400b5a:	42a2      	cmp	r2, r4
  400b5c:	d034      	beq.n	400bc8 <_can_async_write+0x90>
	if (f == NULL) {
  400b5e:	2b00      	cmp	r3, #0
  400b60:	d077      	beq.n	400c52 <_can_async_write+0x11a>
	if (msg->fmt == CAN_FMT_EXTID) {
  400b62:	7b4a      	ldrb	r2, [r1, #13]
  400b64:	2a01      	cmp	r2, #1
  400b66:	d033      	beq.n	400bd0 <_can_async_write+0x98>
		f->T0.val = msg->id << 18;
  400b68:	680a      	ldr	r2, [r1, #0]
  400b6a:	0492      	lsls	r2, r2, #18
  400b6c:	601a      	str	r2, [r3, #0]
	if (msg->len <= 8) {
  400b6e:	7b0a      	ldrb	r2, [r1, #12]
  400b70:	2a08      	cmp	r2, #8
  400b72:	d834      	bhi.n	400bde <_can_async_write+0xa6>
		f->T1.bit.DLC = msg->len;
  400b74:	685c      	ldr	r4, [r3, #4]
  400b76:	f362 4413 	bfi	r4, r2, #16, #4
  400b7a:	605c      	str	r4, [r3, #4]
  400b7c:	4604      	mov	r4, r0
	f->T1.bit.FDF = hri_mcan_get_CCCR_FDOE_bit(dev->hw);
  400b7e:	6802      	ldr	r2, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400b80:	6992      	ldr	r2, [r2, #24]
	tmp = (tmp & MCAN_CCCR_FDOE) >> MCAN_CCCR_FDOE_Pos;
  400b82:	f3c2 2200 	ubfx	r2, r2, #8, #1
  400b86:	6858      	ldr	r0, [r3, #4]
  400b88:	f362 5055 	bfi	r0, r2, #21, #1
  400b8c:	6058      	str	r0, [r3, #4]
	f->T1.bit.BRS = hri_mcan_get_CCCR_BRSE_bit(dev->hw);
  400b8e:	6822      	ldr	r2, [r4, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400b90:	6992      	ldr	r2, [r2, #24]
	tmp = (tmp & MCAN_CCCR_BRSE) >> MCAN_CCCR_BRSE_Pos;
  400b92:	f3c2 2240 	ubfx	r2, r2, #9, #1
  400b96:	6858      	ldr	r0, [r3, #4]
  400b98:	f362 5014 	bfi	r0, r2, #20, #1
  400b9c:	6058      	str	r0, [r3, #4]
	memcpy(f->data, msg->data, msg->len);
  400b9e:	7b0a      	ldrb	r2, [r1, #12]
  400ba0:	6889      	ldr	r1, [r1, #8]
  400ba2:	f103 0008 	add.w	r0, r3, #8
  400ba6:	4b2e      	ldr	r3, [pc, #184]	; (400c60 <_can_async_write+0x128>)
  400ba8:	4798      	blx	r3
	hri_mcan_write_TXBAR_reg(dev->hw, 1 << hri_mcan_read_TXFQS_TFQPI_bf(dev->hw));
  400baa:	6821      	ldr	r1, [r4, #0]
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQPI_Msk) >> MCAN_TXFQS_TFQPI_Pos;
  400bac:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
  400bb0:	f3c2 4204 	ubfx	r2, r2, #16, #5
  400bb4:	2301      	movs	r3, #1
  400bb6:	4093      	lsls	r3, r2
	((Mcan *)hw)->MCAN_TXBAR = data;
  400bb8:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
	return ERR_NONE;
  400bbc:	2000      	movs	r0, #0
  400bbe:	bd38      	pop	{r3, r4, r5, pc}
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
  400bc0:	4b28      	ldr	r3, [pc, #160]	; (400c64 <_can_async_write+0x12c>)
  400bc2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400bc6:	e7c7      	b.n	400b58 <_can_async_write+0x20>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
  400bc8:	4b27      	ldr	r3, [pc, #156]	; (400c68 <_can_async_write+0x130>)
  400bca:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400bce:	e7c6      	b.n	400b5e <_can_async_write+0x26>
		f->T0.val     = msg->id;
  400bd0:	680a      	ldr	r2, [r1, #0]
  400bd2:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
  400bd4:	681a      	ldr	r2, [r3, #0]
  400bd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400bda:	601a      	str	r2, [r3, #0]
  400bdc:	e7c7      	b.n	400b6e <_can_async_write+0x36>
	} else if (msg->len <= 12) {
  400bde:	2a0c      	cmp	r2, #12
  400be0:	d805      	bhi.n	400bee <_can_async_write+0xb6>
		f->T1.bit.DLC = 0x9;
  400be2:	685a      	ldr	r2, [r3, #4]
  400be4:	2409      	movs	r4, #9
  400be6:	f364 4213 	bfi	r2, r4, #16, #4
  400bea:	605a      	str	r2, [r3, #4]
  400bec:	e7c6      	b.n	400b7c <_can_async_write+0x44>
	} else if (msg->len <= 16) {
  400bee:	2a10      	cmp	r2, #16
  400bf0:	d805      	bhi.n	400bfe <_can_async_write+0xc6>
		f->T1.bit.DLC = 0xA;
  400bf2:	685a      	ldr	r2, [r3, #4]
  400bf4:	240a      	movs	r4, #10
  400bf6:	f364 4213 	bfi	r2, r4, #16, #4
  400bfa:	605a      	str	r2, [r3, #4]
  400bfc:	e7be      	b.n	400b7c <_can_async_write+0x44>
	} else if (msg->len <= 20) {
  400bfe:	2a14      	cmp	r2, #20
  400c00:	d805      	bhi.n	400c0e <_can_async_write+0xd6>
		f->T1.bit.DLC = 0xB;
  400c02:	685a      	ldr	r2, [r3, #4]
  400c04:	240b      	movs	r4, #11
  400c06:	f364 4213 	bfi	r2, r4, #16, #4
  400c0a:	605a      	str	r2, [r3, #4]
  400c0c:	e7b6      	b.n	400b7c <_can_async_write+0x44>
	} else if (msg->len <= 24) {
  400c0e:	2a18      	cmp	r2, #24
  400c10:	d805      	bhi.n	400c1e <_can_async_write+0xe6>
		f->T1.bit.DLC = 0xC;
  400c12:	685a      	ldr	r2, [r3, #4]
  400c14:	240c      	movs	r4, #12
  400c16:	f364 4213 	bfi	r2, r4, #16, #4
  400c1a:	605a      	str	r2, [r3, #4]
  400c1c:	e7ae      	b.n	400b7c <_can_async_write+0x44>
	} else if (msg->len <= 32) {
  400c1e:	2a20      	cmp	r2, #32
  400c20:	d805      	bhi.n	400c2e <_can_async_write+0xf6>
		f->T1.bit.DLC = 0xD;
  400c22:	685a      	ldr	r2, [r3, #4]
  400c24:	240d      	movs	r4, #13
  400c26:	f364 4213 	bfi	r2, r4, #16, #4
  400c2a:	605a      	str	r2, [r3, #4]
  400c2c:	e7a6      	b.n	400b7c <_can_async_write+0x44>
	} else if (msg->len <= 48) {
  400c2e:	2a30      	cmp	r2, #48	; 0x30
  400c30:	d805      	bhi.n	400c3e <_can_async_write+0x106>
		f->T1.bit.DLC = 0xE;
  400c32:	685a      	ldr	r2, [r3, #4]
  400c34:	240e      	movs	r4, #14
  400c36:	f364 4213 	bfi	r2, r4, #16, #4
  400c3a:	605a      	str	r2, [r3, #4]
  400c3c:	e79e      	b.n	400b7c <_can_async_write+0x44>
	} else if (msg->len <= 64) {
  400c3e:	2a40      	cmp	r2, #64	; 0x40
  400c40:	d89c      	bhi.n	400b7c <_can_async_write+0x44>
		f->T1.bit.DLC = 0xF;
  400c42:	685a      	ldr	r2, [r3, #4]
  400c44:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
  400c48:	605a      	str	r2, [r3, #4]
  400c4a:	e797      	b.n	400b7c <_can_async_write+0x44>
		return ERR_NO_RESOURCE;
  400c4c:	f06f 001b 	mvn.w	r0, #27
  400c50:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NO_RESOURCE;
  400c52:	f06f 001b 	mvn.w	r0, #27
}
  400c56:	bd38      	pop	{r3, r4, r5, pc}
  400c58:	40030000 	.word	0x40030000
  400c5c:	40034000 	.word	0x40034000
  400c60:	004012d9 	.word	0x004012d9
  400c64:	20400a00 	.word	0x20400a00
  400c68:	20400600 	.word	0x20400600

00400c6c <_can_async_set_irq_state>:
	if (type == CAN_ASYNC_RX_CB) {
  400c6c:	b121      	cbz	r1, 400c78 <_can_async_set_irq_state+0xc>
	} else if (type == CAN_ASYNC_TX_CB) {
  400c6e:	2901      	cmp	r1, #1
  400c70:	d009      	beq.n	400c86 <_can_async_set_irq_state+0x1a>
	} else if (type == CAN_ASYNC_IRQ_CB) {
  400c72:	2902      	cmp	r1, #2
  400c74:	d014      	beq.n	400ca0 <_can_async_set_irq_state+0x34>
  400c76:	4770      	bx	lr
		hri_mcan_write_IE_RF0NE_bit(dev->hw, state);
  400c78:	6801      	ldr	r1, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400c7a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~MCAN_IE_RF0NE;
  400c7c:	f023 0301 	bic.w	r3, r3, #1
	tmp |= value << MCAN_IE_RF0NE_Pos;
  400c80:	431a      	orrs	r2, r3
	((Mcan *)hw)->MCAN_IE = tmp;
  400c82:	654a      	str	r2, [r1, #84]	; 0x54
  400c84:	4770      	bx	lr
		hri_mcan_write_IE_TCE_bit(dev->hw, state);
  400c86:	6801      	ldr	r1, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400c88:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~MCAN_IE_TCE;
  400c8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmp |= value << MCAN_IE_TCE_Pos;
  400c8e:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
	((Mcan *)hw)->MCAN_IE = tmp;
  400c92:	654a      	str	r2, [r1, #84]	; 0x54
		hri_mcan_write_TXBTIE_reg(dev->hw, MCAN_TXBTIE_MASK);
  400c94:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TXBTIE = data;
  400c96:	f04f 32ff 	mov.w	r2, #4294967295
  400c9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  400c9e:	4770      	bx	lr
		ie = hri_mcan_get_IE_reg(dev->hw, MCAN_IE_RF0NE | MCAN_IE_TCE);
  400ca0:	6802      	ldr	r2, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400ca2:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
  400ca4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
  400ca8:	059b      	lsls	r3, r3, #22
  400caa:	0d9b      	lsrs	r3, r3, #22
	((Mcan *)hw)->MCAN_IE = data;
  400cac:	6553      	str	r3, [r2, #84]	; 0x54
	return;
  400cae:	e7e2      	b.n	400c76 <_can_async_set_irq_state+0xa>

00400cb0 <_can_async_set_filter>:
{
  400cb0:	b470      	push	{r4, r5, r6}
	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
  400cb2:	6984      	ldr	r4, [r0, #24]
  400cb4:	68e0      	ldr	r0, [r4, #12]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
  400cb6:	6924      	ldr	r4, [r4, #16]
  400cb8:	eb04 05c1 	add.w	r5, r4, r1, lsl #3
	if (fmt == CAN_FMT_STDID) {
  400cbc:	b9ea      	cbnz	r2, 400cfa <_can_async_set_filter+0x4a>
		if (filter == NULL) {
  400cbe:	b1cb      	cbz	r3, 400cf4 <_can_async_set_filter+0x44>
		sf->S0.val       = filter->mask;
  400cc0:	685a      	ldr	r2, [r3, #4]
  400cc2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		sf->S0.bit.SFID1 = filter->id;
  400cc6:	681a      	ldr	r2, [r3, #0]
  400cc8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400ccc:	f362 431a 	bfi	r3, r2, #16, #11
  400cd0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		sf->S0.bit.SFT   = _CAN_SFT_DUAL;
  400cd4:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400cd8:	2201      	movs	r2, #1
  400cda:	f362 739f 	bfi	r3, r2, #30, #2
  400cde:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
  400ce2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400ce6:	f362 63dd 	bfi	r3, r2, #27, #3
  400cea:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
  400cee:	2000      	movs	r0, #0
  400cf0:	bc70      	pop	{r4, r5, r6}
  400cf2:	4770      	bx	lr
			sf->S0.val = 0;
  400cf4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
			return ERR_NONE;
  400cf8:	e7f9      	b.n	400cee <_can_async_set_filter+0x3e>
	} else if (fmt == CAN_FMT_EXTID) {
  400cfa:	2a01      	cmp	r2, #1
  400cfc:	d1f7      	bne.n	400cee <_can_async_set_filter+0x3e>
		if (filter == NULL) {
  400cfe:	b18b      	cbz	r3, 400d24 <_can_async_set_filter+0x74>
		ef->F0.val      = filter->id;
  400d00:	681a      	ldr	r2, [r3, #0]
  400d02:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
  400d06:	f854 2031 	ldr.w	r2, [r4, r1, lsl #3]
  400d0a:	2001      	movs	r0, #1
  400d0c:	f360 725f 	bfi	r2, r0, #29, #3
  400d10:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
		ef->F1.val      = filter->mask;
  400d14:	685b      	ldr	r3, [r3, #4]
  400d16:	606b      	str	r3, [r5, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
  400d18:	686b      	ldr	r3, [r5, #4]
  400d1a:	2202      	movs	r2, #2
  400d1c:	f362 739f 	bfi	r3, r2, #30, #2
  400d20:	606b      	str	r3, [r5, #4]
  400d22:	e7e4      	b.n	400cee <_can_async_set_filter+0x3e>
			ef->F0.val = 0;
  400d24:	f844 3031 	str.w	r3, [r4, r1, lsl #3]
			return ERR_NONE;
  400d28:	e7e1      	b.n	400cee <_can_async_set_filter+0x3e>
	...

00400d2c <MCAN0_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN0_INT0_Handler(void)
{
  400d2c:	b508      	push	{r3, lr}
	_can_irq_handler(_can0_dev);
  400d2e:	4b03      	ldr	r3, [pc, #12]	; (400d3c <MCAN0_INT0_Handler+0x10>)
  400d30:	f8d3 0190 	ldr.w	r0, [r3, #400]	; 0x190
  400d34:	4b02      	ldr	r3, [pc, #8]	; (400d40 <MCAN0_INT0_Handler+0x14>)
  400d36:	4798      	blx	r3
  400d38:	bd08      	pop	{r3, pc}
  400d3a:	bf00      	nop
  400d3c:	20400068 	.word	0x20400068
  400d40:	00400811 	.word	0x00400811

00400d44 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  400d44:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  400d46:	4b03      	ldr	r3, [pc, #12]	; (400d54 <MCAN1_INT0_Handler+0x10>)
  400d48:	f8d3 0324 	ldr.w	r0, [r3, #804]	; 0x324
  400d4c:	4b02      	ldr	r3, [pc, #8]	; (400d58 <MCAN1_INT0_Handler+0x14>)
  400d4e:	4798      	blx	r3
  400d50:	bd08      	pop	{r3, pc}
  400d52:	bf00      	nop
  400d54:	20400068 	.word	0x20400068
  400d58:	00400811 	.word	0x00400811

00400d5c <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400d5c:	490e      	ldr	r1, [pc, #56]	; (400d98 <_pmc_init_sources+0x3c>)
  400d5e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400d60:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400d64:	4b0d      	ldr	r3, [pc, #52]	; (400d9c <_pmc_init_sources+0x40>)
  400d66:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400d68:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400d6a:	4b0b      	ldr	r3, [pc, #44]	; (400d98 <_pmc_init_sources+0x3c>)
  400d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400d6e:	f013 0f01 	tst.w	r3, #1
  400d72:	d0fa      	beq.n	400d6a <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400d74:	4b08      	ldr	r3, [pc, #32]	; (400d98 <_pmc_init_sources+0x3c>)
  400d76:	6a19      	ldr	r1, [r3, #32]
  400d78:	4a09      	ldr	r2, [pc, #36]	; (400da0 <_pmc_init_sources+0x44>)
  400d7a:	430a      	orrs	r2, r1
  400d7c:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400d7e:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400d80:	4a08      	ldr	r2, [pc, #32]	; (400da4 <_pmc_init_sources+0x48>)
  400d82:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400d84:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400d86:	4a08      	ldr	r2, [pc, #32]	; (400da8 <_pmc_init_sources+0x4c>)
  400d88:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400d8a:	4b03      	ldr	r3, [pc, #12]	; (400d98 <_pmc_init_sources+0x3c>)
  400d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400d8e:	f013 0f02 	tst.w	r3, #2
  400d92:	d0fa      	beq.n	400d8a <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400d94:	4770      	bx	lr
  400d96:	bf00      	nop
  400d98:	400e0600 	.word	0x400e0600
  400d9c:	00373e01 	.word	0x00373e01
  400da0:	01370000 	.word	0x01370000
  400da4:	f800ffff 	.word	0xf800ffff
  400da8:	20183f01 	.word	0x20183f01

00400dac <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400dac:	4a11      	ldr	r2, [pc, #68]	; (400df4 <_pmc_init_master_clock+0x48>)
  400dae:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400db4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400db6:	4b0f      	ldr	r3, [pc, #60]	; (400df4 <_pmc_init_master_clock+0x48>)
  400db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400dba:	f013 0f08 	tst.w	r3, #8
  400dbe:	d0fa      	beq.n	400db6 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400dc0:	4a0c      	ldr	r2, [pc, #48]	; (400df4 <_pmc_init_master_clock+0x48>)
  400dc2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400dcc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400dce:	4b09      	ldr	r3, [pc, #36]	; (400df4 <_pmc_init_master_clock+0x48>)
  400dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400dd2:	f013 0f08 	tst.w	r3, #8
  400dd6:	d0fa      	beq.n	400dce <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400dd8:	4a06      	ldr	r2, [pc, #24]	; (400df4 <_pmc_init_master_clock+0x48>)
  400dda:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400ddc:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400de0:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400de4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400de6:	4b03      	ldr	r3, [pc, #12]	; (400df4 <_pmc_init_master_clock+0x48>)
  400de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400dea:	f013 0f08 	tst.w	r3, #8
  400dee:	d0fa      	beq.n	400de6 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400df0:	4770      	bx	lr
  400df2:	bf00      	nop
  400df4:	400e0600 	.word	0x400e0600

00400df8 <_pmc_init_program_clock>:
}

static inline void hri_pmc_write_PCK_reg(const void *const hw, uint8_t index, hri_pmc_pck_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->PMC_PCK[index] = data;
  400df8:	2201      	movs	r2, #1
  400dfa:	4b06      	ldr	r3, [pc, #24]	; (400e14 <_pmc_init_program_clock+0x1c>)
  400dfc:	655a      	str	r2, [r3, #84]	; 0x54
	return (((Pmc *)hw)->PMC_SR & PMC_SR_PCKRDY5) > 0;
  400dfe:	4b05      	ldr	r3, [pc, #20]	; (400e14 <_pmc_init_program_clock+0x1c>)
  400e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK4);
#endif

#if (CONF_CLK_PCK5_ENABLE == 1)
	hri_pmc_write_PCK_reg(PMC, 5, PMC_PCK_CSS(CONF_CLK_GEN_PCK5_SRC) | PMC_PCK_PRES(CONF_PCK5_PRESC - 1));
	while (!hri_pmc_get_SR_PCKRDY5_bit(PMC)) {
  400e02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  400e06:	d0fa      	beq.n	400dfe <_pmc_init_program_clock+0x6>
	((Pmc *)hw)->PMC_SCER = data;
  400e08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400e0c:	4b01      	ldr	r3, [pc, #4]	; (400e14 <_pmc_init_program_clock+0x1c>)
  400e0e:	601a      	str	r2, [r3, #0]
  400e10:	4770      	bx	lr
  400e12:	bf00      	nop
  400e14:	400e0600 	.word	0x400e0600

00400e18 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400e18:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400e1a:	4b03      	ldr	r3, [pc, #12]	; (400e28 <_pmc_init+0x10>)
  400e1c:	4798      	blx	r3
	_pmc_init_master_clock();
  400e1e:	4b03      	ldr	r3, [pc, #12]	; (400e2c <_pmc_init+0x14>)
  400e20:	4798      	blx	r3
	_pmc_init_program_clock();
  400e22:	4b03      	ldr	r3, [pc, #12]	; (400e30 <_pmc_init+0x18>)
  400e24:	4798      	blx	r3
  400e26:	bd08      	pop	{r3, pc}
  400e28:	00400d5d 	.word	0x00400d5d
  400e2c:	00400dad 	.word	0x00400dad
  400e30:	00400df9 	.word	0x00400df9

00400e34 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400e34:	2300      	movs	r3, #0
  400e36:	b13b      	cbz	r3, 400e48 <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  400e38:	2000      	movs	r0, #0
  400e3a:	4770      	bx	lr
			return &(_tcs[i]);
  400e3c:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  400e40:	00a3      	lsls	r3, r4, #2
  400e42:	4608      	mov	r0, r1
  400e44:	4418      	add	r0, r3
  400e46:	e00c      	b.n	400e62 <get_cfg+0x2e>
{
  400e48:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  400e4a:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  400e4e:	008a      	lsls	r2, r1, #2
  400e50:	4905      	ldr	r1, [pc, #20]	; (400e68 <get_cfg+0x34>)
  400e52:	588a      	ldr	r2, [r1, r2]
  400e54:	4282      	cmp	r2, r0
  400e56:	d0f1      	beq.n	400e3c <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400e58:	3301      	adds	r3, #1
  400e5a:	b2db      	uxtb	r3, r3
  400e5c:	2b00      	cmp	r3, #0
  400e5e:	d0f4      	beq.n	400e4a <get_cfg+0x16>
	return NULL;
  400e60:	2000      	movs	r0, #0
}
  400e62:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e66:	4770      	bx	lr
  400e68:	20400028 	.word	0x20400028

00400e6c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  400e6c:	4b03      	ldr	r3, [pc, #12]	; (400e7c <_tc_init_irq_param+0x10>)
  400e6e:	4298      	cmp	r0, r3
  400e70:	d000      	beq.n	400e74 <_tc_init_irq_param+0x8>
  400e72:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  400e74:	4b02      	ldr	r3, [pc, #8]	; (400e80 <_tc_init_irq_param+0x14>)
  400e76:	6019      	str	r1, [r3, #0]
	}
}
  400e78:	e7fb      	b.n	400e72 <_tc_init_irq_param+0x6>
  400e7a:	bf00      	nop
  400e7c:	4000c000 	.word	0x4000c000
  400e80:	20400390 	.word	0x20400390

00400e84 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  400e84:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  400e86:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  400e88:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  400e8a:	f013 0f10 	tst.w	r3, #16
  400e8e:	d100      	bne.n	400e92 <tc_interrupt_handler+0xe>
  400e90:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  400e92:	6803      	ldr	r3, [r0, #0]
  400e94:	4798      	blx	r3
	}
}
  400e96:	e7fb      	b.n	400e90 <tc_interrupt_handler+0xc>

00400e98 <_timer_init>:
{
  400e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e9a:	4607      	mov	r7, r0
  400e9c:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  400e9e:	4608      	mov	r0, r1
  400ea0:	4b27      	ldr	r3, [pc, #156]	; (400f40 <_timer_init+0xa8>)
  400ea2:	4798      	blx	r3
  400ea4:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  400ea6:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  400ea8:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  400eaa:	2291      	movs	r2, #145	; 0x91
  400eac:	4925      	ldr	r1, [pc, #148]	; (400f44 <_timer_init+0xac>)
  400eae:	2001      	movs	r0, #1
  400eb0:	4b25      	ldr	r3, [pc, #148]	; (400f48 <_timer_init+0xb0>)
  400eb2:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  400eb4:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  400eb8:	d001      	beq.n	400ebe <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  400eba:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  400ebe:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  400ec0:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  400ec2:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  400ec4:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  400ec6:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  400ec8:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  400eca:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  400ecc:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  400ece:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  400ed0:	2310      	movs	r3, #16
  400ed2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  400ed4:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  400ed6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  400eda:	4639      	mov	r1, r7
  400edc:	4620      	mov	r0, r4
  400ede:	4b1b      	ldr	r3, [pc, #108]	; (400f4c <_timer_init+0xb4>)
  400ee0:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400ee2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400ee6:	2b00      	cmp	r3, #0
  400ee8:	db0d      	blt.n	400f06 <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400eea:	095a      	lsrs	r2, r3, #5
  400eec:	f003 031f 	and.w	r3, r3, #31
  400ef0:	2101      	movs	r1, #1
  400ef2:	fa01 f303 	lsl.w	r3, r1, r3
  400ef6:	3220      	adds	r2, #32
  400ef8:	4915      	ldr	r1, [pc, #84]	; (400f50 <_timer_init+0xb8>)
  400efa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400efe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f02:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  400f06:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400f0a:	2b00      	cmp	r3, #0
  400f0c:	db09      	blt.n	400f22 <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f0e:	095a      	lsrs	r2, r3, #5
  400f10:	f003 031f 	and.w	r3, r3, #31
  400f14:	2101      	movs	r1, #1
  400f16:	fa01 f303 	lsl.w	r3, r1, r3
  400f1a:	3260      	adds	r2, #96	; 0x60
  400f1c:	490c      	ldr	r1, [pc, #48]	; (400f50 <_timer_init+0xb8>)
  400f1e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  400f22:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400f26:	2b00      	cmp	r3, #0
  400f28:	db08      	blt.n	400f3c <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f2a:	0959      	lsrs	r1, r3, #5
  400f2c:	f003 031f 	and.w	r3, r3, #31
  400f30:	2201      	movs	r2, #1
  400f32:	fa02 f303 	lsl.w	r3, r2, r3
  400f36:	4a06      	ldr	r2, [pc, #24]	; (400f50 <_timer_init+0xb8>)
  400f38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  400f3c:	2000      	movs	r0, #0
  400f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f40:	00400e35 	.word	0x00400e35
  400f44:	00401354 	.word	0x00401354
  400f48:	0040073d 	.word	0x0040073d
  400f4c:	00400e6d 	.word	0x00400e6d
  400f50:	e000e100 	.word	0xe000e100

00400f54 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  400f54:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  400f56:	2205      	movs	r2, #5
  400f58:	601a      	str	r2, [r3, #0]
  400f5a:	4770      	bx	lr

00400f5c <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  400f5c:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  400f5e:	6a18      	ldr	r0, [r3, #32]
}
  400f60:	f3c0 4000 	ubfx	r0, r0, #16, #1
  400f64:	4770      	bx	lr
	...

00400f68 <_timer_set_irq>:
{
  400f68:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  400f6a:	68c0      	ldr	r0, [r0, #12]
  400f6c:	4b02      	ldr	r3, [pc, #8]	; (400f78 <_timer_set_irq+0x10>)
  400f6e:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  400f70:	7900      	ldrb	r0, [r0, #4]
  400f72:	4b02      	ldr	r3, [pc, #8]	; (400f7c <_timer_set_irq+0x14>)
  400f74:	4798      	blx	r3
  400f76:	bd08      	pop	{r3, pc}
  400f78:	00400e35 	.word	0x00400e35
  400f7c:	0040079d 	.word	0x0040079d

00400f80 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  400f80:	2000      	movs	r0, #0
  400f82:	4770      	bx	lr

00400f84 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  400f84:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  400f86:	4b02      	ldr	r3, [pc, #8]	; (400f90 <TC0_Handler+0xc>)
  400f88:	6818      	ldr	r0, [r3, #0]
  400f8a:	4b02      	ldr	r3, [pc, #8]	; (400f94 <TC0_Handler+0x10>)
  400f8c:	4798      	blx	r3
  400f8e:	bd08      	pop	{r3, pc}
  400f90:	20400390 	.word	0x20400390
  400f94:	00400e85 	.word	0x00400e85

00400f98 <sensors_suite1_heartbeat_callback>:
	while (1) {
	}
}

void sensors_suite1_heartbeat_callback(void)
{
  400f98:	b570      	push	{r4, r5, r6, lr}
  400f9a:	b084      	sub	sp, #16
	shift_can_message_t heartbeat_message;
	
	pod_state_struct_t data_struct;
	data_struct.state = (uint8_t)current_state; //note that current_state has to be a variable in your code
  400f9c:	4b11      	ldr	r3, [pc, #68]	; (400fe4 <sensors_suite1_heartbeat_callback+0x4c>)
  400f9e:	781b      	ldrb	r3, [r3, #0]
  400fa0:	ac04      	add	r4, sp, #16
  400fa2:	f804 3d10 	strb.w	r3, [r4, #-16]!
	
	uint8_t* buff;
	uint8_t datasize = dlc_to_data_size(sizeof(data_struct));
  400fa6:	2001      	movs	r0, #1
  400fa8:	4b0f      	ldr	r3, [pc, #60]	; (400fe8 <sensors_suite1_heartbeat_callback+0x50>)
  400faa:	4798      	blx	r3
  400fac:	b2c5      	uxtb	r5, r0
	serialize_data(&data_struct, datasize, buff);
  400fae:	2600      	movs	r6, #0
  400fb0:	4632      	mov	r2, r6
  400fb2:	4629      	mov	r1, r5
  400fb4:	4620      	mov	r0, r4
  400fb6:	4b0d      	ldr	r3, [pc, #52]	; (400fec <sensors_suite1_heartbeat_callback+0x54>)
  400fb8:	4798      	blx	r3
	
	heartbeat_message.data = buff;
  400fba:	9602      	str	r6, [sp, #8]
	heartbeat_message.id = ID_SENSOR_SUITE1_HEARTBEAT; //use correct subsystem ID. Example: ID_BMS2_HEARTBEAT (defined in shift_can.h)
  400fbc:	f240 23a7 	movw	r3, #679	; 0x2a7
  400fc0:	9301      	str	r3, [sp, #4]
	heartbeat_message.dataSize = datasize;
  400fc2:	f88d 500c 	strb.w	r5, [sp, #12]
	tmp = ((Pio *)hw)->PIO_ODSR;
  400fc6:	4a0a      	ldr	r2, [pc, #40]	; (400ff0 <sensors_suite1_heartbeat_callback+0x58>)
  400fc8:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  400fca:	f003 0304 	and.w	r3, r3, #4
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  400fce:	43d9      	mvns	r1, r3
  400fd0:	f001 0104 	and.w	r1, r1, #4
	((Pio *)hw)->PIO_SODR = mask;
  400fd4:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  400fd6:	6353      	str	r3, [r2, #52]	; 0x34
	
	gpio_toggle_pin_level(LED_A);
	
	send_message_module_0(&heartbeat_message); //sent on high-pri bus
  400fd8:	a801      	add	r0, sp, #4
  400fda:	4b06      	ldr	r3, [pc, #24]	; (400ff4 <sensors_suite1_heartbeat_callback+0x5c>)
  400fdc:	4798      	blx	r3
}
  400fde:	b004      	add	sp, #16
  400fe0:	bd70      	pop	{r4, r5, r6, pc}
  400fe2:	bf00      	nop
  400fe4:	20400c00 	.word	0x20400c00
  400fe8:	00401125 	.word	0x00401125
  400fec:	00401155 	.word	0x00401155
  400ff0:	400e1200 	.word	0x400e1200
  400ff4:	00401211 	.word	0x00401211

00400ff8 <start_heartbeat>:

void start_heartbeat(uint16_t heartbeat_interval)
{
  400ff8:	b508      	push	{r3, lr}
	TIMER_0_sensors_suite1_heartbeat.interval = heartbeat_interval; //naming example: TIMER_0_telemetry_heartbeat
  400ffa:	4905      	ldr	r1, [pc, #20]	; (401010 <start_heartbeat+0x18>)
  400ffc:	6088      	str	r0, [r1, #8]
	TIMER_0_sensors_suite1_heartbeat.mode = TIMER_TASK_REPEAT;
  400ffe:	2301      	movs	r3, #1
  401000:	740b      	strb	r3, [r1, #16]
	TIMER_0_sensors_suite1_heartbeat.cb = sensors_suite1_heartbeat_callback; //the name of the callback-function
  401002:	4b04      	ldr	r3, [pc, #16]	; (401014 <start_heartbeat+0x1c>)
  401004:	60cb      	str	r3, [r1, #12]
	timer_add_task(&TIMER_0, &TIMER_0_sensors_suite1_heartbeat);
  401006:	4804      	ldr	r0, [pc, #16]	; (401018 <start_heartbeat+0x20>)
  401008:	4b04      	ldr	r3, [pc, #16]	; (40101c <start_heartbeat+0x24>)
  40100a:	4798      	blx	r3
  40100c:	bd08      	pop	{r3, pc}
  40100e:	bf00      	nop
  401010:	20400c04 	.word	0x20400c04
  401014:	00400f99 	.word	0x00400f99
  401018:	204003e4 	.word	0x204003e4
  40101c:	00400695 	.word	0x00400695

00401020 <subsystem_timer_setup>:
}

void subsystem_timer_setup()
{
  401020:	b508      	push	{r3, lr}
	/*Some timer setup code here*/
	
	start_heartbeat(HEARTBEAT_INTERVAL);
  401022:	200a      	movs	r0, #10
  401024:	4b02      	ldr	r3, [pc, #8]	; (401030 <subsystem_timer_setup+0x10>)
  401026:	4798      	blx	r3
	
	/*Some more timer setup code here*/
	
	timer_start(&TIMER_0); //NOTE: this is the last line in the function, as it should be called after all other timer-configuration is done
  401028:	4802      	ldr	r0, [pc, #8]	; (401034 <subsystem_timer_setup+0x14>)
  40102a:	4b03      	ldr	r3, [pc, #12]	; (401038 <subsystem_timer_setup+0x18>)
  40102c:	4798      	blx	r3
  40102e:	bd08      	pop	{r3, pc}
  401030:	00400ff9 	.word	0x00400ff9
  401034:	204003e4 	.word	0x204003e4
  401038:	00400659 	.word	0x00400659

0040103c <subsystem_setup>:
}

void subsystem_setup()
{
  40103c:	b508      	push	{r3, lr}
	/*Some setup-code here*/
		
	subsystem_timer_setup();
  40103e:	4b03      	ldr	r3, [pc, #12]	; (40104c <subsystem_setup+0x10>)
  401040:	4798      	blx	r3
	current_state = INITIALIZING_LV;
  401042:	2200      	movs	r2, #0
  401044:	4b02      	ldr	r3, [pc, #8]	; (401050 <subsystem_setup+0x14>)
  401046:	701a      	strb	r2, [r3, #0]
  401048:	bd08      	pop	{r3, pc}
  40104a:	bf00      	nop
  40104c:	00401021 	.word	0x00401021
  401050:	20400c00 	.word	0x20400c00

00401054 <main>:
{
  401054:	b508      	push	{r3, lr}
	atmel_start_init();
  401056:	4b07      	ldr	r3, [pc, #28]	; (401074 <main+0x20>)
  401058:	4798      	blx	r3
	init_can_module();
  40105a:	4b07      	ldr	r3, [pc, #28]	; (401078 <main+0x24>)
  40105c:	4798      	blx	r3
	subsystem_setup();
  40105e:	4b07      	ldr	r3, [pc, #28]	; (40107c <main+0x28>)
  401060:	4798      	blx	r3
	((Pio *)hw)->PIO_OER = mask;
  401062:	4b07      	ldr	r3, [pc, #28]	; (401080 <main+0x2c>)
  401064:	2204      	movs	r2, #4
  401066:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  401068:	631a      	str	r2, [r3, #48]	; 0x30
	add_single_filter_module_0(ID_CHANGE_POD_STATE, 0);
  40106a:	2100      	movs	r1, #0
  40106c:	20ce      	movs	r0, #206	; 0xce
  40106e:	4b05      	ldr	r3, [pc, #20]	; (401084 <main+0x30>)
  401070:	4798      	blx	r3
  401072:	e7fe      	b.n	401072 <main+0x1e>
  401074:	004001d5 	.word	0x004001d5
  401078:	00401169 	.word	0x00401169
  40107c:	0040103d 	.word	0x0040103d
  401080:	400e1200 	.word	0x400e1200
  401084:	0040125d 	.word	0x0040125d

00401088 <message_received_CAN0>:
	/*Some more setup-code here*/
}

void message_received_CAN0(shift_can_message_t message)
{
  401088:	b084      	sub	sp, #16
  40108a:	ab04      	add	r3, sp, #16
  40108c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	uint32_t msg_id = message.id;
  401090:	9b01      	ldr	r3, [sp, #4]
	pod_state_struct_t* pod_state_struct_ptr;

	switch (msg_id)
  401092:	2bce      	cmp	r3, #206	; 0xce
  401094:	d103      	bne.n	40109e <message_received_CAN0+0x16>
	{
		case ID_CHANGE_POD_STATE:
			pod_state_struct_ptr = (pod_state_struct_t*) message.data;
  401096:	9b02      	ldr	r3, [sp, #8]
			current_state = pod_state_struct_ptr->state;
  401098:	781a      	ldrb	r2, [r3, #0]
  40109a:	4b02      	ldr	r3, [pc, #8]	; (4010a4 <message_received_CAN0+0x1c>)
  40109c:	701a      	strb	r2, [r3, #0]
			break;
		default:
		/* Your code here */
		break;
	}
}
  40109e:	b004      	add	sp, #16
  4010a0:	4770      	bx	lr
  4010a2:	bf00      	nop
  4010a4:	20400c00 	.word	0x20400c00

004010a8 <message_received_CAN1>:


void message_received_CAN1(shift_can_message_t message)
{
  4010a8:	b084      	sub	sp, #16
  4010aa:	ab04      	add	r3, sp, #16
  4010ac:	e903 0007 	stmdb	r3, {r0, r1, r2}
	
  4010b0:	b004      	add	sp, #16
  4010b2:	4770      	bx	lr

004010b4 <CAN0_RX_CALLBACK>:
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
	}
}

void CAN0_RX_CALLBACK(struct can_async_descriptor *const descr)
{
  4010b4:	b500      	push	{lr}
  4010b6:	b099      	sub	sp, #100	; 0x64
	struct can_message msg;
	uint8_t data[64];
	msg.data = data;
  4010b8:	ab04      	add	r3, sp, #16
  4010ba:	9316      	str	r3, [sp, #88]	; 0x58
	can_async_read(descr, &msg);
  4010bc:	a914      	add	r1, sp, #80	; 0x50
  4010be:	4b09      	ldr	r3, [pc, #36]	; (4010e4 <CAN0_RX_CALLBACK+0x30>)
  4010c0:	4798      	blx	r3
	
	shift_can_message_t message;
	message.data = msg.data;
  4010c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4010c4:	9302      	str	r3, [sp, #8]
	message.dataSize = msg.len;
  4010c6:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
  4010ca:	f88d 300c 	strb.w	r3, [sp, #12]
	message.id = msg.id;
  4010ce:	ab18      	add	r3, sp, #96	; 0x60
  4010d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4010d2:	f843 2d5c 	str.w	r2, [r3, #-92]!
	message_received_CAN0(message);
  4010d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4010da:	4b03      	ldr	r3, [pc, #12]	; (4010e8 <CAN0_RX_CALLBACK+0x34>)
  4010dc:	4798      	blx	r3
}
  4010de:	b019      	add	sp, #100	; 0x64
  4010e0:	f85d fb04 	ldr.w	pc, [sp], #4
  4010e4:	00400481 	.word	0x00400481
  4010e8:	00401089 	.word	0x00401089

004010ec <CAN1_RX_CALLBACK>:

void CAN1_RX_CALLBACK(struct can_async_descriptor *const descr)
{
  4010ec:	b500      	push	{lr}
  4010ee:	b099      	sub	sp, #100	; 0x64
	struct can_message msg;
	uint8_t data[64];
	msg.data = data;
  4010f0:	ab04      	add	r3, sp, #16
  4010f2:	9316      	str	r3, [sp, #88]	; 0x58
	can_async_read(descr, &msg);
  4010f4:	a914      	add	r1, sp, #80	; 0x50
  4010f6:	4b09      	ldr	r3, [pc, #36]	; (40111c <CAN1_RX_CALLBACK+0x30>)
  4010f8:	4798      	blx	r3
	
	shift_can_message_t message;
	message.data = msg.data;
  4010fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4010fc:	9302      	str	r3, [sp, #8]
	message.dataSize = msg.len;
  4010fe:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
  401102:	f88d 300c 	strb.w	r3, [sp, #12]
	message.id = msg.id;
  401106:	ab18      	add	r3, sp, #96	; 0x60
  401108:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40110a:	f843 2d5c 	str.w	r2, [r3, #-92]!
	message_received_CAN1(message);
  40110e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  401112:	4b03      	ldr	r3, [pc, #12]	; (401120 <CAN1_RX_CALLBACK+0x34>)
  401114:	4798      	blx	r3
}
  401116:	b019      	add	sp, #100	; 0x64
  401118:	f85d fb04 	ldr.w	pc, [sp], #4
  40111c:	00400481 	.word	0x00400481
  401120:	004010a9 	.word	0x004010a9

00401124 <dlc_to_data_size>:
	switch(dlc)
  401124:	f1a0 0309 	sub.w	r3, r0, #9
  401128:	2b06      	cmp	r3, #6
  40112a:	d812      	bhi.n	401152 <dlc_to_data_size+0x2e>
  40112c:	e8df f003 	tbb	[pc, r3]
  401130:	08061004 	.word	0x08061004
  401134:	0c0a      	.short	0x0c0a
  401136:	0e          	.byte	0x0e
  401137:	00          	.byte	0x00
			return 12;
  401138:	200c      	movs	r0, #12
  40113a:	4770      	bx	lr
			return 20;
  40113c:	2014      	movs	r0, #20
  40113e:	4770      	bx	lr
			return 24;
  401140:	2018      	movs	r0, #24
  401142:	4770      	bx	lr
			return 32;
  401144:	2020      	movs	r0, #32
  401146:	4770      	bx	lr
			return 48;
  401148:	2030      	movs	r0, #48	; 0x30
  40114a:	4770      	bx	lr
			return 64;
  40114c:	2040      	movs	r0, #64	; 0x40
  40114e:	4770      	bx	lr
			return 16;
  401150:	2010      	movs	r0, #16
}
  401152:	4770      	bx	lr

00401154 <serialize_data>:
{
  401154:	b508      	push	{r3, lr}
  401156:	4613      	mov	r3, r2
	memcpy(buffer, data_struct, data_size);
  401158:	460a      	mov	r2, r1
  40115a:	4601      	mov	r1, r0
  40115c:	4618      	mov	r0, r3
  40115e:	4b01      	ldr	r3, [pc, #4]	; (401164 <serialize_data+0x10>)
  401160:	4798      	blx	r3
  401162:	bd08      	pop	{r3, pc}
  401164:	004012d9 	.word	0x004012d9

00401168 <init_can_module>:
{		
  401168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	can_async_init(&module_0, MCAN0);
  40116a:	4d10      	ldr	r5, [pc, #64]	; (4011ac <init_can_module+0x44>)
  40116c:	4910      	ldr	r1, [pc, #64]	; (4011b0 <init_can_module+0x48>)
  40116e:	4628      	mov	r0, r5
  401170:	4e10      	ldr	r6, [pc, #64]	; (4011b4 <init_can_module+0x4c>)
  401172:	47b0      	blx	r6
	can_async_init(&module_1, MCAN1);
  401174:	4c10      	ldr	r4, [pc, #64]	; (4011b8 <init_can_module+0x50>)
  401176:	4911      	ldr	r1, [pc, #68]	; (4011bc <init_can_module+0x54>)
  401178:	4620      	mov	r0, r4
  40117a:	47b0      	blx	r6
	can_async_register_callback(&module_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN0_RX_CALLBACK);
  40117c:	4a10      	ldr	r2, [pc, #64]	; (4011c0 <init_can_module+0x58>)
  40117e:	2100      	movs	r1, #0
  401180:	4628      	mov	r0, r5
  401182:	4e10      	ldr	r6, [pc, #64]	; (4011c4 <init_can_module+0x5c>)
  401184:	47b0      	blx	r6
	can_async_register_callback(&module_1, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN1_RX_CALLBACK);
  401186:	4a10      	ldr	r2, [pc, #64]	; (4011c8 <init_can_module+0x60>)
  401188:	2100      	movs	r1, #0
  40118a:	4620      	mov	r0, r4
  40118c:	47b0      	blx	r6
	can_async_register_callback(&module_0, CAN_ASYNC_IRQ_CB, (FUNC_PTR)ERROR_CALLBACK);
  40118e:	4f0f      	ldr	r7, [pc, #60]	; (4011cc <init_can_module+0x64>)
  401190:	463a      	mov	r2, r7
  401192:	2102      	movs	r1, #2
  401194:	4628      	mov	r0, r5
  401196:	47b0      	blx	r6
	can_async_register_callback(&module_1, CAN_ASYNC_IRQ_CB, (FUNC_PTR)ERROR_CALLBACK);
  401198:	463a      	mov	r2, r7
  40119a:	2102      	movs	r1, #2
  40119c:	4620      	mov	r0, r4
  40119e:	47b0      	blx	r6
	can_async_enable(&module_0);
  4011a0:	4628      	mov	r0, r5
  4011a2:	4d0b      	ldr	r5, [pc, #44]	; (4011d0 <init_can_module+0x68>)
  4011a4:	47a8      	blx	r5
	can_async_enable(&module_1);
  4011a6:	4620      	mov	r0, r4
  4011a8:	47a8      	blx	r5
  4011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011ac:	20400394 	.word	0x20400394
  4011b0:	40030000 	.word	0x40030000
  4011b4:	00400409 	.word	0x00400409
  4011b8:	204003bc 	.word	0x204003bc
  4011bc:	40034000 	.word	0x40034000
  4011c0:	004010b5 	.word	0x004010b5
  4011c4:	004004e1 	.word	0x004004e1
  4011c8:	004010ed 	.word	0x004010ed
  4011cc:	004011d5 	.word	0x004011d5
  4011d0:	00400459 	.word	0x00400459

004011d4 <ERROR_CALLBACK>:

void ERROR_CALLBACK(struct can_async_descriptor *const descr)
{
  4011d4:	b508      	push	{r3, lr}
	init_can_module();
  4011d6:	4b01      	ldr	r3, [pc, #4]	; (4011dc <ERROR_CALLBACK+0x8>)
  4011d8:	4798      	blx	r3
  4011da:	bd08      	pop	{r3, pc}
  4011dc:	00401169 	.word	0x00401169

004011e0 <checkMessage>:
	uint32_t id = message->id;
  4011e0:	6802      	ldr	r2, [r0, #0]
	uint8_t* data = message->data;
  4011e2:	6841      	ldr	r1, [r0, #4]
	uint8_t dataSize = message->dataSize;
  4011e4:	7a03      	ldrb	r3, [r0, #8]
	if(id && data && dataSize && dataSize <= 64 && id < 0x7FF)
  4011e6:	2a00      	cmp	r2, #0
  4011e8:	bf18      	it	ne
  4011ea:	2900      	cmpne	r1, #0
  4011ec:	d009      	beq.n	401202 <checkMessage+0x22>
  4011ee:	3b01      	subs	r3, #1
  4011f0:	b2db      	uxtb	r3, r3
  4011f2:	2b3f      	cmp	r3, #63	; 0x3f
  4011f4:	d807      	bhi.n	401206 <checkMessage+0x26>
  4011f6:	f240 73fe 	movw	r3, #2046	; 0x7fe
  4011fa:	429a      	cmp	r2, r3
  4011fc:	d905      	bls.n	40120a <checkMessage+0x2a>
	return 0;
  4011fe:	2000      	movs	r0, #0
  401200:	4770      	bx	lr
  401202:	2000      	movs	r0, #0
  401204:	4770      	bx	lr
  401206:	2000      	movs	r0, #0
  401208:	4770      	bx	lr
		return 1;
  40120a:	2001      	movs	r0, #1
}
  40120c:	4770      	bx	lr
	...

00401210 <send_message_module_0>:
{
  401210:	b510      	push	{r4, lr}
  401212:	b084      	sub	sp, #16
  401214:	4604      	mov	r4, r0
	if (checkMessage(message))
  401216:	4b0b      	ldr	r3, [pc, #44]	; (401244 <send_message_module_0+0x34>)
  401218:	4798      	blx	r3
  40121a:	b908      	cbnz	r0, 401220 <send_message_module_0+0x10>
}
  40121c:	b004      	add	sp, #16
  40121e:	bd10      	pop	{r4, pc}
		msg.id = message->id;
  401220:	6823      	ldr	r3, [r4, #0]
  401222:	9300      	str	r3, [sp, #0]
		msg.type = CAN_TYPE_DATA;
  401224:	2300      	movs	r3, #0
  401226:	f88d 3004 	strb.w	r3, [sp, #4]
		msg.data = message->data;
  40122a:	6862      	ldr	r2, [r4, #4]
  40122c:	9202      	str	r2, [sp, #8]
		msg.len = message->dataSize;
  40122e:	7a22      	ldrb	r2, [r4, #8]
  401230:	f88d 200c 	strb.w	r2, [sp, #12]
		msg.fmt  = CAN_FMT_STDID;
  401234:	f88d 300d 	strb.w	r3, [sp, #13]
		can_async_write(&module_0, &msg);
  401238:	4669      	mov	r1, sp
  40123a:	4803      	ldr	r0, [pc, #12]	; (401248 <send_message_module_0+0x38>)
  40123c:	4b03      	ldr	r3, [pc, #12]	; (40124c <send_message_module_0+0x3c>)
  40123e:	4798      	blx	r3
}
  401240:	e7ec      	b.n	40121c <send_message_module_0+0xc>
  401242:	bf00      	nop
  401244:	004011e1 	.word	0x004011e1
  401248:	20400394 	.word	0x20400394
  40124c:	004004b1 	.word	0x004004b1

00401250 <checkIndex>:
	if (index < 64)
  401250:	283f      	cmp	r0, #63	; 0x3f
  401252:	d901      	bls.n	401258 <checkIndex+0x8>
	return 0;
  401254:	2000      	movs	r0, #0
}
  401256:	4770      	bx	lr
		return 1;
  401258:	2001      	movs	r0, #1
  40125a:	4770      	bx	lr

0040125c <add_single_filter_module_0>:
{
  40125c:	b530      	push	{r4, r5, lr}
  40125e:	b083      	sub	sp, #12
  401260:	4605      	mov	r5, r0
  401262:	460c      	mov	r4, r1
	if(checkIndex(index))
  401264:	4608      	mov	r0, r1
  401266:	4b07      	ldr	r3, [pc, #28]	; (401284 <add_single_filter_module_0+0x28>)
  401268:	4798      	blx	r3
  40126a:	b908      	cbnz	r0, 401270 <add_single_filter_module_0+0x14>
}
  40126c:	b003      	add	sp, #12
  40126e:	bd30      	pop	{r4, r5, pc}
		filter.id = id;
  401270:	9500      	str	r5, [sp, #0]
		filter.mask = 0;
  401272:	2200      	movs	r2, #0
  401274:	9201      	str	r2, [sp, #4]
		can_async_set_filter(&module_0, index, CAN_FMT_STDID, &filter);
  401276:	466b      	mov	r3, sp
  401278:	4621      	mov	r1, r4
  40127a:	4803      	ldr	r0, [pc, #12]	; (401288 <add_single_filter_module_0+0x2c>)
  40127c:	4c03      	ldr	r4, [pc, #12]	; (40128c <add_single_filter_module_0+0x30>)
  40127e:	47a0      	blx	r4
}
  401280:	e7f4      	b.n	40126c <add_single_filter_module_0+0x10>
  401282:	bf00      	nop
  401284:	00401251 	.word	0x00401251
  401288:	20400394 	.word	0x20400394
  40128c:	00400531 	.word	0x00400531

00401290 <__libc_init_array>:
  401290:	b570      	push	{r4, r5, r6, lr}
  401292:	4e0d      	ldr	r6, [pc, #52]	; (4012c8 <__libc_init_array+0x38>)
  401294:	4c0d      	ldr	r4, [pc, #52]	; (4012cc <__libc_init_array+0x3c>)
  401296:	1ba4      	subs	r4, r4, r6
  401298:	10a4      	asrs	r4, r4, #2
  40129a:	2500      	movs	r5, #0
  40129c:	42a5      	cmp	r5, r4
  40129e:	d109      	bne.n	4012b4 <__libc_init_array+0x24>
  4012a0:	4e0b      	ldr	r6, [pc, #44]	; (4012d0 <__libc_init_array+0x40>)
  4012a2:	4c0c      	ldr	r4, [pc, #48]	; (4012d4 <__libc_init_array+0x44>)
  4012a4:	f000 f860 	bl	401368 <_init>
  4012a8:	1ba4      	subs	r4, r4, r6
  4012aa:	10a4      	asrs	r4, r4, #2
  4012ac:	2500      	movs	r5, #0
  4012ae:	42a5      	cmp	r5, r4
  4012b0:	d105      	bne.n	4012be <__libc_init_array+0x2e>
  4012b2:	bd70      	pop	{r4, r5, r6, pc}
  4012b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4012b8:	4798      	blx	r3
  4012ba:	3501      	adds	r5, #1
  4012bc:	e7ee      	b.n	40129c <__libc_init_array+0xc>
  4012be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4012c2:	4798      	blx	r3
  4012c4:	3501      	adds	r5, #1
  4012c6:	e7f2      	b.n	4012ae <__libc_init_array+0x1e>
  4012c8:	00401374 	.word	0x00401374
  4012cc:	00401374 	.word	0x00401374
  4012d0:	00401374 	.word	0x00401374
  4012d4:	00401378 	.word	0x00401378

004012d8 <memcpy>:
  4012d8:	b510      	push	{r4, lr}
  4012da:	1e43      	subs	r3, r0, #1
  4012dc:	440a      	add	r2, r1
  4012de:	4291      	cmp	r1, r2
  4012e0:	d100      	bne.n	4012e4 <memcpy+0xc>
  4012e2:	bd10      	pop	{r4, pc}
  4012e4:	f811 4b01 	ldrb.w	r4, [r1], #1
  4012e8:	f803 4f01 	strb.w	r4, [r3, #1]!
  4012ec:	e7f7      	b.n	4012de <memcpy+0x6>
  4012ee:	0000      	movs	r0, r0
  4012f0:	682f2e2e 	.word	0x682f2e2e
  4012f4:	732f6c61 	.word	0x732f6c61
  4012f8:	682f6372 	.word	0x682f6372
  4012fc:	635f6c61 	.word	0x635f6c61
  401300:	615f6e61 	.word	0x615f6e61
  401304:	636e7973 	.word	0x636e7973
  401308:	0000632e 	.word	0x0000632e
  40130c:	682f2e2e 	.word	0x682f2e2e
  401310:	732f6c61 	.word	0x732f6c61
  401314:	682f6372 	.word	0x682f6372
  401318:	745f6c61 	.word	0x745f6c61
  40131c:	72656d69 	.word	0x72656d69
  401320:	0000632e 	.word	0x0000632e
  401324:	682f2e2e 	.word	0x682f2e2e
  401328:	752f6c61 	.word	0x752f6c61
  40132c:	736c6974 	.word	0x736c6974
  401330:	6372732f 	.word	0x6372732f
  401334:	6974752f 	.word	0x6974752f
  401338:	6c5f736c 	.word	0x6c5f736c
  40133c:	2e747369 	.word	0x2e747369
  401340:	00000063 	.word	0x00000063
  401344:	03020100 	.word	0x03020100
  401348:	07060504 	.word	0x07060504
  40134c:	14100c08 	.word	0x14100c08
  401350:	40302018 	.word	0x40302018
  401354:	682f2e2e 	.word	0x682f2e2e
  401358:	742f6c70 	.word	0x742f6c70
  40135c:	70682f63 	.word	0x70682f63
  401360:	63745f6c 	.word	0x63745f6c
  401364:	0000632e 	.word	0x0000632e

00401368 <_init>:
  401368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40136a:	bf00      	nop
  40136c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40136e:	bc08      	pop	{r3}
  401370:	469e      	mov	lr, r3
  401372:	4770      	bx	lr

00401374 <__init_array_start>:
  401374:	0040018d 	.word	0x0040018d

00401378 <_fini>:
  401378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40137a:	bf00      	nop
  40137c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40137e:	bc08      	pop	{r3}
  401380:	469e      	mov	lr, r3
  401382:	4770      	bx	lr

00401384 <__fini_array_start>:
  401384:	00400169 	.word	0x00400169
