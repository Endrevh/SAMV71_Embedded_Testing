
CAN_ASF4_Test_VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002950  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b0  20400000  00402950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000288  204000b0  00402a00  000200b0  2**2
                  ALLOC
  3 .heap         00000200  20400338  00402c88  000200b0  2**0
                  ALLOC
  4 .stack        00000400  20400538  00402e88  000200b0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY
  7 .debug_info   000180d9  00000000  00000000  00020137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003638  00000000  00000000  00038210  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006e12  00000000  00000000  0003b848  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008e8  00000000  00000000  0004265a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007b0  00000000  00000000  00042f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00041576  00000000  00000000  000436f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000149d9  00000000  00000000  00084c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001482df  00000000  00000000  00099641  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001cfc  00000000  00000000  001e1920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	38 09 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     8.@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40006c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	3d 10 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     =.@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	19 0e 40 00 e9 01 40 00 2d 0e 40 00 e9 01 40 00     ..@...@.-.@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204000b0 	.word	0x204000b0
  400184:	00000000 	.word	0x00000000
  400188:	00402950 	.word	0x00402950

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00402950 	.word	0x00402950
  4001c8:	204000b4 	.word	0x204000b4
  4001cc:	00402950 	.word	0x00402950
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004003f5 	.word	0x004003f5
  4001e4:	00401719 	.word	0x00401719

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	00402950 	.word	0x00402950
  400238:	204000b0 	.word	0x204000b0
  40023c:	204000b0 	.word	0x204000b0
  400240:	20400338 	.word	0x20400338
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	00401739 	.word	0x00401739
  400250:	00401289 	.word	0x00401289

00400254 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  400254:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400256:	4b08      	ldr	r3, [pc, #32]	; (400278 <TIMER_0_init+0x24>)
  400258:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40025a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40025e:	d103      	bne.n	400268 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400260:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400264:	4b04      	ldr	r3, [pc, #16]	; (400278 <TIMER_0_init+0x24>)
  400266:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400268:	4b04      	ldr	r3, [pc, #16]	; (40027c <TIMER_0_init+0x28>)
  40026a:	4798      	blx	r3
  40026c:	4602      	mov	r2, r0
  40026e:	4904      	ldr	r1, [pc, #16]	; (400280 <TIMER_0_init+0x2c>)
  400270:	4804      	ldr	r0, [pc, #16]	; (400284 <TIMER_0_init+0x30>)
  400272:	4b05      	ldr	r3, [pc, #20]	; (400288 <TIMER_0_init+0x34>)
  400274:	4798      	blx	r3
  400276:	bd08      	pop	{r3, pc}
  400278:	400e0600 	.word	0x400e0600
  40027c:	00401039 	.word	0x00401039
  400280:	4000c000 	.word	0x4000c000
  400284:	20400198 	.word	0x20400198
  400288:	004006f5 	.word	0x004006f5

0040028c <TARGET_IO_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <TARGET_IO_PORT_init+0x2c>)
  40028e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400290:	f022 0220 	bic.w	r2, r2, #32
  400294:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400296:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400298:	f042 0220 	orr.w	r2, r2, #32
  40029c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40029e:	2220      	movs	r2, #32
  4002a0:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  4002a8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4002b0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002b2:	2240      	movs	r2, #64	; 0x40
  4002b4:	605a      	str	r2, [r3, #4]
  4002b6:	4770      	bx	lr
  4002b8:	400e0e00 	.word	0x400e0e00

004002bc <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002bc:	4b04      	ldr	r3, [pc, #16]	; (4002d0 <TARGET_IO_CLOCK_init+0x14>)
  4002be:	699b      	ldr	r3, [r3, #24]
  4002c0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002c4:	d103      	bne.n	4002ce <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002c6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4002ca:	4b01      	ldr	r3, [pc, #4]	; (4002d0 <TARGET_IO_CLOCK_init+0x14>)
  4002cc:	611a      	str	r2, [r3, #16]
  4002ce:	4770      	bx	lr
  4002d0:	400e0600 	.word	0x400e0600

004002d4 <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_UART1);
}

void TARGET_IO_init(void)
{
  4002d4:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  4002d6:	4b06      	ldr	r3, [pc, #24]	; (4002f0 <TARGET_IO_init+0x1c>)
  4002d8:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, UART1, _uart_get_usart_sync());
  4002da:	4b06      	ldr	r3, [pc, #24]	; (4002f4 <TARGET_IO_init+0x20>)
  4002dc:	4798      	blx	r3
  4002de:	4602      	mov	r2, r0
  4002e0:	4905      	ldr	r1, [pc, #20]	; (4002f8 <TARGET_IO_init+0x24>)
  4002e2:	4806      	ldr	r0, [pc, #24]	; (4002fc <TARGET_IO_init+0x28>)
  4002e4:	4b06      	ldr	r3, [pc, #24]	; (400300 <TARGET_IO_init+0x2c>)
  4002e6:	4798      	blx	r3
	TARGET_IO_PORT_init();
  4002e8:	4b06      	ldr	r3, [pc, #24]	; (400304 <TARGET_IO_init+0x30>)
  4002ea:	4798      	blx	r3
  4002ec:	bd08      	pop	{r3, pc}
  4002ee:	bf00      	nop
  4002f0:	004002bd 	.word	0x004002bd
  4002f4:	00401285 	.word	0x00401285
  4002f8:	400e0a00 	.word	0x400e0a00
  4002fc:	20400164 	.word	0x20400164
  400300:	00400801 	.word	0x00400801
  400304:	0040028d 	.word	0x0040028d

00400308 <CAN_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400308:	4b05      	ldr	r3, [pc, #20]	; (400320 <CAN_0_CLOCK_init+0x18>)
  40030a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40030e:	f013 0f08 	tst.w	r3, #8
  400312:	d103      	bne.n	40031c <CAN_0_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400314:	2208      	movs	r2, #8
  400316:	4b02      	ldr	r3, [pc, #8]	; (400320 <CAN_0_CLOCK_init+0x18>)
  400318:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40031c:	4770      	bx	lr
  40031e:	bf00      	nop
  400320:	400e0600 	.word	0x400e0600

00400324 <CAN_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400324:	4b0a      	ldr	r3, [pc, #40]	; (400350 <CAN_0_PORT_init+0x2c>)
  400326:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400328:	f022 0208 	bic.w	r2, r2, #8
  40032c:	671a      	str	r2, [r3, #112]	; 0x70
  40032e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400330:	f022 0208 	bic.w	r2, r2, #8
  400334:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400336:	2208      	movs	r2, #8
  400338:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40033a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40033c:	f022 0204 	bic.w	r2, r2, #4
  400340:	671a      	str	r2, [r3, #112]	; 0x70
  400342:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400344:	f022 0204 	bic.w	r2, r2, #4
  400348:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40034a:	2204      	movs	r2, #4
  40034c:	605a      	str	r2, [r3, #4]
  40034e:	4770      	bx	lr
  400350:	400e1000 	.word	0x400e1000

00400354 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
  400354:	b508      	push	{r3, lr}
	CAN_0_CLOCK_init();
  400356:	4b04      	ldr	r3, [pc, #16]	; (400368 <CAN_0_init+0x14>)
  400358:	4798      	blx	r3
	CAN_0_PORT_init();
  40035a:	4b04      	ldr	r3, [pc, #16]	; (40036c <CAN_0_init+0x18>)
  40035c:	4798      	blx	r3
	can_async_init(&CAN_0, MCAN0);
  40035e:	4904      	ldr	r1, [pc, #16]	; (400370 <CAN_0_init+0x1c>)
  400360:	4804      	ldr	r0, [pc, #16]	; (400374 <CAN_0_init+0x20>)
  400362:	4b05      	ldr	r3, [pc, #20]	; (400378 <CAN_0_init+0x24>)
  400364:	4798      	blx	r3
  400366:	bd08      	pop	{r3, pc}
  400368:	00400309 	.word	0x00400309
  40036c:	00400325 	.word	0x00400325
  400370:	40030000 	.word	0x40030000
  400374:	2040013c 	.word	0x2040013c
  400378:	00400495 	.word	0x00400495

0040037c <CAN_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40037c:	4b05      	ldr	r3, [pc, #20]	; (400394 <CAN_1_CLOCK_init+0x18>)
  40037e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400382:	f013 0f20 	tst.w	r3, #32
  400386:	d103      	bne.n	400390 <CAN_1_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400388:	2220      	movs	r2, #32
  40038a:	4b02      	ldr	r3, [pc, #8]	; (400394 <CAN_1_CLOCK_init+0x18>)
  40038c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400390:	4770      	bx	lr
  400392:	bf00      	nop
  400394:	400e0600 	.word	0x400e0600

00400398 <CAN_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400398:	4b0b      	ldr	r3, [pc, #44]	; (4003c8 <CAN_1_PORT_init+0x30>)
  40039a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40039c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4003a0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4003a8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4003ae:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4003b6:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4003be:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4003c4:	605a      	str	r2, [r3, #4]
  4003c6:	4770      	bx	lr
  4003c8:	400e1200 	.word	0x400e1200

004003cc <CAN_1_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_1_init(void)
{
  4003cc:	b508      	push	{r3, lr}
	CAN_1_CLOCK_init();
  4003ce:	4b04      	ldr	r3, [pc, #16]	; (4003e0 <CAN_1_init+0x14>)
  4003d0:	4798      	blx	r3
	CAN_1_PORT_init();
  4003d2:	4b04      	ldr	r3, [pc, #16]	; (4003e4 <CAN_1_init+0x18>)
  4003d4:	4798      	blx	r3
	can_async_init(&CAN_1, MCAN1);
  4003d6:	4904      	ldr	r1, [pc, #16]	; (4003e8 <CAN_1_init+0x1c>)
  4003d8:	4804      	ldr	r0, [pc, #16]	; (4003ec <CAN_1_init+0x20>)
  4003da:	4b05      	ldr	r3, [pc, #20]	; (4003f0 <CAN_1_init+0x24>)
  4003dc:	4798      	blx	r3
  4003de:	bd08      	pop	{r3, pc}
  4003e0:	0040037d 	.word	0x0040037d
  4003e4:	00400399 	.word	0x00400399
  4003e8:	40034000 	.word	0x40034000
  4003ec:	20400170 	.word	0x20400170
  4003f0:	00400495 	.word	0x00400495

004003f4 <system_init>:
}

void system_init(void)
{
  4003f4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4003f6:	4b11      	ldr	r3, [pc, #68]	; (40043c <system_init+0x48>)
  4003f8:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003fa:	4b11      	ldr	r3, [pc, #68]	; (400440 <system_init+0x4c>)
  4003fc:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4003fe:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400402:	d103      	bne.n	40040c <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400404:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400408:	4b0d      	ldr	r3, [pc, #52]	; (400440 <system_init+0x4c>)
  40040a:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40040c:	4a0d      	ldr	r2, [pc, #52]	; (400444 <system_init+0x50>)
  40040e:	6853      	ldr	r3, [r2, #4]
  400410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400414:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_CODR = mask;
  400416:	4b0c      	ldr	r3, [pc, #48]	; (400448 <system_init+0x54>)
  400418:	2201      	movs	r2, #1
  40041a:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40041c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40041e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400420:	2202      	movs	r2, #2
  400422:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400424:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400426:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(CAN_SILENT1, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CAN_SILENT1, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();
  400428:	4b08      	ldr	r3, [pc, #32]	; (40044c <system_init+0x58>)
  40042a:	4798      	blx	r3

	TARGET_IO_init();
  40042c:	4b08      	ldr	r3, [pc, #32]	; (400450 <system_init+0x5c>)
  40042e:	4798      	blx	r3

	CAN_0_init();
  400430:	4b08      	ldr	r3, [pc, #32]	; (400454 <system_init+0x60>)
  400432:	4798      	blx	r3
	CAN_1_init();
  400434:	4b08      	ldr	r3, [pc, #32]	; (400458 <system_init+0x64>)
  400436:	4798      	blx	r3
  400438:	bd08      	pop	{r3, pc}
  40043a:	bf00      	nop
  40043c:	00400929 	.word	0x00400929
  400440:	400e0600 	.word	0x400e0600
  400444:	400e1850 	.word	0x400e1850
  400448:	400e1000 	.word	0x400e1000
  40044c:	00400255 	.word	0x00400255
  400450:	004002d5 	.word	0x004002d5
  400454:	00400355 	.word	0x00400355
  400458:	004003cd 	.word	0x004003cd

0040045c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40045c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400460:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400462:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400464:	f3bf 8f5f 	dmb	sy
  400468:	4770      	bx	lr

0040046a <atomic_leave_critical>:
  40046a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40046e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400470:	f383 8810 	msr	PRIMASK, r3
  400474:	4770      	bx	lr

00400476 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
  400476:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
  400478:	69c3      	ldr	r3, [r0, #28]
  40047a:	b103      	cbz	r3, 40047e <can_tx_done+0x8>
		descr->cb.tx_done(descr);
  40047c:	4798      	blx	r3
  40047e:	bd08      	pop	{r3, pc}

00400480 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
  400480:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
  400482:	6a03      	ldr	r3, [r0, #32]
  400484:	b103      	cbz	r3, 400488 <can_rx_done+0x8>
		descr->cb.rx_done(descr);
  400486:	4798      	blx	r3
  400488:	bd08      	pop	{r3, pc}

0040048a <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
  40048a:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
  40048c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  40048e:	b103      	cbz	r3, 400492 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
  400490:	4798      	blx	r3
  400492:	bd08      	pop	{r3, pc}

00400494 <can_async_init>:
{
  400494:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400496:	4604      	mov	r4, r0
  400498:	460d      	mov	r5, r1
  40049a:	2800      	cmp	r0, #0
  40049c:	bf18      	it	ne
  40049e:	2900      	cmpne	r1, #0
  4004a0:	bf14      	ite	ne
  4004a2:	2001      	movne	r0, #1
  4004a4:	2000      	moveq	r0, #0
  4004a6:	2241      	movs	r2, #65	; 0x41
  4004a8:	4908      	ldr	r1, [pc, #32]	; (4004cc <can_async_init+0x38>)
  4004aa:	4b09      	ldr	r3, [pc, #36]	; (4004d0 <can_async_init+0x3c>)
  4004ac:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
  4004ae:	4629      	mov	r1, r5
  4004b0:	4620      	mov	r0, r4
  4004b2:	4b08      	ldr	r3, [pc, #32]	; (4004d4 <can_async_init+0x40>)
  4004b4:	4798      	blx	r3
	if (rc) {
  4004b6:	4603      	mov	r3, r0
  4004b8:	b928      	cbnz	r0, 4004c6 <can_async_init+0x32>
	descr->dev.cb.tx_done     = can_tx_done;
  4004ba:	4a07      	ldr	r2, [pc, #28]	; (4004d8 <can_async_init+0x44>)
  4004bc:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
  4004be:	4a07      	ldr	r2, [pc, #28]	; (4004dc <can_async_init+0x48>)
  4004c0:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
  4004c2:	4a07      	ldr	r2, [pc, #28]	; (4004e0 <can_async_init+0x4c>)
  4004c4:	60e2      	str	r2, [r4, #12]
}
  4004c6:	4618      	mov	r0, r3
  4004c8:	bd38      	pop	{r3, r4, r5, pc}
  4004ca:	bf00      	nop
  4004cc:	004027b8 	.word	0x004027b8
  4004d0:	00400875 	.word	0x00400875
  4004d4:	004009f1 	.word	0x004009f1
  4004d8:	00400477 	.word	0x00400477
  4004dc:	00400481 	.word	0x00400481
  4004e0:	0040048b 	.word	0x0040048b

004004e4 <can_async_enable>:
{
  4004e4:	b510      	push	{r4, lr}
	ASSERT(descr);
  4004e6:	4604      	mov	r4, r0
  4004e8:	225c      	movs	r2, #92	; 0x5c
  4004ea:	4905      	ldr	r1, [pc, #20]	; (400500 <can_async_enable+0x1c>)
  4004ec:	3000      	adds	r0, #0
  4004ee:	bf18      	it	ne
  4004f0:	2001      	movne	r0, #1
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <can_async_enable+0x20>)
  4004f4:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
  4004f6:	4620      	mov	r0, r4
  4004f8:	4b03      	ldr	r3, [pc, #12]	; (400508 <can_async_enable+0x24>)
  4004fa:	4798      	blx	r3
}
  4004fc:	bd10      	pop	{r4, pc}
  4004fe:	bf00      	nop
  400500:	004027b8 	.word	0x004027b8
  400504:	00400875 	.word	0x00400875
  400508:	00400bc5 	.word	0x00400bc5

0040050c <can_async_read>:
{
  40050c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && msg);
  40050e:	4604      	mov	r4, r0
  400510:	460d      	mov	r5, r1
  400512:	2800      	cmp	r0, #0
  400514:	bf18      	it	ne
  400516:	2900      	cmpne	r1, #0
  400518:	bf14      	ite	ne
  40051a:	2001      	movne	r0, #1
  40051c:	2000      	moveq	r0, #0
  40051e:	226e      	movs	r2, #110	; 0x6e
  400520:	4903      	ldr	r1, [pc, #12]	; (400530 <can_async_read+0x24>)
  400522:	4b04      	ldr	r3, [pc, #16]	; (400534 <can_async_read+0x28>)
  400524:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
  400526:	4629      	mov	r1, r5
  400528:	4620      	mov	r0, r4
  40052a:	4b03      	ldr	r3, [pc, #12]	; (400538 <can_async_read+0x2c>)
  40052c:	4798      	blx	r3
}
  40052e:	bd38      	pop	{r3, r4, r5, pc}
  400530:	004027b8 	.word	0x004027b8
  400534:	00400875 	.word	0x00400875
  400538:	00400bd5 	.word	0x00400bd5

0040053c <can_async_write>:
{
  40053c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && msg);
  40053e:	4604      	mov	r4, r0
  400540:	460d      	mov	r5, r1
  400542:	2800      	cmp	r0, #0
  400544:	bf18      	it	ne
  400546:	2900      	cmpne	r1, #0
  400548:	bf14      	ite	ne
  40054a:	2001      	movne	r0, #1
  40054c:	2000      	moveq	r0, #0
  40054e:	2277      	movs	r2, #119	; 0x77
  400550:	4903      	ldr	r1, [pc, #12]	; (400560 <can_async_write+0x24>)
  400552:	4b04      	ldr	r3, [pc, #16]	; (400564 <can_async_write+0x28>)
  400554:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
  400556:	4629      	mov	r1, r5
  400558:	4620      	mov	r0, r4
  40055a:	4b03      	ldr	r3, [pc, #12]	; (400568 <can_async_write+0x2c>)
  40055c:	4798      	blx	r3
}
  40055e:	bd38      	pop	{r3, r4, r5, pc}
  400560:	004027b8 	.word	0x004027b8
  400564:	00400875 	.word	0x00400875
  400568:	00400ca1 	.word	0x00400ca1

0040056c <can_async_register_callback>:
{
  40056c:	b570      	push	{r4, r5, r6, lr}
  40056e:	460c      	mov	r4, r1
  400570:	4616      	mov	r6, r2
	ASSERT(descr);
  400572:	4605      	mov	r5, r0
  400574:	2281      	movs	r2, #129	; 0x81
  400576:	490e      	ldr	r1, [pc, #56]	; (4005b0 <can_async_register_callback+0x44>)
  400578:	3000      	adds	r0, #0
  40057a:	bf18      	it	ne
  40057c:	2001      	movne	r0, #1
  40057e:	4b0d      	ldr	r3, [pc, #52]	; (4005b4 <can_async_register_callback+0x48>)
  400580:	4798      	blx	r3
	switch (type) {
  400582:	2c01      	cmp	r4, #1
  400584:	d00f      	beq.n	4005a6 <can_async_register_callback+0x3a>
  400586:	b124      	cbz	r4, 400592 <can_async_register_callback+0x26>
  400588:	2c02      	cmp	r4, #2
  40058a:	d00e      	beq.n	4005aa <can_async_register_callback+0x3e>
		return ERR_INVALID_ARG;
  40058c:	f06f 000c 	mvn.w	r0, #12
}
  400590:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
  400592:	622e      	str	r6, [r5, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
  400594:	1c32      	adds	r2, r6, #0
  400596:	bf18      	it	ne
  400598:	2201      	movne	r2, #1
  40059a:	4621      	mov	r1, r4
  40059c:	4628      	mov	r0, r5
  40059e:	4b06      	ldr	r3, [pc, #24]	; (4005b8 <can_async_register_callback+0x4c>)
  4005a0:	4798      	blx	r3
	return ERR_NONE;
  4005a2:	2000      	movs	r0, #0
  4005a4:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
  4005a6:	61ee      	str	r6, [r5, #28]
		break;
  4005a8:	e7f4      	b.n	400594 <can_async_register_callback+0x28>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
  4005aa:	626e      	str	r6, [r5, #36]	; 0x24
		break;
  4005ac:	e7f2      	b.n	400594 <can_async_register_callback+0x28>
  4005ae:	bf00      	nop
  4005b0:	004027b8 	.word	0x004027b8
  4005b4:	00400875 	.word	0x00400875
  4005b8:	00400dd5 	.word	0x00400dd5

004005bc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4005bc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4005be:	4b04      	ldr	r3, [pc, #16]	; (4005d0 <delay_ms+0x14>)
  4005c0:	681c      	ldr	r4, [r3, #0]
  4005c2:	4b04      	ldr	r3, [pc, #16]	; (4005d4 <delay_ms+0x18>)
  4005c4:	4798      	blx	r3
  4005c6:	4601      	mov	r1, r0
  4005c8:	4620      	mov	r0, r4
  4005ca:	4b03      	ldr	r3, [pc, #12]	; (4005d8 <delay_ms+0x1c>)
  4005cc:	4798      	blx	r3
  4005ce:	bd10      	pop	{r4, pc}
  4005d0:	204000cc 	.word	0x204000cc
  4005d4:	00400911 	.word	0x00400911
  4005d8:	00400923 	.word	0x00400923

004005dc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4005dc:	b570      	push	{r4, r5, r6, lr}
  4005de:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4005e0:	4604      	mov	r4, r0
  4005e2:	460d      	mov	r5, r1
  4005e4:	2800      	cmp	r0, #0
  4005e6:	bf18      	it	ne
  4005e8:	2900      	cmpne	r1, #0
  4005ea:	bf14      	ite	ne
  4005ec:	2001      	movne	r0, #1
  4005ee:	2000      	moveq	r0, #0
  4005f0:	2234      	movs	r2, #52	; 0x34
  4005f2:	4904      	ldr	r1, [pc, #16]	; (400604 <io_write+0x28>)
  4005f4:	4b04      	ldr	r3, [pc, #16]	; (400608 <io_write+0x2c>)
  4005f6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  4005f8:	6823      	ldr	r3, [r4, #0]
  4005fa:	4632      	mov	r2, r6
  4005fc:	4629      	mov	r1, r5
  4005fe:	4620      	mov	r0, r4
  400600:	4798      	blx	r3
}
  400602:	bd70      	pop	{r4, r5, r6, pc}
  400604:	004027d4 	.word	0x004027d4
  400608:	00400875 	.word	0x00400875

0040060c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40060c:	b570      	push	{r4, r5, r6, lr}
  40060e:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400610:	4604      	mov	r4, r0
  400612:	460d      	mov	r5, r1
  400614:	2800      	cmp	r0, #0
  400616:	bf18      	it	ne
  400618:	2900      	cmpne	r1, #0
  40061a:	bf14      	ite	ne
  40061c:	2001      	movne	r0, #1
  40061e:	2000      	moveq	r0, #0
  400620:	223d      	movs	r2, #61	; 0x3d
  400622:	4904      	ldr	r1, [pc, #16]	; (400634 <io_read+0x28>)
  400624:	4b04      	ldr	r3, [pc, #16]	; (400638 <io_read+0x2c>)
  400626:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400628:	6863      	ldr	r3, [r4, #4]
  40062a:	4632      	mov	r2, r6
  40062c:	4629      	mov	r1, r5
  40062e:	4620      	mov	r0, r4
  400630:	4798      	blx	r3
}
  400632:	bd70      	pop	{r4, r5, r6, pc}
  400634:	004027d4 	.word	0x004027d4
  400638:	00400875 	.word	0x00400875

0040063c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  40063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  40063e:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400640:	b117      	cbz	r7, 400648 <timer_add_timer_task+0xc>
  400642:	463c      	mov	r4, r7
  400644:	2600      	movs	r6, #0
  400646:	e00b      	b.n	400660 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400648:	4b0e      	ldr	r3, [pc, #56]	; (400684 <timer_add_timer_task+0x48>)
  40064a:	4798      	blx	r3
		return;
  40064c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  40064e:	68a5      	ldr	r5, [r4, #8]
  400650:	442b      	add	r3, r5
  400652:	1a9b      	subs	r3, r3, r2
  400654:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400656:	688d      	ldr	r5, [r1, #8]
  400658:	42ab      	cmp	r3, r5
  40065a:	d209      	bcs.n	400670 <timer_add_timer_task+0x34>
			break;
		prev = it;
  40065c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  40065e:	6824      	ldr	r4, [r4, #0]
  400660:	b134      	cbz	r4, 400670 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400662:	6863      	ldr	r3, [r4, #4]
  400664:	4293      	cmp	r3, r2
  400666:	d8f2      	bhi.n	40064e <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400668:	68a5      	ldr	r5, [r4, #8]
  40066a:	1a9b      	subs	r3, r3, r2
  40066c:	442b      	add	r3, r5
  40066e:	e7f2      	b.n	400656 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400670:	42bc      	cmp	r4, r7
  400672:	d003      	beq.n	40067c <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400674:	4630      	mov	r0, r6
  400676:	4b04      	ldr	r3, [pc, #16]	; (400688 <timer_add_timer_task+0x4c>)
  400678:	4798      	blx	r3
  40067a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  40067c:	4b01      	ldr	r3, [pc, #4]	; (400684 <timer_add_timer_task+0x48>)
  40067e:	4798      	blx	r3
  400680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400682:	bf00      	nop
  400684:	00400891 	.word	0x00400891
  400688:	004008bd 	.word	0x004008bd

0040068c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  40068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40068e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400690:	6906      	ldr	r6, [r0, #16]
  400692:	3601      	adds	r6, #1
  400694:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400696:	7e03      	ldrb	r3, [r0, #24]
  400698:	f013 0f01 	tst.w	r3, #1
  40069c:	d105      	bne.n	4006aa <timer_process_counted+0x1e>
  40069e:	7e03      	ldrb	r3, [r0, #24]
  4006a0:	f013 0f02 	tst.w	r3, #2
  4006a4:	d101      	bne.n	4006aa <timer_process_counted+0x1e>
  4006a6:	4605      	mov	r5, r0
  4006a8:	e009      	b.n	4006be <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  4006aa:	7e03      	ldrb	r3, [r0, #24]
  4006ac:	f043 0302 	orr.w	r3, r3, #2
  4006b0:	7603      	strb	r3, [r0, #24]
		return;
  4006b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006b4:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4006b6:	68e3      	ldr	r3, [r4, #12]
  4006b8:	4620      	mov	r0, r4
  4006ba:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4006bc:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4006be:	b19c      	cbz	r4, 4006e8 <timer_process_counted+0x5c>
  4006c0:	6863      	ldr	r3, [r4, #4]
  4006c2:	1af3      	subs	r3, r6, r3
  4006c4:	68a2      	ldr	r2, [r4, #8]
  4006c6:	4293      	cmp	r3, r2
  4006c8:	d30e      	bcc.n	4006e8 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4006ca:	f105 0714 	add.w	r7, r5, #20
  4006ce:	4638      	mov	r0, r7
  4006d0:	4b06      	ldr	r3, [pc, #24]	; (4006ec <timer_process_counted+0x60>)
  4006d2:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4006d4:	7c23      	ldrb	r3, [r4, #16]
  4006d6:	2b01      	cmp	r3, #1
  4006d8:	d1ec      	bne.n	4006b4 <timer_process_counted+0x28>
			tmp->time_label = time;
  4006da:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  4006dc:	4632      	mov	r2, r6
  4006de:	4621      	mov	r1, r4
  4006e0:	4638      	mov	r0, r7
  4006e2:	4b03      	ldr	r3, [pc, #12]	; (4006f0 <timer_process_counted+0x64>)
  4006e4:	4798      	blx	r3
  4006e6:	e7e5      	b.n	4006b4 <timer_process_counted+0x28>
  4006e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006ea:	bf00      	nop
  4006ec:	004008c5 	.word	0x004008c5
  4006f0:	0040063d 	.word	0x0040063d

004006f4 <timer_init>:
{
  4006f4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4006f6:	4604      	mov	r4, r0
  4006f8:	460d      	mov	r5, r1
  4006fa:	2800      	cmp	r0, #0
  4006fc:	bf18      	it	ne
  4006fe:	2900      	cmpne	r1, #0
  400700:	bf14      	ite	ne
  400702:	2001      	movne	r0, #1
  400704:	2000      	moveq	r0, #0
  400706:	223b      	movs	r2, #59	; 0x3b
  400708:	4905      	ldr	r1, [pc, #20]	; (400720 <timer_init+0x2c>)
  40070a:	4b06      	ldr	r3, [pc, #24]	; (400724 <timer_init+0x30>)
  40070c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  40070e:	4629      	mov	r1, r5
  400710:	4620      	mov	r0, r4
  400712:	4b05      	ldr	r3, [pc, #20]	; (400728 <timer_init+0x34>)
  400714:	4798      	blx	r3
	descr->time                           = 0;
  400716:	2000      	movs	r0, #0
  400718:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40071a:	4b04      	ldr	r3, [pc, #16]	; (40072c <timer_init+0x38>)
  40071c:	6023      	str	r3, [r4, #0]
}
  40071e:	bd38      	pop	{r3, r4, r5, pc}
  400720:	004027e8 	.word	0x004027e8
  400724:	00400875 	.word	0x00400875
  400728:	00400f7d 	.word	0x00400f7d
  40072c:	0040068d 	.word	0x0040068d

00400730 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400732:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400734:	4605      	mov	r5, r0
  400736:	460f      	mov	r7, r1
  400738:	2800      	cmp	r0, #0
  40073a:	bf18      	it	ne
  40073c:	2900      	cmpne	r1, #0
  40073e:	d002      	beq.n	400746 <usart_sync_write+0x16>
  400740:	bb0a      	cbnz	r2, 400786 <usart_sync_write+0x56>
  400742:	2000      	movs	r0, #0
  400744:	e000      	b.n	400748 <usart_sync_write+0x18>
  400746:	2000      	movs	r0, #0
  400748:	22f1      	movs	r2, #241	; 0xf1
  40074a:	4910      	ldr	r1, [pc, #64]	; (40078c <usart_sync_write+0x5c>)
  40074c:	4b10      	ldr	r3, [pc, #64]	; (400790 <usart_sync_write+0x60>)
  40074e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400750:	f105 0408 	add.w	r4, r5, #8
  400754:	4620      	mov	r0, r4
  400756:	4b0f      	ldr	r3, [pc, #60]	; (400794 <usart_sync_write+0x64>)
  400758:	4798      	blx	r3
  40075a:	2800      	cmp	r0, #0
  40075c:	d0f8      	beq.n	400750 <usart_sync_write+0x20>
  40075e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400760:	5d79      	ldrb	r1, [r7, r5]
  400762:	4620      	mov	r0, r4
  400764:	4b0c      	ldr	r3, [pc, #48]	; (400798 <usart_sync_write+0x68>)
  400766:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400768:	4620      	mov	r0, r4
  40076a:	4b0a      	ldr	r3, [pc, #40]	; (400794 <usart_sync_write+0x64>)
  40076c:	4798      	blx	r3
  40076e:	2800      	cmp	r0, #0
  400770:	d0fa      	beq.n	400768 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400772:	3501      	adds	r5, #1
  400774:	42b5      	cmp	r5, r6
  400776:	d3f3      	bcc.n	400760 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400778:	4620      	mov	r0, r4
  40077a:	4b08      	ldr	r3, [pc, #32]	; (40079c <usart_sync_write+0x6c>)
  40077c:	4798      	blx	r3
  40077e:	2800      	cmp	r0, #0
  400780:	d0fa      	beq.n	400778 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400782:	4628      	mov	r0, r5
  400784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400786:	2001      	movs	r0, #1
  400788:	e7de      	b.n	400748 <usart_sync_write+0x18>
  40078a:	bf00      	nop
  40078c:	00402800 	.word	0x00402800
  400790:	00400875 	.word	0x00400875
  400794:	0040120d 	.word	0x0040120d
  400798:	004011c5 	.word	0x004011c5
  40079c:	00401235 	.word	0x00401235

004007a0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4007a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007a4:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4007a6:	4605      	mov	r5, r0
  4007a8:	4688      	mov	r8, r1
  4007aa:	2800      	cmp	r0, #0
  4007ac:	bf18      	it	ne
  4007ae:	2900      	cmpne	r1, #0
  4007b0:	d002      	beq.n	4007b8 <usart_sync_read+0x18>
  4007b2:	b9d2      	cbnz	r2, 4007ea <usart_sync_read+0x4a>
  4007b4:	2000      	movs	r0, #0
  4007b6:	e000      	b.n	4007ba <usart_sync_read+0x1a>
  4007b8:	2000      	movs	r0, #0
  4007ba:	f44f 7286 	mov.w	r2, #268	; 0x10c
  4007be:	490c      	ldr	r1, [pc, #48]	; (4007f0 <usart_sync_read+0x50>)
  4007c0:	4b0c      	ldr	r3, [pc, #48]	; (4007f4 <usart_sync_read+0x54>)
  4007c2:	4798      	blx	r3
	uint32_t                      offset = 0;
  4007c4:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  4007c6:	f105 0408 	add.w	r4, r5, #8
  4007ca:	4620      	mov	r0, r4
  4007cc:	4b0a      	ldr	r3, [pc, #40]	; (4007f8 <usart_sync_read+0x58>)
  4007ce:	4798      	blx	r3
  4007d0:	2800      	cmp	r0, #0
  4007d2:	d0f8      	beq.n	4007c6 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4007d4:	4620      	mov	r0, r4
  4007d6:	4b09      	ldr	r3, [pc, #36]	; (4007fc <usart_sync_read+0x5c>)
  4007d8:	4798      	blx	r3
  4007da:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  4007de:	3601      	adds	r6, #1
  4007e0:	42be      	cmp	r6, r7
  4007e2:	d3f0      	bcc.n	4007c6 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  4007e4:	4630      	mov	r0, r6
  4007e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  4007ea:	2001      	movs	r0, #1
  4007ec:	e7e5      	b.n	4007ba <usart_sync_read+0x1a>
  4007ee:	bf00      	nop
  4007f0:	00402800 	.word	0x00402800
  4007f4:	00400875 	.word	0x00400875
  4007f8:	0040125d 	.word	0x0040125d
  4007fc:	004011e9 	.word	0x004011e9

00400800 <usart_sync_init>:
{
  400800:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400802:	4604      	mov	r4, r0
  400804:	460d      	mov	r5, r1
  400806:	2800      	cmp	r0, #0
  400808:	bf18      	it	ne
  40080a:	2900      	cmpne	r1, #0
  40080c:	bf14      	ite	ne
  40080e:	2001      	movne	r0, #1
  400810:	2000      	moveq	r0, #0
  400812:	2234      	movs	r2, #52	; 0x34
  400814:	4907      	ldr	r1, [pc, #28]	; (400834 <usart_sync_init+0x34>)
  400816:	4b08      	ldr	r3, [pc, #32]	; (400838 <usart_sync_init+0x38>)
  400818:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  40081a:	4629      	mov	r1, r5
  40081c:	f104 0008 	add.w	r0, r4, #8
  400820:	4b06      	ldr	r3, [pc, #24]	; (40083c <usart_sync_init+0x3c>)
  400822:	4798      	blx	r3
	if (init_status) {
  400824:	4603      	mov	r3, r0
  400826:	b918      	cbnz	r0, 400830 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400828:	4a05      	ldr	r2, [pc, #20]	; (400840 <usart_sync_init+0x40>)
  40082a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  40082c:	4a05      	ldr	r2, [pc, #20]	; (400844 <usart_sync_init+0x44>)
  40082e:	6022      	str	r2, [r4, #0]
}
  400830:	4618      	mov	r0, r3
  400832:	bd38      	pop	{r3, r4, r5, pc}
  400834:	00402800 	.word	0x00402800
  400838:	00400875 	.word	0x00400875
  40083c:	00401159 	.word	0x00401159
  400840:	004007a1 	.word	0x004007a1
  400844:	00400731 	.word	0x00400731

00400848 <usart_sync_enable>:
{
  400848:	b510      	push	{r4, lr}
	ASSERT(descr);
  40084a:	4604      	mov	r4, r0
  40084c:	2253      	movs	r2, #83	; 0x53
  40084e:	4906      	ldr	r1, [pc, #24]	; (400868 <usart_sync_enable+0x20>)
  400850:	3000      	adds	r0, #0
  400852:	bf18      	it	ne
  400854:	2001      	movne	r0, #1
  400856:	4b05      	ldr	r3, [pc, #20]	; (40086c <usart_sync_enable+0x24>)
  400858:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  40085a:	f104 0008 	add.w	r0, r4, #8
  40085e:	4b04      	ldr	r3, [pc, #16]	; (400870 <usart_sync_enable+0x28>)
  400860:	4798      	blx	r3
}
  400862:	2000      	movs	r0, #0
  400864:	bd10      	pop	{r4, pc}
  400866:	bf00      	nop
  400868:	00402800 	.word	0x00402800
  40086c:	00400875 	.word	0x00400875
  400870:	00401191 	.word	0x00401191

00400874 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400874:	b900      	cbnz	r0, 400878 <assert+0x4>
		__asm("BKPT #0");
  400876:	be00      	bkpt	0x0000
  400878:	4770      	bx	lr

0040087a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  40087a:	6803      	ldr	r3, [r0, #0]
  40087c:	b11b      	cbz	r3, 400886 <is_list_element+0xc>
		if (it == element) {
  40087e:	428b      	cmp	r3, r1
  400880:	d003      	beq.n	40088a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  400882:	681b      	ldr	r3, [r3, #0]
  400884:	e7fa      	b.n	40087c <is_list_element+0x2>
			return true;
		}
	}

	return false;
  400886:	2000      	movs	r0, #0
  400888:	4770      	bx	lr
			return true;
  40088a:	2001      	movs	r0, #1
}
  40088c:	4770      	bx	lr
	...

00400890 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400890:	b538      	push	{r3, r4, r5, lr}
  400892:	4604      	mov	r4, r0
  400894:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  400896:	4b06      	ldr	r3, [pc, #24]	; (4008b0 <list_insert_as_head+0x20>)
  400898:	4798      	blx	r3
  40089a:	f080 0001 	eor.w	r0, r0, #1
  40089e:	2239      	movs	r2, #57	; 0x39
  4008a0:	4904      	ldr	r1, [pc, #16]	; (4008b4 <list_insert_as_head+0x24>)
  4008a2:	b2c0      	uxtb	r0, r0
  4008a4:	4b04      	ldr	r3, [pc, #16]	; (4008b8 <list_insert_as_head+0x28>)
  4008a6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  4008a8:	6823      	ldr	r3, [r4, #0]
  4008aa:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  4008ac:	6025      	str	r5, [r4, #0]
  4008ae:	bd38      	pop	{r3, r4, r5, pc}
  4008b0:	0040087b 	.word	0x0040087b
  4008b4:	0040281c 	.word	0x0040281c
  4008b8:	00400875 	.word	0x00400875

004008bc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  4008bc:	6803      	ldr	r3, [r0, #0]
  4008be:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  4008c0:	6001      	str	r1, [r0, #0]
  4008c2:	4770      	bx	lr

004008c4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  4008c4:	6803      	ldr	r3, [r0, #0]
  4008c6:	b11b      	cbz	r3, 4008d0 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  4008c8:	681a      	ldr	r2, [r3, #0]
  4008ca:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  4008cc:	4618      	mov	r0, r3
  4008ce:	4770      	bx	lr
	}

	return NULL;
  4008d0:	2000      	movs	r0, #0
}
  4008d2:	4770      	bx	lr

004008d4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  4008d4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  4008d6:	4a06      	ldr	r2, [pc, #24]	; (4008f0 <_sbrk+0x1c>)
  4008d8:	6812      	ldr	r2, [r2, #0]
  4008da:	b122      	cbz	r2, 4008e6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4008dc:	4a04      	ldr	r2, [pc, #16]	; (4008f0 <_sbrk+0x1c>)
  4008de:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  4008e0:	4403      	add	r3, r0
  4008e2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  4008e4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4008e6:	4903      	ldr	r1, [pc, #12]	; (4008f4 <_sbrk+0x20>)
  4008e8:	4a01      	ldr	r2, [pc, #4]	; (4008f0 <_sbrk+0x1c>)
  4008ea:	6011      	str	r1, [r2, #0]
  4008ec:	e7f6      	b.n	4008dc <_sbrk+0x8>
  4008ee:	bf00      	nop
  4008f0:	204000d0 	.word	0x204000d0
  4008f4:	20400938 	.word	0x20400938

004008f8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  4008f8:	f04f 30ff 	mov.w	r0, #4294967295
  4008fc:	4770      	bx	lr

004008fe <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  4008fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400902:	604b      	str	r3, [r1, #4]

	return 0;
}
  400904:	2000      	movs	r0, #0
  400906:	4770      	bx	lr

00400908 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  400908:	2001      	movs	r0, #1
  40090a:	4770      	bx	lr

0040090c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  40090c:	2000      	movs	r0, #0
  40090e:	4770      	bx	lr

00400910 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) * 1000);
  400910:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400914:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40091c:	fb03 f000 	mul.w	r0, r3, r0
  400920:	4770      	bx	lr

00400922 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm("__delay:\n"
  400922:	3901      	subs	r1, #1
  400924:	d8fd      	bhi.n	400922 <_delay_cycles>
  400926:	4770      	bx	lr

00400928 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400928:	b500      	push	{lr}
  40092a:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  40092c:	a801      	add	r0, sp, #4
  40092e:	4b0e      	ldr	r3, [pc, #56]	; (400968 <_init_chip+0x40>)
  400930:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400932:	4a0e      	ldr	r2, [pc, #56]	; (40096c <_init_chip+0x44>)
  400934:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40093c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400940:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400944:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400948:	a801      	add	r0, sp, #4
  40094a:	4b09      	ldr	r3, [pc, #36]	; (400970 <_init_chip+0x48>)
  40094c:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  40094e:	4a09      	ldr	r2, [pc, #36]	; (400974 <_init_chip+0x4c>)
  400950:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400952:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400956:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  40095a:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  40095c:	4b06      	ldr	r3, [pc, #24]	; (400978 <_init_chip+0x50>)
  40095e:	4798      	blx	r3
}
  400960:	b003      	add	sp, #12
  400962:	f85d fb04 	ldr.w	pc, [sp], #4
  400966:	bf00      	nop
  400968:	0040045d 	.word	0x0040045d
  40096c:	e000ed00 	.word	0xe000ed00
  400970:	0040046b 	.word	0x0040046b
  400974:	400e0c00 	.word	0x400e0c00
  400978:	00400efd 	.word	0x00400efd

0040097c <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  40097c:	b538      	push	{r3, r4, r5, lr}
  40097e:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  400980:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  400982:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  400984:	f014 0f01 	tst.w	r4, #1
  400988:	d11a      	bne.n	4009c0 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  40098a:	f414 7f00 	tst.w	r4, #512	; 0x200
  40098e:	d11a      	bne.n	4009c6 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  400990:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  400994:	d11b      	bne.n	4009ce <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  400996:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  40099a:	d11d      	bne.n	4009d8 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  40099c:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  4009a0:	d008      	beq.n	4009b4 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4009a2:	68eb      	ldr	r3, [r5, #12]
  4009a4:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  4009a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
  4009a8:	f012 0f20 	tst.w	r2, #32
  4009ac:	d019      	beq.n	4009e2 <_can_irq_handler+0x66>
  4009ae:	2102      	movs	r1, #2
  4009b0:	4628      	mov	r0, r5
  4009b2:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  4009b4:	f014 0f08 	tst.w	r4, #8
  4009b8:	d115      	bne.n	4009e6 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  4009ba:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  4009bc:	651c      	str	r4, [r3, #80]	; 0x50
  4009be:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  4009c0:	6883      	ldr	r3, [r0, #8]
  4009c2:	4798      	blx	r3
  4009c4:	e7e1      	b.n	40098a <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  4009c6:	686b      	ldr	r3, [r5, #4]
  4009c8:	4628      	mov	r0, r5
  4009ca:	4798      	blx	r3
  4009cc:	e7e0      	b.n	400990 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  4009ce:	68eb      	ldr	r3, [r5, #12]
  4009d0:	2103      	movs	r1, #3
  4009d2:	4628      	mov	r0, r5
  4009d4:	4798      	blx	r3
  4009d6:	e7de      	b.n	400996 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  4009d8:	68eb      	ldr	r3, [r5, #12]
  4009da:	2100      	movs	r1, #0
  4009dc:	4628      	mov	r0, r5
  4009de:	4798      	blx	r3
  4009e0:	e7dc      	b.n	40099c <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4009e2:	2101      	movs	r1, #1
  4009e4:	e7e4      	b.n	4009b0 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  4009e6:	68eb      	ldr	r3, [r5, #12]
  4009e8:	2104      	movs	r1, #4
  4009ea:	4628      	mov	r0, r5
  4009ec:	4798      	blx	r3
  4009ee:	e7e4      	b.n	4009ba <_can_irq_handler+0x3e>

004009f0 <_can_async_init>:
{
  4009f0:	b430      	push	{r4, r5}
	dev->hw = hw;
  4009f2:	6001      	str	r1, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_INIT;
  4009f4:	698b      	ldr	r3, [r1, #24]
  4009f6:	f043 0301 	orr.w	r3, r3, #1
  4009fa:	618b      	str	r3, [r1, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw) == 0)
  4009fc:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  4009fe:	699a      	ldr	r2, [r3, #24]
  400a00:	f012 0f01 	tst.w	r2, #1
  400a04:	d0fa      	beq.n	4009fc <_can_async_init+0xc>
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_CCE;
  400a06:	699a      	ldr	r2, [r3, #24]
  400a08:	f042 0202 	orr.w	r2, r2, #2
  400a0c:	619a      	str	r2, [r3, #24]
	if (hw == MCAN0) {
  400a0e:	4b62      	ldr	r3, [pc, #392]	; (400b98 <_can_async_init+0x1a8>)
  400a10:	4299      	cmp	r1, r3
  400a12:	d014      	beq.n	400a3e <_can_async_init+0x4e>
	if (hw == MCAN1) {
  400a14:	4b61      	ldr	r3, [pc, #388]	; (400b9c <_can_async_init+0x1ac>)
  400a16:	4299      	cmp	r1, r3
  400a18:	d066      	beq.n	400ae8 <_can_async_init+0xf8>
	hri_mcan_clear_CCCR_CCE_bit(dev->hw);
  400a1a:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_CCE;
  400a1c:	6993      	ldr	r3, [r2, #24]
  400a1e:	f023 0302 	bic.w	r3, r3, #2
  400a22:	6193      	str	r3, [r2, #24]
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  400a24:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400a26:	6993      	ldr	r3, [r2, #24]
  400a28:	f023 0301 	bic.w	r3, r3, #1
  400a2c:	6193      	str	r3, [r2, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw)) {
  400a2e:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400a30:	699b      	ldr	r3, [r3, #24]
  400a32:	f013 0f01 	tst.w	r3, #1
  400a36:	d1fa      	bne.n	400a2e <_can_async_init+0x3e>
}
  400a38:	2000      	movs	r0, #0
  400a3a:	bc30      	pop	{r4, r5}
  400a3c:	4770      	bx	lr
		dev->context = (void *)&_can0_context;
  400a3e:	4b58      	ldr	r3, [pc, #352]	; (400ba0 <_can_async_init+0x1b0>)
  400a40:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
  400a42:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  400a44:	6993      	ldr	r3, [r2, #24]
  400a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400a4a:	6193      	str	r3, [r2, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN0_NBTP_REG);
  400a4c:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  400a4e:	4a55      	ldr	r2, [pc, #340]	; (400ba4 <_can_async_init+0x1b4>)
  400a50:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
  400a52:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  400a54:	f640 1233 	movw	r2, #2355	; 0x933
  400a58:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN0_TDCR_REG);
  400a5a:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  400a5c:	f640 320b 	movw	r2, #2827	; 0xb0b
  400a60:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | (((uint32_t)can0_rx_fifo) & 0xFFFF));
  400a62:	6802      	ldr	r2, [r0, #0]
  400a64:	4b50      	ldr	r3, [pc, #320]	; (400ba8 <_can_async_init+0x1b8>)
  400a66:	b29b      	uxth	r3, r3
  400a68:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
}

static inline void hri_mcan_write_RXF0C_reg(const void *const hw, hri_mcan_rxf0c_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXF0C = data;
  400a6c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN0_RXESC_REG);
  400a70:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_RXESC_reg(const void *const hw, hri_mcan_rxesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXESC = data;
  400a72:	2400      	movs	r4, #0
  400a74:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN0_TXESC_REG);
  400a78:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_TXESC_reg(const void *const hw, hri_mcan_txesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXESC = data;
  400a7a:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | (((uint32_t)can0_tx_fifo) & 0xFFFF));
  400a7e:	6802      	ldr	r2, [r0, #0]
  400a80:	4b4a      	ldr	r3, [pc, #296]	; (400bac <_can_async_init+0x1bc>)
  400a82:	b29b      	uxth	r3, r3
  400a84:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
	((Mcan *)hw)->MCAN_TXBC = data;
  400a88:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | (((uint32_t)can0_tx_event_fifo) & 0xFFFF));
  400a8c:	6805      	ldr	r5, [r0, #0]
  400a8e:	4a48      	ldr	r2, [pc, #288]	; (400bb0 <_can_async_init+0x1c0>)
  400a90:	b293      	uxth	r3, r2
  400a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
}

static inline void hri_mcan_write_TXEFC_reg(const void *const hw, hri_mcan_txefc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXEFC = data;
  400a96:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN0_GFC_REG);
  400a9a:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  400a9c:	252b      	movs	r5, #43	; 0x2b
  400a9e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | (((uint32_t)can0_rx_std_filter) & 0xFFFF));
  400aa2:	6805      	ldr	r5, [r0, #0]
  400aa4:	f102 0310 	add.w	r3, r2, #16
  400aa8:	b29b      	uxth	r3, r3
  400aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_SIDFC = data;
  400aae:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | (((uint32_t)can0_rx_ext_filter) & 0xFFFF));
  400ab2:	6805      	ldr	r5, [r0, #0]
  400ab4:	f102 0318 	add.w	r3, r2, #24
  400ab8:	b29b      	uxth	r3, r3
  400aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_XIDFC = data;
  400abe:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN0_XIDAM_REG);
  400ac2:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  400ac4:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		_can0_dev = dev;
  400ac8:	6290      	str	r0, [r2, #40]	; 0x28
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400aca:	4b3a      	ldr	r3, [pc, #232]	; (400bb4 <_can_async_init+0x1c4>)
  400acc:	2208      	movs	r2, #8
  400ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400ad2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ad6:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ada:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ade:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400ae0:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400ae2:	2201      	movs	r2, #1
  400ae4:	65da      	str	r2, [r3, #92]	; 0x5c
  400ae6:	e795      	b.n	400a14 <_can_async_init+0x24>
		dev->context = (void *)&_can1_context;
  400ae8:	4b33      	ldr	r3, [pc, #204]	; (400bb8 <_can_async_init+0x1c8>)
  400aea:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
  400aec:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  400aee:	6993      	ldr	r3, [r2, #24]
  400af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400af4:	6193      	str	r3, [r2, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN1_NBTP_REG);
  400af6:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  400af8:	4a2a      	ldr	r2, [pc, #168]	; (400ba4 <_can_async_init+0x1b4>)
  400afa:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
  400afc:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  400afe:	f640 1233 	movw	r2, #2355	; 0x933
  400b02:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN1_TDCR_REG);
  400b04:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  400b06:	f640 320b 	movw	r2, #2827	; 0xb0b
  400b0a:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | (((uint32_t)can1_rx_fifo) & 0xFFFF));
  400b0c:	6802      	ldr	r2, [r0, #0]
  400b0e:	4b2b      	ldr	r3, [pc, #172]	; (400bbc <_can_async_init+0x1cc>)
  400b10:	b29b      	uxth	r3, r3
  400b12:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
	((Mcan *)hw)->MCAN_RXF0C = data;
  400b16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
  400b1a:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_RXESC = data;
  400b1c:	2200      	movs	r2, #0
  400b1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
  400b22:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TXESC = data;
  400b24:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | (((uint32_t)can1_tx_fifo) & 0xFFFF));
  400b28:	6801      	ldr	r1, [r0, #0]
  400b2a:	4b25      	ldr	r3, [pc, #148]	; (400bc0 <_can_async_init+0x1d0>)
  400b2c:	b29b      	uxth	r3, r3
  400b2e:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
	((Mcan *)hw)->MCAN_TXBC = data;
  400b32:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | (((uint32_t)can1_tx_event_fifo) & 0xFFFF));
  400b36:	6804      	ldr	r4, [r0, #0]
  400b38:	491d      	ldr	r1, [pc, #116]	; (400bb0 <_can_async_init+0x1c0>)
  400b3a:	f101 032c 	add.w	r3, r1, #44	; 0x2c
  400b3e:	b29b      	uxth	r3, r3
  400b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_TXEFC = data;
  400b44:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
  400b48:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  400b4a:	242b      	movs	r4, #43	; 0x2b
  400b4c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | (((uint32_t)can1_rx_std_filter) & 0xFFFF));
  400b50:	6804      	ldr	r4, [r0, #0]
  400b52:	f101 033c 	add.w	r3, r1, #60	; 0x3c
  400b56:	b29b      	uxth	r3, r3
  400b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_SIDFC = data;
  400b5c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | (((uint32_t)can1_rx_ext_filter) & 0xFFFF));
  400b60:	6804      	ldr	r4, [r0, #0]
  400b62:	f101 0344 	add.w	r3, r1, #68	; 0x44
  400b66:	b29b      	uxth	r3, r3
  400b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_XIDFC = data;
  400b6c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
  400b70:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  400b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		_can1_dev = dev;
  400b76:	6548      	str	r0, [r1, #84]	; 0x54
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b78:	4b0e      	ldr	r3, [pc, #56]	; (400bb4 <_can_async_init+0x1c4>)
  400b7a:	2220      	movs	r2, #32
  400b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400b80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b84:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b88:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b8c:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400b8e:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400b90:	2201      	movs	r2, #1
  400b92:	65da      	str	r2, [r3, #92]	; 0x5c
  400b94:	e741      	b.n	400a1a <_can_async_init+0x2a>
  400b96:	bf00      	nop
  400b98:	40030000 	.word	0x40030000
  400b9c:	40034000 	.word	0x40034000
  400ba0:	20400000 	.word	0x20400000
  400ba4:	06020a07 	.word	0x06020a07
  400ba8:	204001b4 	.word	0x204001b4
  400bac:	204002d4 	.word	0x204002d4
  400bb0:	204000d4 	.word	0x204000d4
  400bb4:	e000e100 	.word	0xe000e100
  400bb8:	20400014 	.word	0x20400014
  400bbc:	20400274 	.word	0x20400274
  400bc0:	20400214 	.word	0x20400214

00400bc4 <_can_async_enable>:
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  400bc4:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400bc6:	6993      	ldr	r3, [r2, #24]
  400bc8:	f023 0301 	bic.w	r3, r3, #1
  400bcc:	6193      	str	r3, [r2, #24]
}
  400bce:	2000      	movs	r0, #0
  400bd0:	4770      	bx	lr
	...

00400bd4 <_can_async_read>:
	if (!hri_mcan_read_RXF0S_F0FL_bf(dev->hw)) {
  400bd4:	6803      	ldr	r3, [r0, #0]
	return (((Mcan *)hw)->MCAN_RXF0S & MCAN_RXF0S_F0FL_Msk) >> MCAN_RXF0S_F0FL_Pos;
  400bd6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  400bda:	f012 0f7f 	tst.w	r2, #127	; 0x7f
  400bde:	d04d      	beq.n	400c7c <_can_async_read+0xa8>
{
  400be0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400be2:	b085      	sub	sp, #20
	return (((Mcan *)hw)->MCAN_RXF0S & MCAN_RXF0S_F0GI_Msk) >> MCAN_RXF0S_F0GI_Pos;
  400be4:	f8d3 60a4 	ldr.w	r6, [r3, #164]	; 0xa4
  400be8:	f3c6 2605 	ubfx	r6, r6, #8, #6
	if (dev->hw == MCAN0) {
  400bec:	4a26      	ldr	r2, [pc, #152]	; (400c88 <_can_async_read+0xb4>)
  400bee:	4293      	cmp	r3, r2
  400bf0:	d032      	beq.n	400c58 <_can_async_read+0x84>
	struct _can_rx_fifo_entry *f = NULL;
  400bf2:	2400      	movs	r4, #0
	if (dev->hw == MCAN1) {
  400bf4:	4a25      	ldr	r2, [pc, #148]	; (400c8c <_can_async_read+0xb8>)
  400bf6:	4293      	cmp	r3, r2
  400bf8:	d032      	beq.n	400c60 <_can_async_read+0x8c>
	if (f == NULL) {
  400bfa:	2c00      	cmp	r4, #0
  400bfc:	d041      	beq.n	400c82 <_can_async_read+0xae>
	if (f->R0.bit.XTD == 1) {
  400bfe:	6823      	ldr	r3, [r4, #0]
  400c00:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400c04:	d130      	bne.n	400c68 <_can_async_read+0x94>
		msg->fmt = CAN_FMT_STDID;
  400c06:	2300      	movs	r3, #0
  400c08:	734b      	strb	r3, [r1, #13]
		msg->id = f->R0.bit.ID >> 18;
  400c0a:	6823      	ldr	r3, [r4, #0]
  400c0c:	f3c3 438a 	ubfx	r3, r3, #18, #11
  400c10:	600b      	str	r3, [r1, #0]
	if (f->R0.bit.RTR == 1) {
  400c12:	6823      	ldr	r3, [r4, #0]
  400c14:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400c18:	d12d      	bne.n	400c76 <_can_async_read+0xa2>
  400c1a:	460d      	mov	r5, r1
  400c1c:	4607      	mov	r7, r0
	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
  400c1e:	4b1c      	ldr	r3, [pc, #112]	; (400c90 <_can_async_read+0xbc>)
  400c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400c22:	f10d 0e10 	add.w	lr, sp, #16
  400c26:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
  400c2a:	6863      	ldr	r3, [r4, #4]
  400c2c:	f3c3 4303 	ubfx	r3, r3, #16, #4
  400c30:	4473      	add	r3, lr
  400c32:	f813 2c10 	ldrb.w	r2, [r3, #-16]
  400c36:	732a      	strb	r2, [r5, #12]
	memcpy(msg->data, f->data, msg->len);
  400c38:	f104 0108 	add.w	r1, r4, #8
  400c3c:	68a8      	ldr	r0, [r5, #8]
  400c3e:	4b15      	ldr	r3, [pc, #84]	; (400c94 <_can_async_read+0xc0>)
  400c40:	4798      	blx	r3
	hri_mcan_write_RXF0A_F0AI_bf(dev->hw, get_index);
  400c42:	683a      	ldr	r2, [r7, #0]
	tmp = ((Mcan *)hw)->MCAN_RXF0A;
  400c44:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	tmp &= ~MCAN_RXF0A_F0AI_Msk;
  400c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	tmp |= MCAN_RXF0A_F0AI(data);
  400c4c:	431e      	orrs	r6, r3
	((Mcan *)hw)->MCAN_RXF0A = tmp;
  400c4e:	f8c2 60a8 	str.w	r6, [r2, #168]	; 0xa8
	return ERR_NONE;
  400c52:	2000      	movs	r0, #0
}
  400c54:	b005      	add	sp, #20
  400c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
  400c58:	4c0f      	ldr	r4, [pc, #60]	; (400c98 <_can_async_read+0xc4>)
  400c5a:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  400c5e:	e7c9      	b.n	400bf4 <_can_async_read+0x20>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
  400c60:	4c0e      	ldr	r4, [pc, #56]	; (400c9c <_can_async_read+0xc8>)
  400c62:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  400c66:	e7c8      	b.n	400bfa <_can_async_read+0x26>
		msg->fmt = CAN_FMT_EXTID;
  400c68:	2301      	movs	r3, #1
  400c6a:	734b      	strb	r3, [r1, #13]
		msg->id  = f->R0.bit.ID;
  400c6c:	6823      	ldr	r3, [r4, #0]
  400c6e:	f3c3 031c 	ubfx	r3, r3, #0, #29
  400c72:	600b      	str	r3, [r1, #0]
  400c74:	e7cd      	b.n	400c12 <_can_async_read+0x3e>
		msg->type = CAN_TYPE_REMOTE;
  400c76:	2301      	movs	r3, #1
  400c78:	710b      	strb	r3, [r1, #4]
  400c7a:	e7ce      	b.n	400c1a <_can_async_read+0x46>
		return ERR_NOT_FOUND;
  400c7c:	f06f 0009 	mvn.w	r0, #9
  400c80:	4770      	bx	lr
		return ERR_NO_RESOURCE;
  400c82:	f06f 001b 	mvn.w	r0, #27
  400c86:	e7e5      	b.n	400c54 <_can_async_read+0x80>
  400c88:	40030000 	.word	0x40030000
  400c8c:	40034000 	.word	0x40034000
  400c90:	0040283c 	.word	0x0040283c
  400c94:	00401781 	.word	0x00401781
  400c98:	204001b4 	.word	0x204001b4
  400c9c:	20400274 	.word	0x20400274

00400ca0 <_can_async_write>:
{
  400ca0:	b538      	push	{r3, r4, r5, lr}
	if (hri_mcan_get_TXFQS_TFQF_bit(dev->hw)) {
  400ca2:	6802      	ldr	r2, [r0, #0]
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQF) > 0;
  400ca4:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
  400ca8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400cac:	f040 8082 	bne.w	400db4 <_can_async_write+0x114>
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQPI_Msk) >> MCAN_TXFQS_TFQPI_Pos;
  400cb0:	f8d2 50c4 	ldr.w	r5, [r2, #196]	; 0xc4
  400cb4:	f3c5 4504 	ubfx	r5, r5, #16, #5
	if (dev->hw == MCAN0) {
  400cb8:	4b41      	ldr	r3, [pc, #260]	; (400dc0 <_can_async_write+0x120>)
  400cba:	429a      	cmp	r2, r3
  400cbc:	d034      	beq.n	400d28 <_can_async_write+0x88>
	struct _can_tx_fifo_entry *f = NULL;
  400cbe:	2300      	movs	r3, #0
	if (dev->hw == MCAN1) {
  400cc0:	4c40      	ldr	r4, [pc, #256]	; (400dc4 <_can_async_write+0x124>)
  400cc2:	42a2      	cmp	r2, r4
  400cc4:	d034      	beq.n	400d30 <_can_async_write+0x90>
	if (f == NULL) {
  400cc6:	2b00      	cmp	r3, #0
  400cc8:	d077      	beq.n	400dba <_can_async_write+0x11a>
	if (msg->fmt == CAN_FMT_EXTID) {
  400cca:	7b4a      	ldrb	r2, [r1, #13]
  400ccc:	2a01      	cmp	r2, #1
  400cce:	d033      	beq.n	400d38 <_can_async_write+0x98>
		f->T0.val = msg->id << 18;
  400cd0:	680a      	ldr	r2, [r1, #0]
  400cd2:	0492      	lsls	r2, r2, #18
  400cd4:	601a      	str	r2, [r3, #0]
	if (msg->len <= 8) {
  400cd6:	7b0a      	ldrb	r2, [r1, #12]
  400cd8:	2a08      	cmp	r2, #8
  400cda:	d834      	bhi.n	400d46 <_can_async_write+0xa6>
		f->T1.bit.DLC = msg->len;
  400cdc:	685c      	ldr	r4, [r3, #4]
  400cde:	f362 4413 	bfi	r4, r2, #16, #4
  400ce2:	605c      	str	r4, [r3, #4]
  400ce4:	4604      	mov	r4, r0
	f->T1.bit.FDF = hri_mcan_get_CCCR_FDOE_bit(dev->hw);
  400ce6:	6802      	ldr	r2, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400ce8:	6992      	ldr	r2, [r2, #24]
	tmp = (tmp & MCAN_CCCR_FDOE) >> MCAN_CCCR_FDOE_Pos;
  400cea:	f3c2 2200 	ubfx	r2, r2, #8, #1
  400cee:	6858      	ldr	r0, [r3, #4]
  400cf0:	f362 5055 	bfi	r0, r2, #21, #1
  400cf4:	6058      	str	r0, [r3, #4]
	f->T1.bit.BRS = hri_mcan_get_CCCR_BRSE_bit(dev->hw);
  400cf6:	6822      	ldr	r2, [r4, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400cf8:	6992      	ldr	r2, [r2, #24]
	tmp = (tmp & MCAN_CCCR_BRSE) >> MCAN_CCCR_BRSE_Pos;
  400cfa:	f3c2 2240 	ubfx	r2, r2, #9, #1
  400cfe:	6858      	ldr	r0, [r3, #4]
  400d00:	f362 5014 	bfi	r0, r2, #20, #1
  400d04:	6058      	str	r0, [r3, #4]
	memcpy(f->data, msg->data, msg->len);
  400d06:	7b0a      	ldrb	r2, [r1, #12]
  400d08:	6889      	ldr	r1, [r1, #8]
  400d0a:	f103 0008 	add.w	r0, r3, #8
  400d0e:	4b2e      	ldr	r3, [pc, #184]	; (400dc8 <_can_async_write+0x128>)
  400d10:	4798      	blx	r3
	hri_mcan_write_TXBAR_reg(dev->hw, 1 << hri_mcan_read_TXFQS_TFQPI_bf(dev->hw));
  400d12:	6821      	ldr	r1, [r4, #0]
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQPI_Msk) >> MCAN_TXFQS_TFQPI_Pos;
  400d14:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
  400d18:	f3c2 4204 	ubfx	r2, r2, #16, #5
  400d1c:	2301      	movs	r3, #1
  400d1e:	4093      	lsls	r3, r2
	((Mcan *)hw)->MCAN_TXBAR = data;
  400d20:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
	return ERR_NONE;
  400d24:	2000      	movs	r0, #0
  400d26:	bd38      	pop	{r3, r4, r5, pc}
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
  400d28:	4b28      	ldr	r3, [pc, #160]	; (400dcc <_can_async_write+0x12c>)
  400d2a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400d2e:	e7c7      	b.n	400cc0 <_can_async_write+0x20>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
  400d30:	4b27      	ldr	r3, [pc, #156]	; (400dd0 <_can_async_write+0x130>)
  400d32:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400d36:	e7c6      	b.n	400cc6 <_can_async_write+0x26>
		f->T0.val     = msg->id;
  400d38:	680a      	ldr	r2, [r1, #0]
  400d3a:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
  400d3c:	681a      	ldr	r2, [r3, #0]
  400d3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400d42:	601a      	str	r2, [r3, #0]
  400d44:	e7c7      	b.n	400cd6 <_can_async_write+0x36>
	} else if (msg->len <= 12) {
  400d46:	2a0c      	cmp	r2, #12
  400d48:	d805      	bhi.n	400d56 <_can_async_write+0xb6>
		f->T1.bit.DLC = 0x9;
  400d4a:	685a      	ldr	r2, [r3, #4]
  400d4c:	2409      	movs	r4, #9
  400d4e:	f364 4213 	bfi	r2, r4, #16, #4
  400d52:	605a      	str	r2, [r3, #4]
  400d54:	e7c6      	b.n	400ce4 <_can_async_write+0x44>
	} else if (msg->len <= 16) {
  400d56:	2a10      	cmp	r2, #16
  400d58:	d805      	bhi.n	400d66 <_can_async_write+0xc6>
		f->T1.bit.DLC = 0xA;
  400d5a:	685a      	ldr	r2, [r3, #4]
  400d5c:	240a      	movs	r4, #10
  400d5e:	f364 4213 	bfi	r2, r4, #16, #4
  400d62:	605a      	str	r2, [r3, #4]
  400d64:	e7be      	b.n	400ce4 <_can_async_write+0x44>
	} else if (msg->len <= 20) {
  400d66:	2a14      	cmp	r2, #20
  400d68:	d805      	bhi.n	400d76 <_can_async_write+0xd6>
		f->T1.bit.DLC = 0xB;
  400d6a:	685a      	ldr	r2, [r3, #4]
  400d6c:	240b      	movs	r4, #11
  400d6e:	f364 4213 	bfi	r2, r4, #16, #4
  400d72:	605a      	str	r2, [r3, #4]
  400d74:	e7b6      	b.n	400ce4 <_can_async_write+0x44>
	} else if (msg->len <= 24) {
  400d76:	2a18      	cmp	r2, #24
  400d78:	d805      	bhi.n	400d86 <_can_async_write+0xe6>
		f->T1.bit.DLC = 0xC;
  400d7a:	685a      	ldr	r2, [r3, #4]
  400d7c:	240c      	movs	r4, #12
  400d7e:	f364 4213 	bfi	r2, r4, #16, #4
  400d82:	605a      	str	r2, [r3, #4]
  400d84:	e7ae      	b.n	400ce4 <_can_async_write+0x44>
	} else if (msg->len <= 32) {
  400d86:	2a20      	cmp	r2, #32
  400d88:	d805      	bhi.n	400d96 <_can_async_write+0xf6>
		f->T1.bit.DLC = 0xD;
  400d8a:	685a      	ldr	r2, [r3, #4]
  400d8c:	240d      	movs	r4, #13
  400d8e:	f364 4213 	bfi	r2, r4, #16, #4
  400d92:	605a      	str	r2, [r3, #4]
  400d94:	e7a6      	b.n	400ce4 <_can_async_write+0x44>
	} else if (msg->len <= 48) {
  400d96:	2a30      	cmp	r2, #48	; 0x30
  400d98:	d805      	bhi.n	400da6 <_can_async_write+0x106>
		f->T1.bit.DLC = 0xE;
  400d9a:	685a      	ldr	r2, [r3, #4]
  400d9c:	240e      	movs	r4, #14
  400d9e:	f364 4213 	bfi	r2, r4, #16, #4
  400da2:	605a      	str	r2, [r3, #4]
  400da4:	e79e      	b.n	400ce4 <_can_async_write+0x44>
	} else if (msg->len <= 64) {
  400da6:	2a40      	cmp	r2, #64	; 0x40
  400da8:	d89c      	bhi.n	400ce4 <_can_async_write+0x44>
		f->T1.bit.DLC = 0xF;
  400daa:	685a      	ldr	r2, [r3, #4]
  400dac:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
  400db0:	605a      	str	r2, [r3, #4]
  400db2:	e797      	b.n	400ce4 <_can_async_write+0x44>
		return ERR_NO_RESOURCE;
  400db4:	f06f 001b 	mvn.w	r0, #27
  400db8:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NO_RESOURCE;
  400dba:	f06f 001b 	mvn.w	r0, #27
}
  400dbe:	bd38      	pop	{r3, r4, r5, pc}
  400dc0:	40030000 	.word	0x40030000
  400dc4:	40034000 	.word	0x40034000
  400dc8:	00401781 	.word	0x00401781
  400dcc:	204002d4 	.word	0x204002d4
  400dd0:	20400214 	.word	0x20400214

00400dd4 <_can_async_set_irq_state>:
	if (type == CAN_ASYNC_RX_CB) {
  400dd4:	b121      	cbz	r1, 400de0 <_can_async_set_irq_state+0xc>
	} else if (type == CAN_ASYNC_TX_CB) {
  400dd6:	2901      	cmp	r1, #1
  400dd8:	d009      	beq.n	400dee <_can_async_set_irq_state+0x1a>
	} else if (type == CAN_ASYNC_IRQ_CB) {
  400dda:	2902      	cmp	r1, #2
  400ddc:	d014      	beq.n	400e08 <_can_async_set_irq_state+0x34>
  400dde:	4770      	bx	lr
		hri_mcan_write_IE_RF0NE_bit(dev->hw, state);
  400de0:	6801      	ldr	r1, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400de2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~MCAN_IE_RF0NE;
  400de4:	f023 0301 	bic.w	r3, r3, #1
	tmp |= value << MCAN_IE_RF0NE_Pos;
  400de8:	431a      	orrs	r2, r3
	((Mcan *)hw)->MCAN_IE = tmp;
  400dea:	654a      	str	r2, [r1, #84]	; 0x54
  400dec:	4770      	bx	lr
		hri_mcan_write_IE_TCE_bit(dev->hw, state);
  400dee:	6801      	ldr	r1, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400df0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~MCAN_IE_TCE;
  400df2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmp |= value << MCAN_IE_TCE_Pos;
  400df6:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
	((Mcan *)hw)->MCAN_IE = tmp;
  400dfa:	654a      	str	r2, [r1, #84]	; 0x54
		hri_mcan_write_TXBTIE_reg(dev->hw, MCAN_TXBTIE_MASK);
  400dfc:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TXBTIE = data;
  400dfe:	f04f 32ff 	mov.w	r2, #4294967295
  400e02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  400e06:	4770      	bx	lr
		ie = hri_mcan_get_IE_reg(dev->hw, MCAN_IE_RF0NE | MCAN_IE_TCE);
  400e08:	6802      	ldr	r2, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400e0a:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
  400e0c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
  400e10:	059b      	lsls	r3, r3, #22
  400e12:	0d9b      	lsrs	r3, r3, #22
	((Mcan *)hw)->MCAN_IE = data;
  400e14:	6553      	str	r3, [r2, #84]	; 0x54
	return;
  400e16:	e7e2      	b.n	400dde <_can_async_set_irq_state+0xa>

00400e18 <MCAN0_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN0_INT0_Handler(void)
{
  400e18:	b508      	push	{r3, lr}
	_can_irq_handler(_can0_dev);
  400e1a:	4b02      	ldr	r3, [pc, #8]	; (400e24 <MCAN0_INT0_Handler+0xc>)
  400e1c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  400e1e:	4b02      	ldr	r3, [pc, #8]	; (400e28 <MCAN0_INT0_Handler+0x10>)
  400e20:	4798      	blx	r3
  400e22:	bd08      	pop	{r3, pc}
  400e24:	204000d4 	.word	0x204000d4
  400e28:	0040097d 	.word	0x0040097d

00400e2c <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  400e2c:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  400e2e:	4b02      	ldr	r3, [pc, #8]	; (400e38 <MCAN1_INT0_Handler+0xc>)
  400e30:	6d58      	ldr	r0, [r3, #84]	; 0x54
  400e32:	4b02      	ldr	r3, [pc, #8]	; (400e3c <MCAN1_INT0_Handler+0x10>)
  400e34:	4798      	blx	r3
  400e36:	bd08      	pop	{r3, pc}
  400e38:	204000d4 	.word	0x204000d4
  400e3c:	0040097d 	.word	0x0040097d

00400e40 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400e40:	490e      	ldr	r1, [pc, #56]	; (400e7c <_pmc_init_sources+0x3c>)
  400e42:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400e44:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400e48:	4b0d      	ldr	r3, [pc, #52]	; (400e80 <_pmc_init_sources+0x40>)
  400e4a:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400e4c:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400e4e:	4b0b      	ldr	r3, [pc, #44]	; (400e7c <_pmc_init_sources+0x3c>)
  400e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400e52:	f013 0f01 	tst.w	r3, #1
  400e56:	d0fa      	beq.n	400e4e <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400e58:	4b08      	ldr	r3, [pc, #32]	; (400e7c <_pmc_init_sources+0x3c>)
  400e5a:	6a19      	ldr	r1, [r3, #32]
  400e5c:	4a09      	ldr	r2, [pc, #36]	; (400e84 <_pmc_init_sources+0x44>)
  400e5e:	430a      	orrs	r2, r1
  400e60:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400e62:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400e64:	4a08      	ldr	r2, [pc, #32]	; (400e88 <_pmc_init_sources+0x48>)
  400e66:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400e68:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400e6a:	4a08      	ldr	r2, [pc, #32]	; (400e8c <_pmc_init_sources+0x4c>)
  400e6c:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400e6e:	4b03      	ldr	r3, [pc, #12]	; (400e7c <_pmc_init_sources+0x3c>)
  400e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400e72:	f013 0f02 	tst.w	r3, #2
  400e76:	d0fa      	beq.n	400e6e <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400e78:	4770      	bx	lr
  400e7a:	bf00      	nop
  400e7c:	400e0600 	.word	0x400e0600
  400e80:	00373e01 	.word	0x00373e01
  400e84:	01370000 	.word	0x01370000
  400e88:	f800ffff 	.word	0xf800ffff
  400e8c:	20183f01 	.word	0x20183f01

00400e90 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400e90:	4a11      	ldr	r2, [pc, #68]	; (400ed8 <_pmc_init_master_clock+0x48>)
  400e92:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400e98:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400e9a:	4b0f      	ldr	r3, [pc, #60]	; (400ed8 <_pmc_init_master_clock+0x48>)
  400e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400e9e:	f013 0f08 	tst.w	r3, #8
  400ea2:	d0fa      	beq.n	400e9a <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400ea4:	4a0c      	ldr	r2, [pc, #48]	; (400ed8 <_pmc_init_master_clock+0x48>)
  400ea6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400eb0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400eb2:	4b09      	ldr	r3, [pc, #36]	; (400ed8 <_pmc_init_master_clock+0x48>)
  400eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400eb6:	f013 0f08 	tst.w	r3, #8
  400eba:	d0fa      	beq.n	400eb2 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400ebc:	4a06      	ldr	r2, [pc, #24]	; (400ed8 <_pmc_init_master_clock+0x48>)
  400ebe:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400ec0:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400ec4:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400ec8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400eca:	4b03      	ldr	r3, [pc, #12]	; (400ed8 <_pmc_init_master_clock+0x48>)
  400ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400ece:	f013 0f08 	tst.w	r3, #8
  400ed2:	d0fa      	beq.n	400eca <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400ed4:	4770      	bx	lr
  400ed6:	bf00      	nop
  400ed8:	400e0600 	.word	0x400e0600

00400edc <_pmc_init_program_clock>:
}

static inline void hri_pmc_write_PCK_reg(const void *const hw, uint8_t index, hri_pmc_pck_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->PMC_PCK[index] = data;
  400edc:	2201      	movs	r2, #1
  400ede:	4b06      	ldr	r3, [pc, #24]	; (400ef8 <_pmc_init_program_clock+0x1c>)
  400ee0:	655a      	str	r2, [r3, #84]	; 0x54
	return (((Pmc *)hw)->PMC_SR & PMC_SR_PCKRDY5) > 0;
  400ee2:	4b05      	ldr	r3, [pc, #20]	; (400ef8 <_pmc_init_program_clock+0x1c>)
  400ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK4);
#endif

#if (CONF_CLK_PCK5_ENABLE == 1)
	hri_pmc_write_PCK_reg(PMC, 5, PMC_PCK_CSS(CONF_CLK_GEN_PCK5_SRC) | PMC_PCK_PRES(CONF_PCK5_PRESC - 1));
	while (!hri_pmc_get_SR_PCKRDY5_bit(PMC)) {
  400ee6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  400eea:	d0fa      	beq.n	400ee2 <_pmc_init_program_clock+0x6>
	((Pmc *)hw)->PMC_SCER = data;
  400eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400ef0:	4b01      	ldr	r3, [pc, #4]	; (400ef8 <_pmc_init_program_clock+0x1c>)
  400ef2:	601a      	str	r2, [r3, #0]
  400ef4:	4770      	bx	lr
  400ef6:	bf00      	nop
  400ef8:	400e0600 	.word	0x400e0600

00400efc <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400efc:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400efe:	4b03      	ldr	r3, [pc, #12]	; (400f0c <_pmc_init+0x10>)
  400f00:	4798      	blx	r3
	_pmc_init_master_clock();
  400f02:	4b03      	ldr	r3, [pc, #12]	; (400f10 <_pmc_init+0x14>)
  400f04:	4798      	blx	r3
	_pmc_init_program_clock();
  400f06:	4b03      	ldr	r3, [pc, #12]	; (400f14 <_pmc_init+0x18>)
  400f08:	4798      	blx	r3
  400f0a:	bd08      	pop	{r3, pc}
  400f0c:	00400e41 	.word	0x00400e41
  400f10:	00400e91 	.word	0x00400e91
  400f14:	00400edd 	.word	0x00400edd

00400f18 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400f18:	2300      	movs	r3, #0
  400f1a:	b13b      	cbz	r3, 400f2c <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  400f1c:	2000      	movs	r0, #0
  400f1e:	4770      	bx	lr
			return &(_tcs[i]);
  400f20:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  400f24:	00a3      	lsls	r3, r4, #2
  400f26:	4608      	mov	r0, r1
  400f28:	4418      	add	r0, r3
  400f2a:	e00c      	b.n	400f46 <get_cfg+0x2e>
{
  400f2c:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  400f2e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  400f32:	008a      	lsls	r2, r1, #2
  400f34:	4905      	ldr	r1, [pc, #20]	; (400f4c <get_cfg+0x34>)
  400f36:	588a      	ldr	r2, [r1, r2]
  400f38:	4282      	cmp	r2, r0
  400f3a:	d0f1      	beq.n	400f20 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400f3c:	3301      	adds	r3, #1
  400f3e:	b2db      	uxtb	r3, r3
  400f40:	2b00      	cmp	r3, #0
  400f42:	d0f4      	beq.n	400f2e <get_cfg+0x16>
	return NULL;
  400f44:	2000      	movs	r0, #0
}
  400f46:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f4a:	4770      	bx	lr
  400f4c:	20400028 	.word	0x20400028

00400f50 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  400f50:	4b03      	ldr	r3, [pc, #12]	; (400f60 <_tc_init_irq_param+0x10>)
  400f52:	4298      	cmp	r0, r3
  400f54:	d000      	beq.n	400f58 <_tc_init_irq_param+0x8>
  400f56:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  400f58:	4b02      	ldr	r3, [pc, #8]	; (400f64 <_tc_init_irq_param+0x14>)
  400f5a:	6019      	str	r1, [r3, #0]
	}
}
  400f5c:	e7fb      	b.n	400f56 <_tc_init_irq_param+0x6>
  400f5e:	bf00      	nop
  400f60:	4000c000 	.word	0x4000c000
  400f64:	2040012c 	.word	0x2040012c

00400f68 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  400f68:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  400f6a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  400f6c:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  400f6e:	f013 0f10 	tst.w	r3, #16
  400f72:	d100      	bne.n	400f76 <tc_interrupt_handler+0xe>
  400f74:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  400f76:	6803      	ldr	r3, [r0, #0]
  400f78:	4798      	blx	r3
	}
}
  400f7a:	e7fb      	b.n	400f74 <tc_interrupt_handler+0xc>

00400f7c <_timer_init>:
{
  400f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f7e:	4607      	mov	r7, r0
  400f80:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  400f82:	4608      	mov	r0, r1
  400f84:	4b27      	ldr	r3, [pc, #156]	; (401024 <_timer_init+0xa8>)
  400f86:	4798      	blx	r3
  400f88:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  400f8a:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  400f8c:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  400f8e:	2291      	movs	r2, #145	; 0x91
  400f90:	4925      	ldr	r1, [pc, #148]	; (401028 <_timer_init+0xac>)
  400f92:	2001      	movs	r0, #1
  400f94:	4b25      	ldr	r3, [pc, #148]	; (40102c <_timer_init+0xb0>)
  400f96:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  400f98:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  400f9c:	d001      	beq.n	400fa2 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  400f9e:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  400fa2:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  400fa4:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  400fa6:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  400fa8:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  400faa:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  400fac:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  400fae:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  400fb0:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  400fb2:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  400fb4:	2310      	movs	r3, #16
  400fb6:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  400fb8:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  400fba:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  400fbe:	4639      	mov	r1, r7
  400fc0:	4620      	mov	r0, r4
  400fc2:	4b1b      	ldr	r3, [pc, #108]	; (401030 <_timer_init+0xb4>)
  400fc4:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400fc6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400fca:	2b00      	cmp	r3, #0
  400fcc:	db0d      	blt.n	400fea <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fce:	095a      	lsrs	r2, r3, #5
  400fd0:	f003 031f 	and.w	r3, r3, #31
  400fd4:	2101      	movs	r1, #1
  400fd6:	fa01 f303 	lsl.w	r3, r1, r3
  400fda:	3220      	adds	r2, #32
  400fdc:	4915      	ldr	r1, [pc, #84]	; (401034 <_timer_init+0xb8>)
  400fde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400fe2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400fe6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  400fea:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400fee:	2b00      	cmp	r3, #0
  400ff0:	db09      	blt.n	401006 <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ff2:	095a      	lsrs	r2, r3, #5
  400ff4:	f003 031f 	and.w	r3, r3, #31
  400ff8:	2101      	movs	r1, #1
  400ffa:	fa01 f303 	lsl.w	r3, r1, r3
  400ffe:	3260      	adds	r2, #96	; 0x60
  401000:	490c      	ldr	r1, [pc, #48]	; (401034 <_timer_init+0xb8>)
  401002:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401006:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40100a:	2b00      	cmp	r3, #0
  40100c:	db08      	blt.n	401020 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40100e:	0959      	lsrs	r1, r3, #5
  401010:	f003 031f 	and.w	r3, r3, #31
  401014:	2201      	movs	r2, #1
  401016:	fa02 f303 	lsl.w	r3, r2, r3
  40101a:	4a06      	ldr	r2, [pc, #24]	; (401034 <_timer_init+0xb8>)
  40101c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401020:	2000      	movs	r0, #0
  401022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401024:	00400f19 	.word	0x00400f19
  401028:	0040284c 	.word	0x0040284c
  40102c:	00400875 	.word	0x00400875
  401030:	00400f51 	.word	0x00400f51
  401034:	e000e100 	.word	0xe000e100

00401038 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  401038:	2000      	movs	r0, #0
  40103a:	4770      	bx	lr

0040103c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  40103c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  40103e:	4b02      	ldr	r3, [pc, #8]	; (401048 <TC0_Handler+0xc>)
  401040:	6818      	ldr	r0, [r3, #0]
  401042:	4b02      	ldr	r3, [pc, #8]	; (40104c <TC0_Handler+0x10>)
  401044:	4798      	blx	r3
  401046:	bd08      	pop	{r3, pc}
  401048:	2040012c 	.word	0x2040012c
  40104c:	00400f69 	.word	0x00400f69

00401050 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  401050:	b510      	push	{r4, lr}
	ASSERT(hw);
  401052:	4604      	mov	r4, r0
  401054:	f240 2219 	movw	r2, #537	; 0x219
  401058:	4912      	ldr	r1, [pc, #72]	; (4010a4 <_uart_get_hardware_index+0x54>)
  40105a:	3000      	adds	r0, #0
  40105c:	bf18      	it	ne
  40105e:	2001      	movne	r0, #1
  401060:	4b11      	ldr	r3, [pc, #68]	; (4010a8 <_uart_get_hardware_index+0x58>)
  401062:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  401064:	4b11      	ldr	r3, [pc, #68]	; (4010ac <_uart_get_hardware_index+0x5c>)
  401066:	429c      	cmp	r4, r3
  401068:	d013      	beq.n	401092 <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  40106a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40106e:	429c      	cmp	r4, r3
  401070:	d011      	beq.n	401096 <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  401072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401076:	429c      	cmp	r4, r3
  401078:	d00f      	beq.n	40109a <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  40107a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40107e:	429c      	cmp	r4, r3
  401080:	d00d      	beq.n	40109e <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  401082:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401086:	429c      	cmp	r4, r3
  401088:	d001      	beq.n	40108e <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  40108a:	20ff      	movs	r0, #255	; 0xff
	}
}
  40108c:	bd10      	pop	{r4, pc}
		return 4;
  40108e:	2004      	movs	r0, #4
  401090:	bd10      	pop	{r4, pc}
		return 0;
  401092:	2000      	movs	r0, #0
  401094:	bd10      	pop	{r4, pc}
		return 1;
  401096:	2001      	movs	r0, #1
  401098:	bd10      	pop	{r4, pc}
		return 2;
  40109a:	2002      	movs	r0, #2
  40109c:	bd10      	pop	{r4, pc}
		return 3;
  40109e:	2003      	movs	r0, #3
  4010a0:	bd10      	pop	{r4, pc}
  4010a2:	bf00      	nop
  4010a4:	0040286c 	.word	0x0040286c
  4010a8:	00400875 	.word	0x00400875
  4010ac:	400e0800 	.word	0x400e0800

004010b0 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  4010b0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4010b2:	4604      	mov	r4, r0
  4010b4:	f44f 7227 	mov.w	r2, #668	; 0x29c
  4010b8:	490e      	ldr	r1, [pc, #56]	; (4010f4 <_get_uart_index+0x44>)
  4010ba:	3000      	adds	r0, #0
  4010bc:	bf18      	it	ne
  4010be:	2001      	movne	r0, #1
  4010c0:	4b0d      	ldr	r3, [pc, #52]	; (4010f8 <_get_uart_index+0x48>)
  4010c2:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  4010c4:	4620      	mov	r0, r4
  4010c6:	4b0d      	ldr	r3, [pc, #52]	; (4010fc <_get_uart_index+0x4c>)
  4010c8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  4010ca:	2300      	movs	r3, #0
  4010cc:	b143      	cbz	r3, 4010e0 <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4010ce:	f240 22a6 	movw	r2, #678	; 0x2a6
  4010d2:	4908      	ldr	r1, [pc, #32]	; (4010f4 <_get_uart_index+0x44>)
  4010d4:	2000      	movs	r0, #0
  4010d6:	4b08      	ldr	r3, [pc, #32]	; (4010f8 <_get_uart_index+0x48>)
  4010d8:	4798      	blx	r3
	return 0;
  4010da:	2300      	movs	r3, #0
}
  4010dc:	4618      	mov	r0, r3
  4010de:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  4010e0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4010e4:	008a      	lsls	r2, r1, #2
  4010e6:	4906      	ldr	r1, [pc, #24]	; (401100 <_get_uart_index+0x50>)
  4010e8:	5c8a      	ldrb	r2, [r1, r2]
  4010ea:	4290      	cmp	r0, r2
  4010ec:	d0f6      	beq.n	4010dc <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  4010ee:	3301      	adds	r3, #1
  4010f0:	b2db      	uxtb	r3, r3
  4010f2:	e7eb      	b.n	4010cc <_get_uart_index+0x1c>
  4010f4:	0040286c 	.word	0x0040286c
  4010f8:	00400875 	.word	0x00400875
  4010fc:	00401051 	.word	0x00401051
  401100:	00402860 	.word	0x00402860

00401104 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  401104:	b510      	push	{r4, lr}
	ASSERT(hw);
  401106:	4604      	mov	r4, r0
  401108:	f240 22b3 	movw	r2, #691	; 0x2b3
  40110c:	490d      	ldr	r1, [pc, #52]	; (401144 <_uart_init+0x40>)
  40110e:	3000      	adds	r0, #0
  401110:	bf18      	it	ne
  401112:	2001      	movne	r0, #1
  401114:	4b0c      	ldr	r3, [pc, #48]	; (401148 <_uart_init+0x44>)
  401116:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  401118:	4620      	mov	r0, r4
  40111a:	4b0c      	ldr	r3, [pc, #48]	; (40114c <_uart_init+0x48>)
  40111c:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  40111e:	4b0c      	ldr	r3, [pc, #48]	; (401150 <_uart_init+0x4c>)
  401120:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  401124:	23ac      	movs	r3, #172	; 0xac
  401126:	6023      	str	r3, [r4, #0]
  401128:	f44f 7380 	mov.w	r3, #256	; 0x100
  40112c:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  40112e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401132:	0082      	lsls	r2, r0, #2
  401134:	4b07      	ldr	r3, [pc, #28]	; (401154 <_uart_init+0x50>)
  401136:	4413      	add	r3, r2
  401138:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  40113a:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  40113c:	2351      	movs	r3, #81	; 0x51
  40113e:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  401140:	2000      	movs	r0, #0
  401142:	bd10      	pop	{r4, pc}
  401144:	0040286c 	.word	0x0040286c
  401148:	00400875 	.word	0x00400875
  40114c:	004010b1 	.word	0x004010b1
  401150:	55415200 	.word	0x55415200
  401154:	00402860 	.word	0x00402860

00401158 <_usart_sync_init>:
{
  401158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40115a:	460c      	mov	r4, r1
	ASSERT(device);
  40115c:	4e09      	ldr	r6, [pc, #36]	; (401184 <_usart_sync_init+0x2c>)
  40115e:	4607      	mov	r7, r0
  401160:	22a9      	movs	r2, #169	; 0xa9
  401162:	4631      	mov	r1, r6
  401164:	3000      	adds	r0, #0
  401166:	bf18      	it	ne
  401168:	2001      	movne	r0, #1
  40116a:	4d07      	ldr	r5, [pc, #28]	; (401188 <_usart_sync_init+0x30>)
  40116c:	47a8      	blx	r5
	ASSERT(hw);
  40116e:	22aa      	movs	r2, #170	; 0xaa
  401170:	4631      	mov	r1, r6
  401172:	1c20      	adds	r0, r4, #0
  401174:	bf18      	it	ne
  401176:	2001      	movne	r0, #1
  401178:	47a8      	blx	r5
	device->hw = hw;
  40117a:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  40117c:	4620      	mov	r0, r4
  40117e:	4b03      	ldr	r3, [pc, #12]	; (40118c <_usart_sync_init+0x34>)
  401180:	4798      	blx	r3
}
  401182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401184:	0040286c 	.word	0x0040286c
  401188:	00400875 	.word	0x00400875
  40118c:	00401105 	.word	0x00401105

00401190 <_usart_sync_enable>:
{
  401190:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401192:	4e0a      	ldr	r6, [pc, #40]	; (4011bc <_usart_sync_enable+0x2c>)
  401194:	4604      	mov	r4, r0
  401196:	22f2      	movs	r2, #242	; 0xf2
  401198:	4631      	mov	r1, r6
  40119a:	3000      	adds	r0, #0
  40119c:	bf18      	it	ne
  40119e:	2001      	movne	r0, #1
  4011a0:	4d07      	ldr	r5, [pc, #28]	; (4011c0 <_usart_sync_enable+0x30>)
  4011a2:	47a8      	blx	r5
	_uart_enable(device->hw);
  4011a4:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _uart_enable(void *const hw)
{
	ASSERT(hw);
  4011a6:	f240 22d7 	movw	r2, #727	; 0x2d7
  4011aa:	4631      	mov	r1, r6
  4011ac:	1c20      	adds	r0, r4, #0
  4011ae:	bf18      	it	ne
  4011b0:	2001      	movne	r0, #1
  4011b2:	47a8      	blx	r5
	((Uart *)hw)->UART_CR = data;
  4011b4:	2350      	movs	r3, #80	; 0x50
  4011b6:	6023      	str	r3, [r4, #0]
  4011b8:	bd70      	pop	{r4, r5, r6, pc}
  4011ba:	bf00      	nop
  4011bc:	0040286c 	.word	0x0040286c
  4011c0:	00400875 	.word	0x00400875

004011c4 <_usart_sync_write_byte>:
{
  4011c4:	b538      	push	{r3, r4, r5, lr}
  4011c6:	460c      	mov	r4, r1
	ASSERT(device);
  4011c8:	4605      	mov	r5, r0
  4011ca:	f240 1295 	movw	r2, #405	; 0x195
  4011ce:	4904      	ldr	r1, [pc, #16]	; (4011e0 <_usart_sync_write_byte+0x1c>)
  4011d0:	3000      	adds	r0, #0
  4011d2:	bf18      	it	ne
  4011d4:	2001      	movne	r0, #1
  4011d6:	4b03      	ldr	r3, [pc, #12]	; (4011e4 <_usart_sync_write_byte+0x20>)
  4011d8:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  4011da:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  4011dc:	61dc      	str	r4, [r3, #28]
  4011de:	bd38      	pop	{r3, r4, r5, pc}
  4011e0:	0040286c 	.word	0x0040286c
  4011e4:	00400875 	.word	0x00400875

004011e8 <_usart_sync_read_byte>:
{
  4011e8:	b510      	push	{r4, lr}
	ASSERT(device);
  4011ea:	4604      	mov	r4, r0
  4011ec:	f240 12a7 	movw	r2, #423	; 0x1a7
  4011f0:	4904      	ldr	r1, [pc, #16]	; (401204 <_usart_sync_read_byte+0x1c>)
  4011f2:	3000      	adds	r0, #0
  4011f4:	bf18      	it	ne
  4011f6:	2001      	movne	r0, #1
  4011f8:	4b03      	ldr	r3, [pc, #12]	; (401208 <_usart_sync_read_byte+0x20>)
  4011fa:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  4011fc:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  4011fe:	6998      	ldr	r0, [r3, #24]
}
  401200:	b2c0      	uxtb	r0, r0
  401202:	bd10      	pop	{r4, pc}
  401204:	0040286c 	.word	0x0040286c
  401208:	00400875 	.word	0x00400875

0040120c <_usart_sync_is_ready_to_send>:
{
  40120c:	b510      	push	{r4, lr}
	ASSERT(device);
  40120e:	4604      	mov	r4, r0
  401210:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  401214:	4905      	ldr	r1, [pc, #20]	; (40122c <_usart_sync_is_ready_to_send+0x20>)
  401216:	3000      	adds	r0, #0
  401218:	bf18      	it	ne
  40121a:	2001      	movne	r0, #1
  40121c:	4b04      	ldr	r3, [pc, #16]	; (401230 <_usart_sync_is_ready_to_send+0x24>)
  40121e:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  401220:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  401222:	6958      	ldr	r0, [r3, #20]
}
  401224:	f3c0 0040 	ubfx	r0, r0, #1, #1
  401228:	bd10      	pop	{r4, pc}
  40122a:	bf00      	nop
  40122c:	0040286c 	.word	0x0040286c
  401230:	00400875 	.word	0x00400875

00401234 <_usart_sync_is_transmit_done>:
{
  401234:	b510      	push	{r4, lr}
	ASSERT(device);
  401236:	4604      	mov	r4, r0
  401238:	f240 12b9 	movw	r2, #441	; 0x1b9
  40123c:	4905      	ldr	r1, [pc, #20]	; (401254 <_usart_sync_is_transmit_done+0x20>)
  40123e:	3000      	adds	r0, #0
  401240:	bf18      	it	ne
  401242:	2001      	movne	r0, #1
  401244:	4b04      	ldr	r3, [pc, #16]	; (401258 <_usart_sync_is_transmit_done+0x24>)
  401246:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  401248:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  40124a:	6958      	ldr	r0, [r3, #20]
}
  40124c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401250:	bd10      	pop	{r4, pc}
  401252:	bf00      	nop
  401254:	0040286c 	.word	0x0040286c
  401258:	00400875 	.word	0x00400875

0040125c <_usart_sync_is_byte_received>:
{
  40125c:	b510      	push	{r4, lr}
	ASSERT(device);
  40125e:	4604      	mov	r4, r0
  401260:	f240 12cb 	movw	r2, #459	; 0x1cb
  401264:	4905      	ldr	r1, [pc, #20]	; (40127c <_usart_sync_is_byte_received+0x20>)
  401266:	3000      	adds	r0, #0
  401268:	bf18      	it	ne
  40126a:	2001      	movne	r0, #1
  40126c:	4b04      	ldr	r3, [pc, #16]	; (401280 <_usart_sync_is_byte_received+0x24>)
  40126e:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  401270:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  401272:	6958      	ldr	r0, [r3, #20]
  401274:	f000 0001 	and.w	r0, r0, #1
}
  401278:	bd10      	pop	{r4, pc}
  40127a:	bf00      	nop
  40127c:	0040286c 	.word	0x0040286c
  401280:	00400875 	.word	0x00400875

00401284 <_uart_get_usart_sync>:
}
  401284:	2000      	movs	r0, #0
  401286:	4770      	bx	lr

00401288 <main>:




int main(void)
{
  401288:	b510      	push	{r4, lr}
  40128a:	b084      	sub	sp, #16
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  40128c:	4b28      	ldr	r3, [pc, #160]	; (401330 <main+0xa8>)
  40128e:	4798      	blx	r3
	
	init_can_module();
  401290:	4b28      	ldr	r3, [pc, #160]	; (401334 <main+0xac>)
  401292:	4798      	blx	r3
	((Pio *)hw)->PIO_OER = mask;
  401294:	4b28      	ldr	r3, [pc, #160]	; (401338 <main+0xb0>)
  401296:	2201      	movs	r2, #1
  401298:	611a      	str	r2, [r3, #16]
  40129a:	2202      	movs	r2, #2
  40129c:	611a      	str	r2, [r3, #16]
  40129e:	2204      	movs	r2, #4
  4012a0:	611a      	str	r2, [r3, #16]
  4012a2:	2208      	movs	r2, #8
  4012a4:	611a      	str	r2, [r3, #16]
  4012a6:	2210      	movs	r2, #16
  4012a8:	611a      	str	r2, [r3, #16]
  4012aa:	2220      	movs	r2, #32
  4012ac:	611a      	str	r2, [r3, #16]
  4012ae:	2240      	movs	r2, #64	; 0x40
  4012b0:	611a      	str	r2, [r3, #16]
  4012b2:	2280      	movs	r2, #128	; 0x80
  4012b4:	611a      	str	r2, [r3, #16]
  4012b6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4012ba:	611a      	str	r2, [r3, #16]
  4012bc:	f44f 7200 	mov.w	r2, #512	; 0x200
  4012c0:	611a      	str	r2, [r3, #16]
  4012c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4012c6:	611a      	str	r2, [r3, #16]
  4012c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4012cc:	611a      	str	r2, [r3, #16]
	gpio_set_pin_direction(PC8, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(PC9, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(PC10, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(PC11, GPIO_DIRECTION_OUT);
	
	for(int i = 0; i < 12; i++)
  4012ce:	2200      	movs	r2, #0
  4012d0:	e00d      	b.n	4012ee <main+0x66>
	{
		gpio_set_pin_level(GPIO(GPIO_PORTC, i), true);
  4012d2:	f002 031f 	and.w	r3, r2, #31
  4012d6:	3340      	adds	r3, #64	; 0x40
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  4012d8:	f3c3 1047 	ubfx	r0, r3, #5, #8
  4012dc:	f003 031f 	and.w	r3, r3, #31
  4012e0:	2101      	movs	r1, #1
  4012e2:	4099      	lsls	r1, r3
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  4012e4:	4b15      	ldr	r3, [pc, #84]	; (40133c <main+0xb4>)
  4012e6:	eb03 2340 	add.w	r3, r3, r0, lsl #9
	((Pio *)hw)->PIO_SODR = mask;
  4012ea:	6319      	str	r1, [r3, #48]	; 0x30
	for(int i = 0; i < 12; i++)
  4012ec:	3201      	adds	r2, #1
  4012ee:	2a0b      	cmp	r2, #11
  4012f0:	ddef      	ble.n	4012d2 <main+0x4a>
	message1.dataSize = 1;
	*/
	
	//add_single_filter_module_0(10, 1);

	add_range_filter_module_0(0, 1, 1);
  4012f2:	2201      	movs	r2, #1
  4012f4:	4611      	mov	r1, r2
  4012f6:	2000      	movs	r0, #0
  4012f8:	4b11      	ldr	r3, [pc, #68]	; (401340 <main+0xb8>)
  4012fa:	4798      	blx	r3
  4012fc:	e012      	b.n	401324 <main+0x9c>

	/* Replace with your application code */
	while (1) {
		delay_ms(1000);
		for(int i = 1; i < 13; i++) {
			uint8_t data0 = 8;
  4012fe:	2308      	movs	r3, #8
  401300:	f88d 3003 	strb.w	r3, [sp, #3]
			message0.id = i; 
  401304:	9401      	str	r4, [sp, #4]
			message0.data = &data0;
  401306:	f10d 0303 	add.w	r3, sp, #3
  40130a:	9302      	str	r3, [sp, #8]
			message0.dataSize = 1;
  40130c:	2301      	movs	r3, #1
  40130e:	f88d 300c 	strb.w	r3, [sp, #12]
			send_message_module_1(&message0);
  401312:	a801      	add	r0, sp, #4
  401314:	4b0b      	ldr	r3, [pc, #44]	; (401344 <main+0xbc>)
  401316:	4798      	blx	r3
			delay_ms(50);
  401318:	2032      	movs	r0, #50	; 0x32
  40131a:	4b0b      	ldr	r3, [pc, #44]	; (401348 <main+0xc0>)
  40131c:	4798      	blx	r3
		for(int i = 1; i < 13; i++) {
  40131e:	3401      	adds	r4, #1
  401320:	2c0c      	cmp	r4, #12
  401322:	ddec      	ble.n	4012fe <main+0x76>
		delay_ms(1000);
  401324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401328:	4b07      	ldr	r3, [pc, #28]	; (401348 <main+0xc0>)
  40132a:	4798      	blx	r3
		for(int i = 1; i < 13; i++) {
  40132c:	2401      	movs	r4, #1
  40132e:	e7f7      	b.n	401320 <main+0x98>
  401330:	004001d5 	.word	0x004001d5
  401334:	0040150d 	.word	0x0040150d
  401338:	400e1200 	.word	0x400e1200
  40133c:	400e0e00 	.word	0x400e0e00
  401340:	00401601 	.word	0x00401601
  401344:	004015b5 	.word	0x004015b5
  401348:	004005bd 	.word	0x004005bd

0040134c <message_received_CAN0>:
		//printf("Message sent \n");
	}
}


void message_received_CAN0(shift_can_message_t message) {
  40134c:	b084      	sub	sp, #16
  40134e:	ab04      	add	r3, sp, #16
  401350:	e903 0007 	stmdb	r3, {r0, r1, r2}
	uint8_t id = message.id;
	//printf("Data received: %d \n", data);

	//gpio_toggle_pin_level(PC11);
	switch (id)
  401354:	f89d 3004 	ldrb.w	r3, [sp, #4]
  401358:	3b01      	subs	r3, #1
  40135a:	2b0b      	cmp	r3, #11
  40135c:	d80f      	bhi.n	40137e <message_received_CAN0+0x32>
  40135e:	e8df f003 	tbb	[pc, r3]
  401362:	1006      	.short	0x1006
  401364:	382e241a 	.word	0x382e241a
  401368:	60564c42 	.word	0x60564c42
  40136c:	746a      	.short	0x746a
	tmp = ((Pio *)hw)->PIO_ODSR;
  40136e:	4a3c      	ldr	r2, [pc, #240]	; (401460 <message_received_CAN0+0x114>)
  401370:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  401372:	f003 0301 	and.w	r3, r3, #1
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  401376:	f083 0101 	eor.w	r1, r3, #1
	((Pio *)hw)->PIO_SODR = mask;
  40137a:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  40137c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
		default:
		/* Your code here */
		break;
	};
}
  40137e:	b004      	add	sp, #16
  401380:	4770      	bx	lr
	tmp = ((Pio *)hw)->PIO_ODSR;
  401382:	4a37      	ldr	r2, [pc, #220]	; (401460 <message_received_CAN0+0x114>)
  401384:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  401386:	f003 0302 	and.w	r3, r3, #2
  40138a:	43d9      	mvns	r1, r3
  40138c:	f001 0102 	and.w	r1, r1, #2
	((Pio *)hw)->PIO_SODR = mask;
  401390:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  401392:	6353      	str	r3, [r2, #52]	; 0x34
  401394:	e7f3      	b.n	40137e <message_received_CAN0+0x32>
	tmp = ((Pio *)hw)->PIO_ODSR;
  401396:	4a32      	ldr	r2, [pc, #200]	; (401460 <message_received_CAN0+0x114>)
  401398:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  40139a:	f003 0304 	and.w	r3, r3, #4
  40139e:	43d9      	mvns	r1, r3
  4013a0:	f001 0104 	and.w	r1, r1, #4
	((Pio *)hw)->PIO_SODR = mask;
  4013a4:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  4013a6:	6353      	str	r3, [r2, #52]	; 0x34
  4013a8:	e7e9      	b.n	40137e <message_received_CAN0+0x32>
	tmp = ((Pio *)hw)->PIO_ODSR;
  4013aa:	4a2d      	ldr	r2, [pc, #180]	; (401460 <message_received_CAN0+0x114>)
  4013ac:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  4013ae:	f003 0308 	and.w	r3, r3, #8
  4013b2:	43d9      	mvns	r1, r3
  4013b4:	f001 0108 	and.w	r1, r1, #8
	((Pio *)hw)->PIO_SODR = mask;
  4013b8:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  4013ba:	6353      	str	r3, [r2, #52]	; 0x34
  4013bc:	e7df      	b.n	40137e <message_received_CAN0+0x32>
	tmp = ((Pio *)hw)->PIO_ODSR;
  4013be:	4a28      	ldr	r2, [pc, #160]	; (401460 <message_received_CAN0+0x114>)
  4013c0:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  4013c2:	f003 0310 	and.w	r3, r3, #16
  4013c6:	43d9      	mvns	r1, r3
  4013c8:	f001 0110 	and.w	r1, r1, #16
	((Pio *)hw)->PIO_SODR = mask;
  4013cc:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  4013ce:	6353      	str	r3, [r2, #52]	; 0x34
  4013d0:	e7d5      	b.n	40137e <message_received_CAN0+0x32>
	tmp = ((Pio *)hw)->PIO_ODSR;
  4013d2:	4a23      	ldr	r2, [pc, #140]	; (401460 <message_received_CAN0+0x114>)
  4013d4:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  4013d6:	f003 0320 	and.w	r3, r3, #32
  4013da:	43d9      	mvns	r1, r3
  4013dc:	f001 0120 	and.w	r1, r1, #32
	((Pio *)hw)->PIO_SODR = mask;
  4013e0:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  4013e2:	6353      	str	r3, [r2, #52]	; 0x34
  4013e4:	e7cb      	b.n	40137e <message_received_CAN0+0x32>
	tmp = ((Pio *)hw)->PIO_ODSR;
  4013e6:	4a1e      	ldr	r2, [pc, #120]	; (401460 <message_received_CAN0+0x114>)
  4013e8:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  4013ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4013ee:	43d9      	mvns	r1, r3
  4013f0:	f001 0140 	and.w	r1, r1, #64	; 0x40
	((Pio *)hw)->PIO_SODR = mask;
  4013f4:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  4013f6:	6353      	str	r3, [r2, #52]	; 0x34
  4013f8:	e7c1      	b.n	40137e <message_received_CAN0+0x32>
	tmp = ((Pio *)hw)->PIO_ODSR;
  4013fa:	4a19      	ldr	r2, [pc, #100]	; (401460 <message_received_CAN0+0x114>)
  4013fc:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  4013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401402:	43d9      	mvns	r1, r3
  401404:	f001 0180 	and.w	r1, r1, #128	; 0x80
	((Pio *)hw)->PIO_SODR = mask;
  401408:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  40140a:	6353      	str	r3, [r2, #52]	; 0x34
  40140c:	e7b7      	b.n	40137e <message_received_CAN0+0x32>
	tmp = ((Pio *)hw)->PIO_ODSR;
  40140e:	4a14      	ldr	r2, [pc, #80]	; (401460 <message_received_CAN0+0x114>)
  401410:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  401412:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401416:	43d9      	mvns	r1, r3
  401418:	f401 7180 	and.w	r1, r1, #256	; 0x100
	((Pio *)hw)->PIO_SODR = mask;
  40141c:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  40141e:	6353      	str	r3, [r2, #52]	; 0x34
  401420:	e7ad      	b.n	40137e <message_received_CAN0+0x32>
	tmp = ((Pio *)hw)->PIO_ODSR;
  401422:	4a0f      	ldr	r2, [pc, #60]	; (401460 <message_received_CAN0+0x114>)
  401424:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  401426:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40142a:	43d9      	mvns	r1, r3
  40142c:	f401 7100 	and.w	r1, r1, #512	; 0x200
	((Pio *)hw)->PIO_SODR = mask;
  401430:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  401432:	6353      	str	r3, [r2, #52]	; 0x34
  401434:	e7a3      	b.n	40137e <message_received_CAN0+0x32>
	tmp = ((Pio *)hw)->PIO_ODSR;
  401436:	4a0a      	ldr	r2, [pc, #40]	; (401460 <message_received_CAN0+0x114>)
  401438:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  40143a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  40143e:	43d9      	mvns	r1, r3
  401440:	f401 6180 	and.w	r1, r1, #1024	; 0x400
	((Pio *)hw)->PIO_SODR = mask;
  401444:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  401446:	6353      	str	r3, [r2, #52]	; 0x34
  401448:	e799      	b.n	40137e <message_received_CAN0+0x32>
	tmp = ((Pio *)hw)->PIO_ODSR;
  40144a:	4a05      	ldr	r2, [pc, #20]	; (401460 <message_received_CAN0+0x114>)
  40144c:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  40144e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401452:	43d9      	mvns	r1, r3
  401454:	f401 6100 	and.w	r1, r1, #2048	; 0x800
	((Pio *)hw)->PIO_SODR = mask;
  401458:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  40145a:	6353      	str	r3, [r2, #52]	; 0x34
  40145c:	e78f      	b.n	40137e <message_received_CAN0+0x32>
  40145e:	bf00      	nop
  401460:	400e1200 	.word	0x400e1200

00401464 <message_received_CAN1>:

void message_received_CAN1(shift_can_message_t message) {
  401464:	b500      	push	{lr}
  401466:	b085      	sub	sp, #20
  401468:	ab04      	add	r3, sp, #16
  40146a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	uint8_t data = *message.data;
	printf("Data received: %d \n", data);
  40146e:	9b02      	ldr	r3, [sp, #8]
  401470:	7819      	ldrb	r1, [r3, #0]
  401472:	4807      	ldr	r0, [pc, #28]	; (401490 <message_received_CAN1+0x2c>)
  401474:	4b07      	ldr	r3, [pc, #28]	; (401494 <message_received_CAN1+0x30>)
  401476:	4798      	blx	r3
	tmp = ((Pio *)hw)->PIO_ODSR;
  401478:	4a07      	ldr	r2, [pc, #28]	; (401498 <message_received_CAN1+0x34>)
  40147a:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  40147c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401480:	43d9      	mvns	r1, r3
  401482:	f401 6100 	and.w	r1, r1, #2048	; 0x800
	((Pio *)hw)->PIO_SODR = mask;
  401486:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  401488:	6353      	str	r3, [r2, #52]	; 0x34
	gpio_toggle_pin_level(PC11);

}
  40148a:	b005      	add	sp, #20
  40148c:	f85d fb04 	ldr.w	pc, [sp], #4
  401490:	00402884 	.word	0x00402884
  401494:	004017a9 	.word	0x004017a9
  401498:	400e1200 	.word	0x400e1200

0040149c <CAN0_RX_CALLBACK>:
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
	}
}

void CAN0_RX_CALLBACK(struct can_async_descriptor *const descr)
{
  40149c:	b500      	push	{lr}
  40149e:	b099      	sub	sp, #100	; 0x64
	struct can_message msg;
	uint8_t data[64];
	msg.data = data;
  4014a0:	ab04      	add	r3, sp, #16
  4014a2:	9316      	str	r3, [sp, #88]	; 0x58
	can_async_read(descr, &msg);
  4014a4:	a914      	add	r1, sp, #80	; 0x50
  4014a6:	4b09      	ldr	r3, [pc, #36]	; (4014cc <CAN0_RX_CALLBACK+0x30>)
  4014a8:	4798      	blx	r3
	
	shift_can_message_t message;
	message.data = msg.data;
  4014aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4014ac:	9302      	str	r3, [sp, #8]
	message.dataSize = msg.len;
  4014ae:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
  4014b2:	f88d 300c 	strb.w	r3, [sp, #12]
	message.id = msg.id;
  4014b6:	ab18      	add	r3, sp, #96	; 0x60
  4014b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4014ba:	f843 2d5c 	str.w	r2, [r3, #-92]!
	message_received_CAN0(message);
  4014be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4014c2:	4b03      	ldr	r3, [pc, #12]	; (4014d0 <CAN0_RX_CALLBACK+0x34>)
  4014c4:	4798      	blx	r3
}
  4014c6:	b019      	add	sp, #100	; 0x64
  4014c8:	f85d fb04 	ldr.w	pc, [sp], #4
  4014cc:	0040050d 	.word	0x0040050d
  4014d0:	0040134d 	.word	0x0040134d

004014d4 <CAN1_RX_CALLBACK>:

void CAN1_RX_CALLBACK(struct can_async_descriptor *const descr)
{
  4014d4:	b500      	push	{lr}
  4014d6:	b099      	sub	sp, #100	; 0x64
	struct can_message msg;
	uint8_t data[64];
	msg.data = data;
  4014d8:	ab04      	add	r3, sp, #16
  4014da:	9316      	str	r3, [sp, #88]	; 0x58
	can_async_read(descr, &msg);
  4014dc:	a914      	add	r1, sp, #80	; 0x50
  4014de:	4b09      	ldr	r3, [pc, #36]	; (401504 <CAN1_RX_CALLBACK+0x30>)
  4014e0:	4798      	blx	r3
	
	shift_can_message_t message;
	message.data = msg.data;
  4014e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4014e4:	9302      	str	r3, [sp, #8]
	message.dataSize = msg.len;
  4014e6:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
  4014ea:	f88d 300c 	strb.w	r3, [sp, #12]
	message.id = msg.id;
  4014ee:	ab18      	add	r3, sp, #96	; 0x60
  4014f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4014f2:	f843 2d5c 	str.w	r2, [r3, #-92]!
	message_received_CAN1(message);
  4014f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4014fa:	4b03      	ldr	r3, [pc, #12]	; (401508 <CAN1_RX_CALLBACK+0x34>)
  4014fc:	4798      	blx	r3
}
  4014fe:	b019      	add	sp, #100	; 0x64
  401500:	f85d fb04 	ldr.w	pc, [sp], #4
  401504:	0040050d 	.word	0x0040050d
  401508:	00401465 	.word	0x00401465

0040150c <init_can_module>:
{		
  40150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	can_async_init(&module_0, MCAN0);
  40150e:	4d10      	ldr	r5, [pc, #64]	; (401550 <init_can_module+0x44>)
  401510:	4910      	ldr	r1, [pc, #64]	; (401554 <init_can_module+0x48>)
  401512:	4628      	mov	r0, r5
  401514:	4e10      	ldr	r6, [pc, #64]	; (401558 <init_can_module+0x4c>)
  401516:	47b0      	blx	r6
	can_async_init(&module_1, MCAN1);
  401518:	4c10      	ldr	r4, [pc, #64]	; (40155c <init_can_module+0x50>)
  40151a:	4911      	ldr	r1, [pc, #68]	; (401560 <init_can_module+0x54>)
  40151c:	4620      	mov	r0, r4
  40151e:	47b0      	blx	r6
	can_async_register_callback(&module_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN0_RX_CALLBACK);
  401520:	4a10      	ldr	r2, [pc, #64]	; (401564 <init_can_module+0x58>)
  401522:	2100      	movs	r1, #0
  401524:	4628      	mov	r0, r5
  401526:	4e10      	ldr	r6, [pc, #64]	; (401568 <init_can_module+0x5c>)
  401528:	47b0      	blx	r6
	can_async_register_callback(&module_1, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN1_RX_CALLBACK);
  40152a:	4a10      	ldr	r2, [pc, #64]	; (40156c <init_can_module+0x60>)
  40152c:	2100      	movs	r1, #0
  40152e:	4620      	mov	r0, r4
  401530:	47b0      	blx	r6
	can_async_register_callback(&module_0, CAN_ASYNC_IRQ_CB, (FUNC_PTR)ERROR_CALLBACK);
  401532:	4f0f      	ldr	r7, [pc, #60]	; (401570 <init_can_module+0x64>)
  401534:	463a      	mov	r2, r7
  401536:	2102      	movs	r1, #2
  401538:	4628      	mov	r0, r5
  40153a:	47b0      	blx	r6
	can_async_register_callback(&module_1, CAN_ASYNC_IRQ_CB, (FUNC_PTR)ERROR_CALLBACK);
  40153c:	463a      	mov	r2, r7
  40153e:	2102      	movs	r1, #2
  401540:	4620      	mov	r0, r4
  401542:	47b0      	blx	r6
	can_async_enable(&module_0);
  401544:	4628      	mov	r0, r5
  401546:	4d0b      	ldr	r5, [pc, #44]	; (401574 <init_can_module+0x68>)
  401548:	47a8      	blx	r5
	can_async_enable(&module_1);
  40154a:	4620      	mov	r0, r4
  40154c:	47a8      	blx	r5
  40154e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401550:	2040013c 	.word	0x2040013c
  401554:	40030000 	.word	0x40030000
  401558:	00400495 	.word	0x00400495
  40155c:	20400170 	.word	0x20400170
  401560:	40034000 	.word	0x40034000
  401564:	0040149d 	.word	0x0040149d
  401568:	0040056d 	.word	0x0040056d
  40156c:	004014d5 	.word	0x004014d5
  401570:	00401579 	.word	0x00401579
  401574:	004004e5 	.word	0x004004e5

00401578 <ERROR_CALLBACK>:

void ERROR_CALLBACK(struct can_async_descriptor *const descr)
{
  401578:	b508      	push	{r3, lr}
	init_can_module();
  40157a:	4b01      	ldr	r3, [pc, #4]	; (401580 <ERROR_CALLBACK+0x8>)
  40157c:	4798      	blx	r3
  40157e:	bd08      	pop	{r3, pc}
  401580:	0040150d 	.word	0x0040150d

00401584 <checkMessage>:
	uint32_t id = message->id;
  401584:	6802      	ldr	r2, [r0, #0]
	uint8_t* data = message->data;
  401586:	6841      	ldr	r1, [r0, #4]
	uint8_t dataSize = message->dataSize;
  401588:	7a03      	ldrb	r3, [r0, #8]
	if(id && data && dataSize && dataSize <= 64 && id < 0x7FF)
  40158a:	2a00      	cmp	r2, #0
  40158c:	bf18      	it	ne
  40158e:	2900      	cmpne	r1, #0
  401590:	d009      	beq.n	4015a6 <checkMessage+0x22>
  401592:	3b01      	subs	r3, #1
  401594:	b2db      	uxtb	r3, r3
  401596:	2b3f      	cmp	r3, #63	; 0x3f
  401598:	d807      	bhi.n	4015aa <checkMessage+0x26>
  40159a:	f240 73fe 	movw	r3, #2046	; 0x7fe
  40159e:	429a      	cmp	r2, r3
  4015a0:	d905      	bls.n	4015ae <checkMessage+0x2a>
	return 0;
  4015a2:	2000      	movs	r0, #0
  4015a4:	4770      	bx	lr
  4015a6:	2000      	movs	r0, #0
  4015a8:	4770      	bx	lr
  4015aa:	2000      	movs	r0, #0
  4015ac:	4770      	bx	lr
		return 1;
  4015ae:	2001      	movs	r0, #1
}
  4015b0:	4770      	bx	lr
	...

004015b4 <send_message_module_1>:
{	
  4015b4:	b510      	push	{r4, lr}
  4015b6:	b084      	sub	sp, #16
  4015b8:	4604      	mov	r4, r0
	if (checkMessage(message))
  4015ba:	4b0b      	ldr	r3, [pc, #44]	; (4015e8 <send_message_module_1+0x34>)
  4015bc:	4798      	blx	r3
  4015be:	b908      	cbnz	r0, 4015c4 <send_message_module_1+0x10>
}
  4015c0:	b004      	add	sp, #16
  4015c2:	bd10      	pop	{r4, pc}
		msg.id = message->id;
  4015c4:	6823      	ldr	r3, [r4, #0]
  4015c6:	9300      	str	r3, [sp, #0]
		msg.type = CAN_TYPE_DATA;
  4015c8:	2300      	movs	r3, #0
  4015ca:	f88d 3004 	strb.w	r3, [sp, #4]
		msg.data = message->data;
  4015ce:	6862      	ldr	r2, [r4, #4]
  4015d0:	9202      	str	r2, [sp, #8]
		msg.len = message->dataSize;
  4015d2:	7a22      	ldrb	r2, [r4, #8]
  4015d4:	f88d 200c 	strb.w	r2, [sp, #12]
		msg.fmt  = CAN_FMT_STDID;
  4015d8:	f88d 300d 	strb.w	r3, [sp, #13]
		can_async_write(&module_1, &msg);
  4015dc:	4669      	mov	r1, sp
  4015de:	4803      	ldr	r0, [pc, #12]	; (4015ec <send_message_module_1+0x38>)
  4015e0:	4b03      	ldr	r3, [pc, #12]	; (4015f0 <send_message_module_1+0x3c>)
  4015e2:	4798      	blx	r3
}
  4015e4:	e7ec      	b.n	4015c0 <send_message_module_1+0xc>
  4015e6:	bf00      	nop
  4015e8:	00401585 	.word	0x00401585
  4015ec:	20400170 	.word	0x20400170
  4015f0:	0040053d 	.word	0x0040053d

004015f4 <checkIndex>:
	if (index < 64)
  4015f4:	283f      	cmp	r0, #63	; 0x3f
  4015f6:	d901      	bls.n	4015fc <checkIndex+0x8>
	return 0;
  4015f8:	2000      	movs	r0, #0
}
  4015fa:	4770      	bx	lr
		return 1;
  4015fc:	2001      	movs	r0, #1
  4015fe:	4770      	bx	lr

00401600 <add_range_filter_module_0>:
{
  401600:	b570      	push	{r4, r5, r6, lr}
  401602:	4604      	mov	r4, r0
  401604:	460e      	mov	r6, r1
  401606:	4615      	mov	r5, r2
	if(checkIndex(index)) 
  401608:	4b11      	ldr	r3, [pc, #68]	; (401650 <add_range_filter_module_0+0x50>)
  40160a:	4798      	blx	r3
  40160c:	b1f0      	cbz	r0, 40164c <add_range_filter_module_0+0x4c>
		sf = &((struct _can_context *)module_0.dev.context)->rx_std_filter[index];
  40160e:	4b11      	ldr	r3, [pc, #68]	; (401654 <add_range_filter_module_0+0x54>)
  401610:	699b      	ldr	r3, [r3, #24]
  401612:	68db      	ldr	r3, [r3, #12]
		sf->S0.val = 0;
  401614:	2100      	movs	r1, #0
  401616:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
		sf->S0.bit.SFID1 = id_start;
  40161a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
  40161e:	f366 421a 	bfi	r2, r6, #16, #11
  401622:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		sf->S0.bit.SFID2 = id_end;
  401626:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
  40162a:	f365 020a 	bfi	r2, r5, #0, #11
  40162e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		sf->S0.bit.SFT = _CAN_SFT_RANGE;
  401632:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
  401636:	f361 729f 	bfi	r2, r1, #30, #2
  40163a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		sf->S0.bit.SFEC = _CAN_SFEC_STF0M;
  40163e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
  401642:	2101      	movs	r1, #1
  401644:	f361 62dd 	bfi	r2, r1, #27, #3
  401648:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40164c:	bd70      	pop	{r4, r5, r6, pc}
  40164e:	bf00      	nop
  401650:	004015f5 	.word	0x004015f5
  401654:	2040013c 	.word	0x2040013c

00401658 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401658:	b958      	cbnz	r0, 401672 <_read+0x1a>
{
  40165a:	b508      	push	{r3, lr}
  40165c:	460b      	mov	r3, r1
  40165e:	4611      	mov	r1, r2
  401660:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401662:	4b05      	ldr	r3, [pc, #20]	; (401678 <_read+0x20>)
  401664:	4798      	blx	r3
	if (n < 0) {
  401666:	2800      	cmp	r0, #0
  401668:	db00      	blt.n	40166c <_read+0x14>
		return -1;
	}

	return n;
}
  40166a:	bd08      	pop	{r3, pc}
		return -1;
  40166c:	f04f 30ff 	mov.w	r0, #4294967295
  401670:	bd08      	pop	{r3, pc}
		return -1;
  401672:	f04f 30ff 	mov.w	r0, #4294967295
  401676:	4770      	bx	lr
  401678:	004016d1 	.word	0x004016d1

0040167c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  40167c:	3801      	subs	r0, #1
  40167e:	2802      	cmp	r0, #2
  401680:	d80b      	bhi.n	40169a <_write+0x1e>
{
  401682:	b508      	push	{r3, lr}
  401684:	460b      	mov	r3, r1
  401686:	4611      	mov	r1, r2
  401688:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  40168a:	4b05      	ldr	r3, [pc, #20]	; (4016a0 <_write+0x24>)
  40168c:	4798      	blx	r3
	if (n < 0) {
  40168e:	2800      	cmp	r0, #0
  401690:	db00      	blt.n	401694 <_write+0x18>
		return -1;
	}

	return n;
}
  401692:	bd08      	pop	{r3, pc}
		return -1;
  401694:	f04f 30ff 	mov.w	r0, #4294967295
  401698:	bd08      	pop	{r3, pc}
		return -1;
  40169a:	f04f 30ff 	mov.w	r0, #4294967295
  40169e:	4770      	bx	lr
  4016a0:	004016f5 	.word	0x004016f5

004016a4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  4016a4:	b570      	push	{r4, r5, r6, lr}
  4016a6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  4016a8:	4d06      	ldr	r5, [pc, #24]	; (4016c4 <stdio_io_init+0x20>)
  4016aa:	682b      	ldr	r3, [r5, #0]
  4016ac:	2100      	movs	r1, #0
  4016ae:	6898      	ldr	r0, [r3, #8]
  4016b0:	4c05      	ldr	r4, [pc, #20]	; (4016c8 <stdio_io_init+0x24>)
  4016b2:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4016b4:	682b      	ldr	r3, [r5, #0]
  4016b6:	2100      	movs	r1, #0
  4016b8:	6858      	ldr	r0, [r3, #4]
  4016ba:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  4016bc:	4b03      	ldr	r3, [pc, #12]	; (4016cc <stdio_io_init+0x28>)
  4016be:	601e      	str	r6, [r3, #0]
  4016c0:	bd70      	pop	{r4, r5, r6, pc}
  4016c2:	bf00      	nop
  4016c4:	2040004c 	.word	0x2040004c
  4016c8:	004017d9 	.word	0x004017d9
  4016cc:	20400130 	.word	0x20400130

004016d0 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  4016d0:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4016d2:	4b06      	ldr	r3, [pc, #24]	; (4016ec <stdio_io_read+0x1c>)
  4016d4:	681b      	ldr	r3, [r3, #0]
  4016d6:	b133      	cbz	r3, 4016e6 <stdio_io_read+0x16>
  4016d8:	460a      	mov	r2, r1
  4016da:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  4016dc:	b292      	uxth	r2, r2
  4016de:	4618      	mov	r0, r3
  4016e0:	4b03      	ldr	r3, [pc, #12]	; (4016f0 <stdio_io_read+0x20>)
  4016e2:	4798      	blx	r3
  4016e4:	bd08      	pop	{r3, pc}
		return 0;
  4016e6:	2000      	movs	r0, #0
}
  4016e8:	bd08      	pop	{r3, pc}
  4016ea:	bf00      	nop
  4016ec:	20400130 	.word	0x20400130
  4016f0:	0040060d 	.word	0x0040060d

004016f4 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  4016f4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4016f6:	4b06      	ldr	r3, [pc, #24]	; (401710 <stdio_io_write+0x1c>)
  4016f8:	681b      	ldr	r3, [r3, #0]
  4016fa:	b133      	cbz	r3, 40170a <stdio_io_write+0x16>
  4016fc:	460a      	mov	r2, r1
  4016fe:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  401700:	b292      	uxth	r2, r2
  401702:	4618      	mov	r0, r3
  401704:	4b03      	ldr	r3, [pc, #12]	; (401714 <stdio_io_write+0x20>)
  401706:	4798      	blx	r3
  401708:	bd08      	pop	{r3, pc}
		return 0;
  40170a:	2000      	movs	r0, #0
}
  40170c:	bd08      	pop	{r3, pc}
  40170e:	bf00      	nop
  401710:	20400130 	.word	0x20400130
  401714:	004005dd 	.word	0x004005dd

00401718 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401718:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  40171a:	4c04      	ldr	r4, [pc, #16]	; (40172c <stdio_redirect_init+0x14>)
  40171c:	4620      	mov	r0, r4
  40171e:	4b04      	ldr	r3, [pc, #16]	; (401730 <stdio_redirect_init+0x18>)
  401720:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  401722:	4620      	mov	r0, r4
  401724:	4b03      	ldr	r3, [pc, #12]	; (401734 <stdio_redirect_init+0x1c>)
  401726:	4798      	blx	r3
  401728:	bd10      	pop	{r4, pc}
  40172a:	bf00      	nop
  40172c:	20400164 	.word	0x20400164
  401730:	00400849 	.word	0x00400849
  401734:	004016a5 	.word	0x004016a5

00401738 <__libc_init_array>:
  401738:	b570      	push	{r4, r5, r6, lr}
  40173a:	4e0d      	ldr	r6, [pc, #52]	; (401770 <__libc_init_array+0x38>)
  40173c:	4c0d      	ldr	r4, [pc, #52]	; (401774 <__libc_init_array+0x3c>)
  40173e:	1ba4      	subs	r4, r4, r6
  401740:	10a4      	asrs	r4, r4, #2
  401742:	2500      	movs	r5, #0
  401744:	42a5      	cmp	r5, r4
  401746:	d109      	bne.n	40175c <__libc_init_array+0x24>
  401748:	4e0b      	ldr	r6, [pc, #44]	; (401778 <__libc_init_array+0x40>)
  40174a:	4c0c      	ldr	r4, [pc, #48]	; (40177c <__libc_init_array+0x44>)
  40174c:	f001 f8f0 	bl	402930 <_init>
  401750:	1ba4      	subs	r4, r4, r6
  401752:	10a4      	asrs	r4, r4, #2
  401754:	2500      	movs	r5, #0
  401756:	42a5      	cmp	r5, r4
  401758:	d105      	bne.n	401766 <__libc_init_array+0x2e>
  40175a:	bd70      	pop	{r4, r5, r6, pc}
  40175c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401760:	4798      	blx	r3
  401762:	3501      	adds	r5, #1
  401764:	e7ee      	b.n	401744 <__libc_init_array+0xc>
  401766:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40176a:	4798      	blx	r3
  40176c:	3501      	adds	r5, #1
  40176e:	e7f2      	b.n	401756 <__libc_init_array+0x1e>
  401770:	0040293c 	.word	0x0040293c
  401774:	0040293c 	.word	0x0040293c
  401778:	0040293c 	.word	0x0040293c
  40177c:	00402940 	.word	0x00402940

00401780 <memcpy>:
  401780:	b510      	push	{r4, lr}
  401782:	1e43      	subs	r3, r0, #1
  401784:	440a      	add	r2, r1
  401786:	4291      	cmp	r1, r2
  401788:	d100      	bne.n	40178c <memcpy+0xc>
  40178a:	bd10      	pop	{r4, pc}
  40178c:	f811 4b01 	ldrb.w	r4, [r1], #1
  401790:	f803 4f01 	strb.w	r4, [r3, #1]!
  401794:	e7f7      	b.n	401786 <memcpy+0x6>

00401796 <memset>:
  401796:	4402      	add	r2, r0
  401798:	4603      	mov	r3, r0
  40179a:	4293      	cmp	r3, r2
  40179c:	d100      	bne.n	4017a0 <memset+0xa>
  40179e:	4770      	bx	lr
  4017a0:	f803 1b01 	strb.w	r1, [r3], #1
  4017a4:	e7f9      	b.n	40179a <memset+0x4>
	...

004017a8 <iprintf>:
  4017a8:	b40f      	push	{r0, r1, r2, r3}
  4017aa:	4b0a      	ldr	r3, [pc, #40]	; (4017d4 <iprintf+0x2c>)
  4017ac:	b513      	push	{r0, r1, r4, lr}
  4017ae:	681c      	ldr	r4, [r3, #0]
  4017b0:	b124      	cbz	r4, 4017bc <iprintf+0x14>
  4017b2:	69a3      	ldr	r3, [r4, #24]
  4017b4:	b913      	cbnz	r3, 4017bc <iprintf+0x14>
  4017b6:	4620      	mov	r0, r4
  4017b8:	f000 fa76 	bl	401ca8 <__sinit>
  4017bc:	ab05      	add	r3, sp, #20
  4017be:	9a04      	ldr	r2, [sp, #16]
  4017c0:	68a1      	ldr	r1, [r4, #8]
  4017c2:	9301      	str	r3, [sp, #4]
  4017c4:	4620      	mov	r0, r4
  4017c6:	f000 fc39 	bl	40203c <_vfiprintf_r>
  4017ca:	b002      	add	sp, #8
  4017cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4017d0:	b004      	add	sp, #16
  4017d2:	4770      	bx	lr
  4017d4:	2040004c 	.word	0x2040004c

004017d8 <setbuf>:
  4017d8:	2900      	cmp	r1, #0
  4017da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4017de:	bf0c      	ite	eq
  4017e0:	2202      	moveq	r2, #2
  4017e2:	2200      	movne	r2, #0
  4017e4:	f000 b800 	b.w	4017e8 <setvbuf>

004017e8 <setvbuf>:
  4017e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4017ec:	461d      	mov	r5, r3
  4017ee:	4b51      	ldr	r3, [pc, #324]	; (401934 <setvbuf+0x14c>)
  4017f0:	681e      	ldr	r6, [r3, #0]
  4017f2:	4604      	mov	r4, r0
  4017f4:	460f      	mov	r7, r1
  4017f6:	4690      	mov	r8, r2
  4017f8:	b126      	cbz	r6, 401804 <setvbuf+0x1c>
  4017fa:	69b3      	ldr	r3, [r6, #24]
  4017fc:	b913      	cbnz	r3, 401804 <setvbuf+0x1c>
  4017fe:	4630      	mov	r0, r6
  401800:	f000 fa52 	bl	401ca8 <__sinit>
  401804:	4b4c      	ldr	r3, [pc, #304]	; (401938 <setvbuf+0x150>)
  401806:	429c      	cmp	r4, r3
  401808:	d152      	bne.n	4018b0 <setvbuf+0xc8>
  40180a:	6874      	ldr	r4, [r6, #4]
  40180c:	f1b8 0f02 	cmp.w	r8, #2
  401810:	d006      	beq.n	401820 <setvbuf+0x38>
  401812:	f1b8 0f01 	cmp.w	r8, #1
  401816:	f200 8089 	bhi.w	40192c <setvbuf+0x144>
  40181a:	2d00      	cmp	r5, #0
  40181c:	f2c0 8086 	blt.w	40192c <setvbuf+0x144>
  401820:	4621      	mov	r1, r4
  401822:	4630      	mov	r0, r6
  401824:	f000 f9d6 	bl	401bd4 <_fflush_r>
  401828:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40182a:	b141      	cbz	r1, 40183e <setvbuf+0x56>
  40182c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401830:	4299      	cmp	r1, r3
  401832:	d002      	beq.n	40183a <setvbuf+0x52>
  401834:	4630      	mov	r0, r6
  401836:	f000 fb2d 	bl	401e94 <_free_r>
  40183a:	2300      	movs	r3, #0
  40183c:	6363      	str	r3, [r4, #52]	; 0x34
  40183e:	2300      	movs	r3, #0
  401840:	61a3      	str	r3, [r4, #24]
  401842:	6063      	str	r3, [r4, #4]
  401844:	89a3      	ldrh	r3, [r4, #12]
  401846:	061b      	lsls	r3, r3, #24
  401848:	d503      	bpl.n	401852 <setvbuf+0x6a>
  40184a:	6921      	ldr	r1, [r4, #16]
  40184c:	4630      	mov	r0, r6
  40184e:	f000 fb21 	bl	401e94 <_free_r>
  401852:	89a3      	ldrh	r3, [r4, #12]
  401854:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401858:	f023 0303 	bic.w	r3, r3, #3
  40185c:	f1b8 0f02 	cmp.w	r8, #2
  401860:	81a3      	strh	r3, [r4, #12]
  401862:	d05d      	beq.n	401920 <setvbuf+0x138>
  401864:	ab01      	add	r3, sp, #4
  401866:	466a      	mov	r2, sp
  401868:	4621      	mov	r1, r4
  40186a:	4630      	mov	r0, r6
  40186c:	f000 faa6 	bl	401dbc <__swhatbuf_r>
  401870:	89a3      	ldrh	r3, [r4, #12]
  401872:	4318      	orrs	r0, r3
  401874:	81a0      	strh	r0, [r4, #12]
  401876:	bb2d      	cbnz	r5, 4018c4 <setvbuf+0xdc>
  401878:	9d00      	ldr	r5, [sp, #0]
  40187a:	4628      	mov	r0, r5
  40187c:	f000 fb02 	bl	401e84 <malloc>
  401880:	4607      	mov	r7, r0
  401882:	2800      	cmp	r0, #0
  401884:	d14e      	bne.n	401924 <setvbuf+0x13c>
  401886:	f8dd 9000 	ldr.w	r9, [sp]
  40188a:	45a9      	cmp	r9, r5
  40188c:	d13c      	bne.n	401908 <setvbuf+0x120>
  40188e:	f04f 30ff 	mov.w	r0, #4294967295
  401892:	89a3      	ldrh	r3, [r4, #12]
  401894:	f043 0302 	orr.w	r3, r3, #2
  401898:	81a3      	strh	r3, [r4, #12]
  40189a:	2300      	movs	r3, #0
  40189c:	60a3      	str	r3, [r4, #8]
  40189e:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4018a2:	6023      	str	r3, [r4, #0]
  4018a4:	6123      	str	r3, [r4, #16]
  4018a6:	2301      	movs	r3, #1
  4018a8:	6163      	str	r3, [r4, #20]
  4018aa:	b003      	add	sp, #12
  4018ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4018b0:	4b22      	ldr	r3, [pc, #136]	; (40193c <setvbuf+0x154>)
  4018b2:	429c      	cmp	r4, r3
  4018b4:	d101      	bne.n	4018ba <setvbuf+0xd2>
  4018b6:	68b4      	ldr	r4, [r6, #8]
  4018b8:	e7a8      	b.n	40180c <setvbuf+0x24>
  4018ba:	4b21      	ldr	r3, [pc, #132]	; (401940 <setvbuf+0x158>)
  4018bc:	429c      	cmp	r4, r3
  4018be:	bf08      	it	eq
  4018c0:	68f4      	ldreq	r4, [r6, #12]
  4018c2:	e7a3      	b.n	40180c <setvbuf+0x24>
  4018c4:	2f00      	cmp	r7, #0
  4018c6:	d0d8      	beq.n	40187a <setvbuf+0x92>
  4018c8:	69b3      	ldr	r3, [r6, #24]
  4018ca:	b913      	cbnz	r3, 4018d2 <setvbuf+0xea>
  4018cc:	4630      	mov	r0, r6
  4018ce:	f000 f9eb 	bl	401ca8 <__sinit>
  4018d2:	f1b8 0f01 	cmp.w	r8, #1
  4018d6:	bf08      	it	eq
  4018d8:	89a3      	ldrheq	r3, [r4, #12]
  4018da:	6027      	str	r7, [r4, #0]
  4018dc:	bf04      	itt	eq
  4018de:	f043 0301 	orreq.w	r3, r3, #1
  4018e2:	81a3      	strheq	r3, [r4, #12]
  4018e4:	89a3      	ldrh	r3, [r4, #12]
  4018e6:	6127      	str	r7, [r4, #16]
  4018e8:	f013 0008 	ands.w	r0, r3, #8
  4018ec:	6165      	str	r5, [r4, #20]
  4018ee:	d01b      	beq.n	401928 <setvbuf+0x140>
  4018f0:	f013 0001 	ands.w	r0, r3, #1
  4018f4:	bf18      	it	ne
  4018f6:	426d      	negne	r5, r5
  4018f8:	f04f 0300 	mov.w	r3, #0
  4018fc:	bf1d      	ittte	ne
  4018fe:	60a3      	strne	r3, [r4, #8]
  401900:	61a5      	strne	r5, [r4, #24]
  401902:	4618      	movne	r0, r3
  401904:	60a5      	streq	r5, [r4, #8]
  401906:	e7d0      	b.n	4018aa <setvbuf+0xc2>
  401908:	4648      	mov	r0, r9
  40190a:	f000 fabb 	bl	401e84 <malloc>
  40190e:	4607      	mov	r7, r0
  401910:	2800      	cmp	r0, #0
  401912:	d0bc      	beq.n	40188e <setvbuf+0xa6>
  401914:	89a3      	ldrh	r3, [r4, #12]
  401916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40191a:	81a3      	strh	r3, [r4, #12]
  40191c:	464d      	mov	r5, r9
  40191e:	e7d3      	b.n	4018c8 <setvbuf+0xe0>
  401920:	2000      	movs	r0, #0
  401922:	e7b6      	b.n	401892 <setvbuf+0xaa>
  401924:	46a9      	mov	r9, r5
  401926:	e7f5      	b.n	401914 <setvbuf+0x12c>
  401928:	60a0      	str	r0, [r4, #8]
  40192a:	e7be      	b.n	4018aa <setvbuf+0xc2>
  40192c:	f04f 30ff 	mov.w	r0, #4294967295
  401930:	e7bb      	b.n	4018aa <setvbuf+0xc2>
  401932:	bf00      	nop
  401934:	2040004c 	.word	0x2040004c
  401938:	004028bc 	.word	0x004028bc
  40193c:	004028dc 	.word	0x004028dc
  401940:	0040289c 	.word	0x0040289c

00401944 <__swbuf_r>:
  401944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401946:	460e      	mov	r6, r1
  401948:	4614      	mov	r4, r2
  40194a:	4605      	mov	r5, r0
  40194c:	b118      	cbz	r0, 401956 <__swbuf_r+0x12>
  40194e:	6983      	ldr	r3, [r0, #24]
  401950:	b90b      	cbnz	r3, 401956 <__swbuf_r+0x12>
  401952:	f000 f9a9 	bl	401ca8 <__sinit>
  401956:	4b21      	ldr	r3, [pc, #132]	; (4019dc <__swbuf_r+0x98>)
  401958:	429c      	cmp	r4, r3
  40195a:	d12a      	bne.n	4019b2 <__swbuf_r+0x6e>
  40195c:	686c      	ldr	r4, [r5, #4]
  40195e:	69a3      	ldr	r3, [r4, #24]
  401960:	60a3      	str	r3, [r4, #8]
  401962:	89a3      	ldrh	r3, [r4, #12]
  401964:	071a      	lsls	r2, r3, #28
  401966:	d52e      	bpl.n	4019c6 <__swbuf_r+0x82>
  401968:	6923      	ldr	r3, [r4, #16]
  40196a:	b363      	cbz	r3, 4019c6 <__swbuf_r+0x82>
  40196c:	6923      	ldr	r3, [r4, #16]
  40196e:	6820      	ldr	r0, [r4, #0]
  401970:	1ac0      	subs	r0, r0, r3
  401972:	6963      	ldr	r3, [r4, #20]
  401974:	b2f6      	uxtb	r6, r6
  401976:	4298      	cmp	r0, r3
  401978:	4637      	mov	r7, r6
  40197a:	db04      	blt.n	401986 <__swbuf_r+0x42>
  40197c:	4621      	mov	r1, r4
  40197e:	4628      	mov	r0, r5
  401980:	f000 f928 	bl	401bd4 <_fflush_r>
  401984:	bb28      	cbnz	r0, 4019d2 <__swbuf_r+0x8e>
  401986:	68a3      	ldr	r3, [r4, #8]
  401988:	3b01      	subs	r3, #1
  40198a:	60a3      	str	r3, [r4, #8]
  40198c:	6823      	ldr	r3, [r4, #0]
  40198e:	1c5a      	adds	r2, r3, #1
  401990:	6022      	str	r2, [r4, #0]
  401992:	701e      	strb	r6, [r3, #0]
  401994:	6963      	ldr	r3, [r4, #20]
  401996:	3001      	adds	r0, #1
  401998:	4298      	cmp	r0, r3
  40199a:	d004      	beq.n	4019a6 <__swbuf_r+0x62>
  40199c:	89a3      	ldrh	r3, [r4, #12]
  40199e:	07db      	lsls	r3, r3, #31
  4019a0:	d519      	bpl.n	4019d6 <__swbuf_r+0x92>
  4019a2:	2e0a      	cmp	r6, #10
  4019a4:	d117      	bne.n	4019d6 <__swbuf_r+0x92>
  4019a6:	4621      	mov	r1, r4
  4019a8:	4628      	mov	r0, r5
  4019aa:	f000 f913 	bl	401bd4 <_fflush_r>
  4019ae:	b190      	cbz	r0, 4019d6 <__swbuf_r+0x92>
  4019b0:	e00f      	b.n	4019d2 <__swbuf_r+0x8e>
  4019b2:	4b0b      	ldr	r3, [pc, #44]	; (4019e0 <__swbuf_r+0x9c>)
  4019b4:	429c      	cmp	r4, r3
  4019b6:	d101      	bne.n	4019bc <__swbuf_r+0x78>
  4019b8:	68ac      	ldr	r4, [r5, #8]
  4019ba:	e7d0      	b.n	40195e <__swbuf_r+0x1a>
  4019bc:	4b09      	ldr	r3, [pc, #36]	; (4019e4 <__swbuf_r+0xa0>)
  4019be:	429c      	cmp	r4, r3
  4019c0:	bf08      	it	eq
  4019c2:	68ec      	ldreq	r4, [r5, #12]
  4019c4:	e7cb      	b.n	40195e <__swbuf_r+0x1a>
  4019c6:	4621      	mov	r1, r4
  4019c8:	4628      	mov	r0, r5
  4019ca:	f000 f80d 	bl	4019e8 <__swsetup_r>
  4019ce:	2800      	cmp	r0, #0
  4019d0:	d0cc      	beq.n	40196c <__swbuf_r+0x28>
  4019d2:	f04f 37ff 	mov.w	r7, #4294967295
  4019d6:	4638      	mov	r0, r7
  4019d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4019da:	bf00      	nop
  4019dc:	004028bc 	.word	0x004028bc
  4019e0:	004028dc 	.word	0x004028dc
  4019e4:	0040289c 	.word	0x0040289c

004019e8 <__swsetup_r>:
  4019e8:	4b32      	ldr	r3, [pc, #200]	; (401ab4 <__swsetup_r+0xcc>)
  4019ea:	b570      	push	{r4, r5, r6, lr}
  4019ec:	681d      	ldr	r5, [r3, #0]
  4019ee:	4606      	mov	r6, r0
  4019f0:	460c      	mov	r4, r1
  4019f2:	b125      	cbz	r5, 4019fe <__swsetup_r+0x16>
  4019f4:	69ab      	ldr	r3, [r5, #24]
  4019f6:	b913      	cbnz	r3, 4019fe <__swsetup_r+0x16>
  4019f8:	4628      	mov	r0, r5
  4019fa:	f000 f955 	bl	401ca8 <__sinit>
  4019fe:	4b2e      	ldr	r3, [pc, #184]	; (401ab8 <__swsetup_r+0xd0>)
  401a00:	429c      	cmp	r4, r3
  401a02:	d10f      	bne.n	401a24 <__swsetup_r+0x3c>
  401a04:	686c      	ldr	r4, [r5, #4]
  401a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a0a:	b29a      	uxth	r2, r3
  401a0c:	0715      	lsls	r5, r2, #28
  401a0e:	d42c      	bmi.n	401a6a <__swsetup_r+0x82>
  401a10:	06d0      	lsls	r0, r2, #27
  401a12:	d411      	bmi.n	401a38 <__swsetup_r+0x50>
  401a14:	2209      	movs	r2, #9
  401a16:	6032      	str	r2, [r6, #0]
  401a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401a1c:	81a3      	strh	r3, [r4, #12]
  401a1e:	f04f 30ff 	mov.w	r0, #4294967295
  401a22:	bd70      	pop	{r4, r5, r6, pc}
  401a24:	4b25      	ldr	r3, [pc, #148]	; (401abc <__swsetup_r+0xd4>)
  401a26:	429c      	cmp	r4, r3
  401a28:	d101      	bne.n	401a2e <__swsetup_r+0x46>
  401a2a:	68ac      	ldr	r4, [r5, #8]
  401a2c:	e7eb      	b.n	401a06 <__swsetup_r+0x1e>
  401a2e:	4b24      	ldr	r3, [pc, #144]	; (401ac0 <__swsetup_r+0xd8>)
  401a30:	429c      	cmp	r4, r3
  401a32:	bf08      	it	eq
  401a34:	68ec      	ldreq	r4, [r5, #12]
  401a36:	e7e6      	b.n	401a06 <__swsetup_r+0x1e>
  401a38:	0751      	lsls	r1, r2, #29
  401a3a:	d512      	bpl.n	401a62 <__swsetup_r+0x7a>
  401a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401a3e:	b141      	cbz	r1, 401a52 <__swsetup_r+0x6a>
  401a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401a44:	4299      	cmp	r1, r3
  401a46:	d002      	beq.n	401a4e <__swsetup_r+0x66>
  401a48:	4630      	mov	r0, r6
  401a4a:	f000 fa23 	bl	401e94 <_free_r>
  401a4e:	2300      	movs	r3, #0
  401a50:	6363      	str	r3, [r4, #52]	; 0x34
  401a52:	89a3      	ldrh	r3, [r4, #12]
  401a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  401a58:	81a3      	strh	r3, [r4, #12]
  401a5a:	2300      	movs	r3, #0
  401a5c:	6063      	str	r3, [r4, #4]
  401a5e:	6923      	ldr	r3, [r4, #16]
  401a60:	6023      	str	r3, [r4, #0]
  401a62:	89a3      	ldrh	r3, [r4, #12]
  401a64:	f043 0308 	orr.w	r3, r3, #8
  401a68:	81a3      	strh	r3, [r4, #12]
  401a6a:	6923      	ldr	r3, [r4, #16]
  401a6c:	b94b      	cbnz	r3, 401a82 <__swsetup_r+0x9a>
  401a6e:	89a3      	ldrh	r3, [r4, #12]
  401a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
  401a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401a78:	d003      	beq.n	401a82 <__swsetup_r+0x9a>
  401a7a:	4621      	mov	r1, r4
  401a7c:	4630      	mov	r0, r6
  401a7e:	f000 f9c1 	bl	401e04 <__smakebuf_r>
  401a82:	89a2      	ldrh	r2, [r4, #12]
  401a84:	f012 0301 	ands.w	r3, r2, #1
  401a88:	d00c      	beq.n	401aa4 <__swsetup_r+0xbc>
  401a8a:	2300      	movs	r3, #0
  401a8c:	60a3      	str	r3, [r4, #8]
  401a8e:	6963      	ldr	r3, [r4, #20]
  401a90:	425b      	negs	r3, r3
  401a92:	61a3      	str	r3, [r4, #24]
  401a94:	6923      	ldr	r3, [r4, #16]
  401a96:	b953      	cbnz	r3, 401aae <__swsetup_r+0xc6>
  401a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  401aa0:	d1ba      	bne.n	401a18 <__swsetup_r+0x30>
  401aa2:	bd70      	pop	{r4, r5, r6, pc}
  401aa4:	0792      	lsls	r2, r2, #30
  401aa6:	bf58      	it	pl
  401aa8:	6963      	ldrpl	r3, [r4, #20]
  401aaa:	60a3      	str	r3, [r4, #8]
  401aac:	e7f2      	b.n	401a94 <__swsetup_r+0xac>
  401aae:	2000      	movs	r0, #0
  401ab0:	e7f7      	b.n	401aa2 <__swsetup_r+0xba>
  401ab2:	bf00      	nop
  401ab4:	2040004c 	.word	0x2040004c
  401ab8:	004028bc 	.word	0x004028bc
  401abc:	004028dc 	.word	0x004028dc
  401ac0:	0040289c 	.word	0x0040289c

00401ac4 <__sflush_r>:
  401ac4:	898a      	ldrh	r2, [r1, #12]
  401ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401aca:	4605      	mov	r5, r0
  401acc:	0710      	lsls	r0, r2, #28
  401ace:	460c      	mov	r4, r1
  401ad0:	d45a      	bmi.n	401b88 <__sflush_r+0xc4>
  401ad2:	684b      	ldr	r3, [r1, #4]
  401ad4:	2b00      	cmp	r3, #0
  401ad6:	dc05      	bgt.n	401ae4 <__sflush_r+0x20>
  401ad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  401ada:	2b00      	cmp	r3, #0
  401adc:	dc02      	bgt.n	401ae4 <__sflush_r+0x20>
  401ade:	2000      	movs	r0, #0
  401ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401ae6:	2e00      	cmp	r6, #0
  401ae8:	d0f9      	beq.n	401ade <__sflush_r+0x1a>
  401aea:	2300      	movs	r3, #0
  401aec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  401af0:	682f      	ldr	r7, [r5, #0]
  401af2:	602b      	str	r3, [r5, #0]
  401af4:	d033      	beq.n	401b5e <__sflush_r+0x9a>
  401af6:	6d60      	ldr	r0, [r4, #84]	; 0x54
  401af8:	89a3      	ldrh	r3, [r4, #12]
  401afa:	075a      	lsls	r2, r3, #29
  401afc:	d505      	bpl.n	401b0a <__sflush_r+0x46>
  401afe:	6863      	ldr	r3, [r4, #4]
  401b00:	1ac0      	subs	r0, r0, r3
  401b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
  401b04:	b10b      	cbz	r3, 401b0a <__sflush_r+0x46>
  401b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401b08:	1ac0      	subs	r0, r0, r3
  401b0a:	2300      	movs	r3, #0
  401b0c:	4602      	mov	r2, r0
  401b0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401b10:	6a21      	ldr	r1, [r4, #32]
  401b12:	4628      	mov	r0, r5
  401b14:	47b0      	blx	r6
  401b16:	1c43      	adds	r3, r0, #1
  401b18:	89a3      	ldrh	r3, [r4, #12]
  401b1a:	d106      	bne.n	401b2a <__sflush_r+0x66>
  401b1c:	6829      	ldr	r1, [r5, #0]
  401b1e:	291d      	cmp	r1, #29
  401b20:	d84b      	bhi.n	401bba <__sflush_r+0xf6>
  401b22:	4a2b      	ldr	r2, [pc, #172]	; (401bd0 <__sflush_r+0x10c>)
  401b24:	40ca      	lsrs	r2, r1
  401b26:	07d6      	lsls	r6, r2, #31
  401b28:	d547      	bpl.n	401bba <__sflush_r+0xf6>
  401b2a:	2200      	movs	r2, #0
  401b2c:	6062      	str	r2, [r4, #4]
  401b2e:	04d9      	lsls	r1, r3, #19
  401b30:	6922      	ldr	r2, [r4, #16]
  401b32:	6022      	str	r2, [r4, #0]
  401b34:	d504      	bpl.n	401b40 <__sflush_r+0x7c>
  401b36:	1c42      	adds	r2, r0, #1
  401b38:	d101      	bne.n	401b3e <__sflush_r+0x7a>
  401b3a:	682b      	ldr	r3, [r5, #0]
  401b3c:	b903      	cbnz	r3, 401b40 <__sflush_r+0x7c>
  401b3e:	6560      	str	r0, [r4, #84]	; 0x54
  401b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401b42:	602f      	str	r7, [r5, #0]
  401b44:	2900      	cmp	r1, #0
  401b46:	d0ca      	beq.n	401ade <__sflush_r+0x1a>
  401b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401b4c:	4299      	cmp	r1, r3
  401b4e:	d002      	beq.n	401b56 <__sflush_r+0x92>
  401b50:	4628      	mov	r0, r5
  401b52:	f000 f99f 	bl	401e94 <_free_r>
  401b56:	2000      	movs	r0, #0
  401b58:	6360      	str	r0, [r4, #52]	; 0x34
  401b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b5e:	6a21      	ldr	r1, [r4, #32]
  401b60:	2301      	movs	r3, #1
  401b62:	4628      	mov	r0, r5
  401b64:	47b0      	blx	r6
  401b66:	1c41      	adds	r1, r0, #1
  401b68:	d1c6      	bne.n	401af8 <__sflush_r+0x34>
  401b6a:	682b      	ldr	r3, [r5, #0]
  401b6c:	2b00      	cmp	r3, #0
  401b6e:	d0c3      	beq.n	401af8 <__sflush_r+0x34>
  401b70:	2b1d      	cmp	r3, #29
  401b72:	d001      	beq.n	401b78 <__sflush_r+0xb4>
  401b74:	2b16      	cmp	r3, #22
  401b76:	d101      	bne.n	401b7c <__sflush_r+0xb8>
  401b78:	602f      	str	r7, [r5, #0]
  401b7a:	e7b0      	b.n	401ade <__sflush_r+0x1a>
  401b7c:	89a3      	ldrh	r3, [r4, #12]
  401b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401b82:	81a3      	strh	r3, [r4, #12]
  401b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b88:	690f      	ldr	r7, [r1, #16]
  401b8a:	2f00      	cmp	r7, #0
  401b8c:	d0a7      	beq.n	401ade <__sflush_r+0x1a>
  401b8e:	0793      	lsls	r3, r2, #30
  401b90:	680e      	ldr	r6, [r1, #0]
  401b92:	bf08      	it	eq
  401b94:	694b      	ldreq	r3, [r1, #20]
  401b96:	600f      	str	r7, [r1, #0]
  401b98:	bf18      	it	ne
  401b9a:	2300      	movne	r3, #0
  401b9c:	eba6 0807 	sub.w	r8, r6, r7
  401ba0:	608b      	str	r3, [r1, #8]
  401ba2:	f1b8 0f00 	cmp.w	r8, #0
  401ba6:	dd9a      	ble.n	401ade <__sflush_r+0x1a>
  401ba8:	4643      	mov	r3, r8
  401baa:	463a      	mov	r2, r7
  401bac:	6a21      	ldr	r1, [r4, #32]
  401bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  401bb0:	4628      	mov	r0, r5
  401bb2:	47b0      	blx	r6
  401bb4:	2800      	cmp	r0, #0
  401bb6:	dc07      	bgt.n	401bc8 <__sflush_r+0x104>
  401bb8:	89a3      	ldrh	r3, [r4, #12]
  401bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401bbe:	81a3      	strh	r3, [r4, #12]
  401bc0:	f04f 30ff 	mov.w	r0, #4294967295
  401bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401bc8:	4407      	add	r7, r0
  401bca:	eba8 0800 	sub.w	r8, r8, r0
  401bce:	e7e8      	b.n	401ba2 <__sflush_r+0xde>
  401bd0:	20400001 	.word	0x20400001

00401bd4 <_fflush_r>:
  401bd4:	b538      	push	{r3, r4, r5, lr}
  401bd6:	690b      	ldr	r3, [r1, #16]
  401bd8:	4605      	mov	r5, r0
  401bda:	460c      	mov	r4, r1
  401bdc:	b1db      	cbz	r3, 401c16 <_fflush_r+0x42>
  401bde:	b118      	cbz	r0, 401be8 <_fflush_r+0x14>
  401be0:	6983      	ldr	r3, [r0, #24]
  401be2:	b90b      	cbnz	r3, 401be8 <_fflush_r+0x14>
  401be4:	f000 f860 	bl	401ca8 <__sinit>
  401be8:	4b0c      	ldr	r3, [pc, #48]	; (401c1c <_fflush_r+0x48>)
  401bea:	429c      	cmp	r4, r3
  401bec:	d109      	bne.n	401c02 <_fflush_r+0x2e>
  401bee:	686c      	ldr	r4, [r5, #4]
  401bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401bf4:	b17b      	cbz	r3, 401c16 <_fflush_r+0x42>
  401bf6:	4621      	mov	r1, r4
  401bf8:	4628      	mov	r0, r5
  401bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401bfe:	f7ff bf61 	b.w	401ac4 <__sflush_r>
  401c02:	4b07      	ldr	r3, [pc, #28]	; (401c20 <_fflush_r+0x4c>)
  401c04:	429c      	cmp	r4, r3
  401c06:	d101      	bne.n	401c0c <_fflush_r+0x38>
  401c08:	68ac      	ldr	r4, [r5, #8]
  401c0a:	e7f1      	b.n	401bf0 <_fflush_r+0x1c>
  401c0c:	4b05      	ldr	r3, [pc, #20]	; (401c24 <_fflush_r+0x50>)
  401c0e:	429c      	cmp	r4, r3
  401c10:	bf08      	it	eq
  401c12:	68ec      	ldreq	r4, [r5, #12]
  401c14:	e7ec      	b.n	401bf0 <_fflush_r+0x1c>
  401c16:	2000      	movs	r0, #0
  401c18:	bd38      	pop	{r3, r4, r5, pc}
  401c1a:	bf00      	nop
  401c1c:	004028bc 	.word	0x004028bc
  401c20:	004028dc 	.word	0x004028dc
  401c24:	0040289c 	.word	0x0040289c

00401c28 <_cleanup_r>:
  401c28:	4901      	ldr	r1, [pc, #4]	; (401c30 <_cleanup_r+0x8>)
  401c2a:	f000 b8a9 	b.w	401d80 <_fwalk_reent>
  401c2e:	bf00      	nop
  401c30:	00401bd5 	.word	0x00401bd5

00401c34 <std.isra.0>:
  401c34:	2300      	movs	r3, #0
  401c36:	b510      	push	{r4, lr}
  401c38:	4604      	mov	r4, r0
  401c3a:	6003      	str	r3, [r0, #0]
  401c3c:	6043      	str	r3, [r0, #4]
  401c3e:	6083      	str	r3, [r0, #8]
  401c40:	8181      	strh	r1, [r0, #12]
  401c42:	6643      	str	r3, [r0, #100]	; 0x64
  401c44:	81c2      	strh	r2, [r0, #14]
  401c46:	6103      	str	r3, [r0, #16]
  401c48:	6143      	str	r3, [r0, #20]
  401c4a:	6183      	str	r3, [r0, #24]
  401c4c:	4619      	mov	r1, r3
  401c4e:	2208      	movs	r2, #8
  401c50:	305c      	adds	r0, #92	; 0x5c
  401c52:	f7ff fda0 	bl	401796 <memset>
  401c56:	4b05      	ldr	r3, [pc, #20]	; (401c6c <std.isra.0+0x38>)
  401c58:	6263      	str	r3, [r4, #36]	; 0x24
  401c5a:	4b05      	ldr	r3, [pc, #20]	; (401c70 <std.isra.0+0x3c>)
  401c5c:	62a3      	str	r3, [r4, #40]	; 0x28
  401c5e:	4b05      	ldr	r3, [pc, #20]	; (401c74 <std.isra.0+0x40>)
  401c60:	62e3      	str	r3, [r4, #44]	; 0x2c
  401c62:	4b05      	ldr	r3, [pc, #20]	; (401c78 <std.isra.0+0x44>)
  401c64:	6224      	str	r4, [r4, #32]
  401c66:	6323      	str	r3, [r4, #48]	; 0x30
  401c68:	bd10      	pop	{r4, pc}
  401c6a:	bf00      	nop
  401c6c:	004025b5 	.word	0x004025b5
  401c70:	004025d7 	.word	0x004025d7
  401c74:	0040260f 	.word	0x0040260f
  401c78:	00402633 	.word	0x00402633

00401c7c <__sfmoreglue>:
  401c7c:	b570      	push	{r4, r5, r6, lr}
  401c7e:	1e4a      	subs	r2, r1, #1
  401c80:	2568      	movs	r5, #104	; 0x68
  401c82:	4355      	muls	r5, r2
  401c84:	460e      	mov	r6, r1
  401c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
  401c8a:	f000 f951 	bl	401f30 <_malloc_r>
  401c8e:	4604      	mov	r4, r0
  401c90:	b140      	cbz	r0, 401ca4 <__sfmoreglue+0x28>
  401c92:	2100      	movs	r1, #0
  401c94:	e880 0042 	stmia.w	r0, {r1, r6}
  401c98:	300c      	adds	r0, #12
  401c9a:	60a0      	str	r0, [r4, #8]
  401c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
  401ca0:	f7ff fd79 	bl	401796 <memset>
  401ca4:	4620      	mov	r0, r4
  401ca6:	bd70      	pop	{r4, r5, r6, pc}

00401ca8 <__sinit>:
  401ca8:	6983      	ldr	r3, [r0, #24]
  401caa:	b510      	push	{r4, lr}
  401cac:	4604      	mov	r4, r0
  401cae:	bb33      	cbnz	r3, 401cfe <__sinit+0x56>
  401cb0:	6483      	str	r3, [r0, #72]	; 0x48
  401cb2:	64c3      	str	r3, [r0, #76]	; 0x4c
  401cb4:	6503      	str	r3, [r0, #80]	; 0x50
  401cb6:	4b12      	ldr	r3, [pc, #72]	; (401d00 <__sinit+0x58>)
  401cb8:	4a12      	ldr	r2, [pc, #72]	; (401d04 <__sinit+0x5c>)
  401cba:	681b      	ldr	r3, [r3, #0]
  401cbc:	6282      	str	r2, [r0, #40]	; 0x28
  401cbe:	4298      	cmp	r0, r3
  401cc0:	bf04      	itt	eq
  401cc2:	2301      	moveq	r3, #1
  401cc4:	6183      	streq	r3, [r0, #24]
  401cc6:	f000 f81f 	bl	401d08 <__sfp>
  401cca:	6060      	str	r0, [r4, #4]
  401ccc:	4620      	mov	r0, r4
  401cce:	f000 f81b 	bl	401d08 <__sfp>
  401cd2:	60a0      	str	r0, [r4, #8]
  401cd4:	4620      	mov	r0, r4
  401cd6:	f000 f817 	bl	401d08 <__sfp>
  401cda:	2200      	movs	r2, #0
  401cdc:	60e0      	str	r0, [r4, #12]
  401cde:	2104      	movs	r1, #4
  401ce0:	6860      	ldr	r0, [r4, #4]
  401ce2:	f7ff ffa7 	bl	401c34 <std.isra.0>
  401ce6:	2201      	movs	r2, #1
  401ce8:	2109      	movs	r1, #9
  401cea:	68a0      	ldr	r0, [r4, #8]
  401cec:	f7ff ffa2 	bl	401c34 <std.isra.0>
  401cf0:	2202      	movs	r2, #2
  401cf2:	2112      	movs	r1, #18
  401cf4:	68e0      	ldr	r0, [r4, #12]
  401cf6:	f7ff ff9d 	bl	401c34 <std.isra.0>
  401cfa:	2301      	movs	r3, #1
  401cfc:	61a3      	str	r3, [r4, #24]
  401cfe:	bd10      	pop	{r4, pc}
  401d00:	00402898 	.word	0x00402898
  401d04:	00401c29 	.word	0x00401c29

00401d08 <__sfp>:
  401d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d0a:	4b1c      	ldr	r3, [pc, #112]	; (401d7c <__sfp+0x74>)
  401d0c:	681e      	ldr	r6, [r3, #0]
  401d0e:	69b3      	ldr	r3, [r6, #24]
  401d10:	4607      	mov	r7, r0
  401d12:	b913      	cbnz	r3, 401d1a <__sfp+0x12>
  401d14:	4630      	mov	r0, r6
  401d16:	f7ff ffc7 	bl	401ca8 <__sinit>
  401d1a:	3648      	adds	r6, #72	; 0x48
  401d1c:	68b4      	ldr	r4, [r6, #8]
  401d1e:	6873      	ldr	r3, [r6, #4]
  401d20:	3b01      	subs	r3, #1
  401d22:	d503      	bpl.n	401d2c <__sfp+0x24>
  401d24:	6833      	ldr	r3, [r6, #0]
  401d26:	b133      	cbz	r3, 401d36 <__sfp+0x2e>
  401d28:	6836      	ldr	r6, [r6, #0]
  401d2a:	e7f7      	b.n	401d1c <__sfp+0x14>
  401d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  401d30:	b16d      	cbz	r5, 401d4e <__sfp+0x46>
  401d32:	3468      	adds	r4, #104	; 0x68
  401d34:	e7f4      	b.n	401d20 <__sfp+0x18>
  401d36:	2104      	movs	r1, #4
  401d38:	4638      	mov	r0, r7
  401d3a:	f7ff ff9f 	bl	401c7c <__sfmoreglue>
  401d3e:	6030      	str	r0, [r6, #0]
  401d40:	2800      	cmp	r0, #0
  401d42:	d1f1      	bne.n	401d28 <__sfp+0x20>
  401d44:	230c      	movs	r3, #12
  401d46:	603b      	str	r3, [r7, #0]
  401d48:	4604      	mov	r4, r0
  401d4a:	4620      	mov	r0, r4
  401d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401d52:	81e3      	strh	r3, [r4, #14]
  401d54:	2301      	movs	r3, #1
  401d56:	81a3      	strh	r3, [r4, #12]
  401d58:	6665      	str	r5, [r4, #100]	; 0x64
  401d5a:	6025      	str	r5, [r4, #0]
  401d5c:	60a5      	str	r5, [r4, #8]
  401d5e:	6065      	str	r5, [r4, #4]
  401d60:	6125      	str	r5, [r4, #16]
  401d62:	6165      	str	r5, [r4, #20]
  401d64:	61a5      	str	r5, [r4, #24]
  401d66:	2208      	movs	r2, #8
  401d68:	4629      	mov	r1, r5
  401d6a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  401d6e:	f7ff fd12 	bl	401796 <memset>
  401d72:	6365      	str	r5, [r4, #52]	; 0x34
  401d74:	63a5      	str	r5, [r4, #56]	; 0x38
  401d76:	64a5      	str	r5, [r4, #72]	; 0x48
  401d78:	64e5      	str	r5, [r4, #76]	; 0x4c
  401d7a:	e7e6      	b.n	401d4a <__sfp+0x42>
  401d7c:	00402898 	.word	0x00402898

00401d80 <_fwalk_reent>:
  401d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401d84:	4680      	mov	r8, r0
  401d86:	4689      	mov	r9, r1
  401d88:	f100 0448 	add.w	r4, r0, #72	; 0x48
  401d8c:	2600      	movs	r6, #0
  401d8e:	b914      	cbnz	r4, 401d96 <_fwalk_reent+0x16>
  401d90:	4630      	mov	r0, r6
  401d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d96:	68a5      	ldr	r5, [r4, #8]
  401d98:	6867      	ldr	r7, [r4, #4]
  401d9a:	3f01      	subs	r7, #1
  401d9c:	d501      	bpl.n	401da2 <_fwalk_reent+0x22>
  401d9e:	6824      	ldr	r4, [r4, #0]
  401da0:	e7f5      	b.n	401d8e <_fwalk_reent+0xe>
  401da2:	89ab      	ldrh	r3, [r5, #12]
  401da4:	2b01      	cmp	r3, #1
  401da6:	d907      	bls.n	401db8 <_fwalk_reent+0x38>
  401da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  401dac:	3301      	adds	r3, #1
  401dae:	d003      	beq.n	401db8 <_fwalk_reent+0x38>
  401db0:	4629      	mov	r1, r5
  401db2:	4640      	mov	r0, r8
  401db4:	47c8      	blx	r9
  401db6:	4306      	orrs	r6, r0
  401db8:	3568      	adds	r5, #104	; 0x68
  401dba:	e7ee      	b.n	401d9a <_fwalk_reent+0x1a>

00401dbc <__swhatbuf_r>:
  401dbc:	b570      	push	{r4, r5, r6, lr}
  401dbe:	460e      	mov	r6, r1
  401dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401dc4:	2900      	cmp	r1, #0
  401dc6:	b090      	sub	sp, #64	; 0x40
  401dc8:	4614      	mov	r4, r2
  401dca:	461d      	mov	r5, r3
  401dcc:	da07      	bge.n	401dde <__swhatbuf_r+0x22>
  401dce:	2300      	movs	r3, #0
  401dd0:	602b      	str	r3, [r5, #0]
  401dd2:	89b3      	ldrh	r3, [r6, #12]
  401dd4:	061a      	lsls	r2, r3, #24
  401dd6:	d410      	bmi.n	401dfa <__swhatbuf_r+0x3e>
  401dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401ddc:	e00e      	b.n	401dfc <__swhatbuf_r+0x40>
  401dde:	aa01      	add	r2, sp, #4
  401de0:	f000 fc4e 	bl	402680 <_fstat_r>
  401de4:	2800      	cmp	r0, #0
  401de6:	dbf2      	blt.n	401dce <__swhatbuf_r+0x12>
  401de8:	9a02      	ldr	r2, [sp, #8]
  401dea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401dee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  401df2:	425a      	negs	r2, r3
  401df4:	415a      	adcs	r2, r3
  401df6:	602a      	str	r2, [r5, #0]
  401df8:	e7ee      	b.n	401dd8 <__swhatbuf_r+0x1c>
  401dfa:	2340      	movs	r3, #64	; 0x40
  401dfc:	2000      	movs	r0, #0
  401dfe:	6023      	str	r3, [r4, #0]
  401e00:	b010      	add	sp, #64	; 0x40
  401e02:	bd70      	pop	{r4, r5, r6, pc}

00401e04 <__smakebuf_r>:
  401e04:	898b      	ldrh	r3, [r1, #12]
  401e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
  401e08:	079d      	lsls	r5, r3, #30
  401e0a:	4606      	mov	r6, r0
  401e0c:	460c      	mov	r4, r1
  401e0e:	d507      	bpl.n	401e20 <__smakebuf_r+0x1c>
  401e10:	f104 0347 	add.w	r3, r4, #71	; 0x47
  401e14:	6023      	str	r3, [r4, #0]
  401e16:	6123      	str	r3, [r4, #16]
  401e18:	2301      	movs	r3, #1
  401e1a:	6163      	str	r3, [r4, #20]
  401e1c:	b002      	add	sp, #8
  401e1e:	bd70      	pop	{r4, r5, r6, pc}
  401e20:	ab01      	add	r3, sp, #4
  401e22:	466a      	mov	r2, sp
  401e24:	f7ff ffca 	bl	401dbc <__swhatbuf_r>
  401e28:	9900      	ldr	r1, [sp, #0]
  401e2a:	4605      	mov	r5, r0
  401e2c:	4630      	mov	r0, r6
  401e2e:	f000 f87f 	bl	401f30 <_malloc_r>
  401e32:	b948      	cbnz	r0, 401e48 <__smakebuf_r+0x44>
  401e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e38:	059a      	lsls	r2, r3, #22
  401e3a:	d4ef      	bmi.n	401e1c <__smakebuf_r+0x18>
  401e3c:	f023 0303 	bic.w	r3, r3, #3
  401e40:	f043 0302 	orr.w	r3, r3, #2
  401e44:	81a3      	strh	r3, [r4, #12]
  401e46:	e7e3      	b.n	401e10 <__smakebuf_r+0xc>
  401e48:	4b0d      	ldr	r3, [pc, #52]	; (401e80 <__smakebuf_r+0x7c>)
  401e4a:	62b3      	str	r3, [r6, #40]	; 0x28
  401e4c:	89a3      	ldrh	r3, [r4, #12]
  401e4e:	6020      	str	r0, [r4, #0]
  401e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401e54:	81a3      	strh	r3, [r4, #12]
  401e56:	9b00      	ldr	r3, [sp, #0]
  401e58:	6163      	str	r3, [r4, #20]
  401e5a:	9b01      	ldr	r3, [sp, #4]
  401e5c:	6120      	str	r0, [r4, #16]
  401e5e:	b15b      	cbz	r3, 401e78 <__smakebuf_r+0x74>
  401e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401e64:	4630      	mov	r0, r6
  401e66:	f000 fc1d 	bl	4026a4 <_isatty_r>
  401e6a:	b128      	cbz	r0, 401e78 <__smakebuf_r+0x74>
  401e6c:	89a3      	ldrh	r3, [r4, #12]
  401e6e:	f023 0303 	bic.w	r3, r3, #3
  401e72:	f043 0301 	orr.w	r3, r3, #1
  401e76:	81a3      	strh	r3, [r4, #12]
  401e78:	89a3      	ldrh	r3, [r4, #12]
  401e7a:	431d      	orrs	r5, r3
  401e7c:	81a5      	strh	r5, [r4, #12]
  401e7e:	e7cd      	b.n	401e1c <__smakebuf_r+0x18>
  401e80:	00401c29 	.word	0x00401c29

00401e84 <malloc>:
  401e84:	4b02      	ldr	r3, [pc, #8]	; (401e90 <malloc+0xc>)
  401e86:	4601      	mov	r1, r0
  401e88:	6818      	ldr	r0, [r3, #0]
  401e8a:	f000 b851 	b.w	401f30 <_malloc_r>
  401e8e:	bf00      	nop
  401e90:	2040004c 	.word	0x2040004c

00401e94 <_free_r>:
  401e94:	b538      	push	{r3, r4, r5, lr}
  401e96:	4605      	mov	r5, r0
  401e98:	2900      	cmp	r1, #0
  401e9a:	d045      	beq.n	401f28 <_free_r+0x94>
  401e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
  401ea0:	1f0c      	subs	r4, r1, #4
  401ea2:	2b00      	cmp	r3, #0
  401ea4:	bfb8      	it	lt
  401ea6:	18e4      	addlt	r4, r4, r3
  401ea8:	f000 fc72 	bl	402790 <__malloc_lock>
  401eac:	4a1f      	ldr	r2, [pc, #124]	; (401f2c <_free_r+0x98>)
  401eae:	6813      	ldr	r3, [r2, #0]
  401eb0:	4610      	mov	r0, r2
  401eb2:	b933      	cbnz	r3, 401ec2 <_free_r+0x2e>
  401eb4:	6063      	str	r3, [r4, #4]
  401eb6:	6014      	str	r4, [r2, #0]
  401eb8:	4628      	mov	r0, r5
  401eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401ebe:	f000 bc68 	b.w	402792 <__malloc_unlock>
  401ec2:	42a3      	cmp	r3, r4
  401ec4:	d90c      	bls.n	401ee0 <_free_r+0x4c>
  401ec6:	6821      	ldr	r1, [r4, #0]
  401ec8:	1862      	adds	r2, r4, r1
  401eca:	4293      	cmp	r3, r2
  401ecc:	bf04      	itt	eq
  401ece:	681a      	ldreq	r2, [r3, #0]
  401ed0:	685b      	ldreq	r3, [r3, #4]
  401ed2:	6063      	str	r3, [r4, #4]
  401ed4:	bf04      	itt	eq
  401ed6:	1852      	addeq	r2, r2, r1
  401ed8:	6022      	streq	r2, [r4, #0]
  401eda:	6004      	str	r4, [r0, #0]
  401edc:	e7ec      	b.n	401eb8 <_free_r+0x24>
  401ede:	4613      	mov	r3, r2
  401ee0:	685a      	ldr	r2, [r3, #4]
  401ee2:	b10a      	cbz	r2, 401ee8 <_free_r+0x54>
  401ee4:	42a2      	cmp	r2, r4
  401ee6:	d9fa      	bls.n	401ede <_free_r+0x4a>
  401ee8:	6819      	ldr	r1, [r3, #0]
  401eea:	1858      	adds	r0, r3, r1
  401eec:	42a0      	cmp	r0, r4
  401eee:	d10b      	bne.n	401f08 <_free_r+0x74>
  401ef0:	6820      	ldr	r0, [r4, #0]
  401ef2:	4401      	add	r1, r0
  401ef4:	1858      	adds	r0, r3, r1
  401ef6:	4282      	cmp	r2, r0
  401ef8:	6019      	str	r1, [r3, #0]
  401efa:	d1dd      	bne.n	401eb8 <_free_r+0x24>
  401efc:	6810      	ldr	r0, [r2, #0]
  401efe:	6852      	ldr	r2, [r2, #4]
  401f00:	605a      	str	r2, [r3, #4]
  401f02:	4401      	add	r1, r0
  401f04:	6019      	str	r1, [r3, #0]
  401f06:	e7d7      	b.n	401eb8 <_free_r+0x24>
  401f08:	d902      	bls.n	401f10 <_free_r+0x7c>
  401f0a:	230c      	movs	r3, #12
  401f0c:	602b      	str	r3, [r5, #0]
  401f0e:	e7d3      	b.n	401eb8 <_free_r+0x24>
  401f10:	6820      	ldr	r0, [r4, #0]
  401f12:	1821      	adds	r1, r4, r0
  401f14:	428a      	cmp	r2, r1
  401f16:	bf04      	itt	eq
  401f18:	6811      	ldreq	r1, [r2, #0]
  401f1a:	6852      	ldreq	r2, [r2, #4]
  401f1c:	6062      	str	r2, [r4, #4]
  401f1e:	bf04      	itt	eq
  401f20:	1809      	addeq	r1, r1, r0
  401f22:	6021      	streq	r1, [r4, #0]
  401f24:	605c      	str	r4, [r3, #4]
  401f26:	e7c7      	b.n	401eb8 <_free_r+0x24>
  401f28:	bd38      	pop	{r3, r4, r5, pc}
  401f2a:	bf00      	nop
  401f2c:	20400134 	.word	0x20400134

00401f30 <_malloc_r>:
  401f30:	b570      	push	{r4, r5, r6, lr}
  401f32:	1ccd      	adds	r5, r1, #3
  401f34:	f025 0503 	bic.w	r5, r5, #3
  401f38:	3508      	adds	r5, #8
  401f3a:	2d0c      	cmp	r5, #12
  401f3c:	bf38      	it	cc
  401f3e:	250c      	movcc	r5, #12
  401f40:	2d00      	cmp	r5, #0
  401f42:	4606      	mov	r6, r0
  401f44:	db01      	blt.n	401f4a <_malloc_r+0x1a>
  401f46:	42a9      	cmp	r1, r5
  401f48:	d903      	bls.n	401f52 <_malloc_r+0x22>
  401f4a:	230c      	movs	r3, #12
  401f4c:	6033      	str	r3, [r6, #0]
  401f4e:	2000      	movs	r0, #0
  401f50:	bd70      	pop	{r4, r5, r6, pc}
  401f52:	f000 fc1d 	bl	402790 <__malloc_lock>
  401f56:	4a23      	ldr	r2, [pc, #140]	; (401fe4 <_malloc_r+0xb4>)
  401f58:	6814      	ldr	r4, [r2, #0]
  401f5a:	4621      	mov	r1, r4
  401f5c:	b991      	cbnz	r1, 401f84 <_malloc_r+0x54>
  401f5e:	4c22      	ldr	r4, [pc, #136]	; (401fe8 <_malloc_r+0xb8>)
  401f60:	6823      	ldr	r3, [r4, #0]
  401f62:	b91b      	cbnz	r3, 401f6c <_malloc_r+0x3c>
  401f64:	4630      	mov	r0, r6
  401f66:	f000 fb15 	bl	402594 <_sbrk_r>
  401f6a:	6020      	str	r0, [r4, #0]
  401f6c:	4629      	mov	r1, r5
  401f6e:	4630      	mov	r0, r6
  401f70:	f000 fb10 	bl	402594 <_sbrk_r>
  401f74:	1c43      	adds	r3, r0, #1
  401f76:	d126      	bne.n	401fc6 <_malloc_r+0x96>
  401f78:	230c      	movs	r3, #12
  401f7a:	6033      	str	r3, [r6, #0]
  401f7c:	4630      	mov	r0, r6
  401f7e:	f000 fc08 	bl	402792 <__malloc_unlock>
  401f82:	e7e4      	b.n	401f4e <_malloc_r+0x1e>
  401f84:	680b      	ldr	r3, [r1, #0]
  401f86:	1b5b      	subs	r3, r3, r5
  401f88:	d41a      	bmi.n	401fc0 <_malloc_r+0x90>
  401f8a:	2b0b      	cmp	r3, #11
  401f8c:	d90f      	bls.n	401fae <_malloc_r+0x7e>
  401f8e:	600b      	str	r3, [r1, #0]
  401f90:	50cd      	str	r5, [r1, r3]
  401f92:	18cc      	adds	r4, r1, r3
  401f94:	4630      	mov	r0, r6
  401f96:	f000 fbfc 	bl	402792 <__malloc_unlock>
  401f9a:	f104 000b 	add.w	r0, r4, #11
  401f9e:	1d23      	adds	r3, r4, #4
  401fa0:	f020 0007 	bic.w	r0, r0, #7
  401fa4:	1ac3      	subs	r3, r0, r3
  401fa6:	d01b      	beq.n	401fe0 <_malloc_r+0xb0>
  401fa8:	425a      	negs	r2, r3
  401faa:	50e2      	str	r2, [r4, r3]
  401fac:	bd70      	pop	{r4, r5, r6, pc}
  401fae:	428c      	cmp	r4, r1
  401fb0:	bf0d      	iteet	eq
  401fb2:	6863      	ldreq	r3, [r4, #4]
  401fb4:	684b      	ldrne	r3, [r1, #4]
  401fb6:	6063      	strne	r3, [r4, #4]
  401fb8:	6013      	streq	r3, [r2, #0]
  401fba:	bf18      	it	ne
  401fbc:	460c      	movne	r4, r1
  401fbe:	e7e9      	b.n	401f94 <_malloc_r+0x64>
  401fc0:	460c      	mov	r4, r1
  401fc2:	6849      	ldr	r1, [r1, #4]
  401fc4:	e7ca      	b.n	401f5c <_malloc_r+0x2c>
  401fc6:	1cc4      	adds	r4, r0, #3
  401fc8:	f024 0403 	bic.w	r4, r4, #3
  401fcc:	42a0      	cmp	r0, r4
  401fce:	d005      	beq.n	401fdc <_malloc_r+0xac>
  401fd0:	1a21      	subs	r1, r4, r0
  401fd2:	4630      	mov	r0, r6
  401fd4:	f000 fade 	bl	402594 <_sbrk_r>
  401fd8:	3001      	adds	r0, #1
  401fda:	d0cd      	beq.n	401f78 <_malloc_r+0x48>
  401fdc:	6025      	str	r5, [r4, #0]
  401fde:	e7d9      	b.n	401f94 <_malloc_r+0x64>
  401fe0:	bd70      	pop	{r4, r5, r6, pc}
  401fe2:	bf00      	nop
  401fe4:	20400134 	.word	0x20400134
  401fe8:	20400138 	.word	0x20400138

00401fec <__sfputc_r>:
  401fec:	6893      	ldr	r3, [r2, #8]
  401fee:	3b01      	subs	r3, #1
  401ff0:	2b00      	cmp	r3, #0
  401ff2:	b410      	push	{r4}
  401ff4:	6093      	str	r3, [r2, #8]
  401ff6:	da08      	bge.n	40200a <__sfputc_r+0x1e>
  401ff8:	6994      	ldr	r4, [r2, #24]
  401ffa:	42a3      	cmp	r3, r4
  401ffc:	db02      	blt.n	402004 <__sfputc_r+0x18>
  401ffe:	b2cb      	uxtb	r3, r1
  402000:	2b0a      	cmp	r3, #10
  402002:	d102      	bne.n	40200a <__sfputc_r+0x1e>
  402004:	bc10      	pop	{r4}
  402006:	f7ff bc9d 	b.w	401944 <__swbuf_r>
  40200a:	6813      	ldr	r3, [r2, #0]
  40200c:	1c58      	adds	r0, r3, #1
  40200e:	6010      	str	r0, [r2, #0]
  402010:	7019      	strb	r1, [r3, #0]
  402012:	b2c8      	uxtb	r0, r1
  402014:	bc10      	pop	{r4}
  402016:	4770      	bx	lr

00402018 <__sfputs_r>:
  402018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40201a:	4606      	mov	r6, r0
  40201c:	460f      	mov	r7, r1
  40201e:	4614      	mov	r4, r2
  402020:	18d5      	adds	r5, r2, r3
  402022:	42ac      	cmp	r4, r5
  402024:	d101      	bne.n	40202a <__sfputs_r+0x12>
  402026:	2000      	movs	r0, #0
  402028:	e007      	b.n	40203a <__sfputs_r+0x22>
  40202a:	463a      	mov	r2, r7
  40202c:	f814 1b01 	ldrb.w	r1, [r4], #1
  402030:	4630      	mov	r0, r6
  402032:	f7ff ffdb 	bl	401fec <__sfputc_r>
  402036:	1c43      	adds	r3, r0, #1
  402038:	d1f3      	bne.n	402022 <__sfputs_r+0xa>
  40203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040203c <_vfiprintf_r>:
  40203c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402040:	b09d      	sub	sp, #116	; 0x74
  402042:	460c      	mov	r4, r1
  402044:	4617      	mov	r7, r2
  402046:	9303      	str	r3, [sp, #12]
  402048:	4606      	mov	r6, r0
  40204a:	b118      	cbz	r0, 402054 <_vfiprintf_r+0x18>
  40204c:	6983      	ldr	r3, [r0, #24]
  40204e:	b90b      	cbnz	r3, 402054 <_vfiprintf_r+0x18>
  402050:	f7ff fe2a 	bl	401ca8 <__sinit>
  402054:	4b7c      	ldr	r3, [pc, #496]	; (402248 <_vfiprintf_r+0x20c>)
  402056:	429c      	cmp	r4, r3
  402058:	d157      	bne.n	40210a <_vfiprintf_r+0xce>
  40205a:	6874      	ldr	r4, [r6, #4]
  40205c:	89a3      	ldrh	r3, [r4, #12]
  40205e:	0718      	lsls	r0, r3, #28
  402060:	d55d      	bpl.n	40211e <_vfiprintf_r+0xe2>
  402062:	6923      	ldr	r3, [r4, #16]
  402064:	2b00      	cmp	r3, #0
  402066:	d05a      	beq.n	40211e <_vfiprintf_r+0xe2>
  402068:	2300      	movs	r3, #0
  40206a:	9309      	str	r3, [sp, #36]	; 0x24
  40206c:	2320      	movs	r3, #32
  40206e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  402072:	2330      	movs	r3, #48	; 0x30
  402074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  402078:	f04f 0b01 	mov.w	fp, #1
  40207c:	46b8      	mov	r8, r7
  40207e:	4645      	mov	r5, r8
  402080:	f815 3b01 	ldrb.w	r3, [r5], #1
  402084:	2b00      	cmp	r3, #0
  402086:	d155      	bne.n	402134 <_vfiprintf_r+0xf8>
  402088:	ebb8 0a07 	subs.w	sl, r8, r7
  40208c:	d00b      	beq.n	4020a6 <_vfiprintf_r+0x6a>
  40208e:	4653      	mov	r3, sl
  402090:	463a      	mov	r2, r7
  402092:	4621      	mov	r1, r4
  402094:	4630      	mov	r0, r6
  402096:	f7ff ffbf 	bl	402018 <__sfputs_r>
  40209a:	3001      	adds	r0, #1
  40209c:	f000 80c4 	beq.w	402228 <_vfiprintf_r+0x1ec>
  4020a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4020a2:	4453      	add	r3, sl
  4020a4:	9309      	str	r3, [sp, #36]	; 0x24
  4020a6:	f898 3000 	ldrb.w	r3, [r8]
  4020aa:	2b00      	cmp	r3, #0
  4020ac:	f000 80bc 	beq.w	402228 <_vfiprintf_r+0x1ec>
  4020b0:	2300      	movs	r3, #0
  4020b2:	f04f 32ff 	mov.w	r2, #4294967295
  4020b6:	9304      	str	r3, [sp, #16]
  4020b8:	9307      	str	r3, [sp, #28]
  4020ba:	9205      	str	r2, [sp, #20]
  4020bc:	9306      	str	r3, [sp, #24]
  4020be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  4020c2:	931a      	str	r3, [sp, #104]	; 0x68
  4020c4:	2205      	movs	r2, #5
  4020c6:	7829      	ldrb	r1, [r5, #0]
  4020c8:	4860      	ldr	r0, [pc, #384]	; (40224c <_vfiprintf_r+0x210>)
  4020ca:	f000 fb11 	bl	4026f0 <memchr>
  4020ce:	f105 0801 	add.w	r8, r5, #1
  4020d2:	9b04      	ldr	r3, [sp, #16]
  4020d4:	2800      	cmp	r0, #0
  4020d6:	d131      	bne.n	40213c <_vfiprintf_r+0x100>
  4020d8:	06d9      	lsls	r1, r3, #27
  4020da:	bf44      	itt	mi
  4020dc:	2220      	movmi	r2, #32
  4020de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4020e2:	071a      	lsls	r2, r3, #28
  4020e4:	bf44      	itt	mi
  4020e6:	222b      	movmi	r2, #43	; 0x2b
  4020e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4020ec:	782a      	ldrb	r2, [r5, #0]
  4020ee:	2a2a      	cmp	r2, #42	; 0x2a
  4020f0:	d02c      	beq.n	40214c <_vfiprintf_r+0x110>
  4020f2:	9a07      	ldr	r2, [sp, #28]
  4020f4:	2100      	movs	r1, #0
  4020f6:	200a      	movs	r0, #10
  4020f8:	46a8      	mov	r8, r5
  4020fa:	3501      	adds	r5, #1
  4020fc:	f898 3000 	ldrb.w	r3, [r8]
  402100:	3b30      	subs	r3, #48	; 0x30
  402102:	2b09      	cmp	r3, #9
  402104:	d96d      	bls.n	4021e2 <_vfiprintf_r+0x1a6>
  402106:	b371      	cbz	r1, 402166 <_vfiprintf_r+0x12a>
  402108:	e026      	b.n	402158 <_vfiprintf_r+0x11c>
  40210a:	4b51      	ldr	r3, [pc, #324]	; (402250 <_vfiprintf_r+0x214>)
  40210c:	429c      	cmp	r4, r3
  40210e:	d101      	bne.n	402114 <_vfiprintf_r+0xd8>
  402110:	68b4      	ldr	r4, [r6, #8]
  402112:	e7a3      	b.n	40205c <_vfiprintf_r+0x20>
  402114:	4b4f      	ldr	r3, [pc, #316]	; (402254 <_vfiprintf_r+0x218>)
  402116:	429c      	cmp	r4, r3
  402118:	bf08      	it	eq
  40211a:	68f4      	ldreq	r4, [r6, #12]
  40211c:	e79e      	b.n	40205c <_vfiprintf_r+0x20>
  40211e:	4621      	mov	r1, r4
  402120:	4630      	mov	r0, r6
  402122:	f7ff fc61 	bl	4019e8 <__swsetup_r>
  402126:	2800      	cmp	r0, #0
  402128:	d09e      	beq.n	402068 <_vfiprintf_r+0x2c>
  40212a:	f04f 30ff 	mov.w	r0, #4294967295
  40212e:	b01d      	add	sp, #116	; 0x74
  402130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402134:	2b25      	cmp	r3, #37	; 0x25
  402136:	d0a7      	beq.n	402088 <_vfiprintf_r+0x4c>
  402138:	46a8      	mov	r8, r5
  40213a:	e7a0      	b.n	40207e <_vfiprintf_r+0x42>
  40213c:	4a43      	ldr	r2, [pc, #268]	; (40224c <_vfiprintf_r+0x210>)
  40213e:	1a80      	subs	r0, r0, r2
  402140:	fa0b f000 	lsl.w	r0, fp, r0
  402144:	4318      	orrs	r0, r3
  402146:	9004      	str	r0, [sp, #16]
  402148:	4645      	mov	r5, r8
  40214a:	e7bb      	b.n	4020c4 <_vfiprintf_r+0x88>
  40214c:	9a03      	ldr	r2, [sp, #12]
  40214e:	1d11      	adds	r1, r2, #4
  402150:	6812      	ldr	r2, [r2, #0]
  402152:	9103      	str	r1, [sp, #12]
  402154:	2a00      	cmp	r2, #0
  402156:	db01      	blt.n	40215c <_vfiprintf_r+0x120>
  402158:	9207      	str	r2, [sp, #28]
  40215a:	e004      	b.n	402166 <_vfiprintf_r+0x12a>
  40215c:	4252      	negs	r2, r2
  40215e:	f043 0302 	orr.w	r3, r3, #2
  402162:	9207      	str	r2, [sp, #28]
  402164:	9304      	str	r3, [sp, #16]
  402166:	f898 3000 	ldrb.w	r3, [r8]
  40216a:	2b2e      	cmp	r3, #46	; 0x2e
  40216c:	d110      	bne.n	402190 <_vfiprintf_r+0x154>
  40216e:	f898 3001 	ldrb.w	r3, [r8, #1]
  402172:	2b2a      	cmp	r3, #42	; 0x2a
  402174:	f108 0101 	add.w	r1, r8, #1
  402178:	d137      	bne.n	4021ea <_vfiprintf_r+0x1ae>
  40217a:	9b03      	ldr	r3, [sp, #12]
  40217c:	1d1a      	adds	r2, r3, #4
  40217e:	681b      	ldr	r3, [r3, #0]
  402180:	9203      	str	r2, [sp, #12]
  402182:	2b00      	cmp	r3, #0
  402184:	bfb8      	it	lt
  402186:	f04f 33ff 	movlt.w	r3, #4294967295
  40218a:	f108 0802 	add.w	r8, r8, #2
  40218e:	9305      	str	r3, [sp, #20]
  402190:	4d31      	ldr	r5, [pc, #196]	; (402258 <_vfiprintf_r+0x21c>)
  402192:	f898 1000 	ldrb.w	r1, [r8]
  402196:	2203      	movs	r2, #3
  402198:	4628      	mov	r0, r5
  40219a:	f000 faa9 	bl	4026f0 <memchr>
  40219e:	b140      	cbz	r0, 4021b2 <_vfiprintf_r+0x176>
  4021a0:	2340      	movs	r3, #64	; 0x40
  4021a2:	1b40      	subs	r0, r0, r5
  4021a4:	fa03 f000 	lsl.w	r0, r3, r0
  4021a8:	9b04      	ldr	r3, [sp, #16]
  4021aa:	4303      	orrs	r3, r0
  4021ac:	9304      	str	r3, [sp, #16]
  4021ae:	f108 0801 	add.w	r8, r8, #1
  4021b2:	f898 1000 	ldrb.w	r1, [r8]
  4021b6:	4829      	ldr	r0, [pc, #164]	; (40225c <_vfiprintf_r+0x220>)
  4021b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4021bc:	2206      	movs	r2, #6
  4021be:	f108 0701 	add.w	r7, r8, #1
  4021c2:	f000 fa95 	bl	4026f0 <memchr>
  4021c6:	2800      	cmp	r0, #0
  4021c8:	d034      	beq.n	402234 <_vfiprintf_r+0x1f8>
  4021ca:	4b25      	ldr	r3, [pc, #148]	; (402260 <_vfiprintf_r+0x224>)
  4021cc:	bb03      	cbnz	r3, 402210 <_vfiprintf_r+0x1d4>
  4021ce:	9b03      	ldr	r3, [sp, #12]
  4021d0:	3307      	adds	r3, #7
  4021d2:	f023 0307 	bic.w	r3, r3, #7
  4021d6:	3308      	adds	r3, #8
  4021d8:	9303      	str	r3, [sp, #12]
  4021da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4021dc:	444b      	add	r3, r9
  4021de:	9309      	str	r3, [sp, #36]	; 0x24
  4021e0:	e74c      	b.n	40207c <_vfiprintf_r+0x40>
  4021e2:	fb00 3202 	mla	r2, r0, r2, r3
  4021e6:	2101      	movs	r1, #1
  4021e8:	e786      	b.n	4020f8 <_vfiprintf_r+0xbc>
  4021ea:	2300      	movs	r3, #0
  4021ec:	9305      	str	r3, [sp, #20]
  4021ee:	4618      	mov	r0, r3
  4021f0:	250a      	movs	r5, #10
  4021f2:	4688      	mov	r8, r1
  4021f4:	3101      	adds	r1, #1
  4021f6:	f898 2000 	ldrb.w	r2, [r8]
  4021fa:	3a30      	subs	r2, #48	; 0x30
  4021fc:	2a09      	cmp	r2, #9
  4021fe:	d903      	bls.n	402208 <_vfiprintf_r+0x1cc>
  402200:	2b00      	cmp	r3, #0
  402202:	d0c5      	beq.n	402190 <_vfiprintf_r+0x154>
  402204:	9005      	str	r0, [sp, #20]
  402206:	e7c3      	b.n	402190 <_vfiprintf_r+0x154>
  402208:	fb05 2000 	mla	r0, r5, r0, r2
  40220c:	2301      	movs	r3, #1
  40220e:	e7f0      	b.n	4021f2 <_vfiprintf_r+0x1b6>
  402210:	ab03      	add	r3, sp, #12
  402212:	9300      	str	r3, [sp, #0]
  402214:	4622      	mov	r2, r4
  402216:	4b13      	ldr	r3, [pc, #76]	; (402264 <_vfiprintf_r+0x228>)
  402218:	a904      	add	r1, sp, #16
  40221a:	4630      	mov	r0, r6
  40221c:	f3af 8000 	nop.w
  402220:	f1b0 3fff 	cmp.w	r0, #4294967295
  402224:	4681      	mov	r9, r0
  402226:	d1d8      	bne.n	4021da <_vfiprintf_r+0x19e>
  402228:	89a3      	ldrh	r3, [r4, #12]
  40222a:	065b      	lsls	r3, r3, #25
  40222c:	f53f af7d 	bmi.w	40212a <_vfiprintf_r+0xee>
  402230:	9809      	ldr	r0, [sp, #36]	; 0x24
  402232:	e77c      	b.n	40212e <_vfiprintf_r+0xf2>
  402234:	ab03      	add	r3, sp, #12
  402236:	9300      	str	r3, [sp, #0]
  402238:	4622      	mov	r2, r4
  40223a:	4b0a      	ldr	r3, [pc, #40]	; (402264 <_vfiprintf_r+0x228>)
  40223c:	a904      	add	r1, sp, #16
  40223e:	4630      	mov	r0, r6
  402240:	f000 f888 	bl	402354 <_printf_i>
  402244:	e7ec      	b.n	402220 <_vfiprintf_r+0x1e4>
  402246:	bf00      	nop
  402248:	004028bc 	.word	0x004028bc
  40224c:	004028fc 	.word	0x004028fc
  402250:	004028dc 	.word	0x004028dc
  402254:	0040289c 	.word	0x0040289c
  402258:	00402902 	.word	0x00402902
  40225c:	00402906 	.word	0x00402906
  402260:	00000000 	.word	0x00000000
  402264:	00402019 	.word	0x00402019

00402268 <_printf_common>:
  402268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40226c:	4691      	mov	r9, r2
  40226e:	461f      	mov	r7, r3
  402270:	688a      	ldr	r2, [r1, #8]
  402272:	690b      	ldr	r3, [r1, #16]
  402274:	f8dd 8020 	ldr.w	r8, [sp, #32]
  402278:	4293      	cmp	r3, r2
  40227a:	bfb8      	it	lt
  40227c:	4613      	movlt	r3, r2
  40227e:	f8c9 3000 	str.w	r3, [r9]
  402282:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  402286:	4606      	mov	r6, r0
  402288:	460c      	mov	r4, r1
  40228a:	b112      	cbz	r2, 402292 <_printf_common+0x2a>
  40228c:	3301      	adds	r3, #1
  40228e:	f8c9 3000 	str.w	r3, [r9]
  402292:	6823      	ldr	r3, [r4, #0]
  402294:	0699      	lsls	r1, r3, #26
  402296:	bf42      	ittt	mi
  402298:	f8d9 3000 	ldrmi.w	r3, [r9]
  40229c:	3302      	addmi	r3, #2
  40229e:	f8c9 3000 	strmi.w	r3, [r9]
  4022a2:	6825      	ldr	r5, [r4, #0]
  4022a4:	f015 0506 	ands.w	r5, r5, #6
  4022a8:	d107      	bne.n	4022ba <_printf_common+0x52>
  4022aa:	f104 0a19 	add.w	sl, r4, #25
  4022ae:	68e3      	ldr	r3, [r4, #12]
  4022b0:	f8d9 2000 	ldr.w	r2, [r9]
  4022b4:	1a9b      	subs	r3, r3, r2
  4022b6:	429d      	cmp	r5, r3
  4022b8:	db29      	blt.n	40230e <_printf_common+0xa6>
  4022ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4022be:	6822      	ldr	r2, [r4, #0]
  4022c0:	3300      	adds	r3, #0
  4022c2:	bf18      	it	ne
  4022c4:	2301      	movne	r3, #1
  4022c6:	0692      	lsls	r2, r2, #26
  4022c8:	d42e      	bmi.n	402328 <_printf_common+0xc0>
  4022ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4022ce:	4639      	mov	r1, r7
  4022d0:	4630      	mov	r0, r6
  4022d2:	47c0      	blx	r8
  4022d4:	3001      	adds	r0, #1
  4022d6:	d021      	beq.n	40231c <_printf_common+0xb4>
  4022d8:	6823      	ldr	r3, [r4, #0]
  4022da:	68e5      	ldr	r5, [r4, #12]
  4022dc:	f8d9 2000 	ldr.w	r2, [r9]
  4022e0:	f003 0306 	and.w	r3, r3, #6
  4022e4:	2b04      	cmp	r3, #4
  4022e6:	bf08      	it	eq
  4022e8:	1aad      	subeq	r5, r5, r2
  4022ea:	68a3      	ldr	r3, [r4, #8]
  4022ec:	6922      	ldr	r2, [r4, #16]
  4022ee:	bf0c      	ite	eq
  4022f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4022f4:	2500      	movne	r5, #0
  4022f6:	4293      	cmp	r3, r2
  4022f8:	bfc4      	itt	gt
  4022fa:	1a9b      	subgt	r3, r3, r2
  4022fc:	18ed      	addgt	r5, r5, r3
  4022fe:	f04f 0900 	mov.w	r9, #0
  402302:	341a      	adds	r4, #26
  402304:	454d      	cmp	r5, r9
  402306:	d11b      	bne.n	402340 <_printf_common+0xd8>
  402308:	2000      	movs	r0, #0
  40230a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40230e:	2301      	movs	r3, #1
  402310:	4652      	mov	r2, sl
  402312:	4639      	mov	r1, r7
  402314:	4630      	mov	r0, r6
  402316:	47c0      	blx	r8
  402318:	3001      	adds	r0, #1
  40231a:	d103      	bne.n	402324 <_printf_common+0xbc>
  40231c:	f04f 30ff 	mov.w	r0, #4294967295
  402320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402324:	3501      	adds	r5, #1
  402326:	e7c2      	b.n	4022ae <_printf_common+0x46>
  402328:	18e1      	adds	r1, r4, r3
  40232a:	1c5a      	adds	r2, r3, #1
  40232c:	2030      	movs	r0, #48	; 0x30
  40232e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402332:	4422      	add	r2, r4
  402334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  402338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  40233c:	3302      	adds	r3, #2
  40233e:	e7c4      	b.n	4022ca <_printf_common+0x62>
  402340:	2301      	movs	r3, #1
  402342:	4622      	mov	r2, r4
  402344:	4639      	mov	r1, r7
  402346:	4630      	mov	r0, r6
  402348:	47c0      	blx	r8
  40234a:	3001      	adds	r0, #1
  40234c:	d0e6      	beq.n	40231c <_printf_common+0xb4>
  40234e:	f109 0901 	add.w	r9, r9, #1
  402352:	e7d7      	b.n	402304 <_printf_common+0x9c>

00402354 <_printf_i>:
  402354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402358:	4617      	mov	r7, r2
  40235a:	7e0a      	ldrb	r2, [r1, #24]
  40235c:	b085      	sub	sp, #20
  40235e:	2a6e      	cmp	r2, #110	; 0x6e
  402360:	4698      	mov	r8, r3
  402362:	4606      	mov	r6, r0
  402364:	460c      	mov	r4, r1
  402366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402368:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  40236c:	f000 80bc 	beq.w	4024e8 <_printf_i+0x194>
  402370:	d81a      	bhi.n	4023a8 <_printf_i+0x54>
  402372:	2a63      	cmp	r2, #99	; 0x63
  402374:	d02e      	beq.n	4023d4 <_printf_i+0x80>
  402376:	d80a      	bhi.n	40238e <_printf_i+0x3a>
  402378:	2a00      	cmp	r2, #0
  40237a:	f000 80c8 	beq.w	40250e <_printf_i+0x1ba>
  40237e:	2a58      	cmp	r2, #88	; 0x58
  402380:	f000 808a 	beq.w	402498 <_printf_i+0x144>
  402384:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402388:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  40238c:	e02a      	b.n	4023e4 <_printf_i+0x90>
  40238e:	2a64      	cmp	r2, #100	; 0x64
  402390:	d001      	beq.n	402396 <_printf_i+0x42>
  402392:	2a69      	cmp	r2, #105	; 0x69
  402394:	d1f6      	bne.n	402384 <_printf_i+0x30>
  402396:	6821      	ldr	r1, [r4, #0]
  402398:	681a      	ldr	r2, [r3, #0]
  40239a:	f011 0f80 	tst.w	r1, #128	; 0x80
  40239e:	d023      	beq.n	4023e8 <_printf_i+0x94>
  4023a0:	1d11      	adds	r1, r2, #4
  4023a2:	6019      	str	r1, [r3, #0]
  4023a4:	6813      	ldr	r3, [r2, #0]
  4023a6:	e027      	b.n	4023f8 <_printf_i+0xa4>
  4023a8:	2a73      	cmp	r2, #115	; 0x73
  4023aa:	f000 80b4 	beq.w	402516 <_printf_i+0x1c2>
  4023ae:	d808      	bhi.n	4023c2 <_printf_i+0x6e>
  4023b0:	2a6f      	cmp	r2, #111	; 0x6f
  4023b2:	d02a      	beq.n	40240a <_printf_i+0xb6>
  4023b4:	2a70      	cmp	r2, #112	; 0x70
  4023b6:	d1e5      	bne.n	402384 <_printf_i+0x30>
  4023b8:	680a      	ldr	r2, [r1, #0]
  4023ba:	f042 0220 	orr.w	r2, r2, #32
  4023be:	600a      	str	r2, [r1, #0]
  4023c0:	e003      	b.n	4023ca <_printf_i+0x76>
  4023c2:	2a75      	cmp	r2, #117	; 0x75
  4023c4:	d021      	beq.n	40240a <_printf_i+0xb6>
  4023c6:	2a78      	cmp	r2, #120	; 0x78
  4023c8:	d1dc      	bne.n	402384 <_printf_i+0x30>
  4023ca:	2278      	movs	r2, #120	; 0x78
  4023cc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  4023d0:	496e      	ldr	r1, [pc, #440]	; (40258c <_printf_i+0x238>)
  4023d2:	e064      	b.n	40249e <_printf_i+0x14a>
  4023d4:	681a      	ldr	r2, [r3, #0]
  4023d6:	f101 0542 	add.w	r5, r1, #66	; 0x42
  4023da:	1d11      	adds	r1, r2, #4
  4023dc:	6019      	str	r1, [r3, #0]
  4023de:	6813      	ldr	r3, [r2, #0]
  4023e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4023e4:	2301      	movs	r3, #1
  4023e6:	e0a3      	b.n	402530 <_printf_i+0x1dc>
  4023e8:	f011 0f40 	tst.w	r1, #64	; 0x40
  4023ec:	f102 0104 	add.w	r1, r2, #4
  4023f0:	6019      	str	r1, [r3, #0]
  4023f2:	d0d7      	beq.n	4023a4 <_printf_i+0x50>
  4023f4:	f9b2 3000 	ldrsh.w	r3, [r2]
  4023f8:	2b00      	cmp	r3, #0
  4023fa:	da03      	bge.n	402404 <_printf_i+0xb0>
  4023fc:	222d      	movs	r2, #45	; 0x2d
  4023fe:	425b      	negs	r3, r3
  402400:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402404:	4962      	ldr	r1, [pc, #392]	; (402590 <_printf_i+0x23c>)
  402406:	220a      	movs	r2, #10
  402408:	e017      	b.n	40243a <_printf_i+0xe6>
  40240a:	6820      	ldr	r0, [r4, #0]
  40240c:	6819      	ldr	r1, [r3, #0]
  40240e:	f010 0f80 	tst.w	r0, #128	; 0x80
  402412:	d003      	beq.n	40241c <_printf_i+0xc8>
  402414:	1d08      	adds	r0, r1, #4
  402416:	6018      	str	r0, [r3, #0]
  402418:	680b      	ldr	r3, [r1, #0]
  40241a:	e006      	b.n	40242a <_printf_i+0xd6>
  40241c:	f010 0f40 	tst.w	r0, #64	; 0x40
  402420:	f101 0004 	add.w	r0, r1, #4
  402424:	6018      	str	r0, [r3, #0]
  402426:	d0f7      	beq.n	402418 <_printf_i+0xc4>
  402428:	880b      	ldrh	r3, [r1, #0]
  40242a:	4959      	ldr	r1, [pc, #356]	; (402590 <_printf_i+0x23c>)
  40242c:	2a6f      	cmp	r2, #111	; 0x6f
  40242e:	bf14      	ite	ne
  402430:	220a      	movne	r2, #10
  402432:	2208      	moveq	r2, #8
  402434:	2000      	movs	r0, #0
  402436:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  40243a:	6865      	ldr	r5, [r4, #4]
  40243c:	60a5      	str	r5, [r4, #8]
  40243e:	2d00      	cmp	r5, #0
  402440:	f2c0 809c 	blt.w	40257c <_printf_i+0x228>
  402444:	6820      	ldr	r0, [r4, #0]
  402446:	f020 0004 	bic.w	r0, r0, #4
  40244a:	6020      	str	r0, [r4, #0]
  40244c:	2b00      	cmp	r3, #0
  40244e:	d13f      	bne.n	4024d0 <_printf_i+0x17c>
  402450:	2d00      	cmp	r5, #0
  402452:	f040 8095 	bne.w	402580 <_printf_i+0x22c>
  402456:	4675      	mov	r5, lr
  402458:	2a08      	cmp	r2, #8
  40245a:	d10b      	bne.n	402474 <_printf_i+0x120>
  40245c:	6823      	ldr	r3, [r4, #0]
  40245e:	07da      	lsls	r2, r3, #31
  402460:	d508      	bpl.n	402474 <_printf_i+0x120>
  402462:	6923      	ldr	r3, [r4, #16]
  402464:	6862      	ldr	r2, [r4, #4]
  402466:	429a      	cmp	r2, r3
  402468:	bfde      	ittt	le
  40246a:	2330      	movle	r3, #48	; 0x30
  40246c:	f805 3c01 	strble.w	r3, [r5, #-1]
  402470:	f105 35ff 	addle.w	r5, r5, #4294967295
  402474:	ebae 0305 	sub.w	r3, lr, r5
  402478:	6123      	str	r3, [r4, #16]
  40247a:	f8cd 8000 	str.w	r8, [sp]
  40247e:	463b      	mov	r3, r7
  402480:	aa03      	add	r2, sp, #12
  402482:	4621      	mov	r1, r4
  402484:	4630      	mov	r0, r6
  402486:	f7ff feef 	bl	402268 <_printf_common>
  40248a:	3001      	adds	r0, #1
  40248c:	d155      	bne.n	40253a <_printf_i+0x1e6>
  40248e:	f04f 30ff 	mov.w	r0, #4294967295
  402492:	b005      	add	sp, #20
  402494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402498:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  40249c:	493c      	ldr	r1, [pc, #240]	; (402590 <_printf_i+0x23c>)
  40249e:	6822      	ldr	r2, [r4, #0]
  4024a0:	6818      	ldr	r0, [r3, #0]
  4024a2:	f012 0f80 	tst.w	r2, #128	; 0x80
  4024a6:	f100 0504 	add.w	r5, r0, #4
  4024aa:	601d      	str	r5, [r3, #0]
  4024ac:	d001      	beq.n	4024b2 <_printf_i+0x15e>
  4024ae:	6803      	ldr	r3, [r0, #0]
  4024b0:	e002      	b.n	4024b8 <_printf_i+0x164>
  4024b2:	0655      	lsls	r5, r2, #25
  4024b4:	d5fb      	bpl.n	4024ae <_printf_i+0x15a>
  4024b6:	8803      	ldrh	r3, [r0, #0]
  4024b8:	07d0      	lsls	r0, r2, #31
  4024ba:	bf44      	itt	mi
  4024bc:	f042 0220 	orrmi.w	r2, r2, #32
  4024c0:	6022      	strmi	r2, [r4, #0]
  4024c2:	b91b      	cbnz	r3, 4024cc <_printf_i+0x178>
  4024c4:	6822      	ldr	r2, [r4, #0]
  4024c6:	f022 0220 	bic.w	r2, r2, #32
  4024ca:	6022      	str	r2, [r4, #0]
  4024cc:	2210      	movs	r2, #16
  4024ce:	e7b1      	b.n	402434 <_printf_i+0xe0>
  4024d0:	4675      	mov	r5, lr
  4024d2:	fbb3 f0f2 	udiv	r0, r3, r2
  4024d6:	fb02 3310 	mls	r3, r2, r0, r3
  4024da:	5ccb      	ldrb	r3, [r1, r3]
  4024dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
  4024e0:	4603      	mov	r3, r0
  4024e2:	2800      	cmp	r0, #0
  4024e4:	d1f5      	bne.n	4024d2 <_printf_i+0x17e>
  4024e6:	e7b7      	b.n	402458 <_printf_i+0x104>
  4024e8:	6808      	ldr	r0, [r1, #0]
  4024ea:	681a      	ldr	r2, [r3, #0]
  4024ec:	6949      	ldr	r1, [r1, #20]
  4024ee:	f010 0f80 	tst.w	r0, #128	; 0x80
  4024f2:	d004      	beq.n	4024fe <_printf_i+0x1aa>
  4024f4:	1d10      	adds	r0, r2, #4
  4024f6:	6018      	str	r0, [r3, #0]
  4024f8:	6813      	ldr	r3, [r2, #0]
  4024fa:	6019      	str	r1, [r3, #0]
  4024fc:	e007      	b.n	40250e <_printf_i+0x1ba>
  4024fe:	f010 0f40 	tst.w	r0, #64	; 0x40
  402502:	f102 0004 	add.w	r0, r2, #4
  402506:	6018      	str	r0, [r3, #0]
  402508:	6813      	ldr	r3, [r2, #0]
  40250a:	d0f6      	beq.n	4024fa <_printf_i+0x1a6>
  40250c:	8019      	strh	r1, [r3, #0]
  40250e:	2300      	movs	r3, #0
  402510:	6123      	str	r3, [r4, #16]
  402512:	4675      	mov	r5, lr
  402514:	e7b1      	b.n	40247a <_printf_i+0x126>
  402516:	681a      	ldr	r2, [r3, #0]
  402518:	1d11      	adds	r1, r2, #4
  40251a:	6019      	str	r1, [r3, #0]
  40251c:	6815      	ldr	r5, [r2, #0]
  40251e:	6862      	ldr	r2, [r4, #4]
  402520:	2100      	movs	r1, #0
  402522:	4628      	mov	r0, r5
  402524:	f000 f8e4 	bl	4026f0 <memchr>
  402528:	b108      	cbz	r0, 40252e <_printf_i+0x1da>
  40252a:	1b40      	subs	r0, r0, r5
  40252c:	6060      	str	r0, [r4, #4]
  40252e:	6863      	ldr	r3, [r4, #4]
  402530:	6123      	str	r3, [r4, #16]
  402532:	2300      	movs	r3, #0
  402534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402538:	e79f      	b.n	40247a <_printf_i+0x126>
  40253a:	6923      	ldr	r3, [r4, #16]
  40253c:	462a      	mov	r2, r5
  40253e:	4639      	mov	r1, r7
  402540:	4630      	mov	r0, r6
  402542:	47c0      	blx	r8
  402544:	3001      	adds	r0, #1
  402546:	d0a2      	beq.n	40248e <_printf_i+0x13a>
  402548:	6823      	ldr	r3, [r4, #0]
  40254a:	079b      	lsls	r3, r3, #30
  40254c:	d507      	bpl.n	40255e <_printf_i+0x20a>
  40254e:	2500      	movs	r5, #0
  402550:	f104 0919 	add.w	r9, r4, #25
  402554:	68e3      	ldr	r3, [r4, #12]
  402556:	9a03      	ldr	r2, [sp, #12]
  402558:	1a9b      	subs	r3, r3, r2
  40255a:	429d      	cmp	r5, r3
  40255c:	db05      	blt.n	40256a <_printf_i+0x216>
  40255e:	68e0      	ldr	r0, [r4, #12]
  402560:	9b03      	ldr	r3, [sp, #12]
  402562:	4298      	cmp	r0, r3
  402564:	bfb8      	it	lt
  402566:	4618      	movlt	r0, r3
  402568:	e793      	b.n	402492 <_printf_i+0x13e>
  40256a:	2301      	movs	r3, #1
  40256c:	464a      	mov	r2, r9
  40256e:	4639      	mov	r1, r7
  402570:	4630      	mov	r0, r6
  402572:	47c0      	blx	r8
  402574:	3001      	adds	r0, #1
  402576:	d08a      	beq.n	40248e <_printf_i+0x13a>
  402578:	3501      	adds	r5, #1
  40257a:	e7eb      	b.n	402554 <_printf_i+0x200>
  40257c:	2b00      	cmp	r3, #0
  40257e:	d1a7      	bne.n	4024d0 <_printf_i+0x17c>
  402580:	780b      	ldrb	r3, [r1, #0]
  402582:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402586:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40258a:	e765      	b.n	402458 <_printf_i+0x104>
  40258c:	0040291e 	.word	0x0040291e
  402590:	0040290d 	.word	0x0040290d

00402594 <_sbrk_r>:
  402594:	b538      	push	{r3, r4, r5, lr}
  402596:	4c06      	ldr	r4, [pc, #24]	; (4025b0 <_sbrk_r+0x1c>)
  402598:	2300      	movs	r3, #0
  40259a:	4605      	mov	r5, r0
  40259c:	4608      	mov	r0, r1
  40259e:	6023      	str	r3, [r4, #0]
  4025a0:	f7fe f998 	bl	4008d4 <_sbrk>
  4025a4:	1c43      	adds	r3, r0, #1
  4025a6:	d102      	bne.n	4025ae <_sbrk_r+0x1a>
  4025a8:	6823      	ldr	r3, [r4, #0]
  4025aa:	b103      	cbz	r3, 4025ae <_sbrk_r+0x1a>
  4025ac:	602b      	str	r3, [r5, #0]
  4025ae:	bd38      	pop	{r3, r4, r5, pc}
  4025b0:	20400334 	.word	0x20400334

004025b4 <__sread>:
  4025b4:	b510      	push	{r4, lr}
  4025b6:	460c      	mov	r4, r1
  4025b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4025bc:	f000 f8ea 	bl	402794 <_read_r>
  4025c0:	2800      	cmp	r0, #0
  4025c2:	bfab      	itete	ge
  4025c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4025c6:	89a3      	ldrhlt	r3, [r4, #12]
  4025c8:	181b      	addge	r3, r3, r0
  4025ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4025ce:	bfac      	ite	ge
  4025d0:	6563      	strge	r3, [r4, #84]	; 0x54
  4025d2:	81a3      	strhlt	r3, [r4, #12]
  4025d4:	bd10      	pop	{r4, pc}

004025d6 <__swrite>:
  4025d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025da:	461f      	mov	r7, r3
  4025dc:	898b      	ldrh	r3, [r1, #12]
  4025de:	05db      	lsls	r3, r3, #23
  4025e0:	4605      	mov	r5, r0
  4025e2:	460c      	mov	r4, r1
  4025e4:	4616      	mov	r6, r2
  4025e6:	d505      	bpl.n	4025f4 <__swrite+0x1e>
  4025e8:	2302      	movs	r3, #2
  4025ea:	2200      	movs	r2, #0
  4025ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4025f0:	f000 f868 	bl	4026c4 <_lseek_r>
  4025f4:	89a3      	ldrh	r3, [r4, #12]
  4025f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4025fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4025fe:	81a3      	strh	r3, [r4, #12]
  402600:	4632      	mov	r2, r6
  402602:	463b      	mov	r3, r7
  402604:	4628      	mov	r0, r5
  402606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40260a:	f000 b817 	b.w	40263c <_write_r>

0040260e <__sseek>:
  40260e:	b510      	push	{r4, lr}
  402610:	460c      	mov	r4, r1
  402612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402616:	f000 f855 	bl	4026c4 <_lseek_r>
  40261a:	1c43      	adds	r3, r0, #1
  40261c:	89a3      	ldrh	r3, [r4, #12]
  40261e:	bf15      	itete	ne
  402620:	6560      	strne	r0, [r4, #84]	; 0x54
  402622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40262a:	81a3      	strheq	r3, [r4, #12]
  40262c:	bf18      	it	ne
  40262e:	81a3      	strhne	r3, [r4, #12]
  402630:	bd10      	pop	{r4, pc}

00402632 <__sclose>:
  402632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402636:	f000 b813 	b.w	402660 <_close_r>
	...

0040263c <_write_r>:
  40263c:	b538      	push	{r3, r4, r5, lr}
  40263e:	4c07      	ldr	r4, [pc, #28]	; (40265c <_write_r+0x20>)
  402640:	4605      	mov	r5, r0
  402642:	4608      	mov	r0, r1
  402644:	4611      	mov	r1, r2
  402646:	2200      	movs	r2, #0
  402648:	6022      	str	r2, [r4, #0]
  40264a:	461a      	mov	r2, r3
  40264c:	f7ff f816 	bl	40167c <_write>
  402650:	1c43      	adds	r3, r0, #1
  402652:	d102      	bne.n	40265a <_write_r+0x1e>
  402654:	6823      	ldr	r3, [r4, #0]
  402656:	b103      	cbz	r3, 40265a <_write_r+0x1e>
  402658:	602b      	str	r3, [r5, #0]
  40265a:	bd38      	pop	{r3, r4, r5, pc}
  40265c:	20400334 	.word	0x20400334

00402660 <_close_r>:
  402660:	b538      	push	{r3, r4, r5, lr}
  402662:	4c06      	ldr	r4, [pc, #24]	; (40267c <_close_r+0x1c>)
  402664:	2300      	movs	r3, #0
  402666:	4605      	mov	r5, r0
  402668:	4608      	mov	r0, r1
  40266a:	6023      	str	r3, [r4, #0]
  40266c:	f7fe f944 	bl	4008f8 <_close>
  402670:	1c43      	adds	r3, r0, #1
  402672:	d102      	bne.n	40267a <_close_r+0x1a>
  402674:	6823      	ldr	r3, [r4, #0]
  402676:	b103      	cbz	r3, 40267a <_close_r+0x1a>
  402678:	602b      	str	r3, [r5, #0]
  40267a:	bd38      	pop	{r3, r4, r5, pc}
  40267c:	20400334 	.word	0x20400334

00402680 <_fstat_r>:
  402680:	b538      	push	{r3, r4, r5, lr}
  402682:	4c07      	ldr	r4, [pc, #28]	; (4026a0 <_fstat_r+0x20>)
  402684:	2300      	movs	r3, #0
  402686:	4605      	mov	r5, r0
  402688:	4608      	mov	r0, r1
  40268a:	4611      	mov	r1, r2
  40268c:	6023      	str	r3, [r4, #0]
  40268e:	f7fe f936 	bl	4008fe <_fstat>
  402692:	1c43      	adds	r3, r0, #1
  402694:	d102      	bne.n	40269c <_fstat_r+0x1c>
  402696:	6823      	ldr	r3, [r4, #0]
  402698:	b103      	cbz	r3, 40269c <_fstat_r+0x1c>
  40269a:	602b      	str	r3, [r5, #0]
  40269c:	bd38      	pop	{r3, r4, r5, pc}
  40269e:	bf00      	nop
  4026a0:	20400334 	.word	0x20400334

004026a4 <_isatty_r>:
  4026a4:	b538      	push	{r3, r4, r5, lr}
  4026a6:	4c06      	ldr	r4, [pc, #24]	; (4026c0 <_isatty_r+0x1c>)
  4026a8:	2300      	movs	r3, #0
  4026aa:	4605      	mov	r5, r0
  4026ac:	4608      	mov	r0, r1
  4026ae:	6023      	str	r3, [r4, #0]
  4026b0:	f7fe f92a 	bl	400908 <_isatty>
  4026b4:	1c43      	adds	r3, r0, #1
  4026b6:	d102      	bne.n	4026be <_isatty_r+0x1a>
  4026b8:	6823      	ldr	r3, [r4, #0]
  4026ba:	b103      	cbz	r3, 4026be <_isatty_r+0x1a>
  4026bc:	602b      	str	r3, [r5, #0]
  4026be:	bd38      	pop	{r3, r4, r5, pc}
  4026c0:	20400334 	.word	0x20400334

004026c4 <_lseek_r>:
  4026c4:	b538      	push	{r3, r4, r5, lr}
  4026c6:	4c07      	ldr	r4, [pc, #28]	; (4026e4 <_lseek_r+0x20>)
  4026c8:	4605      	mov	r5, r0
  4026ca:	4608      	mov	r0, r1
  4026cc:	4611      	mov	r1, r2
  4026ce:	2200      	movs	r2, #0
  4026d0:	6022      	str	r2, [r4, #0]
  4026d2:	461a      	mov	r2, r3
  4026d4:	f7fe f91a 	bl	40090c <_lseek>
  4026d8:	1c43      	adds	r3, r0, #1
  4026da:	d102      	bne.n	4026e2 <_lseek_r+0x1e>
  4026dc:	6823      	ldr	r3, [r4, #0]
  4026de:	b103      	cbz	r3, 4026e2 <_lseek_r+0x1e>
  4026e0:	602b      	str	r3, [r5, #0]
  4026e2:	bd38      	pop	{r3, r4, r5, pc}
  4026e4:	20400334 	.word	0x20400334
	...

004026f0 <memchr>:
  4026f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4026f4:	2a10      	cmp	r2, #16
  4026f6:	db2b      	blt.n	402750 <memchr+0x60>
  4026f8:	f010 0f07 	tst.w	r0, #7
  4026fc:	d008      	beq.n	402710 <memchr+0x20>
  4026fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  402702:	3a01      	subs	r2, #1
  402704:	428b      	cmp	r3, r1
  402706:	d02d      	beq.n	402764 <memchr+0x74>
  402708:	f010 0f07 	tst.w	r0, #7
  40270c:	b342      	cbz	r2, 402760 <memchr+0x70>
  40270e:	d1f6      	bne.n	4026fe <memchr+0xe>
  402710:	b4f0      	push	{r4, r5, r6, r7}
  402712:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402716:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40271a:	f022 0407 	bic.w	r4, r2, #7
  40271e:	f07f 0700 	mvns.w	r7, #0
  402722:	2300      	movs	r3, #0
  402724:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402728:	3c08      	subs	r4, #8
  40272a:	ea85 0501 	eor.w	r5, r5, r1
  40272e:	ea86 0601 	eor.w	r6, r6, r1
  402732:	fa85 f547 	uadd8	r5, r5, r7
  402736:	faa3 f587 	sel	r5, r3, r7
  40273a:	fa86 f647 	uadd8	r6, r6, r7
  40273e:	faa5 f687 	sel	r6, r5, r7
  402742:	b98e      	cbnz	r6, 402768 <memchr+0x78>
  402744:	d1ee      	bne.n	402724 <memchr+0x34>
  402746:	bcf0      	pop	{r4, r5, r6, r7}
  402748:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40274c:	f002 0207 	and.w	r2, r2, #7
  402750:	b132      	cbz	r2, 402760 <memchr+0x70>
  402752:	f810 3b01 	ldrb.w	r3, [r0], #1
  402756:	3a01      	subs	r2, #1
  402758:	ea83 0301 	eor.w	r3, r3, r1
  40275c:	b113      	cbz	r3, 402764 <memchr+0x74>
  40275e:	d1f8      	bne.n	402752 <memchr+0x62>
  402760:	2000      	movs	r0, #0
  402762:	4770      	bx	lr
  402764:	3801      	subs	r0, #1
  402766:	4770      	bx	lr
  402768:	2d00      	cmp	r5, #0
  40276a:	bf06      	itte	eq
  40276c:	4635      	moveq	r5, r6
  40276e:	3803      	subeq	r0, #3
  402770:	3807      	subne	r0, #7
  402772:	f015 0f01 	tst.w	r5, #1
  402776:	d107      	bne.n	402788 <memchr+0x98>
  402778:	3001      	adds	r0, #1
  40277a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40277e:	bf02      	ittt	eq
  402780:	3001      	addeq	r0, #1
  402782:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402786:	3001      	addeq	r0, #1
  402788:	bcf0      	pop	{r4, r5, r6, r7}
  40278a:	3801      	subs	r0, #1
  40278c:	4770      	bx	lr
  40278e:	bf00      	nop

00402790 <__malloc_lock>:
  402790:	4770      	bx	lr

00402792 <__malloc_unlock>:
  402792:	4770      	bx	lr

00402794 <_read_r>:
  402794:	b538      	push	{r3, r4, r5, lr}
  402796:	4c07      	ldr	r4, [pc, #28]	; (4027b4 <_read_r+0x20>)
  402798:	4605      	mov	r5, r0
  40279a:	4608      	mov	r0, r1
  40279c:	4611      	mov	r1, r2
  40279e:	2200      	movs	r2, #0
  4027a0:	6022      	str	r2, [r4, #0]
  4027a2:	461a      	mov	r2, r3
  4027a4:	f7fe ff58 	bl	401658 <_read>
  4027a8:	1c43      	adds	r3, r0, #1
  4027aa:	d102      	bne.n	4027b2 <_read_r+0x1e>
  4027ac:	6823      	ldr	r3, [r4, #0]
  4027ae:	b103      	cbz	r3, 4027b2 <_read_r+0x1e>
  4027b0:	602b      	str	r3, [r5, #0]
  4027b2:	bd38      	pop	{r3, r4, r5, pc}
  4027b4:	20400334 	.word	0x20400334
  4027b8:	682f2e2e 	.word	0x682f2e2e
  4027bc:	732f6c61 	.word	0x732f6c61
  4027c0:	682f6372 	.word	0x682f6372
  4027c4:	635f6c61 	.word	0x635f6c61
  4027c8:	615f6e61 	.word	0x615f6e61
  4027cc:	636e7973 	.word	0x636e7973
  4027d0:	0000632e 	.word	0x0000632e
  4027d4:	682f2e2e 	.word	0x682f2e2e
  4027d8:	732f6c61 	.word	0x732f6c61
  4027dc:	682f6372 	.word	0x682f6372
  4027e0:	695f6c61 	.word	0x695f6c61
  4027e4:	00632e6f 	.word	0x00632e6f
  4027e8:	682f2e2e 	.word	0x682f2e2e
  4027ec:	732f6c61 	.word	0x732f6c61
  4027f0:	682f6372 	.word	0x682f6372
  4027f4:	745f6c61 	.word	0x745f6c61
  4027f8:	72656d69 	.word	0x72656d69
  4027fc:	0000632e 	.word	0x0000632e
  402800:	682f2e2e 	.word	0x682f2e2e
  402804:	732f6c61 	.word	0x732f6c61
  402808:	682f6372 	.word	0x682f6372
  40280c:	755f6c61 	.word	0x755f6c61
  402810:	74726173 	.word	0x74726173
  402814:	6e79735f 	.word	0x6e79735f
  402818:	00632e63 	.word	0x00632e63
  40281c:	682f2e2e 	.word	0x682f2e2e
  402820:	752f6c61 	.word	0x752f6c61
  402824:	736c6974 	.word	0x736c6974
  402828:	6372732f 	.word	0x6372732f
  40282c:	6974752f 	.word	0x6974752f
  402830:	6c5f736c 	.word	0x6c5f736c
  402834:	2e747369 	.word	0x2e747369
  402838:	00000063 	.word	0x00000063
  40283c:	03020100 	.word	0x03020100
  402840:	07060504 	.word	0x07060504
  402844:	14100c08 	.word	0x14100c08
  402848:	40302018 	.word	0x40302018
  40284c:	682f2e2e 	.word	0x682f2e2e
  402850:	742f6c70 	.word	0x742f6c70
  402854:	70682f63 	.word	0x70682f63
  402858:	63745f6c 	.word	0x63745f6c
  40285c:	0000632e 	.word	0x0000632e

00402860 <_uarts>:
  402860:	00000001 00000800 00000051 682f2e2e     ........Q...../h
  402870:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  402880:	0000632e 61746144 63657220 65766965     .c..Data receive
  402890:	25203a64 000a2064                       d: %d ..

00402898 <_global_impure_ptr>:
  402898:	20400050                                P.@ 

0040289c <__sf_fake_stderr>:
	...

004028bc <__sf_fake_stdin>:
	...

004028dc <__sf_fake_stdout>:
	...
  4028fc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
  40290c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
  40291c:	31300046 35343332 39383736 64636261     F.0123456789abcd
  40292c:	00006665                                ef..

00402930 <_init>:
  402930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402932:	bf00      	nop
  402934:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402936:	bc08      	pop	{r3}
  402938:	469e      	mov	lr, r3
  40293a:	4770      	bx	lr

0040293c <__init_array_start>:
  40293c:	0040018d 	.word	0x0040018d

00402940 <_fini>:
  402940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402942:	bf00      	nop
  402944:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402946:	bc08      	pop	{r3}
  402948:	469e      	mov	lr, r3
  40294a:	4770      	bx	lr

0040294c <__fini_array_start>:
  40294c:	00400169 	.word	0x00400169
