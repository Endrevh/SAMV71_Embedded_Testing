
Sensor_Heartbeat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001370  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000004c  20400000  00401370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000468  2040004c  004013bc  0002004c  2**2
                  ALLOC
  3 .heap         00000204  204004b4  00401824  0002004c  2**0
                  ALLOC
  4 .stack        00000400  204006b8  00401a28  0002004c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002007a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e6a8  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002258  00000000  00000000  0002e77b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003999  00000000  00000000  000309d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000508  00000000  00000000  0003436c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000448  00000000  00000000  00034874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003bfff  00000000  00000000  00034cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000cf18  00000000  00000000  00070cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00145504  00000000  00000000  0007dbd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000bac  00000000  00000000  001c30d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 0a 40 20 e5 01 40 00 e1 01 40 00 e1 01 40 00     ..@ ..@...@...@.
  400010:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40003c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40004c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40005c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40006c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40007c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40008c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40009c:	09 10 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ac:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000bc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000cc:	c5 0d 40 00 e1 01 40 00 dd 0d 40 00 e1 01 40 00     ..@...@...@...@.
  4000dc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ec:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000fc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40010c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ......@...@...@.
  40012c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40013c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40014c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40015c:	e1 01 40 00 e1 01 40 00 e1 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	2040004c 	.word	0x2040004c
  400184:	00000000 	.word	0x00000000
  400188:	00401370 	.word	0x00401370

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00401370 	.word	0x00401370
  4001c8:	20400050 	.word	0x20400050
  4001cc:	00401370 	.word	0x00401370
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	00400371 	.word	0x00400371

004001e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e0:	e7fe      	b.n	4001e0 <Dummy_Handler>
	...

004001e4 <Reset_Handler>:
{
  4001e4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001e6:	4b10      	ldr	r3, [pc, #64]	; (400228 <Reset_Handler+0x44>)
  4001e8:	4a10      	ldr	r2, [pc, #64]	; (40022c <Reset_Handler+0x48>)
  4001ea:	429a      	cmp	r2, r3
  4001ec:	d009      	beq.n	400202 <Reset_Handler+0x1e>
  4001ee:	4b0e      	ldr	r3, [pc, #56]	; (400228 <Reset_Handler+0x44>)
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <Reset_Handler+0x48>)
  4001f2:	e003      	b.n	4001fc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001f4:	6811      	ldr	r1, [r2, #0]
  4001f6:	6019      	str	r1, [r3, #0]
  4001f8:	3304      	adds	r3, #4
  4001fa:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001fc:	490c      	ldr	r1, [pc, #48]	; (400230 <Reset_Handler+0x4c>)
  4001fe:	428b      	cmp	r3, r1
  400200:	d3f8      	bcc.n	4001f4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400202:	4b0c      	ldr	r3, [pc, #48]	; (400234 <Reset_Handler+0x50>)
  400204:	e002      	b.n	40020c <Reset_Handler+0x28>
                *pDest++ = 0;
  400206:	2200      	movs	r2, #0
  400208:	601a      	str	r2, [r3, #0]
  40020a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40020c:	4a0a      	ldr	r2, [pc, #40]	; (400238 <Reset_Handler+0x54>)
  40020e:	4293      	cmp	r3, r2
  400210:	d3f9      	bcc.n	400206 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400212:	4a0a      	ldr	r2, [pc, #40]	; (40023c <Reset_Handler+0x58>)
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <Reset_Handler+0x5c>)
  400216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40021a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40021c:	4b09      	ldr	r3, [pc, #36]	; (400244 <Reset_Handler+0x60>)
  40021e:	4798      	blx	r3
        main();
  400220:	4b09      	ldr	r3, [pc, #36]	; (400248 <Reset_Handler+0x64>)
  400222:	4798      	blx	r3
  400224:	e7fe      	b.n	400224 <Reset_Handler+0x40>
  400226:	bf00      	nop
  400228:	20400000 	.word	0x20400000
  40022c:	00401370 	.word	0x00401370
  400230:	2040004c 	.word	0x2040004c
  400234:	2040004c 	.word	0x2040004c
  400238:	204004b4 	.word	0x204004b4
  40023c:	e000ed00 	.word	0xe000ed00
  400240:	00400000 	.word	0x00400000
  400244:	00401279 	.word	0x00401279
  400248:	0040101d 	.word	0x0040101d

0040024c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  40024c:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40024e:	4b08      	ldr	r3, [pc, #32]	; (400270 <TIMER_0_init+0x24>)
  400250:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400252:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400256:	d103      	bne.n	400260 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400258:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40025c:	4b04      	ldr	r3, [pc, #16]	; (400270 <TIMER_0_init+0x24>)
  40025e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400260:	4b04      	ldr	r3, [pc, #16]	; (400274 <TIMER_0_init+0x28>)
  400262:	4798      	blx	r3
  400264:	4602      	mov	r2, r0
  400266:	4904      	ldr	r1, [pc, #16]	; (400278 <TIMER_0_init+0x2c>)
  400268:	4804      	ldr	r0, [pc, #16]	; (40027c <TIMER_0_init+0x30>)
  40026a:	4b05      	ldr	r3, [pc, #20]	; (400280 <TIMER_0_init+0x34>)
  40026c:	4798      	blx	r3
  40026e:	bd08      	pop	{r3, pc}
  400270:	400e0600 	.word	0x400e0600
  400274:	00401005 	.word	0x00401005
  400278:	4000c000 	.word	0x4000c000
  40027c:	20400318 	.word	0x20400318
  400280:	0040061d 	.word	0x0040061d

00400284 <CAN_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <CAN_0_CLOCK_init+0x18>)
  400286:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40028a:	f013 0f08 	tst.w	r3, #8
  40028e:	d103      	bne.n	400298 <CAN_0_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400290:	2208      	movs	r2, #8
  400292:	4b02      	ldr	r3, [pc, #8]	; (40029c <CAN_0_CLOCK_init+0x18>)
  400294:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400298:	4770      	bx	lr
  40029a:	bf00      	nop
  40029c:	400e0600 	.word	0x400e0600

004002a0 <CAN_0_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002a0:	4b0a      	ldr	r3, [pc, #40]	; (4002cc <CAN_0_PORT_init+0x2c>)
  4002a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002a4:	f022 0208 	bic.w	r2, r2, #8
  4002a8:	671a      	str	r2, [r3, #112]	; 0x70
  4002aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002ac:	f022 0208 	bic.w	r2, r2, #8
  4002b0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002b2:	2208      	movs	r2, #8
  4002b4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002b8:	f022 0204 	bic.w	r2, r2, #4
  4002bc:	671a      	str	r2, [r3, #112]	; 0x70
  4002be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002c0:	f022 0204 	bic.w	r2, r2, #4
  4002c4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002c6:	2204      	movs	r2, #4
  4002c8:	605a      	str	r2, [r3, #4]
  4002ca:	4770      	bx	lr
  4002cc:	400e1000 	.word	0x400e1000

004002d0 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
  4002d0:	b508      	push	{r3, lr}
	CAN_0_CLOCK_init();
  4002d2:	4b04      	ldr	r3, [pc, #16]	; (4002e4 <CAN_0_init+0x14>)
  4002d4:	4798      	blx	r3
	CAN_0_PORT_init();
  4002d6:	4b04      	ldr	r3, [pc, #16]	; (4002e8 <CAN_0_init+0x18>)
  4002d8:	4798      	blx	r3
	can_async_init(&CAN_0, MCAN0);
  4002da:	4904      	ldr	r1, [pc, #16]	; (4002ec <CAN_0_init+0x1c>)
  4002dc:	4804      	ldr	r0, [pc, #16]	; (4002f0 <CAN_0_init+0x20>)
  4002de:	4b05      	ldr	r3, [pc, #20]	; (4002f4 <CAN_0_init+0x24>)
  4002e0:	4798      	blx	r3
  4002e2:	bd08      	pop	{r3, pc}
  4002e4:	00400285 	.word	0x00400285
  4002e8:	004002a1 	.word	0x004002a1
  4002ec:	40030000 	.word	0x40030000
  4002f0:	204002c8 	.word	0x204002c8
  4002f4:	00400409 	.word	0x00400409

004002f8 <CAN_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4002f8:	4b05      	ldr	r3, [pc, #20]	; (400310 <CAN_1_CLOCK_init+0x18>)
  4002fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  4002fe:	f013 0f20 	tst.w	r3, #32
  400302:	d103      	bne.n	40030c <CAN_1_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400304:	2220      	movs	r2, #32
  400306:	4b02      	ldr	r3, [pc, #8]	; (400310 <CAN_1_CLOCK_init+0x18>)
  400308:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40030c:	4770      	bx	lr
  40030e:	bf00      	nop
  400310:	400e0600 	.word	0x400e0600

00400314 <CAN_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400314:	4b0b      	ldr	r3, [pc, #44]	; (400344 <CAN_1_PORT_init+0x30>)
  400316:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400318:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40031c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40031e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400320:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400324:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40032a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40032c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40032e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  400332:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400334:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40033a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40033c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400340:	605a      	str	r2, [r3, #4]
  400342:	4770      	bx	lr
  400344:	400e1200 	.word	0x400e1200

00400348 <CAN_1_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_1_init(void)
{
  400348:	b508      	push	{r3, lr}
	CAN_1_CLOCK_init();
  40034a:	4b04      	ldr	r3, [pc, #16]	; (40035c <CAN_1_init+0x14>)
  40034c:	4798      	blx	r3
	CAN_1_PORT_init();
  40034e:	4b04      	ldr	r3, [pc, #16]	; (400360 <CAN_1_init+0x18>)
  400350:	4798      	blx	r3
	can_async_init(&CAN_1, MCAN1);
  400352:	4904      	ldr	r1, [pc, #16]	; (400364 <CAN_1_init+0x1c>)
  400354:	4804      	ldr	r0, [pc, #16]	; (400368 <CAN_1_init+0x20>)
  400356:	4b05      	ldr	r3, [pc, #20]	; (40036c <CAN_1_init+0x24>)
  400358:	4798      	blx	r3
  40035a:	bd08      	pop	{r3, pc}
  40035c:	004002f9 	.word	0x004002f9
  400360:	00400315 	.word	0x00400315
  400364:	40034000 	.word	0x40034000
  400368:	204002f0 	.word	0x204002f0
  40036c:	00400409 	.word	0x00400409

00400370 <system_init>:
}

void system_init(void)
{
  400370:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400372:	4b10      	ldr	r3, [pc, #64]	; (4003b4 <system_init+0x44>)
  400374:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400376:	4b10      	ldr	r3, [pc, #64]	; (4003b8 <system_init+0x48>)
  400378:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40037a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40037e:	d103      	bne.n	400388 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400380:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400384:	4b0c      	ldr	r3, [pc, #48]	; (4003b8 <system_init+0x48>)
  400386:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400388:	4a0c      	ldr	r2, [pc, #48]	; (4003bc <system_init+0x4c>)
  40038a:	6853      	ldr	r3, [r2, #4]
  40038c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400390:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_CODR = mask;
  400392:	4b0b      	ldr	r3, [pc, #44]	; (4003c0 <system_init+0x50>)
  400394:	2202      	movs	r2, #2
  400396:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400398:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40039a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40039c:	2204      	movs	r2, #4
  40039e:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4003a0:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4003a2:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(CAN1_SILENT, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CAN1_SILENT, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();
  4003a4:	4b07      	ldr	r3, [pc, #28]	; (4003c4 <system_init+0x54>)
  4003a6:	4798      	blx	r3

	CAN_0_init();
  4003a8:	4b07      	ldr	r3, [pc, #28]	; (4003c8 <system_init+0x58>)
  4003aa:	4798      	blx	r3
	CAN_1_init();
  4003ac:	4b07      	ldr	r3, [pc, #28]	; (4003cc <system_init+0x5c>)
  4003ae:	4798      	blx	r3
  4003b0:	bd08      	pop	{r3, pc}
  4003b2:	bf00      	nop
  4003b4:	00400855 	.word	0x00400855
  4003b8:	400e0600 	.word	0x400e0600
  4003bc:	400e1850 	.word	0x400e1850
  4003c0:	400e1600 	.word	0x400e1600
  4003c4:	0040024d 	.word	0x0040024d
  4003c8:	004002d1 	.word	0x004002d1
  4003cc:	00400349 	.word	0x00400349

004003d0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003d0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4003d4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4003d6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4003d8:	f3bf 8f5f 	dmb	sy
  4003dc:	4770      	bx	lr

004003de <atomic_leave_critical>:
  4003de:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4003e2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4003e4:	f383 8810 	msr	PRIMASK, r3
  4003e8:	4770      	bx	lr

004003ea <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
  4003ea:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
  4003ec:	69c3      	ldr	r3, [r0, #28]
  4003ee:	b103      	cbz	r3, 4003f2 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
  4003f0:	4798      	blx	r3
  4003f2:	bd08      	pop	{r3, pc}

004003f4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
  4003f4:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
  4003f6:	6a03      	ldr	r3, [r0, #32]
  4003f8:	b103      	cbz	r3, 4003fc <can_rx_done+0x8>
		descr->cb.rx_done(descr);
  4003fa:	4798      	blx	r3
  4003fc:	bd08      	pop	{r3, pc}

004003fe <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
  4003fe:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
  400400:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400402:	b103      	cbz	r3, 400406 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
  400404:	4798      	blx	r3
  400406:	bd08      	pop	{r3, pc}

00400408 <can_async_init>:
{
  400408:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40040a:	4604      	mov	r4, r0
  40040c:	460d      	mov	r5, r1
  40040e:	2800      	cmp	r0, #0
  400410:	bf18      	it	ne
  400412:	2900      	cmpne	r1, #0
  400414:	bf14      	ite	ne
  400416:	2001      	movne	r0, #1
  400418:	2000      	moveq	r0, #0
  40041a:	2241      	movs	r2, #65	; 0x41
  40041c:	4908      	ldr	r1, [pc, #32]	; (400440 <can_async_init+0x38>)
  40041e:	4b09      	ldr	r3, [pc, #36]	; (400444 <can_async_init+0x3c>)
  400420:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
  400422:	4629      	mov	r1, r5
  400424:	4620      	mov	r0, r4
  400426:	4b08      	ldr	r3, [pc, #32]	; (400448 <can_async_init+0x40>)
  400428:	4798      	blx	r3
	if (rc) {
  40042a:	4603      	mov	r3, r0
  40042c:	b928      	cbnz	r0, 40043a <can_async_init+0x32>
	descr->dev.cb.tx_done     = can_tx_done;
  40042e:	4a07      	ldr	r2, [pc, #28]	; (40044c <can_async_init+0x44>)
  400430:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
  400432:	4a07      	ldr	r2, [pc, #28]	; (400450 <can_async_init+0x48>)
  400434:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
  400436:	4a07      	ldr	r2, [pc, #28]	; (400454 <can_async_init+0x4c>)
  400438:	60e2      	str	r2, [r4, #12]
}
  40043a:	4618      	mov	r0, r3
  40043c:	bd38      	pop	{r3, r4, r5, pc}
  40043e:	bf00      	nop
  400440:	004012d8 	.word	0x004012d8
  400444:	004007a1 	.word	0x004007a1
  400448:	0040091d 	.word	0x0040091d
  40044c:	004003eb 	.word	0x004003eb
  400450:	004003f5 	.word	0x004003f5
  400454:	004003ff 	.word	0x004003ff

00400458 <can_async_enable>:
{
  400458:	b510      	push	{r4, lr}
	ASSERT(descr);
  40045a:	4604      	mov	r4, r0
  40045c:	225c      	movs	r2, #92	; 0x5c
  40045e:	4905      	ldr	r1, [pc, #20]	; (400474 <can_async_enable+0x1c>)
  400460:	3000      	adds	r0, #0
  400462:	bf18      	it	ne
  400464:	2001      	movne	r0, #1
  400466:	4b04      	ldr	r3, [pc, #16]	; (400478 <can_async_enable+0x20>)
  400468:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
  40046a:	4620      	mov	r0, r4
  40046c:	4b03      	ldr	r3, [pc, #12]	; (40047c <can_async_enable+0x24>)
  40046e:	4798      	blx	r3
}
  400470:	bd10      	pop	{r4, pc}
  400472:	bf00      	nop
  400474:	004012d8 	.word	0x004012d8
  400478:	004007a1 	.word	0x004007a1
  40047c:	00400af5 	.word	0x00400af5

00400480 <can_async_read>:
{
  400480:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && msg);
  400482:	4604      	mov	r4, r0
  400484:	460d      	mov	r5, r1
  400486:	2800      	cmp	r0, #0
  400488:	bf18      	it	ne
  40048a:	2900      	cmpne	r1, #0
  40048c:	bf14      	ite	ne
  40048e:	2001      	movne	r0, #1
  400490:	2000      	moveq	r0, #0
  400492:	226e      	movs	r2, #110	; 0x6e
  400494:	4903      	ldr	r1, [pc, #12]	; (4004a4 <can_async_read+0x24>)
  400496:	4b04      	ldr	r3, [pc, #16]	; (4004a8 <can_async_read+0x28>)
  400498:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
  40049a:	4629      	mov	r1, r5
  40049c:	4620      	mov	r0, r4
  40049e:	4b03      	ldr	r3, [pc, #12]	; (4004ac <can_async_read+0x2c>)
  4004a0:	4798      	blx	r3
}
  4004a2:	bd38      	pop	{r3, r4, r5, pc}
  4004a4:	004012d8 	.word	0x004012d8
  4004a8:	004007a1 	.word	0x004007a1
  4004ac:	00400b05 	.word	0x00400b05

004004b0 <can_async_write>:
{
  4004b0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && msg);
  4004b2:	4604      	mov	r4, r0
  4004b4:	460d      	mov	r5, r1
  4004b6:	2800      	cmp	r0, #0
  4004b8:	bf18      	it	ne
  4004ba:	2900      	cmpne	r1, #0
  4004bc:	bf14      	ite	ne
  4004be:	2001      	movne	r0, #1
  4004c0:	2000      	moveq	r0, #0
  4004c2:	2277      	movs	r2, #119	; 0x77
  4004c4:	4903      	ldr	r1, [pc, #12]	; (4004d4 <can_async_write+0x24>)
  4004c6:	4b04      	ldr	r3, [pc, #16]	; (4004d8 <can_async_write+0x28>)
  4004c8:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
  4004ca:	4629      	mov	r1, r5
  4004cc:	4620      	mov	r0, r4
  4004ce:	4b03      	ldr	r3, [pc, #12]	; (4004dc <can_async_write+0x2c>)
  4004d0:	4798      	blx	r3
}
  4004d2:	bd38      	pop	{r3, r4, r5, pc}
  4004d4:	004012d8 	.word	0x004012d8
  4004d8:	004007a1 	.word	0x004007a1
  4004dc:	00400bd1 	.word	0x00400bd1

004004e0 <can_async_register_callback>:
{
  4004e0:	b570      	push	{r4, r5, r6, lr}
  4004e2:	460c      	mov	r4, r1
  4004e4:	4616      	mov	r6, r2
	ASSERT(descr);
  4004e6:	4605      	mov	r5, r0
  4004e8:	2281      	movs	r2, #129	; 0x81
  4004ea:	490e      	ldr	r1, [pc, #56]	; (400524 <can_async_register_callback+0x44>)
  4004ec:	3000      	adds	r0, #0
  4004ee:	bf18      	it	ne
  4004f0:	2001      	movne	r0, #1
  4004f2:	4b0d      	ldr	r3, [pc, #52]	; (400528 <can_async_register_callback+0x48>)
  4004f4:	4798      	blx	r3
	switch (type) {
  4004f6:	2c01      	cmp	r4, #1
  4004f8:	d00f      	beq.n	40051a <can_async_register_callback+0x3a>
  4004fa:	b124      	cbz	r4, 400506 <can_async_register_callback+0x26>
  4004fc:	2c02      	cmp	r4, #2
  4004fe:	d00e      	beq.n	40051e <can_async_register_callback+0x3e>
		return ERR_INVALID_ARG;
  400500:	f06f 000c 	mvn.w	r0, #12
}
  400504:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
  400506:	622e      	str	r6, [r5, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
  400508:	1c32      	adds	r2, r6, #0
  40050a:	bf18      	it	ne
  40050c:	2201      	movne	r2, #1
  40050e:	4621      	mov	r1, r4
  400510:	4628      	mov	r0, r5
  400512:	4b06      	ldr	r3, [pc, #24]	; (40052c <can_async_register_callback+0x4c>)
  400514:	4798      	blx	r3
	return ERR_NONE;
  400516:	2000      	movs	r0, #0
  400518:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
  40051a:	61ee      	str	r6, [r5, #28]
		break;
  40051c:	e7f4      	b.n	400508 <can_async_register_callback+0x28>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
  40051e:	626e      	str	r6, [r5, #36]	; 0x24
		break;
  400520:	e7f2      	b.n	400508 <can_async_register_callback+0x28>
  400522:	bf00      	nop
  400524:	004012d8 	.word	0x004012d8
  400528:	004007a1 	.word	0x004007a1
  40052c:	00400d05 	.word	0x00400d05

00400530 <can_async_set_filter>:
{
  400530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400532:	460d      	mov	r5, r1
  400534:	4616      	mov	r6, r2
  400536:	461f      	mov	r7, r3
	ASSERT(descr);
  400538:	4604      	mov	r4, r0
  40053a:	22b8      	movs	r2, #184	; 0xb8
  40053c:	4906      	ldr	r1, [pc, #24]	; (400558 <can_async_set_filter+0x28>)
  40053e:	3000      	adds	r0, #0
  400540:	bf18      	it	ne
  400542:	2001      	movne	r0, #1
  400544:	4b05      	ldr	r3, [pc, #20]	; (40055c <can_async_set_filter+0x2c>)
  400546:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
  400548:	463b      	mov	r3, r7
  40054a:	4632      	mov	r2, r6
  40054c:	4629      	mov	r1, r5
  40054e:	4620      	mov	r0, r4
  400550:	4c03      	ldr	r4, [pc, #12]	; (400560 <can_async_set_filter+0x30>)
  400552:	47a0      	blx	r4
}
  400554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400556:	bf00      	nop
  400558:	004012d8 	.word	0x004012d8
  40055c:	004007a1 	.word	0x004007a1
  400560:	00400d49 	.word	0x00400d49

00400564 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400566:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400568:	b117      	cbz	r7, 400570 <timer_add_timer_task+0xc>
  40056a:	463c      	mov	r4, r7
  40056c:	2600      	movs	r6, #0
  40056e:	e00b      	b.n	400588 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400570:	4b0e      	ldr	r3, [pc, #56]	; (4005ac <timer_add_timer_task+0x48>)
  400572:	4798      	blx	r3
		return;
  400574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400576:	68a5      	ldr	r5, [r4, #8]
  400578:	442b      	add	r3, r5
  40057a:	1a9b      	subs	r3, r3, r2
  40057c:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  40057e:	688d      	ldr	r5, [r1, #8]
  400580:	42ab      	cmp	r3, r5
  400582:	d209      	bcs.n	400598 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400584:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400586:	6824      	ldr	r4, [r4, #0]
  400588:	b134      	cbz	r4, 400598 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  40058a:	6863      	ldr	r3, [r4, #4]
  40058c:	4293      	cmp	r3, r2
  40058e:	d8f2      	bhi.n	400576 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400590:	68a5      	ldr	r5, [r4, #8]
  400592:	1a9b      	subs	r3, r3, r2
  400594:	442b      	add	r3, r5
  400596:	e7f2      	b.n	40057e <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400598:	42bc      	cmp	r4, r7
  40059a:	d003      	beq.n	4005a4 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  40059c:	4630      	mov	r0, r6
  40059e:	4b04      	ldr	r3, [pc, #16]	; (4005b0 <timer_add_timer_task+0x4c>)
  4005a0:	4798      	blx	r3
  4005a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  4005a4:	4b01      	ldr	r3, [pc, #4]	; (4005ac <timer_add_timer_task+0x48>)
  4005a6:	4798      	blx	r3
  4005a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4005aa:	bf00      	nop
  4005ac:	004007bd 	.word	0x004007bd
  4005b0:	004007e9 	.word	0x004007e9

004005b4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  4005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005b6:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  4005b8:	6906      	ldr	r6, [r0, #16]
  4005ba:	3601      	adds	r6, #1
  4005bc:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  4005be:	7e03      	ldrb	r3, [r0, #24]
  4005c0:	f013 0f01 	tst.w	r3, #1
  4005c4:	d105      	bne.n	4005d2 <timer_process_counted+0x1e>
  4005c6:	7e03      	ldrb	r3, [r0, #24]
  4005c8:	f013 0f02 	tst.w	r3, #2
  4005cc:	d101      	bne.n	4005d2 <timer_process_counted+0x1e>
  4005ce:	4605      	mov	r5, r0
  4005d0:	e009      	b.n	4005e6 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  4005d2:	7e03      	ldrb	r3, [r0, #24]
  4005d4:	f043 0302 	orr.w	r3, r3, #2
  4005d8:	7603      	strb	r3, [r0, #24]
		return;
  4005da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4005dc:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4005de:	68e3      	ldr	r3, [r4, #12]
  4005e0:	4620      	mov	r0, r4
  4005e2:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4005e4:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4005e6:	b19c      	cbz	r4, 400610 <timer_process_counted+0x5c>
  4005e8:	6863      	ldr	r3, [r4, #4]
  4005ea:	1af3      	subs	r3, r6, r3
  4005ec:	68a2      	ldr	r2, [r4, #8]
  4005ee:	4293      	cmp	r3, r2
  4005f0:	d30e      	bcc.n	400610 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4005f2:	f105 0714 	add.w	r7, r5, #20
  4005f6:	4638      	mov	r0, r7
  4005f8:	4b06      	ldr	r3, [pc, #24]	; (400614 <timer_process_counted+0x60>)
  4005fa:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4005fc:	7c23      	ldrb	r3, [r4, #16]
  4005fe:	2b01      	cmp	r3, #1
  400600:	d1ec      	bne.n	4005dc <timer_process_counted+0x28>
			tmp->time_label = time;
  400602:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400604:	4632      	mov	r2, r6
  400606:	4621      	mov	r1, r4
  400608:	4638      	mov	r0, r7
  40060a:	4b03      	ldr	r3, [pc, #12]	; (400618 <timer_process_counted+0x64>)
  40060c:	4798      	blx	r3
  40060e:	e7e5      	b.n	4005dc <timer_process_counted+0x28>
  400610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400612:	bf00      	nop
  400614:	004007f1 	.word	0x004007f1
  400618:	00400565 	.word	0x00400565

0040061c <timer_init>:
{
  40061c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40061e:	4604      	mov	r4, r0
  400620:	460d      	mov	r5, r1
  400622:	2800      	cmp	r0, #0
  400624:	bf18      	it	ne
  400626:	2900      	cmpne	r1, #0
  400628:	bf14      	ite	ne
  40062a:	2001      	movne	r0, #1
  40062c:	2000      	moveq	r0, #0
  40062e:	223b      	movs	r2, #59	; 0x3b
  400630:	4905      	ldr	r1, [pc, #20]	; (400648 <timer_init+0x2c>)
  400632:	4b06      	ldr	r3, [pc, #24]	; (40064c <timer_init+0x30>)
  400634:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400636:	4629      	mov	r1, r5
  400638:	4620      	mov	r0, r4
  40063a:	4b05      	ldr	r3, [pc, #20]	; (400650 <timer_init+0x34>)
  40063c:	4798      	blx	r3
	descr->time                           = 0;
  40063e:	2000      	movs	r0, #0
  400640:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400642:	4b04      	ldr	r3, [pc, #16]	; (400654 <timer_init+0x38>)
  400644:	6023      	str	r3, [r4, #0]
}
  400646:	bd38      	pop	{r3, r4, r5, pc}
  400648:	004012f4 	.word	0x004012f4
  40064c:	004007a1 	.word	0x004007a1
  400650:	00400f31 	.word	0x00400f31
  400654:	004005b5 	.word	0x004005b5

00400658 <timer_add_task>:
{
  400658:	b570      	push	{r4, r5, r6, lr}
  40065a:	b082      	sub	sp, #8
	ASSERT(descr && task);
  40065c:	4604      	mov	r4, r0
  40065e:	460d      	mov	r5, r1
  400660:	2800      	cmp	r0, #0
  400662:	bf18      	it	ne
  400664:	2900      	cmpne	r1, #0
  400666:	bf14      	ite	ne
  400668:	2001      	movne	r0, #1
  40066a:	2000      	moveq	r0, #0
  40066c:	227a      	movs	r2, #122	; 0x7a
  40066e:	491d      	ldr	r1, [pc, #116]	; (4006e4 <timer_add_task+0x8c>)
  400670:	4b1d      	ldr	r3, [pc, #116]	; (4006e8 <timer_add_task+0x90>)
  400672:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  400674:	7e23      	ldrb	r3, [r4, #24]
  400676:	f043 0301 	orr.w	r3, r3, #1
  40067a:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  40067c:	f104 0614 	add.w	r6, r4, #20
  400680:	4629      	mov	r1, r5
  400682:	4630      	mov	r0, r6
  400684:	4b19      	ldr	r3, [pc, #100]	; (4006ec <timer_add_task+0x94>)
  400686:	4798      	blx	r3
  400688:	b988      	cbnz	r0, 4006ae <timer_add_task+0x56>
	task->time_label = descr->time;
  40068a:	6923      	ldr	r3, [r4, #16]
  40068c:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  40068e:	6922      	ldr	r2, [r4, #16]
  400690:	4629      	mov	r1, r5
  400692:	4630      	mov	r0, r6
  400694:	4b16      	ldr	r3, [pc, #88]	; (4006f0 <timer_add_task+0x98>)
  400696:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400698:	7e23      	ldrb	r3, [r4, #24]
  40069a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  40069e:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  4006a0:	7e23      	ldrb	r3, [r4, #24]
  4006a2:	f013 0f02 	tst.w	r3, #2
  4006a6:	d10e      	bne.n	4006c6 <timer_add_task+0x6e>
	return ERR_NONE;
  4006a8:	2000      	movs	r0, #0
}
  4006aa:	b002      	add	sp, #8
  4006ac:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4006ae:	7e23      	ldrb	r3, [r4, #24]
  4006b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4006b4:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  4006b6:	227f      	movs	r2, #127	; 0x7f
  4006b8:	490a      	ldr	r1, [pc, #40]	; (4006e4 <timer_add_task+0x8c>)
  4006ba:	2000      	movs	r0, #0
  4006bc:	4b0a      	ldr	r3, [pc, #40]	; (4006e8 <timer_add_task+0x90>)
  4006be:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  4006c0:	f06f 0011 	mvn.w	r0, #17
  4006c4:	e7f1      	b.n	4006aa <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  4006c6:	a801      	add	r0, sp, #4
  4006c8:	4b0a      	ldr	r3, [pc, #40]	; (4006f4 <timer_add_task+0x9c>)
  4006ca:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  4006cc:	7e23      	ldrb	r3, [r4, #24]
  4006ce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  4006d2:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  4006d4:	4620      	mov	r0, r4
  4006d6:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <timer_add_task+0xa0>)
  4006d8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  4006da:	a801      	add	r0, sp, #4
  4006dc:	4b07      	ldr	r3, [pc, #28]	; (4006fc <timer_add_task+0xa4>)
  4006de:	4798      	blx	r3
	return ERR_NONE;
  4006e0:	2000      	movs	r0, #0
  4006e2:	e7e2      	b.n	4006aa <timer_add_task+0x52>
  4006e4:	004012f4 	.word	0x004012f4
  4006e8:	004007a1 	.word	0x004007a1
  4006ec:	004007a7 	.word	0x004007a7
  4006f0:	00400565 	.word	0x00400565
  4006f4:	004003d1 	.word	0x004003d1
  4006f8:	00400fed 	.word	0x00400fed
  4006fc:	004003df 	.word	0x004003df

00400700 <timer_remove_task>:
{
  400700:	b570      	push	{r4, r5, r6, lr}
  400702:	b082      	sub	sp, #8
	ASSERT(descr && task);
  400704:	4604      	mov	r4, r0
  400706:	460e      	mov	r6, r1
  400708:	2800      	cmp	r0, #0
  40070a:	bf18      	it	ne
  40070c:	2900      	cmpne	r1, #0
  40070e:	bf14      	ite	ne
  400710:	2001      	movne	r0, #1
  400712:	2000      	moveq	r0, #0
  400714:	2295      	movs	r2, #149	; 0x95
  400716:	491b      	ldr	r1, [pc, #108]	; (400784 <timer_remove_task+0x84>)
  400718:	4b1b      	ldr	r3, [pc, #108]	; (400788 <timer_remove_task+0x88>)
  40071a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  40071c:	7e23      	ldrb	r3, [r4, #24]
  40071e:	f043 0301 	orr.w	r3, r3, #1
  400722:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
  400724:	f104 0514 	add.w	r5, r4, #20
  400728:	4631      	mov	r1, r6
  40072a:	4628      	mov	r0, r5
  40072c:	4b17      	ldr	r3, [pc, #92]	; (40078c <timer_remove_task+0x8c>)
  40072e:	4798      	blx	r3
  400730:	b170      	cbz	r0, 400750 <timer_remove_task+0x50>
	list_delete_element(&descr->tasks, task);
  400732:	4631      	mov	r1, r6
  400734:	4628      	mov	r0, r5
  400736:	4b16      	ldr	r3, [pc, #88]	; (400790 <timer_remove_task+0x90>)
  400738:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  40073a:	7e23      	ldrb	r3, [r4, #24]
  40073c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400740:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  400742:	7e23      	ldrb	r3, [r4, #24]
  400744:	f013 0f02 	tst.w	r3, #2
  400748:	d10d      	bne.n	400766 <timer_remove_task+0x66>
	return ERR_NONE;
  40074a:	2000      	movs	r0, #0
}
  40074c:	b002      	add	sp, #8
  40074e:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400750:	7e23      	ldrb	r3, [r4, #24]
  400752:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400756:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  400758:	229a      	movs	r2, #154	; 0x9a
  40075a:	490a      	ldr	r1, [pc, #40]	; (400784 <timer_remove_task+0x84>)
  40075c:	4b0a      	ldr	r3, [pc, #40]	; (400788 <timer_remove_task+0x88>)
  40075e:	4798      	blx	r3
		return ERR_NOT_FOUND;
  400760:	f06f 0009 	mvn.w	r0, #9
  400764:	e7f2      	b.n	40074c <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
  400766:	a801      	add	r0, sp, #4
  400768:	4b0a      	ldr	r3, [pc, #40]	; (400794 <timer_remove_task+0x94>)
  40076a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  40076c:	7e23      	ldrb	r3, [r4, #24]
  40076e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  400772:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  400774:	4620      	mov	r0, r4
  400776:	4b08      	ldr	r3, [pc, #32]	; (400798 <timer_remove_task+0x98>)
  400778:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  40077a:	a801      	add	r0, sp, #4
  40077c:	4b07      	ldr	r3, [pc, #28]	; (40079c <timer_remove_task+0x9c>)
  40077e:	4798      	blx	r3
	return ERR_NONE;
  400780:	2000      	movs	r0, #0
  400782:	e7e3      	b.n	40074c <timer_remove_task+0x4c>
  400784:	004012f4 	.word	0x004012f4
  400788:	004007a1 	.word	0x004007a1
  40078c:	004007a7 	.word	0x004007a7
  400790:	00400801 	.word	0x00400801
  400794:	004003d1 	.word	0x004003d1
  400798:	00400fed 	.word	0x00400fed
  40079c:	004003df 	.word	0x004003df

004007a0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4007a0:	b900      	cbnz	r0, 4007a4 <assert+0x4>
		__asm("BKPT #0");
  4007a2:	be00      	bkpt	0x0000
  4007a4:	4770      	bx	lr

004007a6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4007a6:	6803      	ldr	r3, [r0, #0]
  4007a8:	b11b      	cbz	r3, 4007b2 <is_list_element+0xc>
		if (it == element) {
  4007aa:	428b      	cmp	r3, r1
  4007ac:	d003      	beq.n	4007b6 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  4007ae:	681b      	ldr	r3, [r3, #0]
  4007b0:	e7fa      	b.n	4007a8 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  4007b2:	2000      	movs	r0, #0
  4007b4:	4770      	bx	lr
			return true;
  4007b6:	2001      	movs	r0, #1
}
  4007b8:	4770      	bx	lr
	...

004007bc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  4007bc:	b538      	push	{r3, r4, r5, lr}
  4007be:	4604      	mov	r4, r0
  4007c0:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  4007c2:	4b06      	ldr	r3, [pc, #24]	; (4007dc <list_insert_as_head+0x20>)
  4007c4:	4798      	blx	r3
  4007c6:	f080 0001 	eor.w	r0, r0, #1
  4007ca:	2239      	movs	r2, #57	; 0x39
  4007cc:	4904      	ldr	r1, [pc, #16]	; (4007e0 <list_insert_as_head+0x24>)
  4007ce:	b2c0      	uxtb	r0, r0
  4007d0:	4b04      	ldr	r3, [pc, #16]	; (4007e4 <list_insert_as_head+0x28>)
  4007d2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  4007d4:	6823      	ldr	r3, [r4, #0]
  4007d6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  4007d8:	6025      	str	r5, [r4, #0]
  4007da:	bd38      	pop	{r3, r4, r5, pc}
  4007dc:	004007a7 	.word	0x004007a7
  4007e0:	0040130c 	.word	0x0040130c
  4007e4:	004007a1 	.word	0x004007a1

004007e8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  4007e8:	6803      	ldr	r3, [r0, #0]
  4007ea:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  4007ec:	6001      	str	r1, [r0, #0]
  4007ee:	4770      	bx	lr

004007f0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  4007f0:	6803      	ldr	r3, [r0, #0]
  4007f2:	b11b      	cbz	r3, 4007fc <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  4007f4:	681a      	ldr	r2, [r3, #0]
  4007f6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  4007f8:	4618      	mov	r0, r3
  4007fa:	4770      	bx	lr
	}

	return NULL;
  4007fc:	2000      	movs	r0, #0
}
  4007fe:	4770      	bx	lr

00400800 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
  400800:	b1a1      	cbz	r1, 40082c <list_delete_element+0x2c>
{
  400802:	b410      	push	{r4}
  400804:	460c      	mov	r4, r1
		return false;
	}

	if (list->head == element) {
  400806:	6803      	ldr	r3, [r0, #0]
  400808:	4299      	cmp	r1, r3
  40080a:	d104      	bne.n	400816 <list_delete_element+0x16>
		list->head = list->head->next;
  40080c:	681b      	ldr	r3, [r3, #0]
  40080e:	6003      	str	r3, [r0, #0]
		return true;
  400810:	2001      	movs	r0, #1
  400812:	e008      	b.n	400826 <list_delete_element+0x26>
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
			it = it->next;
  400814:	4613      	mov	r3, r2
		while (it && it->next != element) {
  400816:	b113      	cbz	r3, 40081e <list_delete_element+0x1e>
  400818:	681a      	ldr	r2, [r3, #0]
  40081a:	4294      	cmp	r4, r2
  40081c:	d1fa      	bne.n	400814 <list_delete_element+0x14>
		}
		if (it) {
  40081e:	b13b      	cbz	r3, 400830 <list_delete_element+0x30>
			it->next = ((struct list_element *)element)->next;
  400820:	6822      	ldr	r2, [r4, #0]
  400822:	601a      	str	r2, [r3, #0]
			return true;
  400824:	2001      	movs	r0, #1
		}
	}

	return false;
}
  400826:	f85d 4b04 	ldr.w	r4, [sp], #4
  40082a:	4770      	bx	lr
		return false;
  40082c:	2000      	movs	r0, #0
  40082e:	4770      	bx	lr
	return false;
  400830:	2000      	movs	r0, #0
  400832:	e7f8      	b.n	400826 <list_delete_element+0x26>

00400834 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  400834:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400836:	2b00      	cmp	r3, #0
  400838:	db09      	blt.n	40084e <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40083a:	095b      	lsrs	r3, r3, #5
  40083c:	f000 001f 	and.w	r0, r0, #31
  400840:	2201      	movs	r2, #1
  400842:	fa02 f000 	lsl.w	r0, r2, r0
  400846:	3340      	adds	r3, #64	; 0x40
  400848:	4a01      	ldr	r2, [pc, #4]	; (400850 <_irq_set+0x1c>)
  40084a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  40084e:	4770      	bx	lr
  400850:	e000e100 	.word	0xe000e100

00400854 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400854:	b500      	push	{lr}
  400856:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400858:	a801      	add	r0, sp, #4
  40085a:	4b0e      	ldr	r3, [pc, #56]	; (400894 <_init_chip+0x40>)
  40085c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40085e:	4a0e      	ldr	r2, [pc, #56]	; (400898 <_init_chip+0x44>)
  400860:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  40086c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400870:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400874:	a801      	add	r0, sp, #4
  400876:	4b09      	ldr	r3, [pc, #36]	; (40089c <_init_chip+0x48>)
  400878:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  40087a:	4a09      	ldr	r2, [pc, #36]	; (4008a0 <_init_chip+0x4c>)
  40087c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40087e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400882:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400886:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400888:	4b06      	ldr	r3, [pc, #24]	; (4008a4 <_init_chip+0x50>)
  40088a:	4798      	blx	r3
}
  40088c:	b003      	add	sp, #12
  40088e:	f85d fb04 	ldr.w	pc, [sp], #4
  400892:	bf00      	nop
  400894:	004003d1 	.word	0x004003d1
  400898:	e000ed00 	.word	0xe000ed00
  40089c:	004003df 	.word	0x004003df
  4008a0:	400e0c00 	.word	0x400e0c00
  4008a4:	00400eb1 	.word	0x00400eb1

004008a8 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  4008a8:	b538      	push	{r3, r4, r5, lr}
  4008aa:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  4008ac:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  4008ae:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  4008b0:	f014 0f01 	tst.w	r4, #1
  4008b4:	d11a      	bne.n	4008ec <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  4008b6:	f414 7f00 	tst.w	r4, #512	; 0x200
  4008ba:	d11a      	bne.n	4008f2 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  4008bc:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  4008c0:	d11b      	bne.n	4008fa <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  4008c2:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  4008c6:	d11d      	bne.n	400904 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  4008c8:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  4008cc:	d008      	beq.n	4008e0 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4008ce:	68eb      	ldr	r3, [r5, #12]
  4008d0:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  4008d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
  4008d4:	f012 0f20 	tst.w	r2, #32
  4008d8:	d019      	beq.n	40090e <_can_irq_handler+0x66>
  4008da:	2102      	movs	r1, #2
  4008dc:	4628      	mov	r0, r5
  4008de:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  4008e0:	f014 0f08 	tst.w	r4, #8
  4008e4:	d115      	bne.n	400912 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  4008e6:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  4008e8:	651c      	str	r4, [r3, #80]	; 0x50
  4008ea:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  4008ec:	6883      	ldr	r3, [r0, #8]
  4008ee:	4798      	blx	r3
  4008f0:	e7e1      	b.n	4008b6 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  4008f2:	686b      	ldr	r3, [r5, #4]
  4008f4:	4628      	mov	r0, r5
  4008f6:	4798      	blx	r3
  4008f8:	e7e0      	b.n	4008bc <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  4008fa:	68eb      	ldr	r3, [r5, #12]
  4008fc:	2103      	movs	r1, #3
  4008fe:	4628      	mov	r0, r5
  400900:	4798      	blx	r3
  400902:	e7de      	b.n	4008c2 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  400904:	68eb      	ldr	r3, [r5, #12]
  400906:	2100      	movs	r1, #0
  400908:	4628      	mov	r0, r5
  40090a:	4798      	blx	r3
  40090c:	e7dc      	b.n	4008c8 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  40090e:	2101      	movs	r1, #1
  400910:	e7e4      	b.n	4008dc <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  400912:	68eb      	ldr	r3, [r5, #12]
  400914:	2104      	movs	r1, #4
  400916:	4628      	mov	r0, r5
  400918:	4798      	blx	r3
  40091a:	e7e4      	b.n	4008e6 <_can_irq_handler+0x3e>

0040091c <_can_async_init>:
{
  40091c:	b430      	push	{r4, r5}
	dev->hw = hw;
  40091e:	6001      	str	r1, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_INIT;
  400920:	698b      	ldr	r3, [r1, #24]
  400922:	f043 0301 	orr.w	r3, r3, #1
  400926:	618b      	str	r3, [r1, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw) == 0)
  400928:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  40092a:	699a      	ldr	r2, [r3, #24]
  40092c:	f012 0f01 	tst.w	r2, #1
  400930:	d0fa      	beq.n	400928 <_can_async_init+0xc>
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_CCE;
  400932:	699a      	ldr	r2, [r3, #24]
  400934:	f042 0202 	orr.w	r2, r2, #2
  400938:	619a      	str	r2, [r3, #24]
	if (hw == MCAN0) {
  40093a:	4b63      	ldr	r3, [pc, #396]	; (400ac8 <_can_async_init+0x1ac>)
  40093c:	4299      	cmp	r1, r3
  40093e:	d014      	beq.n	40096a <_can_async_init+0x4e>
	if (hw == MCAN1) {
  400940:	4b62      	ldr	r3, [pc, #392]	; (400acc <_can_async_init+0x1b0>)
  400942:	4299      	cmp	r1, r3
  400944:	d067      	beq.n	400a16 <_can_async_init+0xfa>
	hri_mcan_clear_CCCR_CCE_bit(dev->hw);
  400946:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_CCE;
  400948:	6993      	ldr	r3, [r2, #24]
  40094a:	f023 0302 	bic.w	r3, r3, #2
  40094e:	6193      	str	r3, [r2, #24]
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  400950:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400952:	6993      	ldr	r3, [r2, #24]
  400954:	f023 0301 	bic.w	r3, r3, #1
  400958:	6193      	str	r3, [r2, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw)) {
  40095a:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  40095c:	699b      	ldr	r3, [r3, #24]
  40095e:	f013 0f01 	tst.w	r3, #1
  400962:	d1fa      	bne.n	40095a <_can_async_init+0x3e>
}
  400964:	2000      	movs	r0, #0
  400966:	bc30      	pop	{r4, r5}
  400968:	4770      	bx	lr
		dev->context = (void *)&_can0_context;
  40096a:	4b59      	ldr	r3, [pc, #356]	; (400ad0 <_can_async_init+0x1b4>)
  40096c:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
  40096e:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  400970:	6993      	ldr	r3, [r2, #24]
  400972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400976:	6193      	str	r3, [r2, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN0_NBTP_REG);
  400978:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  40097a:	4a56      	ldr	r2, [pc, #344]	; (400ad4 <_can_async_init+0x1b8>)
  40097c:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
  40097e:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  400980:	f640 1233 	movw	r2, #2355	; 0x933
  400984:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN0_TDCR_REG);
  400986:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  400988:	f640 320b 	movw	r2, #2827	; 0xb0b
  40098c:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | (((uint32_t)can0_rx_fifo) & 0xFFFF));
  40098e:	6802      	ldr	r2, [r0, #0]
  400990:	4b51      	ldr	r3, [pc, #324]	; (400ad8 <_can_async_init+0x1bc>)
  400992:	b29b      	uxth	r3, r3
  400994:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
}

static inline void hri_mcan_write_RXF0C_reg(const void *const hw, hri_mcan_rxf0c_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXF0C = data;
  400998:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN0_RXESC_REG);
  40099c:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_RXESC_reg(const void *const hw, hri_mcan_rxesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXESC = data;
  40099e:	2400      	movs	r4, #0
  4009a0:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN0_TXESC_REG);
  4009a4:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_TXESC_reg(const void *const hw, hri_mcan_txesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXESC = data;
  4009a6:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | (((uint32_t)can0_tx_fifo) & 0xFFFF));
  4009aa:	6802      	ldr	r2, [r0, #0]
  4009ac:	4b4b      	ldr	r3, [pc, #300]	; (400adc <_can_async_init+0x1c0>)
  4009ae:	b29b      	uxth	r3, r3
  4009b0:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
	((Mcan *)hw)->MCAN_TXBC = data;
  4009b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | (((uint32_t)can0_tx_event_fifo) & 0xFFFF));
  4009b8:	6805      	ldr	r5, [r0, #0]
  4009ba:	4a49      	ldr	r2, [pc, #292]	; (400ae0 <_can_async_init+0x1c4>)
  4009bc:	b293      	uxth	r3, r2
  4009be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
}

static inline void hri_mcan_write_TXEFC_reg(const void *const hw, hri_mcan_txefc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXEFC = data;
  4009c2:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN0_GFC_REG);
  4009c6:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  4009c8:	252b      	movs	r5, #43	; 0x2b
  4009ca:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | (((uint32_t)can0_rx_std_filter) & 0xFFFF));
  4009ce:	6805      	ldr	r5, [r0, #0]
  4009d0:	f102 0310 	add.w	r3, r2, #16
  4009d4:	b29b      	uxth	r3, r3
  4009d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	((Mcan *)hw)->MCAN_SIDFC = data;
  4009da:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | (((uint32_t)can0_rx_ext_filter) & 0xFFFF));
  4009de:	6805      	ldr	r5, [r0, #0]
  4009e0:	f502 7388 	add.w	r3, r2, #272	; 0x110
  4009e4:	b29b      	uxth	r3, r3
  4009e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_XIDFC = data;
  4009ea:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN0_XIDAM_REG);
  4009ee:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  4009f0:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		_can0_dev = dev;
  4009f4:	f8c2 0120 	str.w	r0, [r2, #288]	; 0x120
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4009f8:	4b3a      	ldr	r3, [pc, #232]	; (400ae4 <_can_async_init+0x1c8>)
  4009fa:	2208      	movs	r2, #8
  4009fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400a00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a04:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a08:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a0c:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400a0e:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400a10:	2201      	movs	r2, #1
  400a12:	65da      	str	r2, [r3, #92]	; 0x5c
  400a14:	e794      	b.n	400940 <_can_async_init+0x24>
		dev->context = (void *)&_can1_context;
  400a16:	4b34      	ldr	r3, [pc, #208]	; (400ae8 <_can_async_init+0x1cc>)
  400a18:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
  400a1a:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  400a1c:	6993      	ldr	r3, [r2, #24]
  400a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400a22:	6193      	str	r3, [r2, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN1_NBTP_REG);
  400a24:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  400a26:	4a2b      	ldr	r2, [pc, #172]	; (400ad4 <_can_async_init+0x1b8>)
  400a28:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
  400a2a:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  400a2c:	f640 1233 	movw	r2, #2355	; 0x933
  400a30:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN1_TDCR_REG);
  400a32:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  400a34:	f640 320b 	movw	r2, #2827	; 0xb0b
  400a38:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | (((uint32_t)can1_rx_fifo) & 0xFFFF));
  400a3a:	6802      	ldr	r2, [r0, #0]
  400a3c:	4b2b      	ldr	r3, [pc, #172]	; (400aec <_can_async_init+0x1d0>)
  400a3e:	b29b      	uxth	r3, r3
  400a40:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
	((Mcan *)hw)->MCAN_RXF0C = data;
  400a44:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
  400a48:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_RXESC = data;
  400a4a:	2200      	movs	r2, #0
  400a4c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
  400a50:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TXESC = data;
  400a52:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | (((uint32_t)can1_tx_fifo) & 0xFFFF));
  400a56:	6801      	ldr	r1, [r0, #0]
  400a58:	4b25      	ldr	r3, [pc, #148]	; (400af0 <_can_async_init+0x1d4>)
  400a5a:	b29b      	uxth	r3, r3
  400a5c:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
	((Mcan *)hw)->MCAN_TXBC = data;
  400a60:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | (((uint32_t)can1_tx_event_fifo) & 0xFFFF));
  400a64:	6804      	ldr	r4, [r0, #0]
  400a66:	491e      	ldr	r1, [pc, #120]	; (400ae0 <_can_async_init+0x1c4>)
  400a68:	f501 7392 	add.w	r3, r1, #292	; 0x124
  400a6c:	b29b      	uxth	r3, r3
  400a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_TXEFC = data;
  400a72:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
  400a76:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  400a78:	242b      	movs	r4, #43	; 0x2b
  400a7a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | (((uint32_t)can1_rx_std_filter) & 0xFFFF));
  400a7e:	6804      	ldr	r4, [r0, #0]
  400a80:	f501 739a 	add.w	r3, r1, #308	; 0x134
  400a84:	b29b      	uxth	r3, r3
  400a86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	((Mcan *)hw)->MCAN_SIDFC = data;
  400a8a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | (((uint32_t)can1_rx_ext_filter) & 0xFFFF));
  400a8e:	6804      	ldr	r4, [r0, #0]
  400a90:	f501 730d 	add.w	r3, r1, #564	; 0x234
  400a94:	b29b      	uxth	r3, r3
  400a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_XIDFC = data;
  400a9a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
  400a9e:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  400aa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		_can1_dev = dev;
  400aa4:	f8c1 0244 	str.w	r0, [r1, #580]	; 0x244
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400aa8:	4b0e      	ldr	r3, [pc, #56]	; (400ae4 <_can_async_init+0x1c8>)
  400aaa:	2220      	movs	r2, #32
  400aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400ab0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ab4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ab8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400abc:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400abe:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400ac0:	2201      	movs	r2, #1
  400ac2:	65da      	str	r2, [r3, #92]	; 0x5c
  400ac4:	e73f      	b.n	400946 <_can_async_init+0x2a>
  400ac6:	bf00      	nop
  400ac8:	40030000 	.word	0x40030000
  400acc:	40034000 	.word	0x40034000
  400ad0:	20400000 	.word	0x20400000
  400ad4:	06020a07 	.word	0x06020a07
  400ad8:	20400334 	.word	0x20400334
  400adc:	20400454 	.word	0x20400454
  400ae0:	20400068 	.word	0x20400068
  400ae4:	e000e100 	.word	0xe000e100
  400ae8:	20400014 	.word	0x20400014
  400aec:	204003f4 	.word	0x204003f4
  400af0:	20400394 	.word	0x20400394

00400af4 <_can_async_enable>:
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  400af4:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400af6:	6993      	ldr	r3, [r2, #24]
  400af8:	f023 0301 	bic.w	r3, r3, #1
  400afc:	6193      	str	r3, [r2, #24]
}
  400afe:	2000      	movs	r0, #0
  400b00:	4770      	bx	lr
	...

00400b04 <_can_async_read>:
	if (!hri_mcan_read_RXF0S_F0FL_bf(dev->hw)) {
  400b04:	6803      	ldr	r3, [r0, #0]
	return (((Mcan *)hw)->MCAN_RXF0S & MCAN_RXF0S_F0FL_Msk) >> MCAN_RXF0S_F0FL_Pos;
  400b06:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  400b0a:	f012 0f7f 	tst.w	r2, #127	; 0x7f
  400b0e:	d04d      	beq.n	400bac <_can_async_read+0xa8>
{
  400b10:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b12:	b085      	sub	sp, #20
	return (((Mcan *)hw)->MCAN_RXF0S & MCAN_RXF0S_F0GI_Msk) >> MCAN_RXF0S_F0GI_Pos;
  400b14:	f8d3 60a4 	ldr.w	r6, [r3, #164]	; 0xa4
  400b18:	f3c6 2605 	ubfx	r6, r6, #8, #6
	if (dev->hw == MCAN0) {
  400b1c:	4a26      	ldr	r2, [pc, #152]	; (400bb8 <_can_async_read+0xb4>)
  400b1e:	4293      	cmp	r3, r2
  400b20:	d032      	beq.n	400b88 <_can_async_read+0x84>
	struct _can_rx_fifo_entry *f = NULL;
  400b22:	2400      	movs	r4, #0
	if (dev->hw == MCAN1) {
  400b24:	4a25      	ldr	r2, [pc, #148]	; (400bbc <_can_async_read+0xb8>)
  400b26:	4293      	cmp	r3, r2
  400b28:	d032      	beq.n	400b90 <_can_async_read+0x8c>
	if (f == NULL) {
  400b2a:	2c00      	cmp	r4, #0
  400b2c:	d041      	beq.n	400bb2 <_can_async_read+0xae>
	if (f->R0.bit.XTD == 1) {
  400b2e:	6823      	ldr	r3, [r4, #0]
  400b30:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400b34:	d130      	bne.n	400b98 <_can_async_read+0x94>
		msg->fmt = CAN_FMT_STDID;
  400b36:	2300      	movs	r3, #0
  400b38:	734b      	strb	r3, [r1, #13]
		msg->id = f->R0.bit.ID >> 18;
  400b3a:	6823      	ldr	r3, [r4, #0]
  400b3c:	f3c3 438a 	ubfx	r3, r3, #18, #11
  400b40:	600b      	str	r3, [r1, #0]
	if (f->R0.bit.RTR == 1) {
  400b42:	6823      	ldr	r3, [r4, #0]
  400b44:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400b48:	d12d      	bne.n	400ba6 <_can_async_read+0xa2>
  400b4a:	460d      	mov	r5, r1
  400b4c:	4607      	mov	r7, r0
	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
  400b4e:	4b1c      	ldr	r3, [pc, #112]	; (400bc0 <_can_async_read+0xbc>)
  400b50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400b52:	f10d 0e10 	add.w	lr, sp, #16
  400b56:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
  400b5a:	6863      	ldr	r3, [r4, #4]
  400b5c:	f3c3 4303 	ubfx	r3, r3, #16, #4
  400b60:	4473      	add	r3, lr
  400b62:	f813 2c10 	ldrb.w	r2, [r3, #-16]
  400b66:	732a      	strb	r2, [r5, #12]
	memcpy(msg->data, f->data, msg->len);
  400b68:	f104 0108 	add.w	r1, r4, #8
  400b6c:	68a8      	ldr	r0, [r5, #8]
  400b6e:	4b15      	ldr	r3, [pc, #84]	; (400bc4 <_can_async_read+0xc0>)
  400b70:	4798      	blx	r3
	hri_mcan_write_RXF0A_F0AI_bf(dev->hw, get_index);
  400b72:	683a      	ldr	r2, [r7, #0]
	tmp = ((Mcan *)hw)->MCAN_RXF0A;
  400b74:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	tmp &= ~MCAN_RXF0A_F0AI_Msk;
  400b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	tmp |= MCAN_RXF0A_F0AI(data);
  400b7c:	431e      	orrs	r6, r3
	((Mcan *)hw)->MCAN_RXF0A = tmp;
  400b7e:	f8c2 60a8 	str.w	r6, [r2, #168]	; 0xa8
	return ERR_NONE;
  400b82:	2000      	movs	r0, #0
}
  400b84:	b005      	add	sp, #20
  400b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
  400b88:	4c0f      	ldr	r4, [pc, #60]	; (400bc8 <_can_async_read+0xc4>)
  400b8a:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  400b8e:	e7c9      	b.n	400b24 <_can_async_read+0x20>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
  400b90:	4c0e      	ldr	r4, [pc, #56]	; (400bcc <_can_async_read+0xc8>)
  400b92:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  400b96:	e7c8      	b.n	400b2a <_can_async_read+0x26>
		msg->fmt = CAN_FMT_EXTID;
  400b98:	2301      	movs	r3, #1
  400b9a:	734b      	strb	r3, [r1, #13]
		msg->id  = f->R0.bit.ID;
  400b9c:	6823      	ldr	r3, [r4, #0]
  400b9e:	f3c3 031c 	ubfx	r3, r3, #0, #29
  400ba2:	600b      	str	r3, [r1, #0]
  400ba4:	e7cd      	b.n	400b42 <_can_async_read+0x3e>
		msg->type = CAN_TYPE_REMOTE;
  400ba6:	2301      	movs	r3, #1
  400ba8:	710b      	strb	r3, [r1, #4]
  400baa:	e7ce      	b.n	400b4a <_can_async_read+0x46>
		return ERR_NOT_FOUND;
  400bac:	f06f 0009 	mvn.w	r0, #9
  400bb0:	4770      	bx	lr
		return ERR_NO_RESOURCE;
  400bb2:	f06f 001b 	mvn.w	r0, #27
  400bb6:	e7e5      	b.n	400b84 <_can_async_read+0x80>
  400bb8:	40030000 	.word	0x40030000
  400bbc:	40034000 	.word	0x40034000
  400bc0:	0040132c 	.word	0x0040132c
  400bc4:	004012c1 	.word	0x004012c1
  400bc8:	20400334 	.word	0x20400334
  400bcc:	204003f4 	.word	0x204003f4

00400bd0 <_can_async_write>:
{
  400bd0:	b538      	push	{r3, r4, r5, lr}
	if (hri_mcan_get_TXFQS_TFQF_bit(dev->hw)) {
  400bd2:	6802      	ldr	r2, [r0, #0]
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQF) > 0;
  400bd4:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
  400bd8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400bdc:	f040 8082 	bne.w	400ce4 <_can_async_write+0x114>
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQPI_Msk) >> MCAN_TXFQS_TFQPI_Pos;
  400be0:	f8d2 50c4 	ldr.w	r5, [r2, #196]	; 0xc4
  400be4:	f3c5 4504 	ubfx	r5, r5, #16, #5
	if (dev->hw == MCAN0) {
  400be8:	4b41      	ldr	r3, [pc, #260]	; (400cf0 <_can_async_write+0x120>)
  400bea:	429a      	cmp	r2, r3
  400bec:	d034      	beq.n	400c58 <_can_async_write+0x88>
	struct _can_tx_fifo_entry *f = NULL;
  400bee:	2300      	movs	r3, #0
	if (dev->hw == MCAN1) {
  400bf0:	4c40      	ldr	r4, [pc, #256]	; (400cf4 <_can_async_write+0x124>)
  400bf2:	42a2      	cmp	r2, r4
  400bf4:	d034      	beq.n	400c60 <_can_async_write+0x90>
	if (f == NULL) {
  400bf6:	2b00      	cmp	r3, #0
  400bf8:	d077      	beq.n	400cea <_can_async_write+0x11a>
	if (msg->fmt == CAN_FMT_EXTID) {
  400bfa:	7b4a      	ldrb	r2, [r1, #13]
  400bfc:	2a01      	cmp	r2, #1
  400bfe:	d033      	beq.n	400c68 <_can_async_write+0x98>
		f->T0.val = msg->id << 18;
  400c00:	680a      	ldr	r2, [r1, #0]
  400c02:	0492      	lsls	r2, r2, #18
  400c04:	601a      	str	r2, [r3, #0]
	if (msg->len <= 8) {
  400c06:	7b0a      	ldrb	r2, [r1, #12]
  400c08:	2a08      	cmp	r2, #8
  400c0a:	d834      	bhi.n	400c76 <_can_async_write+0xa6>
		f->T1.bit.DLC = msg->len;
  400c0c:	685c      	ldr	r4, [r3, #4]
  400c0e:	f362 4413 	bfi	r4, r2, #16, #4
  400c12:	605c      	str	r4, [r3, #4]
  400c14:	4604      	mov	r4, r0
	f->T1.bit.FDF = hri_mcan_get_CCCR_FDOE_bit(dev->hw);
  400c16:	6802      	ldr	r2, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400c18:	6992      	ldr	r2, [r2, #24]
	tmp = (tmp & MCAN_CCCR_FDOE) >> MCAN_CCCR_FDOE_Pos;
  400c1a:	f3c2 2200 	ubfx	r2, r2, #8, #1
  400c1e:	6858      	ldr	r0, [r3, #4]
  400c20:	f362 5055 	bfi	r0, r2, #21, #1
  400c24:	6058      	str	r0, [r3, #4]
	f->T1.bit.BRS = hri_mcan_get_CCCR_BRSE_bit(dev->hw);
  400c26:	6822      	ldr	r2, [r4, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400c28:	6992      	ldr	r2, [r2, #24]
	tmp = (tmp & MCAN_CCCR_BRSE) >> MCAN_CCCR_BRSE_Pos;
  400c2a:	f3c2 2240 	ubfx	r2, r2, #9, #1
  400c2e:	6858      	ldr	r0, [r3, #4]
  400c30:	f362 5014 	bfi	r0, r2, #20, #1
  400c34:	6058      	str	r0, [r3, #4]
	memcpy(f->data, msg->data, msg->len);
  400c36:	7b0a      	ldrb	r2, [r1, #12]
  400c38:	6889      	ldr	r1, [r1, #8]
  400c3a:	f103 0008 	add.w	r0, r3, #8
  400c3e:	4b2e      	ldr	r3, [pc, #184]	; (400cf8 <_can_async_write+0x128>)
  400c40:	4798      	blx	r3
	hri_mcan_write_TXBAR_reg(dev->hw, 1 << hri_mcan_read_TXFQS_TFQPI_bf(dev->hw));
  400c42:	6821      	ldr	r1, [r4, #0]
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQPI_Msk) >> MCAN_TXFQS_TFQPI_Pos;
  400c44:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
  400c48:	f3c2 4204 	ubfx	r2, r2, #16, #5
  400c4c:	2301      	movs	r3, #1
  400c4e:	4093      	lsls	r3, r2
	((Mcan *)hw)->MCAN_TXBAR = data;
  400c50:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
	return ERR_NONE;
  400c54:	2000      	movs	r0, #0
  400c56:	bd38      	pop	{r3, r4, r5, pc}
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
  400c58:	4b28      	ldr	r3, [pc, #160]	; (400cfc <_can_async_write+0x12c>)
  400c5a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400c5e:	e7c7      	b.n	400bf0 <_can_async_write+0x20>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
  400c60:	4b27      	ldr	r3, [pc, #156]	; (400d00 <_can_async_write+0x130>)
  400c62:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400c66:	e7c6      	b.n	400bf6 <_can_async_write+0x26>
		f->T0.val     = msg->id;
  400c68:	680a      	ldr	r2, [r1, #0]
  400c6a:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
  400c6c:	681a      	ldr	r2, [r3, #0]
  400c6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400c72:	601a      	str	r2, [r3, #0]
  400c74:	e7c7      	b.n	400c06 <_can_async_write+0x36>
	} else if (msg->len <= 12) {
  400c76:	2a0c      	cmp	r2, #12
  400c78:	d805      	bhi.n	400c86 <_can_async_write+0xb6>
		f->T1.bit.DLC = 0x9;
  400c7a:	685a      	ldr	r2, [r3, #4]
  400c7c:	2409      	movs	r4, #9
  400c7e:	f364 4213 	bfi	r2, r4, #16, #4
  400c82:	605a      	str	r2, [r3, #4]
  400c84:	e7c6      	b.n	400c14 <_can_async_write+0x44>
	} else if (msg->len <= 16) {
  400c86:	2a10      	cmp	r2, #16
  400c88:	d805      	bhi.n	400c96 <_can_async_write+0xc6>
		f->T1.bit.DLC = 0xA;
  400c8a:	685a      	ldr	r2, [r3, #4]
  400c8c:	240a      	movs	r4, #10
  400c8e:	f364 4213 	bfi	r2, r4, #16, #4
  400c92:	605a      	str	r2, [r3, #4]
  400c94:	e7be      	b.n	400c14 <_can_async_write+0x44>
	} else if (msg->len <= 20) {
  400c96:	2a14      	cmp	r2, #20
  400c98:	d805      	bhi.n	400ca6 <_can_async_write+0xd6>
		f->T1.bit.DLC = 0xB;
  400c9a:	685a      	ldr	r2, [r3, #4]
  400c9c:	240b      	movs	r4, #11
  400c9e:	f364 4213 	bfi	r2, r4, #16, #4
  400ca2:	605a      	str	r2, [r3, #4]
  400ca4:	e7b6      	b.n	400c14 <_can_async_write+0x44>
	} else if (msg->len <= 24) {
  400ca6:	2a18      	cmp	r2, #24
  400ca8:	d805      	bhi.n	400cb6 <_can_async_write+0xe6>
		f->T1.bit.DLC = 0xC;
  400caa:	685a      	ldr	r2, [r3, #4]
  400cac:	240c      	movs	r4, #12
  400cae:	f364 4213 	bfi	r2, r4, #16, #4
  400cb2:	605a      	str	r2, [r3, #4]
  400cb4:	e7ae      	b.n	400c14 <_can_async_write+0x44>
	} else if (msg->len <= 32) {
  400cb6:	2a20      	cmp	r2, #32
  400cb8:	d805      	bhi.n	400cc6 <_can_async_write+0xf6>
		f->T1.bit.DLC = 0xD;
  400cba:	685a      	ldr	r2, [r3, #4]
  400cbc:	240d      	movs	r4, #13
  400cbe:	f364 4213 	bfi	r2, r4, #16, #4
  400cc2:	605a      	str	r2, [r3, #4]
  400cc4:	e7a6      	b.n	400c14 <_can_async_write+0x44>
	} else if (msg->len <= 48) {
  400cc6:	2a30      	cmp	r2, #48	; 0x30
  400cc8:	d805      	bhi.n	400cd6 <_can_async_write+0x106>
		f->T1.bit.DLC = 0xE;
  400cca:	685a      	ldr	r2, [r3, #4]
  400ccc:	240e      	movs	r4, #14
  400cce:	f364 4213 	bfi	r2, r4, #16, #4
  400cd2:	605a      	str	r2, [r3, #4]
  400cd4:	e79e      	b.n	400c14 <_can_async_write+0x44>
	} else if (msg->len <= 64) {
  400cd6:	2a40      	cmp	r2, #64	; 0x40
  400cd8:	d89c      	bhi.n	400c14 <_can_async_write+0x44>
		f->T1.bit.DLC = 0xF;
  400cda:	685a      	ldr	r2, [r3, #4]
  400cdc:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
  400ce0:	605a      	str	r2, [r3, #4]
  400ce2:	e797      	b.n	400c14 <_can_async_write+0x44>
		return ERR_NO_RESOURCE;
  400ce4:	f06f 001b 	mvn.w	r0, #27
  400ce8:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NO_RESOURCE;
  400cea:	f06f 001b 	mvn.w	r0, #27
}
  400cee:	bd38      	pop	{r3, r4, r5, pc}
  400cf0:	40030000 	.word	0x40030000
  400cf4:	40034000 	.word	0x40034000
  400cf8:	004012c1 	.word	0x004012c1
  400cfc:	20400454 	.word	0x20400454
  400d00:	20400394 	.word	0x20400394

00400d04 <_can_async_set_irq_state>:
	if (type == CAN_ASYNC_RX_CB) {
  400d04:	b121      	cbz	r1, 400d10 <_can_async_set_irq_state+0xc>
	} else if (type == CAN_ASYNC_TX_CB) {
  400d06:	2901      	cmp	r1, #1
  400d08:	d009      	beq.n	400d1e <_can_async_set_irq_state+0x1a>
	} else if (type == CAN_ASYNC_IRQ_CB) {
  400d0a:	2902      	cmp	r1, #2
  400d0c:	d014      	beq.n	400d38 <_can_async_set_irq_state+0x34>
  400d0e:	4770      	bx	lr
		hri_mcan_write_IE_RF0NE_bit(dev->hw, state);
  400d10:	6801      	ldr	r1, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400d12:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~MCAN_IE_RF0NE;
  400d14:	f023 0301 	bic.w	r3, r3, #1
	tmp |= value << MCAN_IE_RF0NE_Pos;
  400d18:	431a      	orrs	r2, r3
	((Mcan *)hw)->MCAN_IE = tmp;
  400d1a:	654a      	str	r2, [r1, #84]	; 0x54
  400d1c:	4770      	bx	lr
		hri_mcan_write_IE_TCE_bit(dev->hw, state);
  400d1e:	6801      	ldr	r1, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400d20:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~MCAN_IE_TCE;
  400d22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmp |= value << MCAN_IE_TCE_Pos;
  400d26:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
	((Mcan *)hw)->MCAN_IE = tmp;
  400d2a:	654a      	str	r2, [r1, #84]	; 0x54
		hri_mcan_write_TXBTIE_reg(dev->hw, MCAN_TXBTIE_MASK);
  400d2c:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TXBTIE = data;
  400d2e:	f04f 32ff 	mov.w	r2, #4294967295
  400d32:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  400d36:	4770      	bx	lr
		ie = hri_mcan_get_IE_reg(dev->hw, MCAN_IE_RF0NE | MCAN_IE_TCE);
  400d38:	6802      	ldr	r2, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400d3a:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
  400d3c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
  400d40:	059b      	lsls	r3, r3, #22
  400d42:	0d9b      	lsrs	r3, r3, #22
	((Mcan *)hw)->MCAN_IE = data;
  400d44:	6553      	str	r3, [r2, #84]	; 0x54
	return;
  400d46:	e7e2      	b.n	400d0e <_can_async_set_irq_state+0xa>

00400d48 <_can_async_set_filter>:
{
  400d48:	b470      	push	{r4, r5, r6}
	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
  400d4a:	6984      	ldr	r4, [r0, #24]
  400d4c:	68e0      	ldr	r0, [r4, #12]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
  400d4e:	6924      	ldr	r4, [r4, #16]
  400d50:	eb04 05c1 	add.w	r5, r4, r1, lsl #3
	if (fmt == CAN_FMT_STDID) {
  400d54:	b9ea      	cbnz	r2, 400d92 <_can_async_set_filter+0x4a>
		if (filter == NULL) {
  400d56:	b1cb      	cbz	r3, 400d8c <_can_async_set_filter+0x44>
		sf->S0.val       = filter->mask;
  400d58:	685a      	ldr	r2, [r3, #4]
  400d5a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		sf->S0.bit.SFID1 = filter->id;
  400d5e:	681a      	ldr	r2, [r3, #0]
  400d60:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400d64:	f362 431a 	bfi	r3, r2, #16, #11
  400d68:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		sf->S0.bit.SFT   = _CAN_SFT_DUAL;
  400d6c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400d70:	2201      	movs	r2, #1
  400d72:	f362 739f 	bfi	r3, r2, #30, #2
  400d76:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
  400d7a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400d7e:	f362 63dd 	bfi	r3, r2, #27, #3
  400d82:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
  400d86:	2000      	movs	r0, #0
  400d88:	bc70      	pop	{r4, r5, r6}
  400d8a:	4770      	bx	lr
			sf->S0.val = 0;
  400d8c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
			return ERR_NONE;
  400d90:	e7f9      	b.n	400d86 <_can_async_set_filter+0x3e>
	} else if (fmt == CAN_FMT_EXTID) {
  400d92:	2a01      	cmp	r2, #1
  400d94:	d1f7      	bne.n	400d86 <_can_async_set_filter+0x3e>
		if (filter == NULL) {
  400d96:	b18b      	cbz	r3, 400dbc <_can_async_set_filter+0x74>
		ef->F0.val      = filter->id;
  400d98:	681a      	ldr	r2, [r3, #0]
  400d9a:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
  400d9e:	f854 2031 	ldr.w	r2, [r4, r1, lsl #3]
  400da2:	2001      	movs	r0, #1
  400da4:	f360 725f 	bfi	r2, r0, #29, #3
  400da8:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
		ef->F1.val      = filter->mask;
  400dac:	685b      	ldr	r3, [r3, #4]
  400dae:	606b      	str	r3, [r5, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
  400db0:	686b      	ldr	r3, [r5, #4]
  400db2:	2202      	movs	r2, #2
  400db4:	f362 739f 	bfi	r3, r2, #30, #2
  400db8:	606b      	str	r3, [r5, #4]
  400dba:	e7e4      	b.n	400d86 <_can_async_set_filter+0x3e>
			ef->F0.val = 0;
  400dbc:	f844 3031 	str.w	r3, [r4, r1, lsl #3]
			return ERR_NONE;
  400dc0:	e7e1      	b.n	400d86 <_can_async_set_filter+0x3e>
	...

00400dc4 <MCAN0_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN0_INT0_Handler(void)
{
  400dc4:	b508      	push	{r3, lr}
	_can_irq_handler(_can0_dev);
  400dc6:	4b03      	ldr	r3, [pc, #12]	; (400dd4 <MCAN0_INT0_Handler+0x10>)
  400dc8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  400dcc:	4b02      	ldr	r3, [pc, #8]	; (400dd8 <MCAN0_INT0_Handler+0x14>)
  400dce:	4798      	blx	r3
  400dd0:	bd08      	pop	{r3, pc}
  400dd2:	bf00      	nop
  400dd4:	20400068 	.word	0x20400068
  400dd8:	004008a9 	.word	0x004008a9

00400ddc <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  400ddc:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  400dde:	4b03      	ldr	r3, [pc, #12]	; (400dec <MCAN1_INT0_Handler+0x10>)
  400de0:	f8d3 0244 	ldr.w	r0, [r3, #580]	; 0x244
  400de4:	4b02      	ldr	r3, [pc, #8]	; (400df0 <MCAN1_INT0_Handler+0x14>)
  400de6:	4798      	blx	r3
  400de8:	bd08      	pop	{r3, pc}
  400dea:	bf00      	nop
  400dec:	20400068 	.word	0x20400068
  400df0:	004008a9 	.word	0x004008a9

00400df4 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400df4:	490e      	ldr	r1, [pc, #56]	; (400e30 <_pmc_init_sources+0x3c>)
  400df6:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400df8:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400dfc:	4b0d      	ldr	r3, [pc, #52]	; (400e34 <_pmc_init_sources+0x40>)
  400dfe:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400e00:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400e02:	4b0b      	ldr	r3, [pc, #44]	; (400e30 <_pmc_init_sources+0x3c>)
  400e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400e06:	f013 0f01 	tst.w	r3, #1
  400e0a:	d0fa      	beq.n	400e02 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400e0c:	4b08      	ldr	r3, [pc, #32]	; (400e30 <_pmc_init_sources+0x3c>)
  400e0e:	6a19      	ldr	r1, [r3, #32]
  400e10:	4a09      	ldr	r2, [pc, #36]	; (400e38 <_pmc_init_sources+0x44>)
  400e12:	430a      	orrs	r2, r1
  400e14:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400e16:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400e18:	4a08      	ldr	r2, [pc, #32]	; (400e3c <_pmc_init_sources+0x48>)
  400e1a:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400e1c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400e1e:	4a08      	ldr	r2, [pc, #32]	; (400e40 <_pmc_init_sources+0x4c>)
  400e20:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400e22:	4b03      	ldr	r3, [pc, #12]	; (400e30 <_pmc_init_sources+0x3c>)
  400e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400e26:	f013 0f02 	tst.w	r3, #2
  400e2a:	d0fa      	beq.n	400e22 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop
  400e30:	400e0600 	.word	0x400e0600
  400e34:	00373e01 	.word	0x00373e01
  400e38:	01370000 	.word	0x01370000
  400e3c:	f800ffff 	.word	0xf800ffff
  400e40:	20183f01 	.word	0x20183f01

00400e44 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400e44:	4a11      	ldr	r2, [pc, #68]	; (400e8c <_pmc_init_master_clock+0x48>)
  400e46:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400e4c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400e4e:	4b0f      	ldr	r3, [pc, #60]	; (400e8c <_pmc_init_master_clock+0x48>)
  400e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400e52:	f013 0f08 	tst.w	r3, #8
  400e56:	d0fa      	beq.n	400e4e <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400e58:	4a0c      	ldr	r2, [pc, #48]	; (400e8c <_pmc_init_master_clock+0x48>)
  400e5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400e64:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400e66:	4b09      	ldr	r3, [pc, #36]	; (400e8c <_pmc_init_master_clock+0x48>)
  400e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400e6a:	f013 0f08 	tst.w	r3, #8
  400e6e:	d0fa      	beq.n	400e66 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400e70:	4a06      	ldr	r2, [pc, #24]	; (400e8c <_pmc_init_master_clock+0x48>)
  400e72:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400e74:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400e78:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400e7c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400e7e:	4b03      	ldr	r3, [pc, #12]	; (400e8c <_pmc_init_master_clock+0x48>)
  400e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400e82:	f013 0f08 	tst.w	r3, #8
  400e86:	d0fa      	beq.n	400e7e <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400e88:	4770      	bx	lr
  400e8a:	bf00      	nop
  400e8c:	400e0600 	.word	0x400e0600

00400e90 <_pmc_init_program_clock>:
}

static inline void hri_pmc_write_PCK_reg(const void *const hw, uint8_t index, hri_pmc_pck_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->PMC_PCK[index] = data;
  400e90:	2201      	movs	r2, #1
  400e92:	4b06      	ldr	r3, [pc, #24]	; (400eac <_pmc_init_program_clock+0x1c>)
  400e94:	655a      	str	r2, [r3, #84]	; 0x54
	return (((Pmc *)hw)->PMC_SR & PMC_SR_PCKRDY5) > 0;
  400e96:	4b05      	ldr	r3, [pc, #20]	; (400eac <_pmc_init_program_clock+0x1c>)
  400e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK4);
#endif

#if (CONF_CLK_PCK5_ENABLE == 1)
	hri_pmc_write_PCK_reg(PMC, 5, PMC_PCK_CSS(CONF_CLK_GEN_PCK5_SRC) | PMC_PCK_PRES(CONF_PCK5_PRESC - 1));
	while (!hri_pmc_get_SR_PCKRDY5_bit(PMC)) {
  400e9a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  400e9e:	d0fa      	beq.n	400e96 <_pmc_init_program_clock+0x6>
	((Pmc *)hw)->PMC_SCER = data;
  400ea0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400ea4:	4b01      	ldr	r3, [pc, #4]	; (400eac <_pmc_init_program_clock+0x1c>)
  400ea6:	601a      	str	r2, [r3, #0]
  400ea8:	4770      	bx	lr
  400eaa:	bf00      	nop
  400eac:	400e0600 	.word	0x400e0600

00400eb0 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400eb0:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400eb2:	4b03      	ldr	r3, [pc, #12]	; (400ec0 <_pmc_init+0x10>)
  400eb4:	4798      	blx	r3
	_pmc_init_master_clock();
  400eb6:	4b03      	ldr	r3, [pc, #12]	; (400ec4 <_pmc_init+0x14>)
  400eb8:	4798      	blx	r3
	_pmc_init_program_clock();
  400eba:	4b03      	ldr	r3, [pc, #12]	; (400ec8 <_pmc_init+0x18>)
  400ebc:	4798      	blx	r3
  400ebe:	bd08      	pop	{r3, pc}
  400ec0:	00400df5 	.word	0x00400df5
  400ec4:	00400e45 	.word	0x00400e45
  400ec8:	00400e91 	.word	0x00400e91

00400ecc <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400ecc:	2300      	movs	r3, #0
  400ece:	b13b      	cbz	r3, 400ee0 <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  400ed0:	2000      	movs	r0, #0
  400ed2:	4770      	bx	lr
			return &(_tcs[i]);
  400ed4:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  400ed8:	00a3      	lsls	r3, r4, #2
  400eda:	4608      	mov	r0, r1
  400edc:	4418      	add	r0, r3
  400ede:	e00c      	b.n	400efa <get_cfg+0x2e>
{
  400ee0:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  400ee2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  400ee6:	008a      	lsls	r2, r1, #2
  400ee8:	4905      	ldr	r1, [pc, #20]	; (400f00 <get_cfg+0x34>)
  400eea:	588a      	ldr	r2, [r1, r2]
  400eec:	4282      	cmp	r2, r0
  400eee:	d0f1      	beq.n	400ed4 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400ef0:	3301      	adds	r3, #1
  400ef2:	b2db      	uxtb	r3, r3
  400ef4:	2b00      	cmp	r3, #0
  400ef6:	d0f4      	beq.n	400ee2 <get_cfg+0x16>
	return NULL;
  400ef8:	2000      	movs	r0, #0
}
  400efa:	f85d 4b04 	ldr.w	r4, [sp], #4
  400efe:	4770      	bx	lr
  400f00:	20400028 	.word	0x20400028

00400f04 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  400f04:	4b03      	ldr	r3, [pc, #12]	; (400f14 <_tc_init_irq_param+0x10>)
  400f06:	4298      	cmp	r0, r3
  400f08:	d000      	beq.n	400f0c <_tc_init_irq_param+0x8>
  400f0a:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  400f0c:	4b02      	ldr	r3, [pc, #8]	; (400f18 <_tc_init_irq_param+0x14>)
  400f0e:	6019      	str	r1, [r3, #0]
	}
}
  400f10:	e7fb      	b.n	400f0a <_tc_init_irq_param+0x6>
  400f12:	bf00      	nop
  400f14:	4000c000 	.word	0x4000c000
  400f18:	204002b0 	.word	0x204002b0

00400f1c <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  400f1c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  400f1e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  400f20:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  400f22:	f013 0f10 	tst.w	r3, #16
  400f26:	d100      	bne.n	400f2a <tc_interrupt_handler+0xe>
  400f28:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  400f2a:	6803      	ldr	r3, [r0, #0]
  400f2c:	4798      	blx	r3
	}
}
  400f2e:	e7fb      	b.n	400f28 <tc_interrupt_handler+0xc>

00400f30 <_timer_init>:
{
  400f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f32:	4607      	mov	r7, r0
  400f34:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  400f36:	4608      	mov	r0, r1
  400f38:	4b27      	ldr	r3, [pc, #156]	; (400fd8 <_timer_init+0xa8>)
  400f3a:	4798      	blx	r3
  400f3c:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  400f3e:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  400f40:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  400f42:	2291      	movs	r2, #145	; 0x91
  400f44:	4925      	ldr	r1, [pc, #148]	; (400fdc <_timer_init+0xac>)
  400f46:	2001      	movs	r0, #1
  400f48:	4b25      	ldr	r3, [pc, #148]	; (400fe0 <_timer_init+0xb0>)
  400f4a:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  400f4c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  400f50:	d001      	beq.n	400f56 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  400f52:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  400f56:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  400f58:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  400f5a:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  400f5c:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  400f5e:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  400f60:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  400f62:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  400f64:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  400f66:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  400f68:	2310      	movs	r3, #16
  400f6a:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  400f6c:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  400f6e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  400f72:	4639      	mov	r1, r7
  400f74:	4620      	mov	r0, r4
  400f76:	4b1b      	ldr	r3, [pc, #108]	; (400fe4 <_timer_init+0xb4>)
  400f78:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400f7a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400f7e:	2b00      	cmp	r3, #0
  400f80:	db0d      	blt.n	400f9e <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f82:	095a      	lsrs	r2, r3, #5
  400f84:	f003 031f 	and.w	r3, r3, #31
  400f88:	2101      	movs	r1, #1
  400f8a:	fa01 f303 	lsl.w	r3, r1, r3
  400f8e:	3220      	adds	r2, #32
  400f90:	4915      	ldr	r1, [pc, #84]	; (400fe8 <_timer_init+0xb8>)
  400f92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400f96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f9a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  400f9e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400fa2:	2b00      	cmp	r3, #0
  400fa4:	db09      	blt.n	400fba <_timer_init+0x8a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fa6:	095a      	lsrs	r2, r3, #5
  400fa8:	f003 031f 	and.w	r3, r3, #31
  400fac:	2101      	movs	r1, #1
  400fae:	fa01 f303 	lsl.w	r3, r1, r3
  400fb2:	3260      	adds	r2, #96	; 0x60
  400fb4:	490c      	ldr	r1, [pc, #48]	; (400fe8 <_timer_init+0xb8>)
  400fb6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  400fba:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400fbe:	2b00      	cmp	r3, #0
  400fc0:	db08      	blt.n	400fd4 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fc2:	0959      	lsrs	r1, r3, #5
  400fc4:	f003 031f 	and.w	r3, r3, #31
  400fc8:	2201      	movs	r2, #1
  400fca:	fa02 f303 	lsl.w	r3, r2, r3
  400fce:	4a06      	ldr	r2, [pc, #24]	; (400fe8 <_timer_init+0xb8>)
  400fd0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  400fd4:	2000      	movs	r0, #0
  400fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400fd8:	00400ecd 	.word	0x00400ecd
  400fdc:	0040133c 	.word	0x0040133c
  400fe0:	004007a1 	.word	0x004007a1
  400fe4:	00400f05 	.word	0x00400f05
  400fe8:	e000e100 	.word	0xe000e100

00400fec <_timer_set_irq>:
{
  400fec:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  400fee:	68c0      	ldr	r0, [r0, #12]
  400ff0:	4b02      	ldr	r3, [pc, #8]	; (400ffc <_timer_set_irq+0x10>)
  400ff2:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  400ff4:	7900      	ldrb	r0, [r0, #4]
  400ff6:	4b02      	ldr	r3, [pc, #8]	; (401000 <_timer_set_irq+0x14>)
  400ff8:	4798      	blx	r3
  400ffa:	bd08      	pop	{r3, pc}
  400ffc:	00400ecd 	.word	0x00400ecd
  401000:	00400835 	.word	0x00400835

00401004 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  401004:	2000      	movs	r0, #0
  401006:	4770      	bx	lr

00401008 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  401008:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  40100a:	4b02      	ldr	r3, [pc, #8]	; (401014 <TC0_Handler+0xc>)
  40100c:	6818      	ldr	r0, [r3, #0]
  40100e:	4b02      	ldr	r3, [pc, #8]	; (401018 <TC0_Handler+0x10>)
  401010:	4798      	blx	r3
  401012:	bd08      	pop	{r3, pc}
  401014:	204002b0 	.word	0x204002b0
  401018:	00400f1d 	.word	0x00400f1d

0040101c <main>:

static struct timer_task TIMER_0_sensor_heartbeat;

void sensor_heartbeat();
int main(void)
{
  40101c:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  40101e:	4b07      	ldr	r3, [pc, #28]	; (40103c <main+0x20>)
  401020:	4798      	blx	r3
	
	init_can_module();
  401022:	4b07      	ldr	r3, [pc, #28]	; (401040 <main+0x24>)
  401024:	4798      	blx	r3
	((Pio *)hw)->PIO_OER = mask;
  401026:	4b07      	ldr	r3, [pc, #28]	; (401044 <main+0x28>)
  401028:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40102c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  40102e:	631a      	str	r2, [r3, #48]	; 0x30
	//setup();
	gpio_set_pin_direction(LED_A, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(LED_A, true);
	
	//add_single_filter_module_0(21, 0);
	add_single_filter_module_0(111, 1);
  401030:	2101      	movs	r1, #1
  401032:	206f      	movs	r0, #111	; 0x6f
  401034:	4b04      	ldr	r3, [pc, #16]	; (401048 <main+0x2c>)
  401036:	4798      	blx	r3
  401038:	e7fe      	b.n	401038 <main+0x1c>
  40103a:	bf00      	nop
  40103c:	004001d5 	.word	0x004001d5
  401040:	00401151 	.word	0x00401151
  401044:	400e0e00 	.word	0x400e0e00
  401048:	00401245 	.word	0x00401245

0040104c <message_received_CAN0>:
	timer_add_task(&TIMER_0, &TIMER_0_sensor_heartbeat);
	timer_start(&TIMER_0);
}

void message_received_CAN0(shift_can_message_t message) 
{
  40104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401050:	b088      	sub	sp, #32
  401052:	ab01      	add	r3, sp, #4
  401054:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t id = message.id;
  401058:	4604      	mov	r4, r0
	
	uint32_t data = *message.data;
  40105a:	9b02      	ldr	r3, [sp, #8]
  40105c:	781d      	ldrb	r5, [r3, #0]
	
	if(id == 21)
  40105e:	2815      	cmp	r0, #21
  401060:	d004      	beq.n	40106c <message_received_CAN0+0x20>
		TIMER_0_sensor_heartbeat.cb = cb_temp;
		
		timer_add_task(&TIMER_0, &TIMER_0_sensor_heartbeat);
	}
	
	if(id == 111)
  401062:	2c6f      	cmp	r4, #111	; 0x6f
  401064:	d014      	beq.n	401090 <message_received_CAN0+0x44>
		msg.dataSize = 1;
		
		send_message_module_0(&msg);
		gpio_toggle_pin_level(LED_A);
	}
}
  401066:	b008      	add	sp, #32
  401068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		timer_cb_t cb_temp = TIMER_0_sensor_heartbeat.cb;
  40106c:	4e13      	ldr	r6, [pc, #76]	; (4010bc <message_received_CAN0+0x70>)
  40106e:	f8d6 800c 	ldr.w	r8, [r6, #12]
		timer_remove_task(&TIMER_0, &TIMER_0_sensor_heartbeat);
  401072:	4f13      	ldr	r7, [pc, #76]	; (4010c0 <message_received_CAN0+0x74>)
  401074:	4631      	mov	r1, r6
  401076:	4638      	mov	r0, r7
  401078:	4b12      	ldr	r3, [pc, #72]	; (4010c4 <message_received_CAN0+0x78>)
  40107a:	4798      	blx	r3
		TIMER_0_sensor_heartbeat.interval = data;
  40107c:	60b5      	str	r5, [r6, #8]
		TIMER_0_sensor_heartbeat.mode = TIMER_TASK_REPEAT;
  40107e:	2301      	movs	r3, #1
  401080:	7433      	strb	r3, [r6, #16]
		TIMER_0_sensor_heartbeat.cb = cb_temp;
  401082:	f8c6 800c 	str.w	r8, [r6, #12]
		timer_add_task(&TIMER_0, &TIMER_0_sensor_heartbeat);
  401086:	4631      	mov	r1, r6
  401088:	4638      	mov	r0, r7
  40108a:	4b0f      	ldr	r3, [pc, #60]	; (4010c8 <message_received_CAN0+0x7c>)
  40108c:	4798      	blx	r3
  40108e:	e7e8      	b.n	401062 <message_received_CAN0+0x16>
		uint32_t dummy = 123;
  401090:	237b      	movs	r3, #123	; 0x7b
  401092:	9304      	str	r3, [sp, #16]
		msg.id = 111;
  401094:	236f      	movs	r3, #111	; 0x6f
  401096:	9305      	str	r3, [sp, #20]
		msg.data = &dummy;
  401098:	ab04      	add	r3, sp, #16
  40109a:	9306      	str	r3, [sp, #24]
		msg.dataSize = 1;
  40109c:	2301      	movs	r3, #1
  40109e:	f88d 301c 	strb.w	r3, [sp, #28]
		send_message_module_0(&msg);
  4010a2:	a805      	add	r0, sp, #20
  4010a4:	4b09      	ldr	r3, [pc, #36]	; (4010cc <message_received_CAN0+0x80>)
  4010a6:	4798      	blx	r3
	tmp = ((Pio *)hw)->PIO_ODSR;
  4010a8:	4a09      	ldr	r2, [pc, #36]	; (4010d0 <message_received_CAN0+0x84>)
  4010aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  4010ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  4010b0:	43d9      	mvns	r1, r3
  4010b2:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
	((Pio *)hw)->PIO_SODR = mask;
  4010b6:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  4010b8:	6353      	str	r3, [r2, #52]	; 0x34
}
  4010ba:	e7d4      	b.n	401066 <message_received_CAN0+0x1a>
  4010bc:	204002b4 	.word	0x204002b4
  4010c0:	20400318 	.word	0x20400318
  4010c4:	00400701 	.word	0x00400701
  4010c8:	00400659 	.word	0x00400659
  4010cc:	004011f9 	.word	0x004011f9
  4010d0:	400e0e00 	.word	0x400e0e00

004010d4 <message_received_CAN1>:

void message_received_CAN1(shift_can_message_t message) {}
  4010d4:	b084      	sub	sp, #16
  4010d6:	ab04      	add	r3, sp, #16
  4010d8:	e903 0007 	stmdb	r3, {r0, r1, r2}
  4010dc:	b004      	add	sp, #16
  4010de:	4770      	bx	lr

004010e0 <CAN0_RX_CALLBACK>:
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
	}
}

void CAN0_RX_CALLBACK(struct can_async_descriptor *const descr)
{
  4010e0:	b500      	push	{lr}
  4010e2:	b099      	sub	sp, #100	; 0x64
	struct can_message msg;
	uint8_t data[64];
	msg.data = data;
  4010e4:	ab04      	add	r3, sp, #16
  4010e6:	9316      	str	r3, [sp, #88]	; 0x58
	can_async_read(descr, &msg);
  4010e8:	a914      	add	r1, sp, #80	; 0x50
  4010ea:	4b09      	ldr	r3, [pc, #36]	; (401110 <CAN0_RX_CALLBACK+0x30>)
  4010ec:	4798      	blx	r3
	
	shift_can_message_t message;
	message.data = msg.data;
  4010ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4010f0:	9302      	str	r3, [sp, #8]
	message.dataSize = msg.len;
  4010f2:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
  4010f6:	f88d 300c 	strb.w	r3, [sp, #12]
	message.id = msg.id;
  4010fa:	ab18      	add	r3, sp, #96	; 0x60
  4010fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4010fe:	f843 2d5c 	str.w	r2, [r3, #-92]!
	message_received_CAN0(message);
  401102:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  401106:	4b03      	ldr	r3, [pc, #12]	; (401114 <CAN0_RX_CALLBACK+0x34>)
  401108:	4798      	blx	r3
}
  40110a:	b019      	add	sp, #100	; 0x64
  40110c:	f85d fb04 	ldr.w	pc, [sp], #4
  401110:	00400481 	.word	0x00400481
  401114:	0040104d 	.word	0x0040104d

00401118 <CAN1_RX_CALLBACK>:

void CAN1_RX_CALLBACK(struct can_async_descriptor *const descr)
{
  401118:	b500      	push	{lr}
  40111a:	b099      	sub	sp, #100	; 0x64
	struct can_message msg;
	uint8_t data[64];
	msg.data = data;
  40111c:	ab04      	add	r3, sp, #16
  40111e:	9316      	str	r3, [sp, #88]	; 0x58
	can_async_read(descr, &msg);
  401120:	a914      	add	r1, sp, #80	; 0x50
  401122:	4b09      	ldr	r3, [pc, #36]	; (401148 <CAN1_RX_CALLBACK+0x30>)
  401124:	4798      	blx	r3
	
	shift_can_message_t message;
	message.data = msg.data;
  401126:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401128:	9302      	str	r3, [sp, #8]
	message.dataSize = msg.len;
  40112a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
  40112e:	f88d 300c 	strb.w	r3, [sp, #12]
	message.id = msg.id;
  401132:	ab18      	add	r3, sp, #96	; 0x60
  401134:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401136:	f843 2d5c 	str.w	r2, [r3, #-92]!
	message_received_CAN1(message);
  40113a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40113e:	4b03      	ldr	r3, [pc, #12]	; (40114c <CAN1_RX_CALLBACK+0x34>)
  401140:	4798      	blx	r3
}
  401142:	b019      	add	sp, #100	; 0x64
  401144:	f85d fb04 	ldr.w	pc, [sp], #4
  401148:	00400481 	.word	0x00400481
  40114c:	004010d5 	.word	0x004010d5

00401150 <init_can_module>:
{		
  401150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	can_async_init(&module_0, MCAN0);
  401152:	4d10      	ldr	r5, [pc, #64]	; (401194 <init_can_module+0x44>)
  401154:	4910      	ldr	r1, [pc, #64]	; (401198 <init_can_module+0x48>)
  401156:	4628      	mov	r0, r5
  401158:	4e10      	ldr	r6, [pc, #64]	; (40119c <init_can_module+0x4c>)
  40115a:	47b0      	blx	r6
	can_async_init(&module_1, MCAN1);
  40115c:	4c10      	ldr	r4, [pc, #64]	; (4011a0 <init_can_module+0x50>)
  40115e:	4911      	ldr	r1, [pc, #68]	; (4011a4 <init_can_module+0x54>)
  401160:	4620      	mov	r0, r4
  401162:	47b0      	blx	r6
	can_async_register_callback(&module_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN0_RX_CALLBACK);
  401164:	4a10      	ldr	r2, [pc, #64]	; (4011a8 <init_can_module+0x58>)
  401166:	2100      	movs	r1, #0
  401168:	4628      	mov	r0, r5
  40116a:	4e10      	ldr	r6, [pc, #64]	; (4011ac <init_can_module+0x5c>)
  40116c:	47b0      	blx	r6
	can_async_register_callback(&module_1, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN1_RX_CALLBACK);
  40116e:	4a10      	ldr	r2, [pc, #64]	; (4011b0 <init_can_module+0x60>)
  401170:	2100      	movs	r1, #0
  401172:	4620      	mov	r0, r4
  401174:	47b0      	blx	r6
	can_async_register_callback(&module_0, CAN_ASYNC_IRQ_CB, (FUNC_PTR)ERROR_CALLBACK);
  401176:	4f0f      	ldr	r7, [pc, #60]	; (4011b4 <init_can_module+0x64>)
  401178:	463a      	mov	r2, r7
  40117a:	2102      	movs	r1, #2
  40117c:	4628      	mov	r0, r5
  40117e:	47b0      	blx	r6
	can_async_register_callback(&module_1, CAN_ASYNC_IRQ_CB, (FUNC_PTR)ERROR_CALLBACK);
  401180:	463a      	mov	r2, r7
  401182:	2102      	movs	r1, #2
  401184:	4620      	mov	r0, r4
  401186:	47b0      	blx	r6
	can_async_enable(&module_0);
  401188:	4628      	mov	r0, r5
  40118a:	4d0b      	ldr	r5, [pc, #44]	; (4011b8 <init_can_module+0x68>)
  40118c:	47a8      	blx	r5
	can_async_enable(&module_1);
  40118e:	4620      	mov	r0, r4
  401190:	47a8      	blx	r5
  401192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401194:	204002c8 	.word	0x204002c8
  401198:	40030000 	.word	0x40030000
  40119c:	00400409 	.word	0x00400409
  4011a0:	204002f0 	.word	0x204002f0
  4011a4:	40034000 	.word	0x40034000
  4011a8:	004010e1 	.word	0x004010e1
  4011ac:	004004e1 	.word	0x004004e1
  4011b0:	00401119 	.word	0x00401119
  4011b4:	004011bd 	.word	0x004011bd
  4011b8:	00400459 	.word	0x00400459

004011bc <ERROR_CALLBACK>:

void ERROR_CALLBACK(struct can_async_descriptor *const descr)
{
  4011bc:	b508      	push	{r3, lr}
	init_can_module();
  4011be:	4b01      	ldr	r3, [pc, #4]	; (4011c4 <ERROR_CALLBACK+0x8>)
  4011c0:	4798      	blx	r3
  4011c2:	bd08      	pop	{r3, pc}
  4011c4:	00401151 	.word	0x00401151

004011c8 <checkMessage>:
	uint32_t id = message->id;
  4011c8:	6802      	ldr	r2, [r0, #0]
	uint8_t* data = message->data;
  4011ca:	6841      	ldr	r1, [r0, #4]
	uint8_t dataSize = message->dataSize;
  4011cc:	7a03      	ldrb	r3, [r0, #8]
	if(id && data && dataSize && dataSize <= 64 && id < 0x7FF)
  4011ce:	2a00      	cmp	r2, #0
  4011d0:	bf18      	it	ne
  4011d2:	2900      	cmpne	r1, #0
  4011d4:	d009      	beq.n	4011ea <checkMessage+0x22>
  4011d6:	3b01      	subs	r3, #1
  4011d8:	b2db      	uxtb	r3, r3
  4011da:	2b3f      	cmp	r3, #63	; 0x3f
  4011dc:	d807      	bhi.n	4011ee <checkMessage+0x26>
  4011de:	f240 73fe 	movw	r3, #2046	; 0x7fe
  4011e2:	429a      	cmp	r2, r3
  4011e4:	d905      	bls.n	4011f2 <checkMessage+0x2a>
	return 0;
  4011e6:	2000      	movs	r0, #0
  4011e8:	4770      	bx	lr
  4011ea:	2000      	movs	r0, #0
  4011ec:	4770      	bx	lr
  4011ee:	2000      	movs	r0, #0
  4011f0:	4770      	bx	lr
		return 1;
  4011f2:	2001      	movs	r0, #1
}
  4011f4:	4770      	bx	lr
	...

004011f8 <send_message_module_0>:
{
  4011f8:	b510      	push	{r4, lr}
  4011fa:	b084      	sub	sp, #16
  4011fc:	4604      	mov	r4, r0
	if (checkMessage(message))
  4011fe:	4b0b      	ldr	r3, [pc, #44]	; (40122c <send_message_module_0+0x34>)
  401200:	4798      	blx	r3
  401202:	b908      	cbnz	r0, 401208 <send_message_module_0+0x10>
}
  401204:	b004      	add	sp, #16
  401206:	bd10      	pop	{r4, pc}
		msg.id = message->id;
  401208:	6823      	ldr	r3, [r4, #0]
  40120a:	9300      	str	r3, [sp, #0]
		msg.type = CAN_TYPE_DATA;
  40120c:	2300      	movs	r3, #0
  40120e:	f88d 3004 	strb.w	r3, [sp, #4]
		msg.data = message->data;
  401212:	6862      	ldr	r2, [r4, #4]
  401214:	9202      	str	r2, [sp, #8]
		msg.len = message->dataSize;
  401216:	7a22      	ldrb	r2, [r4, #8]
  401218:	f88d 200c 	strb.w	r2, [sp, #12]
		msg.fmt  = CAN_FMT_STDID;
  40121c:	f88d 300d 	strb.w	r3, [sp, #13]
		can_async_write(&module_0, &msg);
  401220:	4669      	mov	r1, sp
  401222:	4803      	ldr	r0, [pc, #12]	; (401230 <send_message_module_0+0x38>)
  401224:	4b03      	ldr	r3, [pc, #12]	; (401234 <send_message_module_0+0x3c>)
  401226:	4798      	blx	r3
}
  401228:	e7ec      	b.n	401204 <send_message_module_0+0xc>
  40122a:	bf00      	nop
  40122c:	004011c9 	.word	0x004011c9
  401230:	204002c8 	.word	0x204002c8
  401234:	004004b1 	.word	0x004004b1

00401238 <checkIndex>:
	if (index < 64)
  401238:	283f      	cmp	r0, #63	; 0x3f
  40123a:	d901      	bls.n	401240 <checkIndex+0x8>
	return 0;
  40123c:	2000      	movs	r0, #0
}
  40123e:	4770      	bx	lr
		return 1;
  401240:	2001      	movs	r0, #1
  401242:	4770      	bx	lr

00401244 <add_single_filter_module_0>:
{
  401244:	b530      	push	{r4, r5, lr}
  401246:	b083      	sub	sp, #12
  401248:	4605      	mov	r5, r0
  40124a:	460c      	mov	r4, r1
	if(checkIndex(index))
  40124c:	4608      	mov	r0, r1
  40124e:	4b07      	ldr	r3, [pc, #28]	; (40126c <add_single_filter_module_0+0x28>)
  401250:	4798      	blx	r3
  401252:	b908      	cbnz	r0, 401258 <add_single_filter_module_0+0x14>
}
  401254:	b003      	add	sp, #12
  401256:	bd30      	pop	{r4, r5, pc}
		filter.id = id;
  401258:	9500      	str	r5, [sp, #0]
		filter.mask = 0;
  40125a:	2200      	movs	r2, #0
  40125c:	9201      	str	r2, [sp, #4]
		can_async_set_filter(&module_0, index, CAN_FMT_STDID, &filter);
  40125e:	466b      	mov	r3, sp
  401260:	4621      	mov	r1, r4
  401262:	4803      	ldr	r0, [pc, #12]	; (401270 <add_single_filter_module_0+0x2c>)
  401264:	4c03      	ldr	r4, [pc, #12]	; (401274 <add_single_filter_module_0+0x30>)
  401266:	47a0      	blx	r4
}
  401268:	e7f4      	b.n	401254 <add_single_filter_module_0+0x10>
  40126a:	bf00      	nop
  40126c:	00401239 	.word	0x00401239
  401270:	204002c8 	.word	0x204002c8
  401274:	00400531 	.word	0x00400531

00401278 <__libc_init_array>:
  401278:	b570      	push	{r4, r5, r6, lr}
  40127a:	4e0d      	ldr	r6, [pc, #52]	; (4012b0 <__libc_init_array+0x38>)
  40127c:	4c0d      	ldr	r4, [pc, #52]	; (4012b4 <__libc_init_array+0x3c>)
  40127e:	1ba4      	subs	r4, r4, r6
  401280:	10a4      	asrs	r4, r4, #2
  401282:	2500      	movs	r5, #0
  401284:	42a5      	cmp	r5, r4
  401286:	d109      	bne.n	40129c <__libc_init_array+0x24>
  401288:	4e0b      	ldr	r6, [pc, #44]	; (4012b8 <__libc_init_array+0x40>)
  40128a:	4c0c      	ldr	r4, [pc, #48]	; (4012bc <__libc_init_array+0x44>)
  40128c:	f000 f860 	bl	401350 <_init>
  401290:	1ba4      	subs	r4, r4, r6
  401292:	10a4      	asrs	r4, r4, #2
  401294:	2500      	movs	r5, #0
  401296:	42a5      	cmp	r5, r4
  401298:	d105      	bne.n	4012a6 <__libc_init_array+0x2e>
  40129a:	bd70      	pop	{r4, r5, r6, pc}
  40129c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4012a0:	4798      	blx	r3
  4012a2:	3501      	adds	r5, #1
  4012a4:	e7ee      	b.n	401284 <__libc_init_array+0xc>
  4012a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4012aa:	4798      	blx	r3
  4012ac:	3501      	adds	r5, #1
  4012ae:	e7f2      	b.n	401296 <__libc_init_array+0x1e>
  4012b0:	0040135c 	.word	0x0040135c
  4012b4:	0040135c 	.word	0x0040135c
  4012b8:	0040135c 	.word	0x0040135c
  4012bc:	00401360 	.word	0x00401360

004012c0 <memcpy>:
  4012c0:	b510      	push	{r4, lr}
  4012c2:	1e43      	subs	r3, r0, #1
  4012c4:	440a      	add	r2, r1
  4012c6:	4291      	cmp	r1, r2
  4012c8:	d100      	bne.n	4012cc <memcpy+0xc>
  4012ca:	bd10      	pop	{r4, pc}
  4012cc:	f811 4b01 	ldrb.w	r4, [r1], #1
  4012d0:	f803 4f01 	strb.w	r4, [r3, #1]!
  4012d4:	e7f7      	b.n	4012c6 <memcpy+0x6>
  4012d6:	0000      	movs	r0, r0
  4012d8:	682f2e2e 	.word	0x682f2e2e
  4012dc:	732f6c61 	.word	0x732f6c61
  4012e0:	682f6372 	.word	0x682f6372
  4012e4:	635f6c61 	.word	0x635f6c61
  4012e8:	615f6e61 	.word	0x615f6e61
  4012ec:	636e7973 	.word	0x636e7973
  4012f0:	0000632e 	.word	0x0000632e
  4012f4:	682f2e2e 	.word	0x682f2e2e
  4012f8:	732f6c61 	.word	0x732f6c61
  4012fc:	682f6372 	.word	0x682f6372
  401300:	745f6c61 	.word	0x745f6c61
  401304:	72656d69 	.word	0x72656d69
  401308:	0000632e 	.word	0x0000632e
  40130c:	682f2e2e 	.word	0x682f2e2e
  401310:	752f6c61 	.word	0x752f6c61
  401314:	736c6974 	.word	0x736c6974
  401318:	6372732f 	.word	0x6372732f
  40131c:	6974752f 	.word	0x6974752f
  401320:	6c5f736c 	.word	0x6c5f736c
  401324:	2e747369 	.word	0x2e747369
  401328:	00000063 	.word	0x00000063
  40132c:	03020100 	.word	0x03020100
  401330:	07060504 	.word	0x07060504
  401334:	14100c08 	.word	0x14100c08
  401338:	40302018 	.word	0x40302018
  40133c:	682f2e2e 	.word	0x682f2e2e
  401340:	742f6c70 	.word	0x742f6c70
  401344:	70682f63 	.word	0x70682f63
  401348:	63745f6c 	.word	0x63745f6c
  40134c:	0000632e 	.word	0x0000632e

00401350 <_init>:
  401350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401352:	bf00      	nop
  401354:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401356:	bc08      	pop	{r3}
  401358:	469e      	mov	lr, r3
  40135a:	4770      	bx	lr

0040135c <__init_array_start>:
  40135c:	0040018d 	.word	0x0040018d

00401360 <_fini>:
  401360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401362:	bf00      	nop
  401364:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401366:	bc08      	pop	{r3}
  401368:	469e      	mov	lr, r3
  40136a:	4770      	bx	lr

0040136c <__fini_array_start>:
  40136c:	00400169 	.word	0x00400169
