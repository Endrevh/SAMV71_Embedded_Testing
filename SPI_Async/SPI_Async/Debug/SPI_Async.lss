
SPI_Async.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d20  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20400000  00401d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  20400064  00401d84  00020064  2**2
                  ALLOC
  3 .heap         00000200  204000f0  00401e10  00020064  2**0
                  ALLOC
  4 .stack        00000400  204002f0  00402010  00020064  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001269f  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002aad  00000000  00000000  0003278a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006568  00000000  00000000  00035237  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008c0  00000000  00000000  0003b79f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007e0  00000000  00000000  0003c05f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003f2f1  00000000  00000000  0003c83f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011389  00000000  00000000  0007bb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00146699  00000000  00000000  0008ceb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001c38  00000000  00000000  001d3554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 06 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     ..@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40006c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 d9 0a 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400064 	.word	0x20400064
  400184:	00000000 	.word	0x00000000
  400188:	00401d20 	.word	0x00401d20

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00401d20 	.word	0x00401d20
  4001c8:	20400068 	.word	0x20400068
  4001cc:	00401d20 	.word	0x00401d20
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400391 	.word	0x00400391
  4001e4:	00401119 	.word	0x00401119

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	00401d20 	.word	0x00401d20
  400238:	20400064 	.word	0x20400064
  40023c:	20400064 	.word	0x20400064
  400240:	204000f0 	.word	0x204000f0
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	00401139 	.word	0x00401139
  400250:	00401039 	.word	0x00401039

00400254 <SPI_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400254:	4b11      	ldr	r3, [pc, #68]	; (40029c <SPI_0_PORT_init+0x48>)
  400256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400258:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40025c:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40025e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400260:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400264:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400266:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40026a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40026c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40026e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  400272:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400274:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400276:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40027a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40027c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400280:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400284:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  400288:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40028a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40028c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  400290:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400292:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400296:	605a      	str	r2, [r3, #4]
  400298:	4770      	bx	lr
  40029a:	bf00      	nop
  40029c:	400e1400 	.word	0x400e1400

004002a0 <SPI_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002a0:	4b04      	ldr	r3, [pc, #16]	; (4002b4 <SPI_0_CLOCK_init+0x14>)
  4002a2:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4002a4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4002a8:	d103      	bne.n	4002b2 <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002ae:	4b01      	ldr	r3, [pc, #4]	; (4002b4 <SPI_0_CLOCK_init+0x14>)
  4002b0:	611a      	str	r2, [r3, #16]
  4002b2:	4770      	bx	lr
  4002b4:	400e0600 	.word	0x400e0600

004002b8 <SPI_0_init>:
{
	_pmc_enable_periph_clock(ID_SPI0);
}

void SPI_0_init(void)
{
  4002b8:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4002ba:	4b08      	ldr	r3, [pc, #32]	; (4002dc <SPI_0_init+0x24>)
  4002bc:	4798      	blx	r3
	spi_m_async_set_func_ptr(&SPI_0, _spi_get_spi_m_async());
  4002be:	4b08      	ldr	r3, [pc, #32]	; (4002e0 <SPI_0_init+0x28>)
  4002c0:	4798      	blx	r3
  4002c2:	4c08      	ldr	r4, [pc, #32]	; (4002e4 <SPI_0_init+0x2c>)
  4002c4:	4601      	mov	r1, r0
  4002c6:	4620      	mov	r0, r4
  4002c8:	4b07      	ldr	r3, [pc, #28]	; (4002e8 <SPI_0_init+0x30>)
  4002ca:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SPI0);
  4002cc:	4907      	ldr	r1, [pc, #28]	; (4002ec <SPI_0_init+0x34>)
  4002ce:	4620      	mov	r0, r4
  4002d0:	4b07      	ldr	r3, [pc, #28]	; (4002f0 <SPI_0_init+0x38>)
  4002d2:	4798      	blx	r3
	SPI_0_PORT_init();
  4002d4:	4b07      	ldr	r3, [pc, #28]	; (4002f4 <SPI_0_init+0x3c>)
  4002d6:	4798      	blx	r3
  4002d8:	bd10      	pop	{r4, pc}
  4002da:	bf00      	nop
  4002dc:	004002a1 	.word	0x004002a1
  4002e0:	00400dbd 	.word	0x00400dbd
  4002e4:	204000a4 	.word	0x204000a4
  4002e8:	00400635 	.word	0x00400635
  4002ec:	40008000 	.word	0x40008000
  4002f0:	00400655 	.word	0x00400655
  4002f4:	00400255 	.word	0x00400255

004002f8 <TARGET_IO_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002f8:	4b0f      	ldr	r3, [pc, #60]	; (400338 <TARGET_IO_PORT_init+0x40>)
  4002fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002fc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400300:	671a      	str	r2, [r3, #112]	; 0x70
  400302:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400304:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400308:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40030a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40030e:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400310:	4a0a      	ldr	r2, [pc, #40]	; (40033c <TARGET_IO_PORT_init+0x44>)
  400312:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400316:	f043 0310 	orr.w	r3, r3, #16
  40031a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40031e:	4b08      	ldr	r3, [pc, #32]	; (400340 <TARGET_IO_PORT_init+0x48>)
  400320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400322:	f042 0210 	orr.w	r2, r2, #16
  400326:	671a      	str	r2, [r3, #112]	; 0x70
  400328:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40032a:	f042 0210 	orr.w	r2, r2, #16
  40032e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400330:	2210      	movs	r2, #16
  400332:	605a      	str	r2, [r3, #4]
  400334:	4770      	bx	lr
  400336:	bf00      	nop
  400338:	400e0e00 	.word	0x400e0e00
  40033c:	40088000 	.word	0x40088000
  400340:	400e1000 	.word	0x400e1000

00400344 <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400344:	4b04      	ldr	r3, [pc, #16]	; (400358 <TARGET_IO_CLOCK_init+0x14>)
  400346:	699b      	ldr	r3, [r3, #24]
  400348:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40034c:	d103      	bne.n	400356 <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40034e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400352:	4b01      	ldr	r3, [pc, #4]	; (400358 <TARGET_IO_CLOCK_init+0x14>)
  400354:	611a      	str	r2, [r3, #16]
  400356:	4770      	bx	lr
  400358:	400e0600 	.word	0x400e0600

0040035c <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void TARGET_IO_init(void)
{
  40035c:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  40035e:	4b06      	ldr	r3, [pc, #24]	; (400378 <TARGET_IO_init+0x1c>)
  400360:	4798      	blx	r3
	TARGET_IO_PORT_init();
  400362:	4b06      	ldr	r3, [pc, #24]	; (40037c <TARGET_IO_init+0x20>)
  400364:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, USART1, _usart_get_usart_sync());
  400366:	4b06      	ldr	r3, [pc, #24]	; (400380 <TARGET_IO_init+0x24>)
  400368:	4798      	blx	r3
  40036a:	4602      	mov	r2, r0
  40036c:	4905      	ldr	r1, [pc, #20]	; (400384 <TARGET_IO_init+0x28>)
  40036e:	4806      	ldr	r0, [pc, #24]	; (400388 <TARGET_IO_init+0x2c>)
  400370:	4b06      	ldr	r3, [pc, #24]	; (40038c <TARGET_IO_init+0x30>)
  400372:	4798      	blx	r3
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	00400345 	.word	0x00400345
  40037c:	004002f9 	.word	0x004002f9
  400380:	00400fd5 	.word	0x00400fd5
  400384:	40028000 	.word	0x40028000
  400388:	20400098 	.word	0x20400098
  40038c:	00400841 	.word	0x00400841

00400390 <system_init>:
}

void system_init(void)
{
  400390:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400392:	4b06      	ldr	r3, [pc, #24]	; (4003ac <system_init+0x1c>)
  400394:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400396:	4a06      	ldr	r2, [pc, #24]	; (4003b0 <system_init+0x20>)
  400398:	6853      	ldr	r3, [r2, #4]
  40039a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40039e:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_0_init();
  4003a0:	4b04      	ldr	r3, [pc, #16]	; (4003b4 <system_init+0x24>)
  4003a2:	4798      	blx	r3

	TARGET_IO_init();
  4003a4:	4b04      	ldr	r3, [pc, #16]	; (4003b8 <system_init+0x28>)
  4003a6:	4798      	blx	r3
  4003a8:	bd08      	pop	{r3, pc}
  4003aa:	bf00      	nop
  4003ac:	00400911 	.word	0x00400911
  4003b0:	400e1850 	.word	0x400e1850
  4003b4:	004002b9 	.word	0x004002b9
  4003b8:	0040035d 	.word	0x0040035d

004003bc <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003bc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4003c0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4003c2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4003c4:	f3bf 8f5f 	dmb	sy
  4003c8:	4770      	bx	lr

004003ca <atomic_leave_critical>:
  4003ca:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4003ce:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4003d0:	f383 8810 	msr	PRIMASK, r3
  4003d4:	4770      	bx	lr
	...

004003d8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4003d8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4003da:	4b04      	ldr	r3, [pc, #16]	; (4003ec <delay_ms+0x14>)
  4003dc:	681c      	ldr	r4, [r3, #0]
  4003de:	4b04      	ldr	r3, [pc, #16]	; (4003f0 <delay_ms+0x18>)
  4003e0:	4798      	blx	r3
  4003e2:	4601      	mov	r1, r0
  4003e4:	4620      	mov	r0, r4
  4003e6:	4b03      	ldr	r3, [pc, #12]	; (4003f4 <delay_ms+0x1c>)
  4003e8:	4798      	blx	r3
  4003ea:	bd10      	pop	{r4, pc}
  4003ec:	20400080 	.word	0x20400080
  4003f0:	004008f9 	.word	0x004008f9
  4003f4:	0040090b 	.word	0x0040090b

004003f8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4003f8:	b570      	push	{r4, r5, r6, lr}
  4003fa:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4003fc:	4604      	mov	r4, r0
  4003fe:	460d      	mov	r5, r1
  400400:	2800      	cmp	r0, #0
  400402:	bf18      	it	ne
  400404:	2900      	cmpne	r1, #0
  400406:	bf14      	ite	ne
  400408:	2001      	movne	r0, #1
  40040a:	2000      	moveq	r0, #0
  40040c:	2234      	movs	r2, #52	; 0x34
  40040e:	4904      	ldr	r1, [pc, #16]	; (400420 <io_write+0x28>)
  400410:	4b04      	ldr	r3, [pc, #16]	; (400424 <io_write+0x2c>)
  400412:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400414:	6823      	ldr	r3, [r4, #0]
  400416:	4632      	mov	r2, r6
  400418:	4629      	mov	r1, r5
  40041a:	4620      	mov	r0, r4
  40041c:	4798      	blx	r3
}
  40041e:	bd70      	pop	{r4, r5, r6, pc}
  400420:	00401be8 	.word	0x00401be8
  400424:	004008b5 	.word	0x004008b5

00400428 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400428:	b570      	push	{r4, r5, r6, lr}
  40042a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40042c:	4604      	mov	r4, r0
  40042e:	460d      	mov	r5, r1
  400430:	2800      	cmp	r0, #0
  400432:	bf18      	it	ne
  400434:	2900      	cmpne	r1, #0
  400436:	bf14      	ite	ne
  400438:	2001      	movne	r0, #1
  40043a:	2000      	moveq	r0, #0
  40043c:	223d      	movs	r2, #61	; 0x3d
  40043e:	4904      	ldr	r1, [pc, #16]	; (400450 <io_read+0x28>)
  400440:	4b04      	ldr	r3, [pc, #16]	; (400454 <io_read+0x2c>)
  400442:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400444:	6863      	ldr	r3, [r4, #4]
  400446:	4632      	mov	r2, r6
  400448:	4629      	mov	r1, r5
  40044a:	4620      	mov	r0, r4
  40044c:	4798      	blx	r3
}
  40044e:	bd70      	pop	{r4, r5, r6, pc}
  400450:	00401be8 	.word	0x00401be8
  400454:	004008b5 	.word	0x004008b5

00400458 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
  400458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40045a:	460f      	mov	r7, r1
  40045c:	4616      	mov	r6, r2
	ASSERT(io);
  40045e:	4604      	mov	r4, r0
  400460:	f240 1227 	movw	r2, #295	; 0x127
  400464:	4909      	ldr	r1, [pc, #36]	; (40048c <_spi_m_async_io_write+0x34>)
  400466:	3000      	adds	r0, #0
  400468:	bf18      	it	ne
  40046a:	2001      	movne	r0, #1
  40046c:	4b08      	ldr	r3, [pc, #32]	; (400490 <_spi_m_async_io_write+0x38>)
  40046e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
  400470:	2500      	movs	r5, #0
  400472:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
  400474:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
  400476:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
  400478:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
  40047a:	2310      	movs	r3, #16
  40047c:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
  40047e:	2101      	movs	r1, #1
  400480:	f1a4 0020 	sub.w	r0, r4, #32
  400484:	4b03      	ldr	r3, [pc, #12]	; (400494 <_spi_m_async_io_write+0x3c>)
  400486:	4798      	blx	r3

	return ERR_NONE;
}
  400488:	4628      	mov	r0, r5
  40048a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40048c:	00401bfc 	.word	0x00401bfc
  400490:	004008b5 	.word	0x004008b5
  400494:	00400c3d 	.word	0x00400c3d

00400498 <_spi_m_async_io_read>:
{
  400498:	b570      	push	{r4, r5, r6, lr}
  40049a:	460d      	mov	r5, r1
  40049c:	4616      	mov	r6, r2
	ASSERT(io);
  40049e:	4604      	mov	r4, r0
  4004a0:	f240 1205 	movw	r2, #261	; 0x105
  4004a4:	490c      	ldr	r1, [pc, #48]	; (4004d8 <_spi_m_async_io_read+0x40>)
  4004a6:	3000      	adds	r0, #0
  4004a8:	bf18      	it	ne
  4004aa:	2001      	movne	r0, #1
  4004ac:	4b0b      	ldr	r3, [pc, #44]	; (4004dc <_spi_m_async_io_read+0x44>)
  4004ae:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
  4004b0:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
  4004b2:	2500      	movs	r5, #0
  4004b4:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
  4004b6:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
  4004b8:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
  4004ba:	2310      	movs	r3, #16
  4004bc:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
  4004be:	3c20      	subs	r4, #32
  4004c0:	2101      	movs	r1, #1
  4004c2:	4620      	mov	r0, r4
  4004c4:	4b06      	ldr	r3, [pc, #24]	; (4004e0 <_spi_m_async_io_read+0x48>)
  4004c6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
  4004c8:	f240 11ff 	movw	r1, #511	; 0x1ff
  4004cc:	4620      	mov	r0, r4
  4004ce:	4b05      	ldr	r3, [pc, #20]	; (4004e4 <_spi_m_async_io_read+0x4c>)
  4004d0:	4798      	blx	r3
}
  4004d2:	4628      	mov	r0, r5
  4004d4:	bd70      	pop	{r4, r5, r6, pc}
  4004d6:	bf00      	nop
  4004d8:	00401bfc 	.word	0x00401bfc
  4004dc:	004008b5 	.word	0x004008b5
  4004e0:	00400c71 	.word	0x00400c71
  4004e4:	00400cf5 	.word	0x00400cf5

004004e8 <_spi_dev_error>:
{
  4004e8:	b570      	push	{r4, r5, r6, lr}
  4004ea:	4604      	mov	r4, r0
  4004ec:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
  4004ee:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
  4004f0:	2100      	movs	r1, #0
  4004f2:	4b09      	ldr	r3, [pc, #36]	; (400518 <_spi_dev_error+0x30>)
  4004f4:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
  4004f6:	2100      	movs	r1, #0
  4004f8:	4620      	mov	r0, r4
  4004fa:	4b08      	ldr	r3, [pc, #32]	; (40051c <_spi_dev_error+0x34>)
  4004fc:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
  4004fe:	2100      	movs	r1, #0
  400500:	4620      	mov	r0, r4
  400502:	4b07      	ldr	r3, [pc, #28]	; (400520 <_spi_dev_error+0x38>)
  400504:	4798      	blx	r3
	spi->stat = 0;
  400506:	2300      	movs	r3, #0
  400508:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
  40050c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40050e:	b113      	cbz	r3, 400516 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
  400510:	4631      	mov	r1, r6
  400512:	4628      	mov	r0, r5
  400514:	4798      	blx	r3
  400516:	bd70      	pop	{r4, r5, r6, pc}
  400518:	00400c3d 	.word	0x00400c3d
  40051c:	00400c71 	.word	0x00400c71
  400520:	00400cb1 	.word	0x00400cb1

00400524 <_spi_dev_complete>:
{
  400524:	b538      	push	{r3, r4, r5, lr}
	if (spi->xfercnt >= spi->xfer.size) {
  400526:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400528:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  40052a:	429a      	cmp	r2, r3
  40052c:	d200      	bcs.n	400530 <_spi_dev_complete+0xc>
  40052e:	bd38      	pop	{r3, r4, r5, pc}
  400530:	1f05      	subs	r5, r0, #4
  400532:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
  400534:	2100      	movs	r1, #0
  400536:	4b05      	ldr	r3, [pc, #20]	; (40054c <_spi_dev_complete+0x28>)
  400538:	4798      	blx	r3
		spi->stat = 0;
  40053a:	2300      	movs	r3, #0
  40053c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
  400540:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  400542:	2b00      	cmp	r3, #0
  400544:	d0f3      	beq.n	40052e <_spi_dev_complete+0xa>
			spi->callbacks.cb_xfer(spi);
  400546:	4628      	mov	r0, r5
  400548:	4798      	blx	r3
}
  40054a:	e7f0      	b.n	40052e <_spi_dev_complete+0xa>
  40054c:	00400cb1 	.word	0x00400cb1

00400550 <_spi_dev_tx>:
{
  400550:	b510      	push	{r4, lr}
  400552:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
  400554:	7903      	ldrb	r3, [r0, #4]
  400556:	2b01      	cmp	r3, #1
  400558:	d90c      	bls.n	400574 <_spi_dev_tx+0x24>
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
  40055a:	6b42      	ldr	r2, [r0, #52]	; 0x34
  40055c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40055e:	1c59      	adds	r1, r3, #1
  400560:	6401      	str	r1, [r0, #64]	; 0x40
  400562:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  400566:	4b0c      	ldr	r3, [pc, #48]	; (400598 <_spi_dev_tx+0x48>)
  400568:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
  40056a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40056c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40056e:	429a      	cmp	r2, r3
  400570:	d008      	beq.n	400584 <_spi_dev_tx+0x34>
  400572:	bd10      	pop	{r4, pc}
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
  400574:	6b42      	ldr	r2, [r0, #52]	; 0x34
  400576:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400578:	1c59      	adds	r1, r3, #1
  40057a:	6401      	str	r1, [r0, #64]	; 0x40
  40057c:	5cd1      	ldrb	r1, [r2, r3]
  40057e:	4b06      	ldr	r3, [pc, #24]	; (400598 <_spi_dev_tx+0x48>)
  400580:	4798      	blx	r3
  400582:	e7f2      	b.n	40056a <_spi_dev_tx+0x1a>
		_spi_m_async_enable_tx(dev, false);
  400584:	2100      	movs	r1, #0
  400586:	4620      	mov	r0, r4
  400588:	4b04      	ldr	r3, [pc, #16]	; (40059c <_spi_dev_tx+0x4c>)
  40058a:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
  40058c:	2101      	movs	r1, #1
  40058e:	4620      	mov	r0, r4
  400590:	4b03      	ldr	r3, [pc, #12]	; (4005a0 <_spi_dev_tx+0x50>)
  400592:	4798      	blx	r3
}
  400594:	e7ed      	b.n	400572 <_spi_dev_tx+0x22>
  400596:	bf00      	nop
  400598:	00400cf5 	.word	0x00400cf5
  40059c:	00400c3d 	.word	0x00400c3d
  4005a0:	00400cb1 	.word	0x00400cb1

004005a4 <_spi_dev_rx>:
{
  4005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005a6:	4604      	mov	r4, r0
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
  4005a8:	1f07      	subs	r7, r0, #4
	if (spi->xfer.rxbuf) {
  4005aa:	6b85      	ldr	r5, [r0, #56]	; 0x38
  4005ac:	b1fd      	cbz	r5, 4005ee <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
  4005ae:	7903      	ldrb	r3, [r0, #4]
  4005b0:	2b01      	cmp	r3, #1
  4005b2:	d915      	bls.n	4005e0 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
  4005b4:	6c06      	ldr	r6, [r0, #64]	; 0x40
  4005b6:	1c73      	adds	r3, r6, #1
  4005b8:	6403      	str	r3, [r0, #64]	; 0x40
  4005ba:	4b1b      	ldr	r3, [pc, #108]	; (400628 <_spi_dev_rx+0x84>)
  4005bc:	4798      	blx	r3
  4005be:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
  4005c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4005c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4005c6:	4293      	cmp	r3, r2
  4005c8:	d221      	bcs.n	40060e <_spi_dev_rx+0x6a>
		if (spi->xfer.txbuf) {
  4005ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
  4005cc:	b1d2      	cbz	r2, 400604 <_spi_dev_rx+0x60>
			if (!(dev->char_size > 1)) {
  4005ce:	7921      	ldrb	r1, [r4, #4]
  4005d0:	2901      	cmp	r1, #1
  4005d2:	d912      	bls.n	4005fa <_spi_dev_rx+0x56>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
  4005d4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  4005d8:	4620      	mov	r0, r4
  4005da:	4b14      	ldr	r3, [pc, #80]	; (40062c <_spi_dev_rx+0x88>)
  4005dc:	4798      	blx	r3
  4005de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
  4005e0:	6c06      	ldr	r6, [r0, #64]	; 0x40
  4005e2:	1c73      	adds	r3, r6, #1
  4005e4:	6403      	str	r3, [r0, #64]	; 0x40
  4005e6:	4b10      	ldr	r3, [pc, #64]	; (400628 <_spi_dev_rx+0x84>)
  4005e8:	4798      	blx	r3
  4005ea:	55a8      	strb	r0, [r5, r6]
  4005ec:	e7e9      	b.n	4005c2 <_spi_dev_rx+0x1e>
		_spi_m_async_read_one(dev);
  4005ee:	4b0e      	ldr	r3, [pc, #56]	; (400628 <_spi_dev_rx+0x84>)
  4005f0:	4798      	blx	r3
		spi->xfercnt++;
  4005f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4005f4:	3301      	adds	r3, #1
  4005f6:	6423      	str	r3, [r4, #64]	; 0x40
  4005f8:	e7e3      	b.n	4005c2 <_spi_dev_rx+0x1e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
  4005fa:	5cd1      	ldrb	r1, [r2, r3]
  4005fc:	4620      	mov	r0, r4
  4005fe:	4b0b      	ldr	r3, [pc, #44]	; (40062c <_spi_dev_rx+0x88>)
  400600:	4798      	blx	r3
  400602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_spi_m_async_write_one(dev, dev->dummy_byte);
  400604:	88e1      	ldrh	r1, [r4, #6]
  400606:	4620      	mov	r0, r4
  400608:	4b08      	ldr	r3, [pc, #32]	; (40062c <_spi_dev_rx+0x88>)
  40060a:	4798      	blx	r3
  40060c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_enable_rx(dev, false);
  40060e:	2100      	movs	r1, #0
  400610:	4620      	mov	r0, r4
  400612:	4b07      	ldr	r3, [pc, #28]	; (400630 <_spi_dev_rx+0x8c>)
  400614:	4798      	blx	r3
		spi->stat = 0;
  400616:	2300      	movs	r3, #0
  400618:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
  40061c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40061e:	b10b      	cbz	r3, 400624 <_spi_dev_rx+0x80>
			spi->callbacks.cb_xfer(spi);
  400620:	4638      	mov	r0, r7
  400622:	4798      	blx	r3
  400624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400626:	bf00      	nop
  400628:	00400d25 	.word	0x00400d25
  40062c:	00400cf5 	.word	0x00400cf5
  400630:	00400c71 	.word	0x00400c71

00400634 <spi_m_async_set_func_ptr>:
{
  400634:	b538      	push	{r3, r4, r5, lr}
  400636:	460d      	mov	r5, r1
	ASSERT(spi);
  400638:	4604      	mov	r4, r0
  40063a:	229e      	movs	r2, #158	; 0x9e
  40063c:	4903      	ldr	r1, [pc, #12]	; (40064c <spi_m_async_set_func_ptr+0x18>)
  40063e:	3000      	adds	r0, #0
  400640:	bf18      	it	ne
  400642:	2001      	movne	r0, #1
  400644:	4b02      	ldr	r3, [pc, #8]	; (400650 <spi_m_async_set_func_ptr+0x1c>)
  400646:	4798      	blx	r3
	spi->func = (struct _spi_m_async_hpl_interface *)func;
  400648:	6025      	str	r5, [r4, #0]
  40064a:	bd38      	pop	{r3, r4, r5, pc}
  40064c:	00401bfc 	.word	0x00401bfc
  400650:	004008b5 	.word	0x004008b5

00400654 <spi_m_async_init>:
{
  400654:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi && hw);
  400656:	4605      	mov	r5, r0
  400658:	460e      	mov	r6, r1
  40065a:	2800      	cmp	r0, #0
  40065c:	bf18      	it	ne
  40065e:	2900      	cmpne	r1, #0
  400660:	bf14      	ite	ne
  400662:	2001      	movne	r0, #1
  400664:	2000      	moveq	r0, #0
  400666:	22a5      	movs	r2, #165	; 0xa5
  400668:	4911      	ldr	r1, [pc, #68]	; (4006b0 <spi_m_async_init+0x5c>)
  40066a:	4b12      	ldr	r3, [pc, #72]	; (4006b4 <spi_m_async_init+0x60>)
  40066c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  40066e:	462c      	mov	r4, r5
  400670:	f844 6f04 	str.w	r6, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
  400674:	4631      	mov	r1, r6
  400676:	4620      	mov	r0, r4
  400678:	4b0f      	ldr	r3, [pc, #60]	; (4006b8 <spi_m_async_init+0x64>)
  40067a:	4798      	blx	r3
	if (rc >= 0) {
  40067c:	2800      	cmp	r0, #0
  40067e:	db15      	blt.n	4006ac <spi_m_async_init+0x58>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
  400680:	4a0e      	ldr	r2, [pc, #56]	; (4006bc <spi_m_async_init+0x68>)
  400682:	2100      	movs	r1, #0
  400684:	4620      	mov	r0, r4
  400686:	4e0e      	ldr	r6, [pc, #56]	; (4006c0 <spi_m_async_init+0x6c>)
  400688:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
  40068a:	4a0e      	ldr	r2, [pc, #56]	; (4006c4 <spi_m_async_init+0x70>)
  40068c:	2101      	movs	r1, #1
  40068e:	4620      	mov	r0, r4
  400690:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
  400692:	4a0d      	ldr	r2, [pc, #52]	; (4006c8 <spi_m_async_init+0x74>)
  400694:	2102      	movs	r1, #2
  400696:	4620      	mov	r0, r4
  400698:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
  40069a:	4a0c      	ldr	r2, [pc, #48]	; (4006cc <spi_m_async_init+0x78>)
  40069c:	2103      	movs	r1, #3
  40069e:	4620      	mov	r0, r4
  4006a0:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
  4006a2:	4b0b      	ldr	r3, [pc, #44]	; (4006d0 <spi_m_async_init+0x7c>)
  4006a4:	62ab      	str	r3, [r5, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
  4006a6:	4b0b      	ldr	r3, [pc, #44]	; (4006d4 <spi_m_async_init+0x80>)
  4006a8:	626b      	str	r3, [r5, #36]	; 0x24
	return ERR_NONE;
  4006aa:	2000      	movs	r0, #0
}
  4006ac:	bd70      	pop	{r4, r5, r6, pc}
  4006ae:	bf00      	nop
  4006b0:	00401bfc 	.word	0x00401bfc
  4006b4:	004008b5 	.word	0x004008b5
  4006b8:	00400b95 	.word	0x00400b95
  4006bc:	00400551 	.word	0x00400551
  4006c0:	00400d55 	.word	0x00400d55
  4006c4:	004005a5 	.word	0x004005a5
  4006c8:	00400525 	.word	0x00400525
  4006cc:	004004e9 	.word	0x004004e9
  4006d0:	00400499 	.word	0x00400499
  4006d4:	00400459 	.word	0x00400459

004006d8 <spi_m_async_enable>:
{
  4006d8:	b510      	push	{r4, lr}
	ASSERT(spi);
  4006da:	4604      	mov	r4, r0
  4006dc:	22c1      	movs	r2, #193	; 0xc1
  4006de:	4905      	ldr	r1, [pc, #20]	; (4006f4 <spi_m_async_enable+0x1c>)
  4006e0:	3000      	adds	r0, #0
  4006e2:	bf18      	it	ne
  4006e4:	2001      	movne	r0, #1
  4006e6:	4b04      	ldr	r3, [pc, #16]	; (4006f8 <spi_m_async_enable+0x20>)
  4006e8:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
  4006ea:	1d20      	adds	r0, r4, #4
  4006ec:	4b03      	ldr	r3, [pc, #12]	; (4006fc <spi_m_async_enable+0x24>)
  4006ee:	4798      	blx	r3
  4006f0:	bd10      	pop	{r4, pc}
  4006f2:	bf00      	nop
  4006f4:	00401bfc 	.word	0x00401bfc
  4006f8:	004008b5 	.word	0x004008b5
  4006fc:	00400c09 	.word	0x00400c09

00400700 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
  400700:	b570      	push	{r4, r5, r6, lr}
  400702:	460c      	mov	r4, r1
  400704:	4616      	mov	r6, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
  400706:	4605      	mov	r5, r0
  400708:	f240 1263 	movw	r2, #355	; 0x163
  40070c:	490a      	ldr	r1, [pc, #40]	; (400738 <spi_m_async_register_callback+0x38>)
  40070e:	3000      	adds	r0, #0
  400710:	bf18      	it	ne
  400712:	2001      	movne	r0, #1
  400714:	2c01      	cmp	r4, #1
  400716:	bf88      	it	hi
  400718:	2000      	movhi	r0, #0
  40071a:	4b08      	ldr	r3, [pc, #32]	; (40073c <spi_m_async_register_callback+0x3c>)
  40071c:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
  40071e:	b90c      	cbnz	r4, 400724 <spi_m_async_register_callback+0x24>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
  400720:	632e      	str	r6, [r5, #48]	; 0x30
  400722:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
  400724:	636e      	str	r6, [r5, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
  400726:	1c32      	adds	r2, r6, #0
  400728:	bf18      	it	ne
  40072a:	2201      	movne	r2, #1
  40072c:	2103      	movs	r1, #3
  40072e:	1d28      	adds	r0, r5, #4
  400730:	4b03      	ldr	r3, [pc, #12]	; (400740 <spi_m_async_register_callback+0x40>)
  400732:	4798      	blx	r3
  400734:	bd70      	pop	{r4, r5, r6, pc}
  400736:	bf00      	nop
  400738:	00401bfc 	.word	0x00401bfc
  40073c:	004008b5 	.word	0x004008b5
  400740:	00400d85 	.word	0x00400d85

00400744 <spi_m_async_get_io_descriptor>:
	}
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
  400744:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  400746:	4604      	mov	r4, r0
  400748:	460d      	mov	r5, r1
  40074a:	2800      	cmp	r0, #0
  40074c:	bf18      	it	ne
  40074e:	2900      	cmpne	r1, #0
  400750:	bf14      	ite	ne
  400752:	2001      	movne	r0, #1
  400754:	2000      	moveq	r0, #0
  400756:	f240 126f 	movw	r2, #367	; 0x16f
  40075a:	4903      	ldr	r1, [pc, #12]	; (400768 <spi_m_async_get_io_descriptor+0x24>)
  40075c:	4b03      	ldr	r3, [pc, #12]	; (40076c <spi_m_async_get_io_descriptor+0x28>)
  40075e:	4798      	blx	r3
	*io = &spi->io;
  400760:	3424      	adds	r4, #36	; 0x24
  400762:	602c      	str	r4, [r5, #0]
	return 0;
}
  400764:	2000      	movs	r0, #0
  400766:	bd38      	pop	{r3, r4, r5, pc}
  400768:	00401bfc 	.word	0x00401bfc
  40076c:	004008b5 	.word	0x004008b5

00400770 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400772:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400774:	4605      	mov	r5, r0
  400776:	460f      	mov	r7, r1
  400778:	2800      	cmp	r0, #0
  40077a:	bf18      	it	ne
  40077c:	2900      	cmpne	r1, #0
  40077e:	d002      	beq.n	400786 <usart_sync_write+0x16>
  400780:	bb0a      	cbnz	r2, 4007c6 <usart_sync_write+0x56>
  400782:	2000      	movs	r0, #0
  400784:	e000      	b.n	400788 <usart_sync_write+0x18>
  400786:	2000      	movs	r0, #0
  400788:	22f1      	movs	r2, #241	; 0xf1
  40078a:	4910      	ldr	r1, [pc, #64]	; (4007cc <usart_sync_write+0x5c>)
  40078c:	4b10      	ldr	r3, [pc, #64]	; (4007d0 <usart_sync_write+0x60>)
  40078e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400790:	f105 0408 	add.w	r4, r5, #8
  400794:	4620      	mov	r0, r4
  400796:	4b0f      	ldr	r3, [pc, #60]	; (4007d4 <usart_sync_write+0x64>)
  400798:	4798      	blx	r3
  40079a:	2800      	cmp	r0, #0
  40079c:	d0f8      	beq.n	400790 <usart_sync_write+0x20>
  40079e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4007a0:	5d79      	ldrb	r1, [r7, r5]
  4007a2:	4620      	mov	r0, r4
  4007a4:	4b0c      	ldr	r3, [pc, #48]	; (4007d8 <usart_sync_write+0x68>)
  4007a6:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4007a8:	4620      	mov	r0, r4
  4007aa:	4b0a      	ldr	r3, [pc, #40]	; (4007d4 <usart_sync_write+0x64>)
  4007ac:	4798      	blx	r3
  4007ae:	2800      	cmp	r0, #0
  4007b0:	d0fa      	beq.n	4007a8 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  4007b2:	3501      	adds	r5, #1
  4007b4:	42b5      	cmp	r5, r6
  4007b6:	d3f3      	bcc.n	4007a0 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4007b8:	4620      	mov	r0, r4
  4007ba:	4b08      	ldr	r3, [pc, #32]	; (4007dc <usart_sync_write+0x6c>)
  4007bc:	4798      	blx	r3
  4007be:	2800      	cmp	r0, #0
  4007c0:	d0fa      	beq.n	4007b8 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4007c2:	4628      	mov	r0, r5
  4007c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4007c6:	2001      	movs	r0, #1
  4007c8:	e7de      	b.n	400788 <usart_sync_write+0x18>
  4007ca:	bf00      	nop
  4007cc:	00401c1c 	.word	0x00401c1c
  4007d0:	004008b5 	.word	0x004008b5
  4007d4:	00400f5d 	.word	0x00400f5d
  4007d8:	00400f15 	.word	0x00400f15
  4007dc:	00400f85 	.word	0x00400f85

004007e0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4007e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007e4:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4007e6:	4605      	mov	r5, r0
  4007e8:	4688      	mov	r8, r1
  4007ea:	2800      	cmp	r0, #0
  4007ec:	bf18      	it	ne
  4007ee:	2900      	cmpne	r1, #0
  4007f0:	d002      	beq.n	4007f8 <usart_sync_read+0x18>
  4007f2:	b9d2      	cbnz	r2, 40082a <usart_sync_read+0x4a>
  4007f4:	2000      	movs	r0, #0
  4007f6:	e000      	b.n	4007fa <usart_sync_read+0x1a>
  4007f8:	2000      	movs	r0, #0
  4007fa:	f44f 7286 	mov.w	r2, #268	; 0x10c
  4007fe:	490c      	ldr	r1, [pc, #48]	; (400830 <usart_sync_read+0x50>)
  400800:	4b0c      	ldr	r3, [pc, #48]	; (400834 <usart_sync_read+0x54>)
  400802:	4798      	blx	r3
	uint32_t                      offset = 0;
  400804:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400806:	f105 0408 	add.w	r4, r5, #8
  40080a:	4620      	mov	r0, r4
  40080c:	4b0a      	ldr	r3, [pc, #40]	; (400838 <usart_sync_read+0x58>)
  40080e:	4798      	blx	r3
  400810:	2800      	cmp	r0, #0
  400812:	d0f8      	beq.n	400806 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400814:	4620      	mov	r0, r4
  400816:	4b09      	ldr	r3, [pc, #36]	; (40083c <usart_sync_read+0x5c>)
  400818:	4798      	blx	r3
  40081a:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  40081e:	3601      	adds	r6, #1
  400820:	42be      	cmp	r6, r7
  400822:	d3f0      	bcc.n	400806 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400824:	4630      	mov	r0, r6
  400826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  40082a:	2001      	movs	r0, #1
  40082c:	e7e5      	b.n	4007fa <usart_sync_read+0x1a>
  40082e:	bf00      	nop
  400830:	00401c1c 	.word	0x00401c1c
  400834:	004008b5 	.word	0x004008b5
  400838:	00400fad 	.word	0x00400fad
  40083c:	00400f39 	.word	0x00400f39

00400840 <usart_sync_init>:
{
  400840:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400842:	4604      	mov	r4, r0
  400844:	460d      	mov	r5, r1
  400846:	2800      	cmp	r0, #0
  400848:	bf18      	it	ne
  40084a:	2900      	cmpne	r1, #0
  40084c:	bf14      	ite	ne
  40084e:	2001      	movne	r0, #1
  400850:	2000      	moveq	r0, #0
  400852:	2234      	movs	r2, #52	; 0x34
  400854:	4907      	ldr	r1, [pc, #28]	; (400874 <usart_sync_init+0x34>)
  400856:	4b08      	ldr	r3, [pc, #32]	; (400878 <usart_sync_init+0x38>)
  400858:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  40085a:	4629      	mov	r1, r5
  40085c:	f104 0008 	add.w	r0, r4, #8
  400860:	4b06      	ldr	r3, [pc, #24]	; (40087c <usart_sync_init+0x3c>)
  400862:	4798      	blx	r3
	if (init_status) {
  400864:	4603      	mov	r3, r0
  400866:	b918      	cbnz	r0, 400870 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400868:	4a05      	ldr	r2, [pc, #20]	; (400880 <usart_sync_init+0x40>)
  40086a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  40086c:	4a05      	ldr	r2, [pc, #20]	; (400884 <usart_sync_init+0x44>)
  40086e:	6022      	str	r2, [r4, #0]
}
  400870:	4618      	mov	r0, r3
  400872:	bd38      	pop	{r3, r4, r5, pc}
  400874:	00401c1c 	.word	0x00401c1c
  400878:	004008b5 	.word	0x004008b5
  40087c:	00400ea9 	.word	0x00400ea9
  400880:	004007e1 	.word	0x004007e1
  400884:	00400771 	.word	0x00400771

00400888 <usart_sync_enable>:
{
  400888:	b510      	push	{r4, lr}
	ASSERT(descr);
  40088a:	4604      	mov	r4, r0
  40088c:	2253      	movs	r2, #83	; 0x53
  40088e:	4906      	ldr	r1, [pc, #24]	; (4008a8 <usart_sync_enable+0x20>)
  400890:	3000      	adds	r0, #0
  400892:	bf18      	it	ne
  400894:	2001      	movne	r0, #1
  400896:	4b05      	ldr	r3, [pc, #20]	; (4008ac <usart_sync_enable+0x24>)
  400898:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  40089a:	f104 0008 	add.w	r0, r4, #8
  40089e:	4b04      	ldr	r3, [pc, #16]	; (4008b0 <usart_sync_enable+0x28>)
  4008a0:	4798      	blx	r3
}
  4008a2:	2000      	movs	r0, #0
  4008a4:	bd10      	pop	{r4, pc}
  4008a6:	bf00      	nop
  4008a8:	00401c1c 	.word	0x00401c1c
  4008ac:	004008b5 	.word	0x004008b5
  4008b0:	00400ee1 	.word	0x00400ee1

004008b4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4008b4:	b900      	cbnz	r0, 4008b8 <assert+0x4>
		__asm("BKPT #0");
  4008b6:	be00      	bkpt	0x0000
  4008b8:	4770      	bx	lr
	...

004008bc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  4008bc:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  4008be:	4a06      	ldr	r2, [pc, #24]	; (4008d8 <_sbrk+0x1c>)
  4008c0:	6812      	ldr	r2, [r2, #0]
  4008c2:	b122      	cbz	r2, 4008ce <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4008c4:	4a04      	ldr	r2, [pc, #16]	; (4008d8 <_sbrk+0x1c>)
  4008c6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  4008c8:	4403      	add	r3, r0
  4008ca:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  4008cc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4008ce:	4903      	ldr	r1, [pc, #12]	; (4008dc <_sbrk+0x20>)
  4008d0:	4a01      	ldr	r2, [pc, #4]	; (4008d8 <_sbrk+0x1c>)
  4008d2:	6011      	str	r1, [r2, #0]
  4008d4:	e7f6      	b.n	4008c4 <_sbrk+0x8>
  4008d6:	bf00      	nop
  4008d8:	20400084 	.word	0x20400084
  4008dc:	204006f0 	.word	0x204006f0

004008e0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  4008e0:	f04f 30ff 	mov.w	r0, #4294967295
  4008e4:	4770      	bx	lr

004008e6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  4008e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4008ea:	604b      	str	r3, [r1, #4]

	return 0;
}
  4008ec:	2000      	movs	r0, #0
  4008ee:	4770      	bx	lr

004008f0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  4008f0:	2001      	movs	r0, #1
  4008f2:	4770      	bx	lr

004008f4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  4008f4:	2000      	movs	r0, #0
  4008f6:	4770      	bx	lr

004008f8 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) * 1000);
  4008f8:	f44f 7396 	mov.w	r3, #300	; 0x12c
  4008fc:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400904:	fb03 f000 	mul.w	r0, r3, r0
  400908:	4770      	bx	lr

0040090a <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm("__delay:\n"
  40090a:	3901      	subs	r1, #1
  40090c:	d8fd      	bhi.n	40090a <_delay_cycles>
  40090e:	4770      	bx	lr

00400910 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400910:	b500      	push	{lr}
  400912:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400914:	a801      	add	r0, sp, #4
  400916:	4b0e      	ldr	r3, [pc, #56]	; (400950 <_init_chip+0x40>)
  400918:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40091a:	4a0e      	ldr	r2, [pc, #56]	; (400954 <_init_chip+0x44>)
  40091c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400928:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40092c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400930:	a801      	add	r0, sp, #4
  400932:	4b09      	ldr	r3, [pc, #36]	; (400958 <_init_chip+0x48>)
  400934:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400936:	4a09      	ldr	r2, [pc, #36]	; (40095c <_init_chip+0x4c>)
  400938:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40093a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  40093e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400942:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400944:	4b06      	ldr	r3, [pc, #24]	; (400960 <_init_chip+0x50>)
  400946:	4798      	blx	r3
}
  400948:	b003      	add	sp, #12
  40094a:	f85d fb04 	ldr.w	pc, [sp], #4
  40094e:	bf00      	nop
  400950:	004003bd 	.word	0x004003bd
  400954:	e000ed00 	.word	0xe000ed00
  400958:	004003cb 	.word	0x004003cb
  40095c:	400e0c00 	.word	0x400e0c00
  400960:	00400a01 	.word	0x00400a01

00400964 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400964:	490e      	ldr	r1, [pc, #56]	; (4009a0 <_pmc_init_sources+0x3c>)
  400966:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400968:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  40096c:	4b0d      	ldr	r3, [pc, #52]	; (4009a4 <_pmc_init_sources+0x40>)
  40096e:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400970:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400972:	4b0b      	ldr	r3, [pc, #44]	; (4009a0 <_pmc_init_sources+0x3c>)
  400974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400976:	f013 0f01 	tst.w	r3, #1
  40097a:	d0fa      	beq.n	400972 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  40097c:	4b08      	ldr	r3, [pc, #32]	; (4009a0 <_pmc_init_sources+0x3c>)
  40097e:	6a19      	ldr	r1, [r3, #32]
  400980:	4a09      	ldr	r2, [pc, #36]	; (4009a8 <_pmc_init_sources+0x44>)
  400982:	430a      	orrs	r2, r1
  400984:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400986:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400988:	4a08      	ldr	r2, [pc, #32]	; (4009ac <_pmc_init_sources+0x48>)
  40098a:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  40098c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40098e:	4a08      	ldr	r2, [pc, #32]	; (4009b0 <_pmc_init_sources+0x4c>)
  400990:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400992:	4b03      	ldr	r3, [pc, #12]	; (4009a0 <_pmc_init_sources+0x3c>)
  400994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400996:	f013 0f02 	tst.w	r3, #2
  40099a:	d0fa      	beq.n	400992 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  40099c:	4770      	bx	lr
  40099e:	bf00      	nop
  4009a0:	400e0600 	.word	0x400e0600
  4009a4:	00373e01 	.word	0x00373e01
  4009a8:	01370000 	.word	0x01370000
  4009ac:	f800ffff 	.word	0xf800ffff
  4009b0:	20183f01 	.word	0x20183f01

004009b4 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4009b4:	4a11      	ldr	r2, [pc, #68]	; (4009fc <_pmc_init_master_clock+0x48>)
  4009b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4009b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4009bc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4009be:	4b0f      	ldr	r3, [pc, #60]	; (4009fc <_pmc_init_master_clock+0x48>)
  4009c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4009c2:	f013 0f08 	tst.w	r3, #8
  4009c6:	d0fa      	beq.n	4009be <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4009c8:	4a0c      	ldr	r2, [pc, #48]	; (4009fc <_pmc_init_master_clock+0x48>)
  4009ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4009cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4009d4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4009d6:	4b09      	ldr	r3, [pc, #36]	; (4009fc <_pmc_init_master_clock+0x48>)
  4009d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4009da:	f013 0f08 	tst.w	r3, #8
  4009de:	d0fa      	beq.n	4009d6 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4009e0:	4a06      	ldr	r2, [pc, #24]	; (4009fc <_pmc_init_master_clock+0x48>)
  4009e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  4009e4:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  4009e8:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  4009ec:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4009ee:	4b03      	ldr	r3, [pc, #12]	; (4009fc <_pmc_init_master_clock+0x48>)
  4009f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4009f2:	f013 0f08 	tst.w	r3, #8
  4009f6:	d0fa      	beq.n	4009ee <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4009f8:	4770      	bx	lr
  4009fa:	bf00      	nop
  4009fc:	400e0600 	.word	0x400e0600

00400a00 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400a00:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400a02:	4b02      	ldr	r3, [pc, #8]	; (400a0c <_pmc_init+0xc>)
  400a04:	4798      	blx	r3
	_pmc_init_master_clock();
  400a06:	4b02      	ldr	r3, [pc, #8]	; (400a10 <_pmc_init+0x10>)
  400a08:	4798      	blx	r3
  400a0a:	bd08      	pop	{r3, pc}
  400a0c:	00400965 	.word	0x00400965
  400a10:	004009b5 	.word	0x004009b5

00400a14 <_spi_get_irq_num>:
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _spi_get_irq_num(const void *const hw)
{

	if (hw == SPI0) {
  400a14:	4b03      	ldr	r3, [pc, #12]	; (400a24 <_spi_get_irq_num+0x10>)
  400a16:	4298      	cmp	r0, r3
  400a18:	d001      	beq.n	400a1e <_spi_get_irq_num+0xa>
		return SPI0_IRQn;
	} else {
		return SPI1_IRQn;
  400a1a:	202a      	movs	r0, #42	; 0x2a
	}
}
  400a1c:	4770      	bx	lr
		return SPI0_IRQn;
  400a1e:	2015      	movs	r0, #21
  400a20:	4770      	bx	lr
  400a22:	bf00      	nop
  400a24:	40008000 	.word	0x40008000

00400a28 <_spi_init_irq_param>:
/**
 * \brief Init irq param with the given spi hardware instance
 */
static void _spi_init_irq_param(const void *const hw, struct _spi_async_dev *dev)
{
	if (hw == SPI0) {
  400a28:	4b03      	ldr	r3, [pc, #12]	; (400a38 <_spi_init_irq_param+0x10>)
  400a2a:	4298      	cmp	r0, r3
  400a2c:	d000      	beq.n	400a30 <_spi_init_irq_param+0x8>
  400a2e:	4770      	bx	lr
		_spi0_dev = dev;
  400a30:	4b02      	ldr	r3, [pc, #8]	; (400a3c <_spi_init_irq_param+0x14>)
  400a32:	6019      	str	r1, [r3, #0]
	}
}
  400a34:	e7fb      	b.n	400a2e <_spi_init_irq_param+0x6>
  400a36:	bf00      	nop
  400a38:	40008000 	.word	0x40008000
  400a3c:	20400088 	.word	0x20400088

00400a40 <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  400a40:	2301      	movs	r3, #1
  400a42:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  400a44:	2000      	movs	r0, #0
  400a46:	4770      	bx	lr

00400a48 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
  400a48:	b510      	push	{r4, lr}
  400a4a:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
  400a4c:	4b08      	ldr	r3, [pc, #32]	; (400a70 <_spi_async_enable+0x28>)
  400a4e:	4798      	blx	r3
	NVIC_EnableIRQ(_spi_get_irq_num(hw));
  400a50:	4620      	mov	r0, r4
  400a52:	4b08      	ldr	r3, [pc, #32]	; (400a74 <_spi_async_enable+0x2c>)
  400a54:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400a56:	2800      	cmp	r0, #0
  400a58:	db08      	blt.n	400a6c <_spi_async_enable+0x24>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a5a:	0942      	lsrs	r2, r0, #5
  400a5c:	f000 001f 	and.w	r0, r0, #31
  400a60:	2301      	movs	r3, #1
  400a62:	fa03 f000 	lsl.w	r0, r3, r0
  400a66:	4b04      	ldr	r3, [pc, #16]	; (400a78 <_spi_async_enable+0x30>)
  400a68:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

	return ERR_NONE;
}
  400a6c:	2000      	movs	r0, #0
  400a6e:	bd10      	pop	{r4, pc}
  400a70:	00400a41 	.word	0x00400a41
  400a74:	00400a15 	.word	0x00400a15
  400a78:	e000e100 	.word	0xe000e100

00400a7c <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  400a7c:	4b04      	ldr	r3, [pc, #16]	; (400a90 <_spi_get_hardware_index+0x14>)
  400a7e:	4403      	add	r3, r0
  400a80:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  400a84:	2b05      	cmp	r3, #5
  400a86:	d001      	beq.n	400a8c <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  400a88:	2000      	movs	r0, #0
	}
}
  400a8a:	4770      	bx	lr
		return 1;
  400a8c:	2001      	movs	r0, #1
  400a8e:	4770      	bx	lr
  400a90:	bfff8000 	.word	0xbfff8000

00400a94 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
  400a94:	b508      	push	{r3, lr}
	void *            hw = dev->prvt;
  400a96:	6802      	ldr	r2, [r0, #0]
	return ((Spi *)hw)->SPI_IMR;
  400a98:	69d1      	ldr	r1, [r2, #28]
	return ((Spi *)hw)->SPI_SR;
  400a9a:	6913      	ldr	r3, [r2, #16]
	hri_spi_imr_reg_t st;

	st = hri_spi_read_IMR_reg(hw);
	st &= hri_spi_read_SR_reg(hw);
  400a9c:	400b      	ands	r3, r1

	if (st & SPI_SR_RDRF) {
  400a9e:	f013 0f01 	tst.w	r3, #1
  400aa2:	d10a      	bne.n	400aba <_spi_handler+0x26>
		dev->callbacks.rx(dev);
	} else if (st & SPI_SR_TDRE) {
  400aa4:	f013 0f02 	tst.w	r3, #2
  400aa8:	d10a      	bne.n	400ac0 <_spi_handler+0x2c>
		dev->callbacks.tx(dev);
	} else if (st & SPI_SR_TXEMPTY) {
  400aaa:	f413 7f00 	tst.w	r3, #512	; 0x200
  400aae:	d10a      	bne.n	400ac6 <_spi_handler+0x32>
		dev->callbacks.complete(dev);
	} else if (st & (SPI_SR_OVRES | SPI_SR_NSSR | SPI_SR_MODF | SPI_SR_UNDES)) {
  400ab0:	f240 520c 	movw	r2, #1292	; 0x50c
  400ab4:	4213      	tst	r3, r2
  400ab6:	d109      	bne.n	400acc <_spi_handler+0x38>
  400ab8:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
  400aba:	68c3      	ldr	r3, [r0, #12]
  400abc:	4798      	blx	r3
  400abe:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
  400ac0:	6883      	ldr	r3, [r0, #8]
  400ac2:	4798      	blx	r3
  400ac4:	bd08      	pop	{r3, pc}
		dev->callbacks.complete(dev);
  400ac6:	6903      	ldr	r3, [r0, #16]
  400ac8:	4798      	blx	r3
  400aca:	bd08      	pop	{r3, pc}
		dev->callbacks.err(dev, ERR_OVERFLOW);
  400acc:	6943      	ldr	r3, [r0, #20]
  400ace:	f06f 0112 	mvn.w	r1, #18
  400ad2:	4798      	blx	r3
	}
}
  400ad4:	e7f0      	b.n	400ab8 <_spi_handler+0x24>
	...

00400ad8 <SPI0_Handler>:

/**
 * \internal SPI interrupt handler
 */
void SPI0_Handler(void)
{
  400ad8:	b508      	push	{r3, lr}
	_spi_handler(_spi0_dev);
  400ada:	4b02      	ldr	r3, [pc, #8]	; (400ae4 <SPI0_Handler+0xc>)
  400adc:	6818      	ldr	r0, [r3, #0]
  400ade:	4b02      	ldr	r3, [pc, #8]	; (400ae8 <SPI0_Handler+0x10>)
  400ae0:	4798      	blx	r3
  400ae2:	bd08      	pop	{r3, pc}
  400ae4:	20400088 	.word	0x20400088
  400ae8:	00400a95 	.word	0x00400a95

00400aec <_spi_spi_m_sync_init>:
}

int32_t _spi_spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  400aec:	b570      	push	{r4, r5, r6, lr}
  400aee:	4606      	mov	r6, r0
  400af0:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  400af2:	4608      	mov	r0, r1
  400af4:	4b20      	ldr	r3, [pc, #128]	; (400b78 <_spi_spi_m_sync_init+0x8c>)
  400af6:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400af8:	2300      	movs	r3, #0
  400afa:	b33b      	cbz	r3, 400b4c <_spi_spi_m_sync_init+0x60>
	return NULL;
  400afc:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  400afe:	f44f 72ac 	mov.w	r2, #344	; 0x158
  400b02:	491e      	ldr	r1, [pc, #120]	; (400b7c <_spi_spi_m_sync_init+0x90>)
  400b04:	2e00      	cmp	r6, #0
  400b06:	bf18      	it	ne
  400b08:	2c00      	cmpne	r4, #0
  400b0a:	bf14      	ite	ne
  400b0c:	2001      	movne	r0, #1
  400b0e:	2000      	moveq	r0, #0
  400b10:	4b1b      	ldr	r3, [pc, #108]	; (400b80 <_spi_spi_m_sync_init+0x94>)
  400b12:	4798      	blx	r3

	if (regs == NULL) {
  400b14:	b355      	cbz	r5, 400b6c <_spi_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400b16:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  400b18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400b1c:	d129      	bne.n	400b72 <_spi_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  400b1e:	2380      	movs	r3, #128	; 0x80
  400b20:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  400b22:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  400b24:	686a      	ldr	r2, [r5, #4]
  400b26:	4b17      	ldr	r3, [pc, #92]	; (400b84 <_spi_spi_m_sync_init+0x98>)
  400b28:	4013      	ands	r3, r2
  400b2a:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  400b2c:	68ab      	ldr	r3, [r5, #8]
  400b2e:	4a16      	ldr	r2, [pc, #88]	; (400b88 <_spi_spi_m_sync_init+0x9c>)
  400b30:	401a      	ands	r2, r3
  400b32:	4b16      	ldr	r3, [pc, #88]	; (400b8c <_spi_spi_m_sync_init+0xa0>)
  400b34:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  400b36:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  400b38:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  400b3a:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  400b3c:	8a2b      	ldrh	r3, [r5, #16]
  400b3e:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  400b40:	68eb      	ldr	r3, [r5, #12]
  400b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  400b46:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  400b48:	2000      	movs	r0, #0
  400b4a:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  400b4c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  400b50:	008a      	lsls	r2, r1, #2
  400b52:	490f      	ldr	r1, [pc, #60]	; (400b90 <_spi_spi_m_sync_init+0xa4>)
  400b54:	5c8a      	ldrb	r2, [r1, r2]
  400b56:	4290      	cmp	r0, r2
  400b58:	d002      	beq.n	400b60 <_spi_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400b5a:	3301      	adds	r3, #1
  400b5c:	b2db      	uxtb	r3, r3
  400b5e:	e7cc      	b.n	400afa <_spi_spi_m_sync_init+0xe>
			return &spi_regs[i];
  400b60:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  400b64:	00ab      	lsls	r3, r5, #2
  400b66:	460d      	mov	r5, r1
  400b68:	441d      	add	r5, r3
  400b6a:	e7c8      	b.n	400afe <_spi_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  400b6c:	f06f 000c 	mvn.w	r0, #12
  400b70:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  400b72:	f06f 0010 	mvn.w	r0, #16
}
  400b76:	bd70      	pop	{r4, r5, r6, pc}
  400b78:	00400a7d 	.word	0x00400a7d
  400b7c:	00401c4c 	.word	0x00401c4c
  400b80:	004008b5 	.word	0x004008b5
  400b84:	feffff7c 	.word	0xfeffff7c
  400b88:	fff1ff6f 	.word	0xfff1ff6f
  400b8c:	000e0010 	.word	0x000e0010
  400b90:	00401c38 	.word	0x00401c38

00400b94 <_spi_m_async_init>:

int32_t _spi_m_async_init(struct _spi_m_async_dev *dev, void *const hw)
{
  400b94:	b538      	push	{r3, r4, r5, lr}
  400b96:	4604      	mov	r4, r0
  400b98:	460d      	mov	r5, r1
	struct _spi_m_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
  400b9a:	4b17      	ldr	r3, [pc, #92]	; (400bf8 <_spi_m_async_init+0x64>)
  400b9c:	4798      	blx	r3

	if (rc < 0) {
  400b9e:	2800      	cmp	r0, #0
  400ba0:	db28      	blt.n	400bf4 <_spi_m_async_init+0x60>
		return rc;
	}

	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
  400ba2:	2300      	movs	r3, #0
  400ba4:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
  400ba6:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
  400ba8:	60a3      	str	r3, [r4, #8]

	_spi_init_irq_param(hw, dev);
  400baa:	4621      	mov	r1, r4
  400bac:	4628      	mov	r0, r5
  400bae:	4b13      	ldr	r3, [pc, #76]	; (400bfc <_spi_m_async_init+0x68>)
  400bb0:	4798      	blx	r3
	NVIC_DisableIRQ(_spi_get_irq_num(hw));
  400bb2:	4628      	mov	r0, r5
  400bb4:	4b12      	ldr	r3, [pc, #72]	; (400c00 <_spi_m_async_init+0x6c>)
  400bb6:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400bb8:	2800      	cmp	r0, #0
  400bba:	db0c      	blt.n	400bd6 <_spi_m_async_init+0x42>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400bbc:	0943      	lsrs	r3, r0, #5
  400bbe:	f000 011f 	and.w	r1, r0, #31
  400bc2:	2201      	movs	r2, #1
  400bc4:	408a      	lsls	r2, r1
  400bc6:	3320      	adds	r3, #32
  400bc8:	490e      	ldr	r1, [pc, #56]	; (400c04 <_spi_m_async_init+0x70>)
  400bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400bce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400bd2:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400bd6:	2800      	cmp	r0, #0
  400bd8:	db0b      	blt.n	400bf2 <_spi_m_async_init+0x5e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400bda:	0943      	lsrs	r3, r0, #5
  400bdc:	f000 001f 	and.w	r0, r0, #31
  400be0:	2201      	movs	r2, #1
  400be2:	fa02 f000 	lsl.w	r0, r2, r0
  400be6:	3360      	adds	r3, #96	; 0x60
  400be8:	4a06      	ldr	r2, [pc, #24]	; (400c04 <_spi_m_async_init+0x70>)
  400bea:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_ClearPendingIRQ(_spi_get_irq_num(hw));

	return ERR_NONE;
  400bee:	2000      	movs	r0, #0
  400bf0:	bd38      	pop	{r3, r4, r5, pc}
  400bf2:	2000      	movs	r0, #0
}
  400bf4:	bd38      	pop	{r3, r4, r5, pc}
  400bf6:	bf00      	nop
  400bf8:	00400aed 	.word	0x00400aed
  400bfc:	00400a29 	.word	0x00400a29
  400c00:	00400a15 	.word	0x00400a15
  400c04:	e000e100 	.word	0xe000e100

00400c08 <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_m_async_dev *dev)
{
  400c08:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  400c0a:	4604      	mov	r4, r0
  400c0c:	b168      	cbz	r0, 400c2a <_spi_m_async_enable+0x22>
  400c0e:	6803      	ldr	r3, [r0, #0]
  400c10:	b14b      	cbz	r3, 400c26 <_spi_m_async_enable+0x1e>
  400c12:	2001      	movs	r0, #1
  400c14:	f240 129d 	movw	r2, #413	; 0x19d
  400c18:	4905      	ldr	r1, [pc, #20]	; (400c30 <_spi_m_async_enable+0x28>)
  400c1a:	4b06      	ldr	r3, [pc, #24]	; (400c34 <_spi_m_async_enable+0x2c>)
  400c1c:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
  400c1e:	6820      	ldr	r0, [r4, #0]
  400c20:	4b05      	ldr	r3, [pc, #20]	; (400c38 <_spi_m_async_enable+0x30>)
  400c22:	4798      	blx	r3
}
  400c24:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  400c26:	2000      	movs	r0, #0
  400c28:	e7f4      	b.n	400c14 <_spi_m_async_enable+0xc>
  400c2a:	2000      	movs	r0, #0
  400c2c:	e7f2      	b.n	400c14 <_spi_m_async_enable+0xc>
  400c2e:	bf00      	nop
  400c30:	00401c4c 	.word	0x00401c4c
  400c34:	004008b5 	.word	0x004008b5
  400c38:	00400a49 	.word	0x00400a49

00400c3c <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_m_async_dev *dev, bool state)
{
  400c3c:	b538      	push	{r3, r4, r5, lr}
  400c3e:	460d      	mov	r5, r1
	void *hw = dev->prvt;
  400c40:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
  400c42:	f44f 721e 	mov.w	r2, #632	; 0x278
  400c46:	4908      	ldr	r1, [pc, #32]	; (400c68 <_spi_m_async_enable_tx+0x2c>)
  400c48:	2800      	cmp	r0, #0
  400c4a:	bf18      	it	ne
  400c4c:	2c00      	cmpne	r4, #0
  400c4e:	bf14      	ite	ne
  400c50:	2001      	movne	r0, #1
  400c52:	2000      	moveq	r0, #0
  400c54:	4b05      	ldr	r3, [pc, #20]	; (400c6c <_spi_m_async_enable_tx+0x30>)
  400c56:	4798      	blx	r3

	if (state) {
  400c58:	b91d      	cbnz	r5, 400c62 <_spi_m_async_enable_tx+0x26>
	((Spi *)hw)->SPI_IDR = SPI_IMR_TDRE;
  400c5a:	2302      	movs	r3, #2
  400c5c:	61a3      	str	r3, [r4, #24]
	} else {
		hri_spi_clear_IMR_TDRE_bit(hw);
	}

	return ERR_NONE;
}
  400c5e:	2000      	movs	r0, #0
  400c60:	bd38      	pop	{r3, r4, r5, pc}
	((Spi *)hw)->SPI_IER = SPI_IMR_TDRE;
  400c62:	2302      	movs	r3, #2
  400c64:	6163      	str	r3, [r4, #20]
  400c66:	e7fa      	b.n	400c5e <_spi_m_async_enable_tx+0x22>
  400c68:	00401c4c 	.word	0x00401c4c
  400c6c:	004008b5 	.word	0x004008b5

00400c70 <_spi_m_async_enable_rx>:

int32_t _spi_m_async_enable_rx(struct _spi_m_async_dev *dev, bool state)
{
  400c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400c72:	460f      	mov	r7, r1
	void *hw = dev->prvt;
  400c74:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
  400c76:	4e0c      	ldr	r6, [pc, #48]	; (400ca8 <_spi_m_async_enable_rx+0x38>)
  400c78:	f240 2287 	movw	r2, #647	; 0x287
  400c7c:	4631      	mov	r1, r6
  400c7e:	3000      	adds	r0, #0
  400c80:	bf18      	it	ne
  400c82:	2001      	movne	r0, #1
  400c84:	4d09      	ldr	r5, [pc, #36]	; (400cac <_spi_m_async_enable_rx+0x3c>)
  400c86:	47a8      	blx	r5
	ASSERT(hw);
  400c88:	f44f 7222 	mov.w	r2, #648	; 0x288
  400c8c:	4631      	mov	r1, r6
  400c8e:	1c20      	adds	r0, r4, #0
  400c90:	bf18      	it	ne
  400c92:	2001      	movne	r0, #1
  400c94:	47a8      	blx	r5

	if (state) {
  400c96:	b91f      	cbnz	r7, 400ca0 <_spi_m_async_enable_rx+0x30>
	((Spi *)hw)->SPI_IDR = SPI_IMR_RDRF;
  400c98:	2301      	movs	r3, #1
  400c9a:	61a3      	str	r3, [r4, #24]
	} else {
		hri_spi_clear_IMR_RDRF_bit(hw);
	}

	return ERR_NONE;
}
  400c9c:	2000      	movs	r0, #0
  400c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Spi *)hw)->SPI_IER = SPI_IMR_RDRF;
  400ca0:	2301      	movs	r3, #1
  400ca2:	6163      	str	r3, [r4, #20]
  400ca4:	e7fa      	b.n	400c9c <_spi_m_async_enable_rx+0x2c>
  400ca6:	bf00      	nop
  400ca8:	00401c4c 	.word	0x00401c4c
  400cac:	004008b5 	.word	0x004008b5

00400cb0 <_spi_m_async_enable_tx_complete>:

int32_t _spi_m_async_enable_tx_complete(struct _spi_m_async_dev *dev, bool state)
{
  400cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400cb2:	460f      	mov	r7, r1
	void *hw = dev->prvt;
  400cb4:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
  400cb6:	4e0d      	ldr	r6, [pc, #52]	; (400cec <_spi_m_async_enable_tx_complete+0x3c>)
  400cb8:	f240 2297 	movw	r2, #663	; 0x297
  400cbc:	4631      	mov	r1, r6
  400cbe:	3000      	adds	r0, #0
  400cc0:	bf18      	it	ne
  400cc2:	2001      	movne	r0, #1
  400cc4:	4d0a      	ldr	r5, [pc, #40]	; (400cf0 <_spi_m_async_enable_tx_complete+0x40>)
  400cc6:	47a8      	blx	r5
	ASSERT(hw);
  400cc8:	f44f 7226 	mov.w	r2, #664	; 0x298
  400ccc:	4631      	mov	r1, r6
  400cce:	1c20      	adds	r0, r4, #0
  400cd0:	bf18      	it	ne
  400cd2:	2001      	movne	r0, #1
  400cd4:	47a8      	blx	r5

	if (state) {
  400cd6:	b927      	cbnz	r7, 400ce2 <_spi_m_async_enable_tx_complete+0x32>
	((Spi *)hw)->SPI_IDR = SPI_IMR_TXEMPTY;
  400cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
  400cdc:	61a3      	str	r3, [r4, #24]
	} else {
		hri_spi_clear_IMR_TXEMPTY_bit(hw);
	}

	return ERR_NONE;
}
  400cde:	2000      	movs	r0, #0
  400ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Spi *)hw)->SPI_IER = SPI_IMR_TXEMPTY;
  400ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
  400ce6:	6163      	str	r3, [r4, #20]
  400ce8:	e7f9      	b.n	400cde <_spi_m_async_enable_tx_complete+0x2e>
  400cea:	bf00      	nop
  400cec:	00401c4c 	.word	0x00401c4c
  400cf0:	004008b5 	.word	0x004008b5

00400cf4 <_spi_m_async_write_one>:

int32_t _spi_m_async_write_one(struct _spi_m_async_dev *dev, uint16_t data)
{
  400cf4:	b538      	push	{r3, r4, r5, lr}
  400cf6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
  400cf8:	4604      	mov	r4, r0
  400cfa:	b168      	cbz	r0, 400d18 <_spi_m_async_write_one+0x24>
  400cfc:	6803      	ldr	r3, [r0, #0]
  400cfe:	b14b      	cbz	r3, 400d14 <_spi_m_async_write_one+0x20>
  400d00:	2001      	movs	r0, #1
  400d02:	f240 22a5 	movw	r2, #677	; 0x2a5
  400d06:	4905      	ldr	r1, [pc, #20]	; (400d1c <_spi_m_async_write_one+0x28>)
  400d08:	4b05      	ldr	r3, [pc, #20]	; (400d20 <_spi_m_async_write_one+0x2c>)
  400d0a:	4798      	blx	r3

	hri_spi_write_TDR_reg(dev->prvt, data);
  400d0c:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  400d0e:	60dd      	str	r5, [r3, #12]

	return ERR_NONE;
}
  400d10:	2000      	movs	r0, #0
  400d12:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && dev->prvt);
  400d14:	2000      	movs	r0, #0
  400d16:	e7f4      	b.n	400d02 <_spi_m_async_write_one+0xe>
  400d18:	2000      	movs	r0, #0
  400d1a:	e7f2      	b.n	400d02 <_spi_m_async_write_one+0xe>
  400d1c:	00401c4c 	.word	0x00401c4c
  400d20:	004008b5 	.word	0x004008b5

00400d24 <_spi_m_async_read_one>:

uint16_t _spi_m_async_read_one(struct _spi_m_async_dev *dev)
{
  400d24:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  400d26:	4604      	mov	r4, r0
  400d28:	b168      	cbz	r0, 400d46 <_spi_m_async_read_one+0x22>
  400d2a:	6803      	ldr	r3, [r0, #0]
  400d2c:	b14b      	cbz	r3, 400d42 <_spi_m_async_read_one+0x1e>
  400d2e:	2001      	movs	r0, #1
  400d30:	f240 22ae 	movw	r2, #686	; 0x2ae
  400d34:	4905      	ldr	r1, [pc, #20]	; (400d4c <_spi_m_async_read_one+0x28>)
  400d36:	4b06      	ldr	r3, [pc, #24]	; (400d50 <_spi_m_async_read_one+0x2c>)
  400d38:	4798      	blx	r3

	return hri_spi_read_RDR_reg(dev->prvt);
  400d3a:	6823      	ldr	r3, [r4, #0]
	return ((Spi *)hw)->SPI_RDR;
  400d3c:	6898      	ldr	r0, [r3, #8]
}
  400d3e:	b280      	uxth	r0, r0
  400d40:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  400d42:	2000      	movs	r0, #0
  400d44:	e7f4      	b.n	400d30 <_spi_m_async_read_one+0xc>
  400d46:	2000      	movs	r0, #0
  400d48:	e7f2      	b.n	400d30 <_spi_m_async_read_one+0xc>
  400d4a:	bf00      	nop
  400d4c:	00401c4c 	.word	0x00401c4c
  400d50:	004008b5 	.word	0x004008b5

00400d54 <_spi_m_async_register_callback>:

int32_t _spi_m_async_register_callback(struct _spi_m_async_dev *dev, const enum _spi_m_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
  400d54:	b570      	push	{r4, r5, r6, lr}
  400d56:	460d      	mov	r5, r1
  400d58:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_m_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
  400d5a:	4604      	mov	r4, r0
  400d5c:	f240 22b9 	movw	r2, #697	; 0x2b9
  400d60:	4906      	ldr	r1, [pc, #24]	; (400d7c <_spi_m_async_register_callback+0x28>)
  400d62:	3000      	adds	r0, #0
  400d64:	bf18      	it	ne
  400d66:	2001      	movne	r0, #1
  400d68:	2d03      	cmp	r5, #3
  400d6a:	bf88      	it	hi
  400d6c:	2000      	movhi	r0, #0
  400d6e:	4b04      	ldr	r3, [pc, #16]	; (400d80 <_spi_m_async_register_callback+0x2c>)
  400d70:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
  400d72:	3408      	adds	r4, #8
	p_ls[cb_type] = (func_t)func;
  400d74:	f844 6025 	str.w	r6, [r4, r5, lsl #2]

	return ERR_NONE;
}
  400d78:	2000      	movs	r0, #0
  400d7a:	bd70      	pop	{r4, r5, r6, pc}
  400d7c:	00401c4c 	.word	0x00401c4c
  400d80:	004008b5 	.word	0x004008b5

00400d84 <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_m_async_dev *const device, const enum _spi_m_async_dev_cb_type type,
                                const bool state)
{
  400d84:	b570      	push	{r4, r5, r6, lr}
  400d86:	460c      	mov	r4, r1
  400d88:	4615      	mov	r5, r2
	ASSERT(device);
  400d8a:	4606      	mov	r6, r0
  400d8c:	f240 22cb 	movw	r2, #715	; 0x2cb
  400d90:	4908      	ldr	r1, [pc, #32]	; (400db4 <_spi_m_async_set_irq_state+0x30>)
  400d92:	3000      	adds	r0, #0
  400d94:	bf18      	it	ne
  400d96:	2001      	movne	r0, #1
  400d98:	4b07      	ldr	r3, [pc, #28]	; (400db8 <_spi_m_async_set_irq_state+0x34>)
  400d9a:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
  400d9c:	2c03      	cmp	r4, #3
  400d9e:	d000      	beq.n	400da2 <_spi_m_async_set_irq_state+0x1e>
  400da0:	bd70      	pop	{r4, r5, r6, pc}
		if (state) {
  400da2:	b91d      	cbnz	r5, 400dac <_spi_m_async_set_irq_state+0x28>
			hri_spi_set_IMR_OVRES_bit(device->prvt);
		} else {
			hri_spi_clear_IMR_OVRES_bit(device->prvt);
  400da4:	6833      	ldr	r3, [r6, #0]
	((Spi *)hw)->SPI_IDR = SPI_IMR_OVRES;
  400da6:	2208      	movs	r2, #8
  400da8:	619a      	str	r2, [r3, #24]
		}
	}
}
  400daa:	e7f9      	b.n	400da0 <_spi_m_async_set_irq_state+0x1c>
			hri_spi_set_IMR_OVRES_bit(device->prvt);
  400dac:	6833      	ldr	r3, [r6, #0]
	((Spi *)hw)->SPI_IER = SPI_IMR_OVRES;
  400dae:	2208      	movs	r2, #8
  400db0:	615a      	str	r2, [r3, #20]
  400db2:	bd70      	pop	{r4, r5, r6, pc}
  400db4:	00401c4c 	.word	0x00401c4c
  400db8:	004008b5 	.word	0x004008b5

00400dbc <_spi_get_spi_m_async>:
 * \brief Retrieve usart async helper functions
 */
void *_spi_get_spi_m_async(void)
{
	return (void *)NULL;
}
  400dbc:	2000      	movs	r0, #0
  400dbe:	4770      	bx	lr

00400dc0 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  400dc0:	b510      	push	{r4, lr}
	ASSERT(hw);
  400dc2:	4604      	mov	r4, r0
  400dc4:	f240 222b 	movw	r2, #555	; 0x22b
  400dc8:	4905      	ldr	r1, [pc, #20]	; (400de0 <_usart_get_hardware_index+0x20>)
  400dca:	3000      	adds	r0, #0
  400dcc:	bf18      	it	ne
  400dce:	2001      	movne	r0, #1
  400dd0:	4b04      	ldr	r3, [pc, #16]	; (400de4 <_usart_get_hardware_index+0x24>)
  400dd2:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  400dd4:	4804      	ldr	r0, [pc, #16]	; (400de8 <_usart_get_hardware_index+0x28>)
  400dd6:	4420      	add	r0, r4
}
  400dd8:	f3c0 3087 	ubfx	r0, r0, #14, #8
  400ddc:	bd10      	pop	{r4, pc}
  400dde:	bf00      	nop
  400de0:	00401c70 	.word	0x00401c70
  400de4:	004008b5 	.word	0x004008b5
  400de8:	bffdc000 	.word	0xbffdc000

00400dec <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  400dec:	b510      	push	{r4, lr}
	ASSERT(hw);
  400dee:	4604      	mov	r4, r0
  400df0:	f240 2287 	movw	r2, #647	; 0x287
  400df4:	490e      	ldr	r1, [pc, #56]	; (400e30 <_get_usart_index+0x44>)
  400df6:	3000      	adds	r0, #0
  400df8:	bf18      	it	ne
  400dfa:	2001      	movne	r0, #1
  400dfc:	4b0d      	ldr	r3, [pc, #52]	; (400e34 <_get_usart_index+0x48>)
  400dfe:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  400e00:	4620      	mov	r0, r4
  400e02:	4b0d      	ldr	r3, [pc, #52]	; (400e38 <_get_usart_index+0x4c>)
  400e04:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  400e06:	2300      	movs	r3, #0
  400e08:	b143      	cbz	r3, 400e1c <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400e0a:	f240 2291 	movw	r2, #657	; 0x291
  400e0e:	4908      	ldr	r1, [pc, #32]	; (400e30 <_get_usart_index+0x44>)
  400e10:	2000      	movs	r0, #0
  400e12:	4b08      	ldr	r3, [pc, #32]	; (400e34 <_get_usart_index+0x48>)
  400e14:	4798      	blx	r3
	return 0;
  400e16:	2300      	movs	r3, #0
}
  400e18:	4618      	mov	r0, r3
  400e1a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  400e1c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400e20:	008a      	lsls	r2, r1, #2
  400e22:	4906      	ldr	r1, [pc, #24]	; (400e3c <_get_usart_index+0x50>)
  400e24:	5c8a      	ldrb	r2, [r1, r2]
  400e26:	4290      	cmp	r0, r2
  400e28:	d0f6      	beq.n	400e18 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  400e2a:	3301      	adds	r3, #1
  400e2c:	b2db      	uxtb	r3, r3
  400e2e:	e7eb      	b.n	400e08 <_get_usart_index+0x1c>
  400e30:	00401c70 	.word	0x00401c70
  400e34:	004008b5 	.word	0x004008b5
  400e38:	00400dc1 	.word	0x00400dc1
  400e3c:	00401c64 	.word	0x00401c64

00400e40 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  400e40:	b510      	push	{r4, lr}
	ASSERT(hw);
  400e42:	4604      	mov	r4, r0
  400e44:	f240 229e 	movw	r2, #670	; 0x29e
  400e48:	4911      	ldr	r1, [pc, #68]	; (400e90 <_usart_init+0x50>)
  400e4a:	3000      	adds	r0, #0
  400e4c:	bf18      	it	ne
  400e4e:	2001      	movne	r0, #1
  400e50:	4b10      	ldr	r3, [pc, #64]	; (400e94 <_usart_init+0x54>)
  400e52:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  400e54:	4620      	mov	r0, r4
  400e56:	4b10      	ldr	r3, [pc, #64]	; (400e98 <_usart_init+0x58>)
  400e58:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  400e5a:	4b10      	ldr	r3, [pc, #64]	; (400e9c <_usart_init+0x5c>)
  400e5c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  400e60:	2300      	movs	r3, #0
  400e62:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  400e64:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  400e66:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  400e68:	22ac      	movs	r2, #172	; 0xac
  400e6a:	6022      	str	r2, [r4, #0]
  400e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400e70:	6022      	str	r2, [r4, #0]
  400e72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400e76:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  400e78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400e7c:	0081      	lsls	r1, r0, #2
  400e7e:	4a08      	ldr	r2, [pc, #32]	; (400ea0 <_usart_init+0x60>)
  400e80:	440a      	add	r2, r1
  400e82:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  400e84:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  400e86:	4a07      	ldr	r2, [pc, #28]	; (400ea4 <_usart_init+0x64>)
  400e88:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  400e8a:	4618      	mov	r0, r3
  400e8c:	bd10      	pop	{r4, pc}
  400e8e:	bf00      	nop
  400e90:	00401c70 	.word	0x00401c70
  400e94:	004008b5 	.word	0x004008b5
  400e98:	00400ded 	.word	0x00400ded
  400e9c:	55534100 	.word	0x55534100
  400ea0:	00401c64 	.word	0x00401c64
  400ea4:	00030051 	.word	0x00030051

00400ea8 <_usart_sync_init>:
{
  400ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400eaa:	460c      	mov	r4, r1
	ASSERT(device);
  400eac:	4e09      	ldr	r6, [pc, #36]	; (400ed4 <_usart_sync_init+0x2c>)
  400eae:	4607      	mov	r7, r0
  400eb0:	22bd      	movs	r2, #189	; 0xbd
  400eb2:	4631      	mov	r1, r6
  400eb4:	3000      	adds	r0, #0
  400eb6:	bf18      	it	ne
  400eb8:	2001      	movne	r0, #1
  400eba:	4d07      	ldr	r5, [pc, #28]	; (400ed8 <_usart_sync_init+0x30>)
  400ebc:	47a8      	blx	r5
	ASSERT(hw);
  400ebe:	22be      	movs	r2, #190	; 0xbe
  400ec0:	4631      	mov	r1, r6
  400ec2:	1c20      	adds	r0, r4, #0
  400ec4:	bf18      	it	ne
  400ec6:	2001      	movne	r0, #1
  400ec8:	47a8      	blx	r5
	device->hw = hw;
  400eca:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  400ecc:	4620      	mov	r0, r4
  400ece:	4b03      	ldr	r3, [pc, #12]	; (400edc <_usart_sync_init+0x34>)
  400ed0:	4798      	blx	r3
}
  400ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ed4:	00401c70 	.word	0x00401c70
  400ed8:	004008b5 	.word	0x004008b5
  400edc:	00400e41 	.word	0x00400e41

00400ee0 <_usart_sync_enable>:
{
  400ee0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  400ee2:	4e0a      	ldr	r6, [pc, #40]	; (400f0c <_usart_sync_enable+0x2c>)
  400ee4:	4604      	mov	r4, r0
  400ee6:	f240 1205 	movw	r2, #261	; 0x105
  400eea:	4631      	mov	r1, r6
  400eec:	3000      	adds	r0, #0
  400eee:	bf18      	it	ne
  400ef0:	2001      	movne	r0, #1
  400ef2:	4d07      	ldr	r5, [pc, #28]	; (400f10 <_usart_sync_enable+0x30>)
  400ef4:	47a8      	blx	r5
	_usart_enable(device->hw);
  400ef6:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  400ef8:	f240 22c7 	movw	r2, #711	; 0x2c7
  400efc:	4631      	mov	r1, r6
  400efe:	1c20      	adds	r0, r4, #0
  400f00:	bf18      	it	ne
  400f02:	2001      	movne	r0, #1
  400f04:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  400f06:	2350      	movs	r3, #80	; 0x50
  400f08:	6023      	str	r3, [r4, #0]
  400f0a:	bd70      	pop	{r4, r5, r6, pc}
  400f0c:	00401c70 	.word	0x00401c70
  400f10:	004008b5 	.word	0x004008b5

00400f14 <_usart_sync_write_byte>:
{
  400f14:	b538      	push	{r3, r4, r5, lr}
  400f16:	460c      	mov	r4, r1
	ASSERT(device);
  400f18:	4605      	mov	r5, r0
  400f1a:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  400f1e:	4904      	ldr	r1, [pc, #16]	; (400f30 <_usart_sync_write_byte+0x1c>)
  400f20:	3000      	adds	r0, #0
  400f22:	bf18      	it	ne
  400f24:	2001      	movne	r0, #1
  400f26:	4b03      	ldr	r3, [pc, #12]	; (400f34 <_usart_sync_write_byte+0x20>)
  400f28:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  400f2a:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  400f2c:	61dc      	str	r4, [r3, #28]
  400f2e:	bd38      	pop	{r3, r4, r5, pc}
  400f30:	00401c70 	.word	0x00401c70
  400f34:	004008b5 	.word	0x004008b5

00400f38 <_usart_sync_read_byte>:
{
  400f38:	b510      	push	{r4, lr}
	ASSERT(device);
  400f3a:	4604      	mov	r4, r0
  400f3c:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  400f40:	4904      	ldr	r1, [pc, #16]	; (400f54 <_usart_sync_read_byte+0x1c>)
  400f42:	3000      	adds	r0, #0
  400f44:	bf18      	it	ne
  400f46:	2001      	movne	r0, #1
  400f48:	4b03      	ldr	r3, [pc, #12]	; (400f58 <_usart_sync_read_byte+0x20>)
  400f4a:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  400f4c:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  400f4e:	6998      	ldr	r0, [r3, #24]
}
  400f50:	b2c0      	uxtb	r0, r0
  400f52:	bd10      	pop	{r4, pc}
  400f54:	00401c70 	.word	0x00401c70
  400f58:	004008b5 	.word	0x004008b5

00400f5c <_usart_sync_is_ready_to_send>:
{
  400f5c:	b510      	push	{r4, lr}
	ASSERT(device);
  400f5e:	4604      	mov	r4, r0
  400f60:	f240 12c3 	movw	r2, #451	; 0x1c3
  400f64:	4905      	ldr	r1, [pc, #20]	; (400f7c <_usart_sync_is_ready_to_send+0x20>)
  400f66:	3000      	adds	r0, #0
  400f68:	bf18      	it	ne
  400f6a:	2001      	movne	r0, #1
  400f6c:	4b04      	ldr	r3, [pc, #16]	; (400f80 <_usart_sync_is_ready_to_send+0x24>)
  400f6e:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  400f70:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  400f72:	6958      	ldr	r0, [r3, #20]
}
  400f74:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400f78:	bd10      	pop	{r4, pc}
  400f7a:	bf00      	nop
  400f7c:	00401c70 	.word	0x00401c70
  400f80:	004008b5 	.word	0x004008b5

00400f84 <_usart_sync_is_transmit_done>:
{
  400f84:	b510      	push	{r4, lr}
	ASSERT(device);
  400f86:	4604      	mov	r4, r0
  400f88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  400f8c:	4905      	ldr	r1, [pc, #20]	; (400fa4 <_usart_sync_is_transmit_done+0x20>)
  400f8e:	3000      	adds	r0, #0
  400f90:	bf18      	it	ne
  400f92:	2001      	movne	r0, #1
  400f94:	4b04      	ldr	r3, [pc, #16]	; (400fa8 <_usart_sync_is_transmit_done+0x24>)
  400f96:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  400f98:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  400f9a:	6958      	ldr	r0, [r3, #20]
}
  400f9c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  400fa0:	bd10      	pop	{r4, pc}
  400fa2:	bf00      	nop
  400fa4:	00401c70 	.word	0x00401c70
  400fa8:	004008b5 	.word	0x004008b5

00400fac <_usart_sync_is_byte_received>:
{
  400fac:	b510      	push	{r4, lr}
	ASSERT(device);
  400fae:	4604      	mov	r4, r0
  400fb0:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  400fb4:	4905      	ldr	r1, [pc, #20]	; (400fcc <_usart_sync_is_byte_received+0x20>)
  400fb6:	3000      	adds	r0, #0
  400fb8:	bf18      	it	ne
  400fba:	2001      	movne	r0, #1
  400fbc:	4b04      	ldr	r3, [pc, #16]	; (400fd0 <_usart_sync_is_byte_received+0x24>)
  400fbe:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  400fc0:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  400fc2:	6958      	ldr	r0, [r3, #20]
  400fc4:	f000 0001 	and.w	r0, r0, #1
}
  400fc8:	bd10      	pop	{r4, pc}
  400fca:	bf00      	nop
  400fcc:	00401c70 	.word	0x00401c70
  400fd0:	004008b5 	.word	0x004008b5

00400fd4 <_usart_get_usart_sync>:
}
  400fd4:	2000      	movs	r0, #0
  400fd6:	4770      	bx	lr

00400fd8 <SPI_callback_test>:
		delay_ms(1000);
		SPI_Test();
	}
}

static void SPI_callback_test() {
  400fd8:	b508      	push	{r3, lr}
	printf("Message sent \n");
  400fda:	4802      	ldr	r0, [pc, #8]	; (400fe4 <SPI_callback_test+0xc>)
  400fdc:	4b02      	ldr	r3, [pc, #8]	; (400fe8 <SPI_callback_test+0x10>)
  400fde:	4798      	blx	r3
  400fe0:	bd08      	pop	{r3, pc}
  400fe2:	bf00      	nop
  400fe4:	00401c8c 	.word	0x00401c8c
  400fe8:	00401249 	.word	0x00401249

00400fec <SPI_Test>:
}


void SPI_Test() {
  400fec:	b530      	push	{r4, r5, lr}
  400fee:	b083      	sub	sp, #12
	struct io_descriptor *io;
	spi_m_async_get_io_descriptor(&SPI_0, &io);
  400ff0:	4d0b      	ldr	r5, [pc, #44]	; (401020 <SPI_Test+0x34>)
  400ff2:	a901      	add	r1, sp, #4
  400ff4:	4628      	mov	r0, r5
  400ff6:	4b0b      	ldr	r3, [pc, #44]	; (401024 <SPI_Test+0x38>)
  400ff8:	4798      	blx	r3
	
	uint8_t message = 42;
  400ffa:	ac02      	add	r4, sp, #8
  400ffc:	232a      	movs	r3, #42	; 0x2a
  400ffe:	f804 3d05 	strb.w	r3, [r4, #-5]!

	spi_m_async_register_callback(&SPI_0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)SPI_callback_test);
  401002:	4a09      	ldr	r2, [pc, #36]	; (401028 <SPI_Test+0x3c>)
  401004:	2100      	movs	r1, #0
  401006:	4628      	mov	r0, r5
  401008:	4b08      	ldr	r3, [pc, #32]	; (40102c <SPI_Test+0x40>)
  40100a:	4798      	blx	r3
	spi_m_async_enable(&SPI_0);
  40100c:	4628      	mov	r0, r5
  40100e:	4b08      	ldr	r3, [pc, #32]	; (401030 <SPI_Test+0x44>)
  401010:	4798      	blx	r3
	io_write(io, &message, 1);
  401012:	2201      	movs	r2, #1
  401014:	4621      	mov	r1, r4
  401016:	9801      	ldr	r0, [sp, #4]
  401018:	4b06      	ldr	r3, [pc, #24]	; (401034 <SPI_Test+0x48>)
  40101a:	4798      	blx	r3
}
  40101c:	b003      	add	sp, #12
  40101e:	bd30      	pop	{r4, r5, pc}
  401020:	204000a4 	.word	0x204000a4
  401024:	00400745 	.word	0x00400745
  401028:	00400fd9 	.word	0x00400fd9
  40102c:	00400701 	.word	0x00400701
  401030:	004006d9 	.word	0x004006d9
  401034:	004003f9 	.word	0x004003f9

00401038 <main>:
{
  401038:	b508      	push	{r3, lr}
	atmel_start_init();
  40103a:	4b04      	ldr	r3, [pc, #16]	; (40104c <main+0x14>)
  40103c:	4798      	blx	r3
		delay_ms(1000);
  40103e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401042:	4b03      	ldr	r3, [pc, #12]	; (401050 <main+0x18>)
  401044:	4798      	blx	r3
		SPI_Test();
  401046:	4b03      	ldr	r3, [pc, #12]	; (401054 <main+0x1c>)
  401048:	4798      	blx	r3
  40104a:	e7f8      	b.n	40103e <main+0x6>
  40104c:	004001d5 	.word	0x004001d5
  401050:	004003d9 	.word	0x004003d9
  401054:	00400fed 	.word	0x00400fed

00401058 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401058:	b958      	cbnz	r0, 401072 <_read+0x1a>
{
  40105a:	b508      	push	{r3, lr}
  40105c:	460b      	mov	r3, r1
  40105e:	4611      	mov	r1, r2
  401060:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401062:	4b05      	ldr	r3, [pc, #20]	; (401078 <_read+0x20>)
  401064:	4798      	blx	r3
	if (n < 0) {
  401066:	2800      	cmp	r0, #0
  401068:	db00      	blt.n	40106c <_read+0x14>
		return -1;
	}

	return n;
}
  40106a:	bd08      	pop	{r3, pc}
		return -1;
  40106c:	f04f 30ff 	mov.w	r0, #4294967295
  401070:	bd08      	pop	{r3, pc}
		return -1;
  401072:	f04f 30ff 	mov.w	r0, #4294967295
  401076:	4770      	bx	lr
  401078:	004010d1 	.word	0x004010d1

0040107c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  40107c:	3801      	subs	r0, #1
  40107e:	2802      	cmp	r0, #2
  401080:	d80b      	bhi.n	40109a <_write+0x1e>
{
  401082:	b508      	push	{r3, lr}
  401084:	460b      	mov	r3, r1
  401086:	4611      	mov	r1, r2
  401088:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  40108a:	4b05      	ldr	r3, [pc, #20]	; (4010a0 <_write+0x24>)
  40108c:	4798      	blx	r3
	if (n < 0) {
  40108e:	2800      	cmp	r0, #0
  401090:	db00      	blt.n	401094 <_write+0x18>
		return -1;
	}

	return n;
}
  401092:	bd08      	pop	{r3, pc}
		return -1;
  401094:	f04f 30ff 	mov.w	r0, #4294967295
  401098:	bd08      	pop	{r3, pc}
		return -1;
  40109a:	f04f 30ff 	mov.w	r0, #4294967295
  40109e:	4770      	bx	lr
  4010a0:	004010f5 	.word	0x004010f5

004010a4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  4010a4:	b570      	push	{r4, r5, r6, lr}
  4010a6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  4010a8:	4d06      	ldr	r5, [pc, #24]	; (4010c4 <stdio_io_init+0x20>)
  4010aa:	682b      	ldr	r3, [r5, #0]
  4010ac:	2100      	movs	r1, #0
  4010ae:	6898      	ldr	r0, [r3, #8]
  4010b0:	4c05      	ldr	r4, [pc, #20]	; (4010c8 <stdio_io_init+0x24>)
  4010b2:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4010b4:	682b      	ldr	r3, [r5, #0]
  4010b6:	2100      	movs	r1, #0
  4010b8:	6858      	ldr	r0, [r3, #4]
  4010ba:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  4010bc:	4b03      	ldr	r3, [pc, #12]	; (4010cc <stdio_io_init+0x28>)
  4010be:	601e      	str	r6, [r3, #0]
  4010c0:	bd70      	pop	{r4, r5, r6, pc}
  4010c2:	bf00      	nop
  4010c4:	20400000 	.word	0x20400000
  4010c8:	00401259 	.word	0x00401259
  4010cc:	2040008c 	.word	0x2040008c

004010d0 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  4010d0:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4010d2:	4b06      	ldr	r3, [pc, #24]	; (4010ec <stdio_io_read+0x1c>)
  4010d4:	681b      	ldr	r3, [r3, #0]
  4010d6:	b133      	cbz	r3, 4010e6 <stdio_io_read+0x16>
  4010d8:	460a      	mov	r2, r1
  4010da:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  4010dc:	b292      	uxth	r2, r2
  4010de:	4618      	mov	r0, r3
  4010e0:	4b03      	ldr	r3, [pc, #12]	; (4010f0 <stdio_io_read+0x20>)
  4010e2:	4798      	blx	r3
  4010e4:	bd08      	pop	{r3, pc}
		return 0;
  4010e6:	2000      	movs	r0, #0
}
  4010e8:	bd08      	pop	{r3, pc}
  4010ea:	bf00      	nop
  4010ec:	2040008c 	.word	0x2040008c
  4010f0:	00400429 	.word	0x00400429

004010f4 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  4010f4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4010f6:	4b06      	ldr	r3, [pc, #24]	; (401110 <stdio_io_write+0x1c>)
  4010f8:	681b      	ldr	r3, [r3, #0]
  4010fa:	b133      	cbz	r3, 40110a <stdio_io_write+0x16>
  4010fc:	460a      	mov	r2, r1
  4010fe:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  401100:	b292      	uxth	r2, r2
  401102:	4618      	mov	r0, r3
  401104:	4b03      	ldr	r3, [pc, #12]	; (401114 <stdio_io_write+0x20>)
  401106:	4798      	blx	r3
  401108:	bd08      	pop	{r3, pc}
		return 0;
  40110a:	2000      	movs	r0, #0
}
  40110c:	bd08      	pop	{r3, pc}
  40110e:	bf00      	nop
  401110:	2040008c 	.word	0x2040008c
  401114:	004003f9 	.word	0x004003f9

00401118 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401118:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  40111a:	4c04      	ldr	r4, [pc, #16]	; (40112c <stdio_redirect_init+0x14>)
  40111c:	4620      	mov	r0, r4
  40111e:	4b04      	ldr	r3, [pc, #16]	; (401130 <stdio_redirect_init+0x18>)
  401120:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  401122:	4620      	mov	r0, r4
  401124:	4b03      	ldr	r3, [pc, #12]	; (401134 <stdio_redirect_init+0x1c>)
  401126:	4798      	blx	r3
  401128:	bd10      	pop	{r4, pc}
  40112a:	bf00      	nop
  40112c:	20400098 	.word	0x20400098
  401130:	00400889 	.word	0x00400889
  401134:	004010a5 	.word	0x004010a5

00401138 <__libc_init_array>:
  401138:	b570      	push	{r4, r5, r6, lr}
  40113a:	4e0d      	ldr	r6, [pc, #52]	; (401170 <__libc_init_array+0x38>)
  40113c:	4c0d      	ldr	r4, [pc, #52]	; (401174 <__libc_init_array+0x3c>)
  40113e:	1ba4      	subs	r4, r4, r6
  401140:	10a4      	asrs	r4, r4, #2
  401142:	2500      	movs	r5, #0
  401144:	42a5      	cmp	r5, r4
  401146:	d109      	bne.n	40115c <__libc_init_array+0x24>
  401148:	4e0b      	ldr	r6, [pc, #44]	; (401178 <__libc_init_array+0x40>)
  40114a:	4c0c      	ldr	r4, [pc, #48]	; (40117c <__libc_init_array+0x44>)
  40114c:	f000 fdd8 	bl	401d00 <_init>
  401150:	1ba4      	subs	r4, r4, r6
  401152:	10a4      	asrs	r4, r4, #2
  401154:	2500      	movs	r5, #0
  401156:	42a5      	cmp	r5, r4
  401158:	d105      	bne.n	401166 <__libc_init_array+0x2e>
  40115a:	bd70      	pop	{r4, r5, r6, pc}
  40115c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401160:	4798      	blx	r3
  401162:	3501      	adds	r5, #1
  401164:	e7ee      	b.n	401144 <__libc_init_array+0xc>
  401166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40116a:	4798      	blx	r3
  40116c:	3501      	adds	r5, #1
  40116e:	e7f2      	b.n	401156 <__libc_init_array+0x1e>
  401170:	00401d0c 	.word	0x00401d0c
  401174:	00401d0c 	.word	0x00401d0c
  401178:	00401d0c 	.word	0x00401d0c
  40117c:	00401d10 	.word	0x00401d10

00401180 <memset>:
  401180:	4402      	add	r2, r0
  401182:	4603      	mov	r3, r0
  401184:	4293      	cmp	r3, r2
  401186:	d100      	bne.n	40118a <memset+0xa>
  401188:	4770      	bx	lr
  40118a:	f803 1b01 	strb.w	r1, [r3], #1
  40118e:	e7f9      	b.n	401184 <memset+0x4>

00401190 <_puts_r>:
  401190:	b570      	push	{r4, r5, r6, lr}
  401192:	460e      	mov	r6, r1
  401194:	4605      	mov	r5, r0
  401196:	b118      	cbz	r0, 4011a0 <_puts_r+0x10>
  401198:	6983      	ldr	r3, [r0, #24]
  40119a:	b90b      	cbnz	r3, 4011a0 <_puts_r+0x10>
  40119c:	f000 fac4 	bl	401728 <__sinit>
  4011a0:	69ab      	ldr	r3, [r5, #24]
  4011a2:	68ac      	ldr	r4, [r5, #8]
  4011a4:	b913      	cbnz	r3, 4011ac <_puts_r+0x1c>
  4011a6:	4628      	mov	r0, r5
  4011a8:	f000 fabe 	bl	401728 <__sinit>
  4011ac:	4b23      	ldr	r3, [pc, #140]	; (40123c <_puts_r+0xac>)
  4011ae:	429c      	cmp	r4, r3
  4011b0:	d117      	bne.n	4011e2 <_puts_r+0x52>
  4011b2:	686c      	ldr	r4, [r5, #4]
  4011b4:	89a3      	ldrh	r3, [r4, #12]
  4011b6:	071b      	lsls	r3, r3, #28
  4011b8:	d51d      	bpl.n	4011f6 <_puts_r+0x66>
  4011ba:	6923      	ldr	r3, [r4, #16]
  4011bc:	b1db      	cbz	r3, 4011f6 <_puts_r+0x66>
  4011be:	3e01      	subs	r6, #1
  4011c0:	68a3      	ldr	r3, [r4, #8]
  4011c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  4011c6:	3b01      	subs	r3, #1
  4011c8:	60a3      	str	r3, [r4, #8]
  4011ca:	b9e9      	cbnz	r1, 401208 <_puts_r+0x78>
  4011cc:	2b00      	cmp	r3, #0
  4011ce:	da2e      	bge.n	40122e <_puts_r+0x9e>
  4011d0:	4622      	mov	r2, r4
  4011d2:	210a      	movs	r1, #10
  4011d4:	4628      	mov	r0, r5
  4011d6:	f000 f8f5 	bl	4013c4 <__swbuf_r>
  4011da:	3001      	adds	r0, #1
  4011dc:	d011      	beq.n	401202 <_puts_r+0x72>
  4011de:	200a      	movs	r0, #10
  4011e0:	bd70      	pop	{r4, r5, r6, pc}
  4011e2:	4b17      	ldr	r3, [pc, #92]	; (401240 <_puts_r+0xb0>)
  4011e4:	429c      	cmp	r4, r3
  4011e6:	d101      	bne.n	4011ec <_puts_r+0x5c>
  4011e8:	68ac      	ldr	r4, [r5, #8]
  4011ea:	e7e3      	b.n	4011b4 <_puts_r+0x24>
  4011ec:	4b15      	ldr	r3, [pc, #84]	; (401244 <_puts_r+0xb4>)
  4011ee:	429c      	cmp	r4, r3
  4011f0:	bf08      	it	eq
  4011f2:	68ec      	ldreq	r4, [r5, #12]
  4011f4:	e7de      	b.n	4011b4 <_puts_r+0x24>
  4011f6:	4621      	mov	r1, r4
  4011f8:	4628      	mov	r0, r5
  4011fa:	f000 f935 	bl	401468 <__swsetup_r>
  4011fe:	2800      	cmp	r0, #0
  401200:	d0dd      	beq.n	4011be <_puts_r+0x2e>
  401202:	f04f 30ff 	mov.w	r0, #4294967295
  401206:	bd70      	pop	{r4, r5, r6, pc}
  401208:	2b00      	cmp	r3, #0
  40120a:	da04      	bge.n	401216 <_puts_r+0x86>
  40120c:	69a2      	ldr	r2, [r4, #24]
  40120e:	4293      	cmp	r3, r2
  401210:	db06      	blt.n	401220 <_puts_r+0x90>
  401212:	290a      	cmp	r1, #10
  401214:	d004      	beq.n	401220 <_puts_r+0x90>
  401216:	6823      	ldr	r3, [r4, #0]
  401218:	1c5a      	adds	r2, r3, #1
  40121a:	6022      	str	r2, [r4, #0]
  40121c:	7019      	strb	r1, [r3, #0]
  40121e:	e7cf      	b.n	4011c0 <_puts_r+0x30>
  401220:	4622      	mov	r2, r4
  401222:	4628      	mov	r0, r5
  401224:	f000 f8ce 	bl	4013c4 <__swbuf_r>
  401228:	3001      	adds	r0, #1
  40122a:	d1c9      	bne.n	4011c0 <_puts_r+0x30>
  40122c:	e7e9      	b.n	401202 <_puts_r+0x72>
  40122e:	6823      	ldr	r3, [r4, #0]
  401230:	200a      	movs	r0, #10
  401232:	1c5a      	adds	r2, r3, #1
  401234:	6022      	str	r2, [r4, #0]
  401236:	7018      	strb	r0, [r3, #0]
  401238:	bd70      	pop	{r4, r5, r6, pc}
  40123a:	bf00      	nop
  40123c:	00401cc0 	.word	0x00401cc0
  401240:	00401ce0 	.word	0x00401ce0
  401244:	00401ca0 	.word	0x00401ca0

00401248 <puts>:
  401248:	4b02      	ldr	r3, [pc, #8]	; (401254 <puts+0xc>)
  40124a:	4601      	mov	r1, r0
  40124c:	6818      	ldr	r0, [r3, #0]
  40124e:	f7ff bf9f 	b.w	401190 <_puts_r>
  401252:	bf00      	nop
  401254:	20400000 	.word	0x20400000

00401258 <setbuf>:
  401258:	2900      	cmp	r1, #0
  40125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40125e:	bf0c      	ite	eq
  401260:	2202      	moveq	r2, #2
  401262:	2200      	movne	r2, #0
  401264:	f000 b800 	b.w	401268 <setvbuf>

00401268 <setvbuf>:
  401268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  40126c:	461d      	mov	r5, r3
  40126e:	4b51      	ldr	r3, [pc, #324]	; (4013b4 <setvbuf+0x14c>)
  401270:	681e      	ldr	r6, [r3, #0]
  401272:	4604      	mov	r4, r0
  401274:	460f      	mov	r7, r1
  401276:	4690      	mov	r8, r2
  401278:	b126      	cbz	r6, 401284 <setvbuf+0x1c>
  40127a:	69b3      	ldr	r3, [r6, #24]
  40127c:	b913      	cbnz	r3, 401284 <setvbuf+0x1c>
  40127e:	4630      	mov	r0, r6
  401280:	f000 fa52 	bl	401728 <__sinit>
  401284:	4b4c      	ldr	r3, [pc, #304]	; (4013b8 <setvbuf+0x150>)
  401286:	429c      	cmp	r4, r3
  401288:	d152      	bne.n	401330 <setvbuf+0xc8>
  40128a:	6874      	ldr	r4, [r6, #4]
  40128c:	f1b8 0f02 	cmp.w	r8, #2
  401290:	d006      	beq.n	4012a0 <setvbuf+0x38>
  401292:	f1b8 0f01 	cmp.w	r8, #1
  401296:	f200 8089 	bhi.w	4013ac <setvbuf+0x144>
  40129a:	2d00      	cmp	r5, #0
  40129c:	f2c0 8086 	blt.w	4013ac <setvbuf+0x144>
  4012a0:	4621      	mov	r1, r4
  4012a2:	4630      	mov	r0, r6
  4012a4:	f000 f9d6 	bl	401654 <_fflush_r>
  4012a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4012aa:	b141      	cbz	r1, 4012be <setvbuf+0x56>
  4012ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4012b0:	4299      	cmp	r1, r3
  4012b2:	d002      	beq.n	4012ba <setvbuf+0x52>
  4012b4:	4630      	mov	r0, r6
  4012b6:	f000 fb2d 	bl	401914 <_free_r>
  4012ba:	2300      	movs	r3, #0
  4012bc:	6363      	str	r3, [r4, #52]	; 0x34
  4012be:	2300      	movs	r3, #0
  4012c0:	61a3      	str	r3, [r4, #24]
  4012c2:	6063      	str	r3, [r4, #4]
  4012c4:	89a3      	ldrh	r3, [r4, #12]
  4012c6:	061b      	lsls	r3, r3, #24
  4012c8:	d503      	bpl.n	4012d2 <setvbuf+0x6a>
  4012ca:	6921      	ldr	r1, [r4, #16]
  4012cc:	4630      	mov	r0, r6
  4012ce:	f000 fb21 	bl	401914 <_free_r>
  4012d2:	89a3      	ldrh	r3, [r4, #12]
  4012d4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4012d8:	f023 0303 	bic.w	r3, r3, #3
  4012dc:	f1b8 0f02 	cmp.w	r8, #2
  4012e0:	81a3      	strh	r3, [r4, #12]
  4012e2:	d05d      	beq.n	4013a0 <setvbuf+0x138>
  4012e4:	ab01      	add	r3, sp, #4
  4012e6:	466a      	mov	r2, sp
  4012e8:	4621      	mov	r1, r4
  4012ea:	4630      	mov	r0, r6
  4012ec:	f000 faa6 	bl	40183c <__swhatbuf_r>
  4012f0:	89a3      	ldrh	r3, [r4, #12]
  4012f2:	4318      	orrs	r0, r3
  4012f4:	81a0      	strh	r0, [r4, #12]
  4012f6:	bb2d      	cbnz	r5, 401344 <setvbuf+0xdc>
  4012f8:	9d00      	ldr	r5, [sp, #0]
  4012fa:	4628      	mov	r0, r5
  4012fc:	f000 fb02 	bl	401904 <malloc>
  401300:	4607      	mov	r7, r0
  401302:	2800      	cmp	r0, #0
  401304:	d14e      	bne.n	4013a4 <setvbuf+0x13c>
  401306:	f8dd 9000 	ldr.w	r9, [sp]
  40130a:	45a9      	cmp	r9, r5
  40130c:	d13c      	bne.n	401388 <setvbuf+0x120>
  40130e:	f04f 30ff 	mov.w	r0, #4294967295
  401312:	89a3      	ldrh	r3, [r4, #12]
  401314:	f043 0302 	orr.w	r3, r3, #2
  401318:	81a3      	strh	r3, [r4, #12]
  40131a:	2300      	movs	r3, #0
  40131c:	60a3      	str	r3, [r4, #8]
  40131e:	f104 0347 	add.w	r3, r4, #71	; 0x47
  401322:	6023      	str	r3, [r4, #0]
  401324:	6123      	str	r3, [r4, #16]
  401326:	2301      	movs	r3, #1
  401328:	6163      	str	r3, [r4, #20]
  40132a:	b003      	add	sp, #12
  40132c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401330:	4b22      	ldr	r3, [pc, #136]	; (4013bc <setvbuf+0x154>)
  401332:	429c      	cmp	r4, r3
  401334:	d101      	bne.n	40133a <setvbuf+0xd2>
  401336:	68b4      	ldr	r4, [r6, #8]
  401338:	e7a8      	b.n	40128c <setvbuf+0x24>
  40133a:	4b21      	ldr	r3, [pc, #132]	; (4013c0 <setvbuf+0x158>)
  40133c:	429c      	cmp	r4, r3
  40133e:	bf08      	it	eq
  401340:	68f4      	ldreq	r4, [r6, #12]
  401342:	e7a3      	b.n	40128c <setvbuf+0x24>
  401344:	2f00      	cmp	r7, #0
  401346:	d0d8      	beq.n	4012fa <setvbuf+0x92>
  401348:	69b3      	ldr	r3, [r6, #24]
  40134a:	b913      	cbnz	r3, 401352 <setvbuf+0xea>
  40134c:	4630      	mov	r0, r6
  40134e:	f000 f9eb 	bl	401728 <__sinit>
  401352:	f1b8 0f01 	cmp.w	r8, #1
  401356:	bf08      	it	eq
  401358:	89a3      	ldrheq	r3, [r4, #12]
  40135a:	6027      	str	r7, [r4, #0]
  40135c:	bf04      	itt	eq
  40135e:	f043 0301 	orreq.w	r3, r3, #1
  401362:	81a3      	strheq	r3, [r4, #12]
  401364:	89a3      	ldrh	r3, [r4, #12]
  401366:	6127      	str	r7, [r4, #16]
  401368:	f013 0008 	ands.w	r0, r3, #8
  40136c:	6165      	str	r5, [r4, #20]
  40136e:	d01b      	beq.n	4013a8 <setvbuf+0x140>
  401370:	f013 0001 	ands.w	r0, r3, #1
  401374:	bf18      	it	ne
  401376:	426d      	negne	r5, r5
  401378:	f04f 0300 	mov.w	r3, #0
  40137c:	bf1d      	ittte	ne
  40137e:	60a3      	strne	r3, [r4, #8]
  401380:	61a5      	strne	r5, [r4, #24]
  401382:	4618      	movne	r0, r3
  401384:	60a5      	streq	r5, [r4, #8]
  401386:	e7d0      	b.n	40132a <setvbuf+0xc2>
  401388:	4648      	mov	r0, r9
  40138a:	f000 fabb 	bl	401904 <malloc>
  40138e:	4607      	mov	r7, r0
  401390:	2800      	cmp	r0, #0
  401392:	d0bc      	beq.n	40130e <setvbuf+0xa6>
  401394:	89a3      	ldrh	r3, [r4, #12]
  401396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40139a:	81a3      	strh	r3, [r4, #12]
  40139c:	464d      	mov	r5, r9
  40139e:	e7d3      	b.n	401348 <setvbuf+0xe0>
  4013a0:	2000      	movs	r0, #0
  4013a2:	e7b6      	b.n	401312 <setvbuf+0xaa>
  4013a4:	46a9      	mov	r9, r5
  4013a6:	e7f5      	b.n	401394 <setvbuf+0x12c>
  4013a8:	60a0      	str	r0, [r4, #8]
  4013aa:	e7be      	b.n	40132a <setvbuf+0xc2>
  4013ac:	f04f 30ff 	mov.w	r0, #4294967295
  4013b0:	e7bb      	b.n	40132a <setvbuf+0xc2>
  4013b2:	bf00      	nop
  4013b4:	20400000 	.word	0x20400000
  4013b8:	00401cc0 	.word	0x00401cc0
  4013bc:	00401ce0 	.word	0x00401ce0
  4013c0:	00401ca0 	.word	0x00401ca0

004013c4 <__swbuf_r>:
  4013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4013c6:	460e      	mov	r6, r1
  4013c8:	4614      	mov	r4, r2
  4013ca:	4605      	mov	r5, r0
  4013cc:	b118      	cbz	r0, 4013d6 <__swbuf_r+0x12>
  4013ce:	6983      	ldr	r3, [r0, #24]
  4013d0:	b90b      	cbnz	r3, 4013d6 <__swbuf_r+0x12>
  4013d2:	f000 f9a9 	bl	401728 <__sinit>
  4013d6:	4b21      	ldr	r3, [pc, #132]	; (40145c <__swbuf_r+0x98>)
  4013d8:	429c      	cmp	r4, r3
  4013da:	d12a      	bne.n	401432 <__swbuf_r+0x6e>
  4013dc:	686c      	ldr	r4, [r5, #4]
  4013de:	69a3      	ldr	r3, [r4, #24]
  4013e0:	60a3      	str	r3, [r4, #8]
  4013e2:	89a3      	ldrh	r3, [r4, #12]
  4013e4:	071a      	lsls	r2, r3, #28
  4013e6:	d52e      	bpl.n	401446 <__swbuf_r+0x82>
  4013e8:	6923      	ldr	r3, [r4, #16]
  4013ea:	b363      	cbz	r3, 401446 <__swbuf_r+0x82>
  4013ec:	6923      	ldr	r3, [r4, #16]
  4013ee:	6820      	ldr	r0, [r4, #0]
  4013f0:	1ac0      	subs	r0, r0, r3
  4013f2:	6963      	ldr	r3, [r4, #20]
  4013f4:	b2f6      	uxtb	r6, r6
  4013f6:	4298      	cmp	r0, r3
  4013f8:	4637      	mov	r7, r6
  4013fa:	db04      	blt.n	401406 <__swbuf_r+0x42>
  4013fc:	4621      	mov	r1, r4
  4013fe:	4628      	mov	r0, r5
  401400:	f000 f928 	bl	401654 <_fflush_r>
  401404:	bb28      	cbnz	r0, 401452 <__swbuf_r+0x8e>
  401406:	68a3      	ldr	r3, [r4, #8]
  401408:	3b01      	subs	r3, #1
  40140a:	60a3      	str	r3, [r4, #8]
  40140c:	6823      	ldr	r3, [r4, #0]
  40140e:	1c5a      	adds	r2, r3, #1
  401410:	6022      	str	r2, [r4, #0]
  401412:	701e      	strb	r6, [r3, #0]
  401414:	6963      	ldr	r3, [r4, #20]
  401416:	3001      	adds	r0, #1
  401418:	4298      	cmp	r0, r3
  40141a:	d004      	beq.n	401426 <__swbuf_r+0x62>
  40141c:	89a3      	ldrh	r3, [r4, #12]
  40141e:	07db      	lsls	r3, r3, #31
  401420:	d519      	bpl.n	401456 <__swbuf_r+0x92>
  401422:	2e0a      	cmp	r6, #10
  401424:	d117      	bne.n	401456 <__swbuf_r+0x92>
  401426:	4621      	mov	r1, r4
  401428:	4628      	mov	r0, r5
  40142a:	f000 f913 	bl	401654 <_fflush_r>
  40142e:	b190      	cbz	r0, 401456 <__swbuf_r+0x92>
  401430:	e00f      	b.n	401452 <__swbuf_r+0x8e>
  401432:	4b0b      	ldr	r3, [pc, #44]	; (401460 <__swbuf_r+0x9c>)
  401434:	429c      	cmp	r4, r3
  401436:	d101      	bne.n	40143c <__swbuf_r+0x78>
  401438:	68ac      	ldr	r4, [r5, #8]
  40143a:	e7d0      	b.n	4013de <__swbuf_r+0x1a>
  40143c:	4b09      	ldr	r3, [pc, #36]	; (401464 <__swbuf_r+0xa0>)
  40143e:	429c      	cmp	r4, r3
  401440:	bf08      	it	eq
  401442:	68ec      	ldreq	r4, [r5, #12]
  401444:	e7cb      	b.n	4013de <__swbuf_r+0x1a>
  401446:	4621      	mov	r1, r4
  401448:	4628      	mov	r0, r5
  40144a:	f000 f80d 	bl	401468 <__swsetup_r>
  40144e:	2800      	cmp	r0, #0
  401450:	d0cc      	beq.n	4013ec <__swbuf_r+0x28>
  401452:	f04f 37ff 	mov.w	r7, #4294967295
  401456:	4638      	mov	r0, r7
  401458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40145a:	bf00      	nop
  40145c:	00401cc0 	.word	0x00401cc0
  401460:	00401ce0 	.word	0x00401ce0
  401464:	00401ca0 	.word	0x00401ca0

00401468 <__swsetup_r>:
  401468:	4b32      	ldr	r3, [pc, #200]	; (401534 <__swsetup_r+0xcc>)
  40146a:	b570      	push	{r4, r5, r6, lr}
  40146c:	681d      	ldr	r5, [r3, #0]
  40146e:	4606      	mov	r6, r0
  401470:	460c      	mov	r4, r1
  401472:	b125      	cbz	r5, 40147e <__swsetup_r+0x16>
  401474:	69ab      	ldr	r3, [r5, #24]
  401476:	b913      	cbnz	r3, 40147e <__swsetup_r+0x16>
  401478:	4628      	mov	r0, r5
  40147a:	f000 f955 	bl	401728 <__sinit>
  40147e:	4b2e      	ldr	r3, [pc, #184]	; (401538 <__swsetup_r+0xd0>)
  401480:	429c      	cmp	r4, r3
  401482:	d10f      	bne.n	4014a4 <__swsetup_r+0x3c>
  401484:	686c      	ldr	r4, [r5, #4]
  401486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40148a:	b29a      	uxth	r2, r3
  40148c:	0715      	lsls	r5, r2, #28
  40148e:	d42c      	bmi.n	4014ea <__swsetup_r+0x82>
  401490:	06d0      	lsls	r0, r2, #27
  401492:	d411      	bmi.n	4014b8 <__swsetup_r+0x50>
  401494:	2209      	movs	r2, #9
  401496:	6032      	str	r2, [r6, #0]
  401498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40149c:	81a3      	strh	r3, [r4, #12]
  40149e:	f04f 30ff 	mov.w	r0, #4294967295
  4014a2:	bd70      	pop	{r4, r5, r6, pc}
  4014a4:	4b25      	ldr	r3, [pc, #148]	; (40153c <__swsetup_r+0xd4>)
  4014a6:	429c      	cmp	r4, r3
  4014a8:	d101      	bne.n	4014ae <__swsetup_r+0x46>
  4014aa:	68ac      	ldr	r4, [r5, #8]
  4014ac:	e7eb      	b.n	401486 <__swsetup_r+0x1e>
  4014ae:	4b24      	ldr	r3, [pc, #144]	; (401540 <__swsetup_r+0xd8>)
  4014b0:	429c      	cmp	r4, r3
  4014b2:	bf08      	it	eq
  4014b4:	68ec      	ldreq	r4, [r5, #12]
  4014b6:	e7e6      	b.n	401486 <__swsetup_r+0x1e>
  4014b8:	0751      	lsls	r1, r2, #29
  4014ba:	d512      	bpl.n	4014e2 <__swsetup_r+0x7a>
  4014bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4014be:	b141      	cbz	r1, 4014d2 <__swsetup_r+0x6a>
  4014c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4014c4:	4299      	cmp	r1, r3
  4014c6:	d002      	beq.n	4014ce <__swsetup_r+0x66>
  4014c8:	4630      	mov	r0, r6
  4014ca:	f000 fa23 	bl	401914 <_free_r>
  4014ce:	2300      	movs	r3, #0
  4014d0:	6363      	str	r3, [r4, #52]	; 0x34
  4014d2:	89a3      	ldrh	r3, [r4, #12]
  4014d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4014d8:	81a3      	strh	r3, [r4, #12]
  4014da:	2300      	movs	r3, #0
  4014dc:	6063      	str	r3, [r4, #4]
  4014de:	6923      	ldr	r3, [r4, #16]
  4014e0:	6023      	str	r3, [r4, #0]
  4014e2:	89a3      	ldrh	r3, [r4, #12]
  4014e4:	f043 0308 	orr.w	r3, r3, #8
  4014e8:	81a3      	strh	r3, [r4, #12]
  4014ea:	6923      	ldr	r3, [r4, #16]
  4014ec:	b94b      	cbnz	r3, 401502 <__swsetup_r+0x9a>
  4014ee:	89a3      	ldrh	r3, [r4, #12]
  4014f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
  4014f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4014f8:	d003      	beq.n	401502 <__swsetup_r+0x9a>
  4014fa:	4621      	mov	r1, r4
  4014fc:	4630      	mov	r0, r6
  4014fe:	f000 f9c1 	bl	401884 <__smakebuf_r>
  401502:	89a2      	ldrh	r2, [r4, #12]
  401504:	f012 0301 	ands.w	r3, r2, #1
  401508:	d00c      	beq.n	401524 <__swsetup_r+0xbc>
  40150a:	2300      	movs	r3, #0
  40150c:	60a3      	str	r3, [r4, #8]
  40150e:	6963      	ldr	r3, [r4, #20]
  401510:	425b      	negs	r3, r3
  401512:	61a3      	str	r3, [r4, #24]
  401514:	6923      	ldr	r3, [r4, #16]
  401516:	b953      	cbnz	r3, 40152e <__swsetup_r+0xc6>
  401518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40151c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  401520:	d1ba      	bne.n	401498 <__swsetup_r+0x30>
  401522:	bd70      	pop	{r4, r5, r6, pc}
  401524:	0792      	lsls	r2, r2, #30
  401526:	bf58      	it	pl
  401528:	6963      	ldrpl	r3, [r4, #20]
  40152a:	60a3      	str	r3, [r4, #8]
  40152c:	e7f2      	b.n	401514 <__swsetup_r+0xac>
  40152e:	2000      	movs	r0, #0
  401530:	e7f7      	b.n	401522 <__swsetup_r+0xba>
  401532:	bf00      	nop
  401534:	20400000 	.word	0x20400000
  401538:	00401cc0 	.word	0x00401cc0
  40153c:	00401ce0 	.word	0x00401ce0
  401540:	00401ca0 	.word	0x00401ca0

00401544 <__sflush_r>:
  401544:	898a      	ldrh	r2, [r1, #12]
  401546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40154a:	4605      	mov	r5, r0
  40154c:	0710      	lsls	r0, r2, #28
  40154e:	460c      	mov	r4, r1
  401550:	d45a      	bmi.n	401608 <__sflush_r+0xc4>
  401552:	684b      	ldr	r3, [r1, #4]
  401554:	2b00      	cmp	r3, #0
  401556:	dc05      	bgt.n	401564 <__sflush_r+0x20>
  401558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  40155a:	2b00      	cmp	r3, #0
  40155c:	dc02      	bgt.n	401564 <__sflush_r+0x20>
  40155e:	2000      	movs	r0, #0
  401560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401566:	2e00      	cmp	r6, #0
  401568:	d0f9      	beq.n	40155e <__sflush_r+0x1a>
  40156a:	2300      	movs	r3, #0
  40156c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  401570:	682f      	ldr	r7, [r5, #0]
  401572:	602b      	str	r3, [r5, #0]
  401574:	d033      	beq.n	4015de <__sflush_r+0x9a>
  401576:	6d60      	ldr	r0, [r4, #84]	; 0x54
  401578:	89a3      	ldrh	r3, [r4, #12]
  40157a:	075a      	lsls	r2, r3, #29
  40157c:	d505      	bpl.n	40158a <__sflush_r+0x46>
  40157e:	6863      	ldr	r3, [r4, #4]
  401580:	1ac0      	subs	r0, r0, r3
  401582:	6b63      	ldr	r3, [r4, #52]	; 0x34
  401584:	b10b      	cbz	r3, 40158a <__sflush_r+0x46>
  401586:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401588:	1ac0      	subs	r0, r0, r3
  40158a:	2300      	movs	r3, #0
  40158c:	4602      	mov	r2, r0
  40158e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401590:	6a21      	ldr	r1, [r4, #32]
  401592:	4628      	mov	r0, r5
  401594:	47b0      	blx	r6
  401596:	1c43      	adds	r3, r0, #1
  401598:	89a3      	ldrh	r3, [r4, #12]
  40159a:	d106      	bne.n	4015aa <__sflush_r+0x66>
  40159c:	6829      	ldr	r1, [r5, #0]
  40159e:	291d      	cmp	r1, #29
  4015a0:	d84b      	bhi.n	40163a <__sflush_r+0xf6>
  4015a2:	4a2b      	ldr	r2, [pc, #172]	; (401650 <__sflush_r+0x10c>)
  4015a4:	40ca      	lsrs	r2, r1
  4015a6:	07d6      	lsls	r6, r2, #31
  4015a8:	d547      	bpl.n	40163a <__sflush_r+0xf6>
  4015aa:	2200      	movs	r2, #0
  4015ac:	6062      	str	r2, [r4, #4]
  4015ae:	04d9      	lsls	r1, r3, #19
  4015b0:	6922      	ldr	r2, [r4, #16]
  4015b2:	6022      	str	r2, [r4, #0]
  4015b4:	d504      	bpl.n	4015c0 <__sflush_r+0x7c>
  4015b6:	1c42      	adds	r2, r0, #1
  4015b8:	d101      	bne.n	4015be <__sflush_r+0x7a>
  4015ba:	682b      	ldr	r3, [r5, #0]
  4015bc:	b903      	cbnz	r3, 4015c0 <__sflush_r+0x7c>
  4015be:	6560      	str	r0, [r4, #84]	; 0x54
  4015c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4015c2:	602f      	str	r7, [r5, #0]
  4015c4:	2900      	cmp	r1, #0
  4015c6:	d0ca      	beq.n	40155e <__sflush_r+0x1a>
  4015c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4015cc:	4299      	cmp	r1, r3
  4015ce:	d002      	beq.n	4015d6 <__sflush_r+0x92>
  4015d0:	4628      	mov	r0, r5
  4015d2:	f000 f99f 	bl	401914 <_free_r>
  4015d6:	2000      	movs	r0, #0
  4015d8:	6360      	str	r0, [r4, #52]	; 0x34
  4015da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015de:	6a21      	ldr	r1, [r4, #32]
  4015e0:	2301      	movs	r3, #1
  4015e2:	4628      	mov	r0, r5
  4015e4:	47b0      	blx	r6
  4015e6:	1c41      	adds	r1, r0, #1
  4015e8:	d1c6      	bne.n	401578 <__sflush_r+0x34>
  4015ea:	682b      	ldr	r3, [r5, #0]
  4015ec:	2b00      	cmp	r3, #0
  4015ee:	d0c3      	beq.n	401578 <__sflush_r+0x34>
  4015f0:	2b1d      	cmp	r3, #29
  4015f2:	d001      	beq.n	4015f8 <__sflush_r+0xb4>
  4015f4:	2b16      	cmp	r3, #22
  4015f6:	d101      	bne.n	4015fc <__sflush_r+0xb8>
  4015f8:	602f      	str	r7, [r5, #0]
  4015fa:	e7b0      	b.n	40155e <__sflush_r+0x1a>
  4015fc:	89a3      	ldrh	r3, [r4, #12]
  4015fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401602:	81a3      	strh	r3, [r4, #12]
  401604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401608:	690f      	ldr	r7, [r1, #16]
  40160a:	2f00      	cmp	r7, #0
  40160c:	d0a7      	beq.n	40155e <__sflush_r+0x1a>
  40160e:	0793      	lsls	r3, r2, #30
  401610:	680e      	ldr	r6, [r1, #0]
  401612:	bf08      	it	eq
  401614:	694b      	ldreq	r3, [r1, #20]
  401616:	600f      	str	r7, [r1, #0]
  401618:	bf18      	it	ne
  40161a:	2300      	movne	r3, #0
  40161c:	eba6 0807 	sub.w	r8, r6, r7
  401620:	608b      	str	r3, [r1, #8]
  401622:	f1b8 0f00 	cmp.w	r8, #0
  401626:	dd9a      	ble.n	40155e <__sflush_r+0x1a>
  401628:	4643      	mov	r3, r8
  40162a:	463a      	mov	r2, r7
  40162c:	6a21      	ldr	r1, [r4, #32]
  40162e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  401630:	4628      	mov	r0, r5
  401632:	47b0      	blx	r6
  401634:	2800      	cmp	r0, #0
  401636:	dc07      	bgt.n	401648 <__sflush_r+0x104>
  401638:	89a3      	ldrh	r3, [r4, #12]
  40163a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40163e:	81a3      	strh	r3, [r4, #12]
  401640:	f04f 30ff 	mov.w	r0, #4294967295
  401644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401648:	4407      	add	r7, r0
  40164a:	eba8 0800 	sub.w	r8, r8, r0
  40164e:	e7e8      	b.n	401622 <__sflush_r+0xde>
  401650:	20400001 	.word	0x20400001

00401654 <_fflush_r>:
  401654:	b538      	push	{r3, r4, r5, lr}
  401656:	690b      	ldr	r3, [r1, #16]
  401658:	4605      	mov	r5, r0
  40165a:	460c      	mov	r4, r1
  40165c:	b1db      	cbz	r3, 401696 <_fflush_r+0x42>
  40165e:	b118      	cbz	r0, 401668 <_fflush_r+0x14>
  401660:	6983      	ldr	r3, [r0, #24]
  401662:	b90b      	cbnz	r3, 401668 <_fflush_r+0x14>
  401664:	f000 f860 	bl	401728 <__sinit>
  401668:	4b0c      	ldr	r3, [pc, #48]	; (40169c <_fflush_r+0x48>)
  40166a:	429c      	cmp	r4, r3
  40166c:	d109      	bne.n	401682 <_fflush_r+0x2e>
  40166e:	686c      	ldr	r4, [r5, #4]
  401670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401674:	b17b      	cbz	r3, 401696 <_fflush_r+0x42>
  401676:	4621      	mov	r1, r4
  401678:	4628      	mov	r0, r5
  40167a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40167e:	f7ff bf61 	b.w	401544 <__sflush_r>
  401682:	4b07      	ldr	r3, [pc, #28]	; (4016a0 <_fflush_r+0x4c>)
  401684:	429c      	cmp	r4, r3
  401686:	d101      	bne.n	40168c <_fflush_r+0x38>
  401688:	68ac      	ldr	r4, [r5, #8]
  40168a:	e7f1      	b.n	401670 <_fflush_r+0x1c>
  40168c:	4b05      	ldr	r3, [pc, #20]	; (4016a4 <_fflush_r+0x50>)
  40168e:	429c      	cmp	r4, r3
  401690:	bf08      	it	eq
  401692:	68ec      	ldreq	r4, [r5, #12]
  401694:	e7ec      	b.n	401670 <_fflush_r+0x1c>
  401696:	2000      	movs	r0, #0
  401698:	bd38      	pop	{r3, r4, r5, pc}
  40169a:	bf00      	nop
  40169c:	00401cc0 	.word	0x00401cc0
  4016a0:	00401ce0 	.word	0x00401ce0
  4016a4:	00401ca0 	.word	0x00401ca0

004016a8 <_cleanup_r>:
  4016a8:	4901      	ldr	r1, [pc, #4]	; (4016b0 <_cleanup_r+0x8>)
  4016aa:	f000 b8a9 	b.w	401800 <_fwalk_reent>
  4016ae:	bf00      	nop
  4016b0:	00401655 	.word	0x00401655

004016b4 <std.isra.0>:
  4016b4:	2300      	movs	r3, #0
  4016b6:	b510      	push	{r4, lr}
  4016b8:	4604      	mov	r4, r0
  4016ba:	6003      	str	r3, [r0, #0]
  4016bc:	6043      	str	r3, [r0, #4]
  4016be:	6083      	str	r3, [r0, #8]
  4016c0:	8181      	strh	r1, [r0, #12]
  4016c2:	6643      	str	r3, [r0, #100]	; 0x64
  4016c4:	81c2      	strh	r2, [r0, #14]
  4016c6:	6103      	str	r3, [r0, #16]
  4016c8:	6143      	str	r3, [r0, #20]
  4016ca:	6183      	str	r3, [r0, #24]
  4016cc:	4619      	mov	r1, r3
  4016ce:	2208      	movs	r2, #8
  4016d0:	305c      	adds	r0, #92	; 0x5c
  4016d2:	f7ff fd55 	bl	401180 <memset>
  4016d6:	4b05      	ldr	r3, [pc, #20]	; (4016ec <std.isra.0+0x38>)
  4016d8:	6263      	str	r3, [r4, #36]	; 0x24
  4016da:	4b05      	ldr	r3, [pc, #20]	; (4016f0 <std.isra.0+0x3c>)
  4016dc:	62a3      	str	r3, [r4, #40]	; 0x28
  4016de:	4b05      	ldr	r3, [pc, #20]	; (4016f4 <std.isra.0+0x40>)
  4016e0:	62e3      	str	r3, [r4, #44]	; 0x2c
  4016e2:	4b05      	ldr	r3, [pc, #20]	; (4016f8 <std.isra.0+0x44>)
  4016e4:	6224      	str	r4, [r4, #32]
  4016e6:	6323      	str	r3, [r4, #48]	; 0x30
  4016e8:	bd10      	pop	{r4, pc}
  4016ea:	bf00      	nop
  4016ec:	00401a8d 	.word	0x00401a8d
  4016f0:	00401aaf 	.word	0x00401aaf
  4016f4:	00401ae7 	.word	0x00401ae7
  4016f8:	00401b0b 	.word	0x00401b0b

004016fc <__sfmoreglue>:
  4016fc:	b570      	push	{r4, r5, r6, lr}
  4016fe:	1e4a      	subs	r2, r1, #1
  401700:	2568      	movs	r5, #104	; 0x68
  401702:	4355      	muls	r5, r2
  401704:	460e      	mov	r6, r1
  401706:	f105 0174 	add.w	r1, r5, #116	; 0x74
  40170a:	f000 f951 	bl	4019b0 <_malloc_r>
  40170e:	4604      	mov	r4, r0
  401710:	b140      	cbz	r0, 401724 <__sfmoreglue+0x28>
  401712:	2100      	movs	r1, #0
  401714:	e880 0042 	stmia.w	r0, {r1, r6}
  401718:	300c      	adds	r0, #12
  40171a:	60a0      	str	r0, [r4, #8]
  40171c:	f105 0268 	add.w	r2, r5, #104	; 0x68
  401720:	f7ff fd2e 	bl	401180 <memset>
  401724:	4620      	mov	r0, r4
  401726:	bd70      	pop	{r4, r5, r6, pc}

00401728 <__sinit>:
  401728:	6983      	ldr	r3, [r0, #24]
  40172a:	b510      	push	{r4, lr}
  40172c:	4604      	mov	r4, r0
  40172e:	bb33      	cbnz	r3, 40177e <__sinit+0x56>
  401730:	6483      	str	r3, [r0, #72]	; 0x48
  401732:	64c3      	str	r3, [r0, #76]	; 0x4c
  401734:	6503      	str	r3, [r0, #80]	; 0x50
  401736:	4b12      	ldr	r3, [pc, #72]	; (401780 <__sinit+0x58>)
  401738:	4a12      	ldr	r2, [pc, #72]	; (401784 <__sinit+0x5c>)
  40173a:	681b      	ldr	r3, [r3, #0]
  40173c:	6282      	str	r2, [r0, #40]	; 0x28
  40173e:	4298      	cmp	r0, r3
  401740:	bf04      	itt	eq
  401742:	2301      	moveq	r3, #1
  401744:	6183      	streq	r3, [r0, #24]
  401746:	f000 f81f 	bl	401788 <__sfp>
  40174a:	6060      	str	r0, [r4, #4]
  40174c:	4620      	mov	r0, r4
  40174e:	f000 f81b 	bl	401788 <__sfp>
  401752:	60a0      	str	r0, [r4, #8]
  401754:	4620      	mov	r0, r4
  401756:	f000 f817 	bl	401788 <__sfp>
  40175a:	2200      	movs	r2, #0
  40175c:	60e0      	str	r0, [r4, #12]
  40175e:	2104      	movs	r1, #4
  401760:	6860      	ldr	r0, [r4, #4]
  401762:	f7ff ffa7 	bl	4016b4 <std.isra.0>
  401766:	2201      	movs	r2, #1
  401768:	2109      	movs	r1, #9
  40176a:	68a0      	ldr	r0, [r4, #8]
  40176c:	f7ff ffa2 	bl	4016b4 <std.isra.0>
  401770:	2202      	movs	r2, #2
  401772:	2112      	movs	r1, #18
  401774:	68e0      	ldr	r0, [r4, #12]
  401776:	f7ff ff9d 	bl	4016b4 <std.isra.0>
  40177a:	2301      	movs	r3, #1
  40177c:	61a3      	str	r3, [r4, #24]
  40177e:	bd10      	pop	{r4, pc}
  401780:	00401c9c 	.word	0x00401c9c
  401784:	004016a9 	.word	0x004016a9

00401788 <__sfp>:
  401788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40178a:	4b1c      	ldr	r3, [pc, #112]	; (4017fc <__sfp+0x74>)
  40178c:	681e      	ldr	r6, [r3, #0]
  40178e:	69b3      	ldr	r3, [r6, #24]
  401790:	4607      	mov	r7, r0
  401792:	b913      	cbnz	r3, 40179a <__sfp+0x12>
  401794:	4630      	mov	r0, r6
  401796:	f7ff ffc7 	bl	401728 <__sinit>
  40179a:	3648      	adds	r6, #72	; 0x48
  40179c:	68b4      	ldr	r4, [r6, #8]
  40179e:	6873      	ldr	r3, [r6, #4]
  4017a0:	3b01      	subs	r3, #1
  4017a2:	d503      	bpl.n	4017ac <__sfp+0x24>
  4017a4:	6833      	ldr	r3, [r6, #0]
  4017a6:	b133      	cbz	r3, 4017b6 <__sfp+0x2e>
  4017a8:	6836      	ldr	r6, [r6, #0]
  4017aa:	e7f7      	b.n	40179c <__sfp+0x14>
  4017ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  4017b0:	b16d      	cbz	r5, 4017ce <__sfp+0x46>
  4017b2:	3468      	adds	r4, #104	; 0x68
  4017b4:	e7f4      	b.n	4017a0 <__sfp+0x18>
  4017b6:	2104      	movs	r1, #4
  4017b8:	4638      	mov	r0, r7
  4017ba:	f7ff ff9f 	bl	4016fc <__sfmoreglue>
  4017be:	6030      	str	r0, [r6, #0]
  4017c0:	2800      	cmp	r0, #0
  4017c2:	d1f1      	bne.n	4017a8 <__sfp+0x20>
  4017c4:	230c      	movs	r3, #12
  4017c6:	603b      	str	r3, [r7, #0]
  4017c8:	4604      	mov	r4, r0
  4017ca:	4620      	mov	r0, r4
  4017cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4017ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4017d2:	81e3      	strh	r3, [r4, #14]
  4017d4:	2301      	movs	r3, #1
  4017d6:	81a3      	strh	r3, [r4, #12]
  4017d8:	6665      	str	r5, [r4, #100]	; 0x64
  4017da:	6025      	str	r5, [r4, #0]
  4017dc:	60a5      	str	r5, [r4, #8]
  4017de:	6065      	str	r5, [r4, #4]
  4017e0:	6125      	str	r5, [r4, #16]
  4017e2:	6165      	str	r5, [r4, #20]
  4017e4:	61a5      	str	r5, [r4, #24]
  4017e6:	2208      	movs	r2, #8
  4017e8:	4629      	mov	r1, r5
  4017ea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4017ee:	f7ff fcc7 	bl	401180 <memset>
  4017f2:	6365      	str	r5, [r4, #52]	; 0x34
  4017f4:	63a5      	str	r5, [r4, #56]	; 0x38
  4017f6:	64a5      	str	r5, [r4, #72]	; 0x48
  4017f8:	64e5      	str	r5, [r4, #76]	; 0x4c
  4017fa:	e7e6      	b.n	4017ca <__sfp+0x42>
  4017fc:	00401c9c 	.word	0x00401c9c

00401800 <_fwalk_reent>:
  401800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401804:	4680      	mov	r8, r0
  401806:	4689      	mov	r9, r1
  401808:	f100 0448 	add.w	r4, r0, #72	; 0x48
  40180c:	2600      	movs	r6, #0
  40180e:	b914      	cbnz	r4, 401816 <_fwalk_reent+0x16>
  401810:	4630      	mov	r0, r6
  401812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401816:	68a5      	ldr	r5, [r4, #8]
  401818:	6867      	ldr	r7, [r4, #4]
  40181a:	3f01      	subs	r7, #1
  40181c:	d501      	bpl.n	401822 <_fwalk_reent+0x22>
  40181e:	6824      	ldr	r4, [r4, #0]
  401820:	e7f5      	b.n	40180e <_fwalk_reent+0xe>
  401822:	89ab      	ldrh	r3, [r5, #12]
  401824:	2b01      	cmp	r3, #1
  401826:	d907      	bls.n	401838 <_fwalk_reent+0x38>
  401828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  40182c:	3301      	adds	r3, #1
  40182e:	d003      	beq.n	401838 <_fwalk_reent+0x38>
  401830:	4629      	mov	r1, r5
  401832:	4640      	mov	r0, r8
  401834:	47c8      	blx	r9
  401836:	4306      	orrs	r6, r0
  401838:	3568      	adds	r5, #104	; 0x68
  40183a:	e7ee      	b.n	40181a <_fwalk_reent+0x1a>

0040183c <__swhatbuf_r>:
  40183c:	b570      	push	{r4, r5, r6, lr}
  40183e:	460e      	mov	r6, r1
  401840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401844:	2900      	cmp	r1, #0
  401846:	b090      	sub	sp, #64	; 0x40
  401848:	4614      	mov	r4, r2
  40184a:	461d      	mov	r5, r3
  40184c:	da07      	bge.n	40185e <__swhatbuf_r+0x22>
  40184e:	2300      	movs	r3, #0
  401850:	602b      	str	r3, [r5, #0]
  401852:	89b3      	ldrh	r3, [r6, #12]
  401854:	061a      	lsls	r2, r3, #24
  401856:	d410      	bmi.n	40187a <__swhatbuf_r+0x3e>
  401858:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40185c:	e00e      	b.n	40187c <__swhatbuf_r+0x40>
  40185e:	aa01      	add	r2, sp, #4
  401860:	f000 f97a 	bl	401b58 <_fstat_r>
  401864:	2800      	cmp	r0, #0
  401866:	dbf2      	blt.n	40184e <__swhatbuf_r+0x12>
  401868:	9a02      	ldr	r2, [sp, #8]
  40186a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40186e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  401872:	425a      	negs	r2, r3
  401874:	415a      	adcs	r2, r3
  401876:	602a      	str	r2, [r5, #0]
  401878:	e7ee      	b.n	401858 <__swhatbuf_r+0x1c>
  40187a:	2340      	movs	r3, #64	; 0x40
  40187c:	2000      	movs	r0, #0
  40187e:	6023      	str	r3, [r4, #0]
  401880:	b010      	add	sp, #64	; 0x40
  401882:	bd70      	pop	{r4, r5, r6, pc}

00401884 <__smakebuf_r>:
  401884:	898b      	ldrh	r3, [r1, #12]
  401886:	b573      	push	{r0, r1, r4, r5, r6, lr}
  401888:	079d      	lsls	r5, r3, #30
  40188a:	4606      	mov	r6, r0
  40188c:	460c      	mov	r4, r1
  40188e:	d507      	bpl.n	4018a0 <__smakebuf_r+0x1c>
  401890:	f104 0347 	add.w	r3, r4, #71	; 0x47
  401894:	6023      	str	r3, [r4, #0]
  401896:	6123      	str	r3, [r4, #16]
  401898:	2301      	movs	r3, #1
  40189a:	6163      	str	r3, [r4, #20]
  40189c:	b002      	add	sp, #8
  40189e:	bd70      	pop	{r4, r5, r6, pc}
  4018a0:	ab01      	add	r3, sp, #4
  4018a2:	466a      	mov	r2, sp
  4018a4:	f7ff ffca 	bl	40183c <__swhatbuf_r>
  4018a8:	9900      	ldr	r1, [sp, #0]
  4018aa:	4605      	mov	r5, r0
  4018ac:	4630      	mov	r0, r6
  4018ae:	f000 f87f 	bl	4019b0 <_malloc_r>
  4018b2:	b948      	cbnz	r0, 4018c8 <__smakebuf_r+0x44>
  4018b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4018b8:	059a      	lsls	r2, r3, #22
  4018ba:	d4ef      	bmi.n	40189c <__smakebuf_r+0x18>
  4018bc:	f023 0303 	bic.w	r3, r3, #3
  4018c0:	f043 0302 	orr.w	r3, r3, #2
  4018c4:	81a3      	strh	r3, [r4, #12]
  4018c6:	e7e3      	b.n	401890 <__smakebuf_r+0xc>
  4018c8:	4b0d      	ldr	r3, [pc, #52]	; (401900 <__smakebuf_r+0x7c>)
  4018ca:	62b3      	str	r3, [r6, #40]	; 0x28
  4018cc:	89a3      	ldrh	r3, [r4, #12]
  4018ce:	6020      	str	r0, [r4, #0]
  4018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4018d4:	81a3      	strh	r3, [r4, #12]
  4018d6:	9b00      	ldr	r3, [sp, #0]
  4018d8:	6163      	str	r3, [r4, #20]
  4018da:	9b01      	ldr	r3, [sp, #4]
  4018dc:	6120      	str	r0, [r4, #16]
  4018de:	b15b      	cbz	r3, 4018f8 <__smakebuf_r+0x74>
  4018e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4018e4:	4630      	mov	r0, r6
  4018e6:	f000 f949 	bl	401b7c <_isatty_r>
  4018ea:	b128      	cbz	r0, 4018f8 <__smakebuf_r+0x74>
  4018ec:	89a3      	ldrh	r3, [r4, #12]
  4018ee:	f023 0303 	bic.w	r3, r3, #3
  4018f2:	f043 0301 	orr.w	r3, r3, #1
  4018f6:	81a3      	strh	r3, [r4, #12]
  4018f8:	89a3      	ldrh	r3, [r4, #12]
  4018fa:	431d      	orrs	r5, r3
  4018fc:	81a5      	strh	r5, [r4, #12]
  4018fe:	e7cd      	b.n	40189c <__smakebuf_r+0x18>
  401900:	004016a9 	.word	0x004016a9

00401904 <malloc>:
  401904:	4b02      	ldr	r3, [pc, #8]	; (401910 <malloc+0xc>)
  401906:	4601      	mov	r1, r0
  401908:	6818      	ldr	r0, [r3, #0]
  40190a:	f000 b851 	b.w	4019b0 <_malloc_r>
  40190e:	bf00      	nop
  401910:	20400000 	.word	0x20400000

00401914 <_free_r>:
  401914:	b538      	push	{r3, r4, r5, lr}
  401916:	4605      	mov	r5, r0
  401918:	2900      	cmp	r1, #0
  40191a:	d045      	beq.n	4019a8 <_free_r+0x94>
  40191c:	f851 3c04 	ldr.w	r3, [r1, #-4]
  401920:	1f0c      	subs	r4, r1, #4
  401922:	2b00      	cmp	r3, #0
  401924:	bfb8      	it	lt
  401926:	18e4      	addlt	r4, r4, r3
  401928:	f000 f94a 	bl	401bc0 <__malloc_lock>
  40192c:	4a1f      	ldr	r2, [pc, #124]	; (4019ac <_free_r+0x98>)
  40192e:	6813      	ldr	r3, [r2, #0]
  401930:	4610      	mov	r0, r2
  401932:	b933      	cbnz	r3, 401942 <_free_r+0x2e>
  401934:	6063      	str	r3, [r4, #4]
  401936:	6014      	str	r4, [r2, #0]
  401938:	4628      	mov	r0, r5
  40193a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40193e:	f000 b940 	b.w	401bc2 <__malloc_unlock>
  401942:	42a3      	cmp	r3, r4
  401944:	d90c      	bls.n	401960 <_free_r+0x4c>
  401946:	6821      	ldr	r1, [r4, #0]
  401948:	1862      	adds	r2, r4, r1
  40194a:	4293      	cmp	r3, r2
  40194c:	bf04      	itt	eq
  40194e:	681a      	ldreq	r2, [r3, #0]
  401950:	685b      	ldreq	r3, [r3, #4]
  401952:	6063      	str	r3, [r4, #4]
  401954:	bf04      	itt	eq
  401956:	1852      	addeq	r2, r2, r1
  401958:	6022      	streq	r2, [r4, #0]
  40195a:	6004      	str	r4, [r0, #0]
  40195c:	e7ec      	b.n	401938 <_free_r+0x24>
  40195e:	4613      	mov	r3, r2
  401960:	685a      	ldr	r2, [r3, #4]
  401962:	b10a      	cbz	r2, 401968 <_free_r+0x54>
  401964:	42a2      	cmp	r2, r4
  401966:	d9fa      	bls.n	40195e <_free_r+0x4a>
  401968:	6819      	ldr	r1, [r3, #0]
  40196a:	1858      	adds	r0, r3, r1
  40196c:	42a0      	cmp	r0, r4
  40196e:	d10b      	bne.n	401988 <_free_r+0x74>
  401970:	6820      	ldr	r0, [r4, #0]
  401972:	4401      	add	r1, r0
  401974:	1858      	adds	r0, r3, r1
  401976:	4282      	cmp	r2, r0
  401978:	6019      	str	r1, [r3, #0]
  40197a:	d1dd      	bne.n	401938 <_free_r+0x24>
  40197c:	6810      	ldr	r0, [r2, #0]
  40197e:	6852      	ldr	r2, [r2, #4]
  401980:	605a      	str	r2, [r3, #4]
  401982:	4401      	add	r1, r0
  401984:	6019      	str	r1, [r3, #0]
  401986:	e7d7      	b.n	401938 <_free_r+0x24>
  401988:	d902      	bls.n	401990 <_free_r+0x7c>
  40198a:	230c      	movs	r3, #12
  40198c:	602b      	str	r3, [r5, #0]
  40198e:	e7d3      	b.n	401938 <_free_r+0x24>
  401990:	6820      	ldr	r0, [r4, #0]
  401992:	1821      	adds	r1, r4, r0
  401994:	428a      	cmp	r2, r1
  401996:	bf04      	itt	eq
  401998:	6811      	ldreq	r1, [r2, #0]
  40199a:	6852      	ldreq	r2, [r2, #4]
  40199c:	6062      	str	r2, [r4, #4]
  40199e:	bf04      	itt	eq
  4019a0:	1809      	addeq	r1, r1, r0
  4019a2:	6021      	streq	r1, [r4, #0]
  4019a4:	605c      	str	r4, [r3, #4]
  4019a6:	e7c7      	b.n	401938 <_free_r+0x24>
  4019a8:	bd38      	pop	{r3, r4, r5, pc}
  4019aa:	bf00      	nop
  4019ac:	20400090 	.word	0x20400090

004019b0 <_malloc_r>:
  4019b0:	b570      	push	{r4, r5, r6, lr}
  4019b2:	1ccd      	adds	r5, r1, #3
  4019b4:	f025 0503 	bic.w	r5, r5, #3
  4019b8:	3508      	adds	r5, #8
  4019ba:	2d0c      	cmp	r5, #12
  4019bc:	bf38      	it	cc
  4019be:	250c      	movcc	r5, #12
  4019c0:	2d00      	cmp	r5, #0
  4019c2:	4606      	mov	r6, r0
  4019c4:	db01      	blt.n	4019ca <_malloc_r+0x1a>
  4019c6:	42a9      	cmp	r1, r5
  4019c8:	d903      	bls.n	4019d2 <_malloc_r+0x22>
  4019ca:	230c      	movs	r3, #12
  4019cc:	6033      	str	r3, [r6, #0]
  4019ce:	2000      	movs	r0, #0
  4019d0:	bd70      	pop	{r4, r5, r6, pc}
  4019d2:	f000 f8f5 	bl	401bc0 <__malloc_lock>
  4019d6:	4a23      	ldr	r2, [pc, #140]	; (401a64 <_malloc_r+0xb4>)
  4019d8:	6814      	ldr	r4, [r2, #0]
  4019da:	4621      	mov	r1, r4
  4019dc:	b991      	cbnz	r1, 401a04 <_malloc_r+0x54>
  4019de:	4c22      	ldr	r4, [pc, #136]	; (401a68 <_malloc_r+0xb8>)
  4019e0:	6823      	ldr	r3, [r4, #0]
  4019e2:	b91b      	cbnz	r3, 4019ec <_malloc_r+0x3c>
  4019e4:	4630      	mov	r0, r6
  4019e6:	f000 f841 	bl	401a6c <_sbrk_r>
  4019ea:	6020      	str	r0, [r4, #0]
  4019ec:	4629      	mov	r1, r5
  4019ee:	4630      	mov	r0, r6
  4019f0:	f000 f83c 	bl	401a6c <_sbrk_r>
  4019f4:	1c43      	adds	r3, r0, #1
  4019f6:	d126      	bne.n	401a46 <_malloc_r+0x96>
  4019f8:	230c      	movs	r3, #12
  4019fa:	6033      	str	r3, [r6, #0]
  4019fc:	4630      	mov	r0, r6
  4019fe:	f000 f8e0 	bl	401bc2 <__malloc_unlock>
  401a02:	e7e4      	b.n	4019ce <_malloc_r+0x1e>
  401a04:	680b      	ldr	r3, [r1, #0]
  401a06:	1b5b      	subs	r3, r3, r5
  401a08:	d41a      	bmi.n	401a40 <_malloc_r+0x90>
  401a0a:	2b0b      	cmp	r3, #11
  401a0c:	d90f      	bls.n	401a2e <_malloc_r+0x7e>
  401a0e:	600b      	str	r3, [r1, #0]
  401a10:	50cd      	str	r5, [r1, r3]
  401a12:	18cc      	adds	r4, r1, r3
  401a14:	4630      	mov	r0, r6
  401a16:	f000 f8d4 	bl	401bc2 <__malloc_unlock>
  401a1a:	f104 000b 	add.w	r0, r4, #11
  401a1e:	1d23      	adds	r3, r4, #4
  401a20:	f020 0007 	bic.w	r0, r0, #7
  401a24:	1ac3      	subs	r3, r0, r3
  401a26:	d01b      	beq.n	401a60 <_malloc_r+0xb0>
  401a28:	425a      	negs	r2, r3
  401a2a:	50e2      	str	r2, [r4, r3]
  401a2c:	bd70      	pop	{r4, r5, r6, pc}
  401a2e:	428c      	cmp	r4, r1
  401a30:	bf0d      	iteet	eq
  401a32:	6863      	ldreq	r3, [r4, #4]
  401a34:	684b      	ldrne	r3, [r1, #4]
  401a36:	6063      	strne	r3, [r4, #4]
  401a38:	6013      	streq	r3, [r2, #0]
  401a3a:	bf18      	it	ne
  401a3c:	460c      	movne	r4, r1
  401a3e:	e7e9      	b.n	401a14 <_malloc_r+0x64>
  401a40:	460c      	mov	r4, r1
  401a42:	6849      	ldr	r1, [r1, #4]
  401a44:	e7ca      	b.n	4019dc <_malloc_r+0x2c>
  401a46:	1cc4      	adds	r4, r0, #3
  401a48:	f024 0403 	bic.w	r4, r4, #3
  401a4c:	42a0      	cmp	r0, r4
  401a4e:	d005      	beq.n	401a5c <_malloc_r+0xac>
  401a50:	1a21      	subs	r1, r4, r0
  401a52:	4630      	mov	r0, r6
  401a54:	f000 f80a 	bl	401a6c <_sbrk_r>
  401a58:	3001      	adds	r0, #1
  401a5a:	d0cd      	beq.n	4019f8 <_malloc_r+0x48>
  401a5c:	6025      	str	r5, [r4, #0]
  401a5e:	e7d9      	b.n	401a14 <_malloc_r+0x64>
  401a60:	bd70      	pop	{r4, r5, r6, pc}
  401a62:	bf00      	nop
  401a64:	20400090 	.word	0x20400090
  401a68:	20400094 	.word	0x20400094

00401a6c <_sbrk_r>:
  401a6c:	b538      	push	{r3, r4, r5, lr}
  401a6e:	4c06      	ldr	r4, [pc, #24]	; (401a88 <_sbrk_r+0x1c>)
  401a70:	2300      	movs	r3, #0
  401a72:	4605      	mov	r5, r0
  401a74:	4608      	mov	r0, r1
  401a76:	6023      	str	r3, [r4, #0]
  401a78:	f7fe ff20 	bl	4008bc <_sbrk>
  401a7c:	1c43      	adds	r3, r0, #1
  401a7e:	d102      	bne.n	401a86 <_sbrk_r+0x1a>
  401a80:	6823      	ldr	r3, [r4, #0]
  401a82:	b103      	cbz	r3, 401a86 <_sbrk_r+0x1a>
  401a84:	602b      	str	r3, [r5, #0]
  401a86:	bd38      	pop	{r3, r4, r5, pc}
  401a88:	204000ec 	.word	0x204000ec

00401a8c <__sread>:
  401a8c:	b510      	push	{r4, lr}
  401a8e:	460c      	mov	r4, r1
  401a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401a94:	f000 f896 	bl	401bc4 <_read_r>
  401a98:	2800      	cmp	r0, #0
  401a9a:	bfab      	itete	ge
  401a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  401a9e:	89a3      	ldrhlt	r3, [r4, #12]
  401aa0:	181b      	addge	r3, r3, r0
  401aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  401aa6:	bfac      	ite	ge
  401aa8:	6563      	strge	r3, [r4, #84]	; 0x54
  401aaa:	81a3      	strhlt	r3, [r4, #12]
  401aac:	bd10      	pop	{r4, pc}

00401aae <__swrite>:
  401aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ab2:	461f      	mov	r7, r3
  401ab4:	898b      	ldrh	r3, [r1, #12]
  401ab6:	05db      	lsls	r3, r3, #23
  401ab8:	4605      	mov	r5, r0
  401aba:	460c      	mov	r4, r1
  401abc:	4616      	mov	r6, r2
  401abe:	d505      	bpl.n	401acc <__swrite+0x1e>
  401ac0:	2302      	movs	r3, #2
  401ac2:	2200      	movs	r2, #0
  401ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401ac8:	f000 f868 	bl	401b9c <_lseek_r>
  401acc:	89a3      	ldrh	r3, [r4, #12]
  401ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  401ad6:	81a3      	strh	r3, [r4, #12]
  401ad8:	4632      	mov	r2, r6
  401ada:	463b      	mov	r3, r7
  401adc:	4628      	mov	r0, r5
  401ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401ae2:	f000 b817 	b.w	401b14 <_write_r>

00401ae6 <__sseek>:
  401ae6:	b510      	push	{r4, lr}
  401ae8:	460c      	mov	r4, r1
  401aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401aee:	f000 f855 	bl	401b9c <_lseek_r>
  401af2:	1c43      	adds	r3, r0, #1
  401af4:	89a3      	ldrh	r3, [r4, #12]
  401af6:	bf15      	itete	ne
  401af8:	6560      	strne	r0, [r4, #84]	; 0x54
  401afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  401afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  401b02:	81a3      	strheq	r3, [r4, #12]
  401b04:	bf18      	it	ne
  401b06:	81a3      	strhne	r3, [r4, #12]
  401b08:	bd10      	pop	{r4, pc}

00401b0a <__sclose>:
  401b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401b0e:	f000 b813 	b.w	401b38 <_close_r>
	...

00401b14 <_write_r>:
  401b14:	b538      	push	{r3, r4, r5, lr}
  401b16:	4c07      	ldr	r4, [pc, #28]	; (401b34 <_write_r+0x20>)
  401b18:	4605      	mov	r5, r0
  401b1a:	4608      	mov	r0, r1
  401b1c:	4611      	mov	r1, r2
  401b1e:	2200      	movs	r2, #0
  401b20:	6022      	str	r2, [r4, #0]
  401b22:	461a      	mov	r2, r3
  401b24:	f7ff faaa 	bl	40107c <_write>
  401b28:	1c43      	adds	r3, r0, #1
  401b2a:	d102      	bne.n	401b32 <_write_r+0x1e>
  401b2c:	6823      	ldr	r3, [r4, #0]
  401b2e:	b103      	cbz	r3, 401b32 <_write_r+0x1e>
  401b30:	602b      	str	r3, [r5, #0]
  401b32:	bd38      	pop	{r3, r4, r5, pc}
  401b34:	204000ec 	.word	0x204000ec

00401b38 <_close_r>:
  401b38:	b538      	push	{r3, r4, r5, lr}
  401b3a:	4c06      	ldr	r4, [pc, #24]	; (401b54 <_close_r+0x1c>)
  401b3c:	2300      	movs	r3, #0
  401b3e:	4605      	mov	r5, r0
  401b40:	4608      	mov	r0, r1
  401b42:	6023      	str	r3, [r4, #0]
  401b44:	f7fe fecc 	bl	4008e0 <_close>
  401b48:	1c43      	adds	r3, r0, #1
  401b4a:	d102      	bne.n	401b52 <_close_r+0x1a>
  401b4c:	6823      	ldr	r3, [r4, #0]
  401b4e:	b103      	cbz	r3, 401b52 <_close_r+0x1a>
  401b50:	602b      	str	r3, [r5, #0]
  401b52:	bd38      	pop	{r3, r4, r5, pc}
  401b54:	204000ec 	.word	0x204000ec

00401b58 <_fstat_r>:
  401b58:	b538      	push	{r3, r4, r5, lr}
  401b5a:	4c07      	ldr	r4, [pc, #28]	; (401b78 <_fstat_r+0x20>)
  401b5c:	2300      	movs	r3, #0
  401b5e:	4605      	mov	r5, r0
  401b60:	4608      	mov	r0, r1
  401b62:	4611      	mov	r1, r2
  401b64:	6023      	str	r3, [r4, #0]
  401b66:	f7fe febe 	bl	4008e6 <_fstat>
  401b6a:	1c43      	adds	r3, r0, #1
  401b6c:	d102      	bne.n	401b74 <_fstat_r+0x1c>
  401b6e:	6823      	ldr	r3, [r4, #0]
  401b70:	b103      	cbz	r3, 401b74 <_fstat_r+0x1c>
  401b72:	602b      	str	r3, [r5, #0]
  401b74:	bd38      	pop	{r3, r4, r5, pc}
  401b76:	bf00      	nop
  401b78:	204000ec 	.word	0x204000ec

00401b7c <_isatty_r>:
  401b7c:	b538      	push	{r3, r4, r5, lr}
  401b7e:	4c06      	ldr	r4, [pc, #24]	; (401b98 <_isatty_r+0x1c>)
  401b80:	2300      	movs	r3, #0
  401b82:	4605      	mov	r5, r0
  401b84:	4608      	mov	r0, r1
  401b86:	6023      	str	r3, [r4, #0]
  401b88:	f7fe feb2 	bl	4008f0 <_isatty>
  401b8c:	1c43      	adds	r3, r0, #1
  401b8e:	d102      	bne.n	401b96 <_isatty_r+0x1a>
  401b90:	6823      	ldr	r3, [r4, #0]
  401b92:	b103      	cbz	r3, 401b96 <_isatty_r+0x1a>
  401b94:	602b      	str	r3, [r5, #0]
  401b96:	bd38      	pop	{r3, r4, r5, pc}
  401b98:	204000ec 	.word	0x204000ec

00401b9c <_lseek_r>:
  401b9c:	b538      	push	{r3, r4, r5, lr}
  401b9e:	4c07      	ldr	r4, [pc, #28]	; (401bbc <_lseek_r+0x20>)
  401ba0:	4605      	mov	r5, r0
  401ba2:	4608      	mov	r0, r1
  401ba4:	4611      	mov	r1, r2
  401ba6:	2200      	movs	r2, #0
  401ba8:	6022      	str	r2, [r4, #0]
  401baa:	461a      	mov	r2, r3
  401bac:	f7fe fea2 	bl	4008f4 <_lseek>
  401bb0:	1c43      	adds	r3, r0, #1
  401bb2:	d102      	bne.n	401bba <_lseek_r+0x1e>
  401bb4:	6823      	ldr	r3, [r4, #0]
  401bb6:	b103      	cbz	r3, 401bba <_lseek_r+0x1e>
  401bb8:	602b      	str	r3, [r5, #0]
  401bba:	bd38      	pop	{r3, r4, r5, pc}
  401bbc:	204000ec 	.word	0x204000ec

00401bc0 <__malloc_lock>:
  401bc0:	4770      	bx	lr

00401bc2 <__malloc_unlock>:
  401bc2:	4770      	bx	lr

00401bc4 <_read_r>:
  401bc4:	b538      	push	{r3, r4, r5, lr}
  401bc6:	4c07      	ldr	r4, [pc, #28]	; (401be4 <_read_r+0x20>)
  401bc8:	4605      	mov	r5, r0
  401bca:	4608      	mov	r0, r1
  401bcc:	4611      	mov	r1, r2
  401bce:	2200      	movs	r2, #0
  401bd0:	6022      	str	r2, [r4, #0]
  401bd2:	461a      	mov	r2, r3
  401bd4:	f7ff fa40 	bl	401058 <_read>
  401bd8:	1c43      	adds	r3, r0, #1
  401bda:	d102      	bne.n	401be2 <_read_r+0x1e>
  401bdc:	6823      	ldr	r3, [r4, #0]
  401bde:	b103      	cbz	r3, 401be2 <_read_r+0x1e>
  401be0:	602b      	str	r3, [r5, #0]
  401be2:	bd38      	pop	{r3, r4, r5, pc}
  401be4:	204000ec 	.word	0x204000ec
  401be8:	682f2e2e 	.word	0x682f2e2e
  401bec:	732f6c61 	.word	0x732f6c61
  401bf0:	682f6372 	.word	0x682f6372
  401bf4:	695f6c61 	.word	0x695f6c61
  401bf8:	00632e6f 	.word	0x00632e6f
  401bfc:	682f2e2e 	.word	0x682f2e2e
  401c00:	732f6c61 	.word	0x732f6c61
  401c04:	682f6372 	.word	0x682f6372
  401c08:	735f6c61 	.word	0x735f6c61
  401c0c:	6d5f6970 	.word	0x6d5f6970
  401c10:	7973615f 	.word	0x7973615f
  401c14:	632e636e 	.word	0x632e636e
  401c18:	00000000 	.word	0x00000000
  401c1c:	682f2e2e 	.word	0x682f2e2e
  401c20:	732f6c61 	.word	0x732f6c61
  401c24:	682f6372 	.word	0x682f6372
  401c28:	755f6c61 	.word	0x755f6c61
  401c2c:	74726173 	.word	0x74726173
  401c30:	6e79735f 	.word	0x6e79735f
  401c34:	00632e63 	.word	0x00632e63

00401c38 <spi_regs>:
  401c38:	00000000 80000000 00000001 04961602     ................
  401c48:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  401c58:	735f6c70 632e6970 00000000              pl_spi.c....

00401c64 <_usarts>:
  401c64:	00000001 001008c0 00030051 682f2e2e     ........Q...../h
  401c74:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  401c84:	632e7472 00000000 7373654d 20656761     rt.c....Message 
  401c94:	746e6573 00000020                       sent ...

00401c9c <_global_impure_ptr>:
  401c9c:	20400004                                ..@ 

00401ca0 <__sf_fake_stderr>:
	...

00401cc0 <__sf_fake_stdin>:
	...

00401ce0 <__sf_fake_stdout>:
	...

00401d00 <_init>:
  401d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d02:	bf00      	nop
  401d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401d06:	bc08      	pop	{r3}
  401d08:	469e      	mov	lr, r3
  401d0a:	4770      	bx	lr

00401d0c <__init_array_start>:
  401d0c:	0040018d 	.word	0x0040018d

00401d10 <_fini>:
  401d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d12:	bf00      	nop
  401d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401d16:	bc08      	pop	{r3}
  401d18:	469e      	mov	lr, r3
  401d1a:	4770      	bx	lr

00401d1c <__fini_array_start>:
  401d1c:	00400169 	.word	0x00400169
